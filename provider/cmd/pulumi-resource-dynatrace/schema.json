{
    "name": "dynatrace",
    "description": "A Pulumi package for creating and managing dynatrace cloud resources.",
    "keywords": [
        "alvaroblazquez4567",
        "dynatrace",
        "category/cloud"
    ],
    "homepage": "https://www.pulumi.com",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`dynatrace` Terraform Provider](https://github.com/terraform-providers/terraform-provider-dynatrace).",
    "repository": "https://github.com/alvaroblazquez4567/pulumi-dynatrace",
    "publisher": "alvaroblazquez4567",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "packageReferences": {
                "Pulumi": "3.*"
            },
            "compatibility": "tfbridge20"
        },
        "go": {
            "importBasePath": "github.com/alvaroblazquez4567/pulumi-dynatrace/sdk/go/dynatrace",
            "generateResourceContainerTypes": true,
            "generateExtraInputTypes": true
        },
        "nodejs": {
            "packageDescription": "A Pulumi package for creating and managing dynatrace cloud resources.",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/terraform-providers/terraform-provider-dynatrace)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-dynatrace` repo](https://github.com/alvaroblazquez4567/pulumi-dynatrace/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-dynatrace` repo](https://github.com/terraform-providers/terraform-provider-dynatrace/issues).",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "compatibility": "tfbridge20",
            "disableUnionOutputTypes": true
        },
        "python": {
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            },
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/terraform-providers/terraform-provider-dynatrace)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-dynatrace` repo](https://github.com/alvaroblazquez4567/pulumi-dynatrace/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-dynatrace` repo](https://github.com/terraform-providers/terraform-provider-dynatrace/issues).",
            "compatibility": "tfbridge20",
            "pyproject": {}
        }
    },
    "config": {
        "variables": {
            "accountId": {
                "type": "string",
                "secret": true
            },
            "automationClientId": {
                "type": "string",
                "secret": true
            },
            "automationClientSecret": {
                "type": "string",
                "secret": true
            },
            "automationEnvUrl": {
                "type": "string",
                "description": "The URL of the Dynatrace Environment with Platform capabilities turned on (`https://#####.apps.dynatrace.com)`. This is\noptional configuration when `dt_env_url` already specifies a SaaS Environment like `https://#####.live.dynatrace.com` or\n`https://#####.apps.dynatrace.com`\n"
            },
            "automationTokenUrl": {
                "type": "string",
                "description": "The URL that provides the Bearer tokens when accessing the Automation REST API. This is optional configuration when\n`dt_env_url` already specifies a SaaS Environment like `https://#####.live.dynatrace.com` or\n`https://#####.apps.dynatrace.com`\n"
            },
            "clientId": {
                "type": "string",
                "secret": true
            },
            "clientSecret": {
                "type": "string",
                "secret": true
            },
            "dtApiToken": {
                "type": "string",
                "secret": true
            },
            "dtClusterApiToken": {
                "type": "string",
                "secret": true
            },
            "dtClusterUrl": {
                "type": "string",
                "secret": true
            },
            "dtEnvUrl": {
                "type": "string"
            },
            "iamAccountId": {
                "type": "string",
                "secret": true
            },
            "iamClientId": {
                "type": "string",
                "secret": true
            },
            "iamClientSecret": {
                "type": "string",
                "secret": true
            }
        }
    },
    "types": {
        "dynatrace:index/AlertingFilters:AlertingFilters": {
            "properties": {
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/AlertingFiltersFilter:AlertingFiltersFilter"
                    }
                }
            },
            "type": "object"
        },
        "dynatrace:index/AlertingFiltersFilter:AlertingFiltersFilter": {
            "properties": {
                "custom": {
                    "$ref": "#/types/dynatrace:index/AlertingFiltersFilterCustom:AlertingFiltersFilterCustom"
                },
                "predefined": {
                    "$ref": "#/types/dynatrace:index/AlertingFiltersFilterPredefined:AlertingFiltersFilterPredefined"
                }
            },
            "type": "object"
        },
        "dynatrace:index/AlertingFiltersFilterCustom:AlertingFiltersFilterCustom": {
            "properties": {
                "description": {
                    "$ref": "#/types/dynatrace:index/AlertingFiltersFilterCustomDescription:AlertingFiltersFilterCustomDescription"
                },
                "metadata": {
                    "$ref": "#/types/dynatrace:index/AlertingFiltersFilterCustomMetadata:AlertingFiltersFilterCustomMetadata"
                },
                "title": {
                    "$ref": "#/types/dynatrace:index/AlertingFiltersFilterCustomTitle:AlertingFiltersFilterCustomTitle"
                }
            },
            "type": "object"
        },
        "dynatrace:index/AlertingFiltersFilterCustomDescription:AlertingFiltersFilterCustomDescription": {
            "properties": {
                "caseSensitive": {
                    "type": "boolean"
                },
                "enabled": {
                    "type": "boolean"
                },
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator",
                "value"
            ]
        },
        "dynatrace:index/AlertingFiltersFilterCustomMetadata:AlertingFiltersFilterCustomMetadata": {
            "properties": {
                "items": {
                    "$ref": "#/types/dynatrace:index/AlertingFiltersFilterCustomMetadataItems:AlertingFiltersFilterCustomMetadataItems"
                }
            },
            "type": "object",
            "required": [
                "items"
            ]
        },
        "dynatrace:index/AlertingFiltersFilterCustomMetadataItems:AlertingFiltersFilterCustomMetadataItems": {
            "properties": {
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/AlertingFiltersFilterCustomMetadataItemsFilter:AlertingFiltersFilterCustomMetadataItemsFilter"
                    }
                }
            },
            "type": "object",
            "required": [
                "filters"
            ]
        },
        "dynatrace:index/AlertingFiltersFilterCustomMetadataItemsFilter:AlertingFiltersFilterCustomMetadataItemsFilter": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "negate": {
                    "type": "boolean"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "dynatrace:index/AlertingFiltersFilterCustomTitle:AlertingFiltersFilterCustomTitle": {
            "properties": {
                "caseSensitive": {
                    "type": "boolean"
                },
                "enabled": {
                    "type": "boolean"
                },
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator",
                "value"
            ]
        },
        "dynatrace:index/AlertingFiltersFilterPredefined:AlertingFiltersFilterPredefined": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "dynatrace:index/AlertingProfileEventTypeFilter:AlertingProfileEventTypeFilter": {
            "properties": {
                "customEventFilters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/AlertingProfileEventTypeFilterCustomEventFilter:AlertingProfileEventTypeFilterCustomEventFilter"
                    }
                },
                "predefinedEventFilters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/AlertingProfileEventTypeFilterPredefinedEventFilter:AlertingProfileEventTypeFilterPredefinedEventFilter"
                    }
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "dynatrace:index/AlertingProfileEventTypeFilterCustomEventFilter:AlertingProfileEventTypeFilterCustomEventFilter": {
            "properties": {
                "customDescriptionFilters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/AlertingProfileEventTypeFilterCustomEventFilterCustomDescriptionFilter:AlertingProfileEventTypeFilterCustomEventFilterCustomDescriptionFilter"
                    }
                },
                "customTitleFilters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/AlertingProfileEventTypeFilterCustomEventFilterCustomTitleFilter:AlertingProfileEventTypeFilterCustomEventFilterCustomTitleFilter"
                    }
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "dynatrace:index/AlertingProfileEventTypeFilterCustomEventFilterCustomDescriptionFilter:AlertingProfileEventTypeFilterCustomEventFilterCustomDescriptionFilter": {
            "properties": {
                "caseInsensitive": {
                    "type": "boolean"
                },
                "enabled": {
                    "type": "boolean"
                },
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator",
                "value"
            ]
        },
        "dynatrace:index/AlertingProfileEventTypeFilterCustomEventFilterCustomTitleFilter:AlertingProfileEventTypeFilterCustomEventFilterCustomTitleFilter": {
            "properties": {
                "caseInsensitive": {
                    "type": "boolean"
                },
                "enabled": {
                    "type": "boolean"
                },
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator",
                "value"
            ]
        },
        "dynatrace:index/AlertingProfileEventTypeFilterPredefinedEventFilter:AlertingProfileEventTypeFilterPredefinedEventFilter": {
            "properties": {
                "eventType": {
                    "type": "string"
                },
                "negate": {
                    "type": "boolean"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "eventType"
            ]
        },
        "dynatrace:index/AlertingProfileMetadata:AlertingProfileMetadata": {
            "properties": {
                "clusterVersion": {
                    "type": "string"
                },
                "configurationVersions": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "currentConfigurationVersions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object"
        },
        "dynatrace:index/AlertingProfileRule:AlertingProfileRule": {
            "properties": {
                "delayInMinutes": {
                    "type": "integer"
                },
                "severityLevel": {
                    "type": "string"
                },
                "tagFilters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/AlertingProfileRuleTagFilter:AlertingProfileRuleTagFilter"
                    }
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "delayInMinutes",
                "severityLevel",
                "tagFilters"
            ]
        },
        "dynatrace:index/AlertingProfileRuleTagFilter:AlertingProfileRuleTagFilter": {
            "properties": {
                "includeMode": {
                    "type": "string"
                },
                "tagFilters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/AlertingProfileRuleTagFilterTagFilter:AlertingProfileRuleTagFilterTagFilter"
                    }
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "includeMode"
            ]
        },
        "dynatrace:index/AlertingProfileRuleTagFilterTagFilter:AlertingProfileRuleTagFilterTagFilter": {
            "properties": {
                "context": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "context",
                "key"
            ]
        },
        "dynatrace:index/AlertingRules:AlertingRules": {
            "properties": {
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/AlertingRulesRule:AlertingRulesRule"
                    }
                }
            },
            "type": "object"
        },
        "dynatrace:index/AlertingRulesRule:AlertingRulesRule": {
            "properties": {
                "delayInMinutes": {
                    "type": "integer"
                },
                "includeMode": {
                    "type": "string"
                },
                "severityLevel": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "delayInMinutes",
                "includeMode",
                "severityLevel"
            ]
        },
        "dynatrace:index/ApiDetectionConditions:ApiDetectionConditions": {
            "properties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ApiDetectionConditionsCondition:ApiDetectionConditionsCondition"
                    }
                }
            },
            "type": "object",
            "required": [
                "conditions"
            ]
        },
        "dynatrace:index/ApiDetectionConditionsCondition:ApiDetectionConditionsCondition": {
            "properties": {
                "base": {
                    "type": "string"
                },
                "matcher": {
                    "type": "string"
                },
                "pattern": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "base",
                "matcher",
                "pattern"
            ]
        },
        "dynatrace:index/ApplicationAnomaliesFailureRate:ApplicationAnomaliesFailureRate": {
            "properties": {
                "auto": {
                    "$ref": "#/types/dynatrace:index/ApplicationAnomaliesFailureRateAuto:ApplicationAnomaliesFailureRateAuto"
                },
                "thresholds": {
                    "$ref": "#/types/dynatrace:index/ApplicationAnomaliesFailureRateThresholds:ApplicationAnomaliesFailureRateThresholds"
                }
            },
            "type": "object"
        },
        "dynatrace:index/ApplicationAnomaliesFailureRateAuto:ApplicationAnomaliesFailureRateAuto": {
            "properties": {
                "absolute": {
                    "type": "integer"
                },
                "relative": {
                    "type": "integer"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "absolute",
                "relative"
            ]
        },
        "dynatrace:index/ApplicationAnomaliesFailureRateThresholds:ApplicationAnomaliesFailureRateThresholds": {
            "properties": {
                "sensitivity": {
                    "type": "string"
                },
                "threshold": {
                    "type": "integer"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "sensitivity",
                "threshold"
            ]
        },
        "dynatrace:index/ApplicationAnomaliesResponseTime:ApplicationAnomaliesResponseTime": {
            "properties": {
                "auto": {
                    "$ref": "#/types/dynatrace:index/ApplicationAnomaliesResponseTimeAuto:ApplicationAnomaliesResponseTimeAuto"
                },
                "thresholds": {
                    "$ref": "#/types/dynatrace:index/ApplicationAnomaliesResponseTimeThresholds:ApplicationAnomaliesResponseTimeThresholds"
                }
            },
            "type": "object"
        },
        "dynatrace:index/ApplicationAnomaliesResponseTimeAuto:ApplicationAnomaliesResponseTimeAuto": {
            "properties": {
                "load": {
                    "type": "string"
                },
                "milliseconds": {
                    "type": "integer"
                },
                "percent": {
                    "type": "integer"
                },
                "slowestMilliseconds": {
                    "type": "integer"
                },
                "slowestPercent": {
                    "type": "integer"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "load",
                "milliseconds",
                "percent",
                "slowestMilliseconds",
                "slowestPercent"
            ]
        },
        "dynatrace:index/ApplicationAnomaliesResponseTimeThresholds:ApplicationAnomaliesResponseTimeThresholds": {
            "properties": {
                "load": {
                    "type": "string"
                },
                "milliseconds": {
                    "type": "integer"
                },
                "sensitivity": {
                    "type": "string"
                },
                "slowestMilliseconds": {
                    "type": "integer"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "load",
                "milliseconds",
                "sensitivity",
                "slowestMilliseconds"
            ]
        },
        "dynatrace:index/ApplicationAnomaliesTraffic:ApplicationAnomaliesTraffic": {
            "properties": {
                "drops": {
                    "$ref": "#/types/dynatrace:index/ApplicationAnomaliesTrafficDrops:ApplicationAnomaliesTrafficDrops"
                },
                "spikes": {
                    "$ref": "#/types/dynatrace:index/ApplicationAnomaliesTrafficSpikes:ApplicationAnomaliesTrafficSpikes"
                }
            },
            "type": "object"
        },
        "dynatrace:index/ApplicationAnomaliesTrafficDrops:ApplicationAnomaliesTrafficDrops": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "percent": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/ApplicationAnomaliesTrafficSpikes:ApplicationAnomaliesTrafficSpikes": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "percent": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/ApplicationDataPrivacySessionReplayDataPrivacy:ApplicationDataPrivacySessionReplayDataPrivacy": {
            "properties": {
                "contentMaskingSettings": {
                    "$ref": "#/types/dynatrace:index/ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettings:ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettings"
                },
                "optIn": {
                    "type": "boolean"
                },
                "urlExclusionRules": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "contentMaskingSettings"
            ]
        },
        "dynatrace:index/ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettings:ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettings": {
            "properties": {
                "playback": {
                    "$ref": "#/types/dynatrace:index/ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettingsPlayback:ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettingsPlayback"
                },
                "recording": {
                    "$ref": "#/types/dynatrace:index/ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettingsRecording:ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettingsRecording"
                }
            },
            "type": "object",
            "required": [
                "playback",
                "recording"
            ]
        },
        "dynatrace:index/ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettingsPlayback:ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettingsPlayback": {
            "properties": {
                "preset": {
                    "type": "string"
                },
                "rules": {
                    "$ref": "#/types/dynatrace:index/ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettingsPlaybackRules:ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettingsPlaybackRules"
                }
            },
            "type": "object",
            "required": [
                "preset"
            ]
        },
        "dynatrace:index/ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettingsPlaybackRules:ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettingsPlaybackRules": {
            "properties": {
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettingsPlaybackRulesRule:ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettingsPlaybackRulesRule"
                    }
                }
            },
            "type": "object",
            "required": [
                "rules"
            ]
        },
        "dynatrace:index/ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettingsPlaybackRulesRule:ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettingsPlaybackRulesRule": {
            "properties": {
                "selector": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "userInteractionHidden": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "selector",
                "type"
            ]
        },
        "dynatrace:index/ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettingsRecording:ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettingsRecording": {
            "properties": {
                "preset": {
                    "type": "string"
                },
                "rules": {
                    "$ref": "#/types/dynatrace:index/ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettingsRecordingRules:ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettingsRecordingRules"
                }
            },
            "type": "object",
            "required": [
                "preset"
            ]
        },
        "dynatrace:index/ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettingsRecordingRules:ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettingsRecordingRules": {
            "properties": {
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettingsRecordingRulesRule:ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettingsRecordingRulesRule"
                    }
                }
            },
            "type": "object",
            "required": [
                "rules"
            ]
        },
        "dynatrace:index/ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettingsRecordingRulesRule:ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettingsRecordingRulesRule": {
            "properties": {
                "selector": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "userInteractionHidden": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "selector",
                "type"
            ]
        },
        "dynatrace:index/ApplicationDetectionRuleFilterConfig:ApplicationDetectionRuleFilterConfig": {
            "properties": {
                "applicationMatchTarget": {
                    "type": "string"
                },
                "applicationMatchType": {
                    "type": "string"
                },
                "pattern": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "applicationMatchTarget",
                "applicationMatchType",
                "pattern"
            ]
        },
        "dynatrace:index/ApplicationErrorRulesCustomErrors:ApplicationErrorRulesCustomErrors": {
            "properties": {
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ApplicationErrorRulesCustomErrorsRule:ApplicationErrorRulesCustomErrorsRule"
                    }
                }
            },
            "type": "object",
            "required": [
                "rules"
            ]
        },
        "dynatrace:index/ApplicationErrorRulesCustomErrorsRule:ApplicationErrorRulesCustomErrorsRule": {
            "properties": {
                "capture": {
                    "type": "boolean"
                },
                "customAlerting": {
                    "type": "boolean"
                },
                "impactApdex": {
                    "type": "boolean"
                },
                "keyMatcher": {
                    "type": "string"
                },
                "keyPattern": {
                    "type": "string"
                },
                "valueMatcher": {
                    "type": "string"
                },
                "valuePattern": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "dynatrace:index/ApplicationErrorRulesHttpErrors:ApplicationErrorRulesHttpErrors": {
            "properties": {
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ApplicationErrorRulesHttpErrorsRule:ApplicationErrorRulesHttpErrorsRule"
                    }
                }
            },
            "type": "object",
            "required": [
                "rules"
            ]
        },
        "dynatrace:index/ApplicationErrorRulesHttpErrorsRule:ApplicationErrorRulesHttpErrorsRule": {
            "properties": {
                "capture": {
                    "type": "boolean"
                },
                "considerBlockedRequests": {
                    "type": "boolean"
                },
                "considerForAi": {
                    "type": "boolean"
                },
                "considerUnknownErrorCode": {
                    "type": "boolean"
                },
                "errorCodes": {
                    "type": "string"
                },
                "filter": {
                    "type": "string"
                },
                "filterByUrl": {
                    "type": "boolean"
                },
                "impactApdex": {
                    "type": "boolean"
                },
                "url": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "dynatrace:index/AppsecNotificationAttackCandidateBasedEmailPayload:AppsecNotificationAttackCandidateBasedEmailPayload": {
            "properties": {
                "body": {
                    "type": "string"
                },
                "subject": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "body",
                "subject"
            ]
        },
        "dynatrace:index/AppsecNotificationAttackCandidateBasedJiraPayload:AppsecNotificationAttackCandidateBasedJiraPayload": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "summary": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "description",
                "summary"
            ]
        },
        "dynatrace:index/AppsecNotificationAttackCandidateBasedWebhookPayload:AppsecNotificationAttackCandidateBasedWebhookPayload": {
            "properties": {
                "payload": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "payload"
            ]
        },
        "dynatrace:index/AppsecNotificationEmailConfiguration:AppsecNotificationEmailConfiguration": {
            "properties": {
                "bccRecipients": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "ccRecipients": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "recipients": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "recipients"
            ]
        },
        "dynatrace:index/AppsecNotificationJiraConfiguration:AppsecNotificationJiraConfiguration": {
            "properties": {
                "apiToken": {
                    "type": "string",
                    "secret": true
                },
                "issueType": {
                    "type": "string"
                },
                "projectKey": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "apiToken",
                "issueType",
                "projectKey",
                "url",
                "username"
            ]
        },
        "dynatrace:index/AppsecNotificationSecurityProblemBasedEmailPayload:AppsecNotificationSecurityProblemBasedEmailPayload": {
            "properties": {
                "body": {
                    "type": "string"
                },
                "subject": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "body",
                "subject"
            ]
        },
        "dynatrace:index/AppsecNotificationSecurityProblemBasedJiraPayload:AppsecNotificationSecurityProblemBasedJiraPayload": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "summary": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "description",
                "summary"
            ]
        },
        "dynatrace:index/AppsecNotificationSecurityProblemBasedWebhookPayload:AppsecNotificationSecurityProblemBasedWebhookPayload": {
            "properties": {
                "payload": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "payload"
            ]
        },
        "dynatrace:index/AppsecNotificationWebhookConfiguration:AppsecNotificationWebhookConfiguration": {
            "properties": {
                "acceptAnyCertificate": {
                    "type": "boolean"
                },
                "headers": {
                    "$ref": "#/types/dynatrace:index/AppsecNotificationWebhookConfigurationHeaders:AppsecNotificationWebhookConfigurationHeaders"
                },
                "url": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "acceptAnyCertificate",
                "url"
            ]
        },
        "dynatrace:index/AppsecNotificationWebhookConfigurationHeaders:AppsecNotificationWebhookConfigurationHeaders": {
            "properties": {
                "headers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/AppsecNotificationWebhookConfigurationHeadersHeader:AppsecNotificationWebhookConfigurationHeadersHeader"
                    }
                }
            },
            "type": "object",
            "required": [
                "headers"
            ]
        },
        "dynatrace:index/AppsecNotificationWebhookConfigurationHeadersHeader:AppsecNotificationWebhookConfigurationHeadersHeader": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "secret": {
                    "type": "boolean"
                },
                "secretValue": {
                    "type": "string",
                    "secret": true
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "name",
                "secret"
            ]
        },
        "dynatrace:index/AttackAllowlistAttackHandling:AttackAllowlistAttackHandling": {
            "properties": {
                "blockingStrategy": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "blockingStrategy"
            ]
        },
        "dynatrace:index/AttackAllowlistCriteria:AttackAllowlistCriteria": {
            "properties": {
                "attackPattern": {
                    "type": "string"
                },
                "sourceIp": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "dynatrace:index/AttackAllowlistMetadata:AttackAllowlistMetadata": {
            "properties": {
                "comment": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "comment"
            ]
        },
        "dynatrace:index/AttackRulesAttackHandling:AttackRulesAttackHandling": {
            "properties": {
                "blockingStrategy": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "blockingStrategy"
            ]
        },
        "dynatrace:index/AttackRulesCriteria:AttackRulesCriteria": {
            "properties": {
                "attackType": {
                    "type": "string"
                },
                "processGroup": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "attackType"
            ]
        },
        "dynatrace:index/AttackRulesMetadata:AttackRulesMetadata": {
            "properties": {
                "comment": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "comment"
            ]
        },
        "dynatrace:index/AttackSettingsDefaultAttackHandling:AttackSettingsDefaultAttackHandling": {
            "properties": {
                "blockingStrategyDotNet": {
                    "type": "string"
                },
                "blockingStrategyJava": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "blockingStrategyJava"
            ]
        },
        "dynatrace:index/AutomationBusinessCalendarHolidays:AutomationBusinessCalendarHolidays": {
            "properties": {
                "holidays": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/AutomationBusinessCalendarHolidaysHoliday:AutomationBusinessCalendarHolidaysHoliday"
                    }
                }
            },
            "type": "object",
            "required": [
                "holidays"
            ]
        },
        "dynatrace:index/AutomationBusinessCalendarHolidaysHoliday:AutomationBusinessCalendarHolidaysHoliday": {
            "properties": {
                "date": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "date",
                "title"
            ]
        },
        "dynatrace:index/AutomationSchedulingRuleFixedOffset:AutomationSchedulingRuleFixedOffset": {
            "properties": {
                "offset": {
                    "type": "integer"
                },
                "rule": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "offset",
                "rule"
            ]
        },
        "dynatrace:index/AutomationSchedulingRuleGrouping:AutomationSchedulingRuleGrouping": {
            "properties": {
                "combines": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "intersects": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "subtracts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "combines"
            ]
        },
        "dynatrace:index/AutomationSchedulingRuleRecurrence:AutomationSchedulingRuleRecurrence": {
            "properties": {
                "datestart": {
                    "type": "string"
                },
                "daysInMonths": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "daysInYears": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "easters": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "frequency": {
                    "type": "string"
                },
                "interval": {
                    "type": "integer"
                },
                "months": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "weekdays": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "weeks": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "workdays": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "datestart",
                "frequency",
                "workdays"
            ]
        },
        "dynatrace:index/AutomationSchedulingRuleRelativeOffset:AutomationSchedulingRuleRelativeOffset": {
            "properties": {
                "direction": {
                    "type": "string"
                },
                "sourceRule": {
                    "type": "string"
                },
                "targetRule": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "direction",
                "sourceRule",
                "targetRule"
            ]
        },
        "dynatrace:index/AutomationWorkflowTasks:AutomationWorkflowTasks": {
            "properties": {
                "tasks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/AutomationWorkflowTasksTask:AutomationWorkflowTasksTask"
                    }
                }
            },
            "type": "object"
        },
        "dynatrace:index/AutomationWorkflowTasksTask:AutomationWorkflowTasksTask": {
            "properties": {
                "action": {
                    "type": "string"
                },
                "active": {
                    "type": "boolean"
                },
                "concurrency": {
                    "type": "string"
                },
                "conditions": {
                    "$ref": "#/types/dynatrace:index/AutomationWorkflowTasksTaskConditions:AutomationWorkflowTasksTaskConditions"
                },
                "description": {
                    "type": "string"
                },
                "input": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "position": {
                    "$ref": "#/types/dynatrace:index/AutomationWorkflowTasksTaskPosition:AutomationWorkflowTasksTaskPosition"
                },
                "retry": {
                    "$ref": "#/types/dynatrace:index/AutomationWorkflowTasksTaskRetry:AutomationWorkflowTasksTaskRetry"
                },
                "timeout": {
                    "type": "string"
                },
                "withItems": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "action",
                "name"
            ]
        },
        "dynatrace:index/AutomationWorkflowTasksTaskConditions:AutomationWorkflowTasksTaskConditions": {
            "properties": {
                "custom": {
                    "type": "string"
                },
                "else": {
                    "type": "string"
                },
                "states": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    }
                }
            },
            "type": "object",
            "required": [
                "states"
            ]
        },
        "dynatrace:index/AutomationWorkflowTasksTaskPosition:AutomationWorkflowTasksTaskPosition": {
            "properties": {
                "x": {
                    "type": "integer"
                },
                "y": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "x",
                "y"
            ]
        },
        "dynatrace:index/AutomationWorkflowTasksTaskRetry:AutomationWorkflowTasksTaskRetry": {
            "properties": {
                "count": {
                    "type": "string"
                },
                "delay": {
                    "type": "string"
                },
                "failedLoopIterationsOnly": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "dynatrace:index/AutomationWorkflowTrigger:AutomationWorkflowTrigger": {
            "properties": {
                "event": {
                    "$ref": "#/types/dynatrace:index/AutomationWorkflowTriggerEvent:AutomationWorkflowTriggerEvent"
                },
                "schedule": {
                    "$ref": "#/types/dynatrace:index/AutomationWorkflowTriggerSchedule:AutomationWorkflowTriggerSchedule"
                }
            },
            "type": "object"
        },
        "dynatrace:index/AutomationWorkflowTriggerEvent:AutomationWorkflowTriggerEvent": {
            "properties": {
                "active": {
                    "type": "boolean"
                },
                "config": {
                    "$ref": "#/types/dynatrace:index/AutomationWorkflowTriggerEventConfig:AutomationWorkflowTriggerEventConfig"
                }
            },
            "type": "object"
        },
        "dynatrace:index/AutomationWorkflowTriggerEventConfig:AutomationWorkflowTriggerEventConfig": {
            "properties": {
                "davisEvent": {
                    "$ref": "#/types/dynatrace:index/AutomationWorkflowTriggerEventConfigDavisEvent:AutomationWorkflowTriggerEventConfigDavisEvent"
                },
                "davisProblem": {
                    "$ref": "#/types/dynatrace:index/AutomationWorkflowTriggerEventConfigDavisProblem:AutomationWorkflowTriggerEventConfigDavisProblem"
                },
                "event": {
                    "$ref": "#/types/dynatrace:index/AutomationWorkflowTriggerEventConfigEvent:AutomationWorkflowTriggerEventConfigEvent"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "dynatrace:index/AutomationWorkflowTriggerEventConfigDavisEvent:AutomationWorkflowTriggerEventConfigDavisEvent": {
            "properties": {
                "entityTags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "entityTagsMatch": {
                    "type": "string"
                },
                "onProblemClose": {
                    "type": "boolean"
                },
                "types": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "types"
            ]
        },
        "dynatrace:index/AutomationWorkflowTriggerEventConfigDavisProblem:AutomationWorkflowTriggerEventConfigDavisProblem": {
            "properties": {
                "categories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/AutomationWorkflowTriggerEventConfigDavisProblemCategory:AutomationWorkflowTriggerEventConfigDavisProblemCategory"
                    }
                },
                "customFilter": {
                    "type": "string"
                },
                "entityTags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "entityTagsMatch": {
                    "type": "string"
                },
                "onProblemClose": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "categories"
            ]
        },
        "dynatrace:index/AutomationWorkflowTriggerEventConfigDavisProblemCategory:AutomationWorkflowTriggerEventConfigDavisProblemCategory": {
            "properties": {
                "availability": {
                    "type": "boolean"
                },
                "custom": {
                    "type": "boolean"
                },
                "error": {
                    "type": "boolean"
                },
                "info": {
                    "type": "boolean"
                },
                "monitoringUnavailable": {
                    "type": "boolean"
                },
                "resource": {
                    "type": "boolean"
                },
                "slowdown": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "dynatrace:index/AutomationWorkflowTriggerEventConfigEvent:AutomationWorkflowTriggerEventConfigEvent": {
            "properties": {
                "eventType": {
                    "type": "string"
                },
                "query": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "query"
            ]
        },
        "dynatrace:index/AutomationWorkflowTriggerSchedule:AutomationWorkflowTriggerSchedule": {
            "properties": {
                "active": {
                    "type": "boolean"
                },
                "filterParameters": {
                    "$ref": "#/types/dynatrace:index/AutomationWorkflowTriggerScheduleFilterParameters:AutomationWorkflowTriggerScheduleFilterParameters"
                },
                "rule": {
                    "type": "string"
                },
                "timeZone": {
                    "type": "string"
                },
                "trigger": {
                    "$ref": "#/types/dynatrace:index/AutomationWorkflowTriggerScheduleTrigger:AutomationWorkflowTriggerScheduleTrigger"
                }
            },
            "type": "object",
            "required": [
                "trigger"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "timeZone",
                        "trigger"
                    ]
                }
            }
        },
        "dynatrace:index/AutomationWorkflowTriggerScheduleFilterParameters:AutomationWorkflowTriggerScheduleFilterParameters": {
            "properties": {
                "count": {
                    "type": "integer"
                },
                "earliestStart": {
                    "type": "string"
                },
                "earliestStartTime": {
                    "type": "string"
                },
                "excludeDates": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "includeDates": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "until": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "dynatrace:index/AutomationWorkflowTriggerScheduleTrigger:AutomationWorkflowTriggerScheduleTrigger": {
            "properties": {
                "betweenEnd": {
                    "type": "string"
                },
                "betweenStart": {
                    "type": "string"
                },
                "cron": {
                    "type": "string"
                },
                "intervalMinutes": {
                    "type": "integer"
                },
                "time": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "dynatrace:index/AutotagEntitySelectorBasedRule:AutotagEntitySelectorBasedRule": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "normalization": {
                    "type": "string"
                },
                "selector": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "valueFormat": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "dynatrace:index/AutotagRule:AutotagRule": {
            "properties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/AutotagRuleCondition:AutotagRuleCondition"
                    }
                },
                "enabled": {
                    "type": "boolean"
                },
                "normalization": {
                    "type": "string"
                },
                "propagationTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "type": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "valueFormat": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "dynatrace:index/AutotagRuleCondition:AutotagRuleCondition": {
            "properties": {
                "applicationTypeComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/AutotagRuleConditionApplicationTypeComparison:AutotagRuleConditionApplicationTypeComparison"
                    },
                    "deprecationMessage": "You should use 'application_type' instead of 'application_type_comparison'. This attribute still exists for backwards compatibility."
                },
                "applicationTypes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/AutotagRuleConditionApplicationType:AutotagRuleConditionApplicationType"
                    }
                },
                "azureComputeModeComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/AutotagRuleConditionAzureComputeModeComparison:AutotagRuleConditionAzureComputeModeComparison"
                    }
                },
                "azureComputeModes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/AutotagRuleConditionAzureComputeMode:AutotagRuleConditionAzureComputeMode"
                    },
                    "deprecationMessage": "You should use 'azure_compute_mode' instead of 'azure_compute_mode_comparison'. This attribute still exists for backwards compatibility."
                },
                "azureSkuComparisions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/AutotagRuleConditionAzureSkuComparision:AutotagRuleConditionAzureSkuComparision"
                    },
                    "deprecationMessage": "You should use 'azure_sku' instead of 'azure_sku_comparision'. This attribute still exists for backwards compatibility."
                },
                "azureSkus": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/AutotagRuleConditionAzureSkus:AutotagRuleConditionAzureSkus"
                    }
                },
                "baseComparisonBasics": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/AutotagRuleConditionBaseComparisonBasic:AutotagRuleConditionBaseComparisonBasic"
                    },
                    "deprecationMessage": "You should use 'comparison' instead of 'base_comparison_basic'. This attribute still exists for backwards compatibility."
                },
                "baseConditionKeys": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/AutotagRuleConditionBaseConditionKey:AutotagRuleConditionBaseConditionKey"
                    },
                    "deprecationMessage": "'base_condition_key' is deprecated. You should use 'key'"
                },
                "bitnessComparisions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/AutotagRuleConditionBitnessComparision:AutotagRuleConditionBitnessComparision"
                    },
                    "deprecationMessage": "You should use 'bitness' instead of 'bitness_comparision'. This attribute still exists for backwards compatibility."
                },
                "bitnesses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/AutotagRuleConditionBitness:AutotagRuleConditionBitness"
                    }
                },
                "cloudTypeComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/AutotagRuleConditionCloudTypeComparison:AutotagRuleConditionCloudTypeComparison"
                    },
                    "deprecationMessage": "You should use 'cloud_type' instead of 'cloud_type_comparison'. This attribute still exists for backwards compatibility."
                },
                "cloudTypes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/AutotagRuleConditionCloudType:AutotagRuleConditionCloudType"
                    }
                },
                "comparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/AutotagRuleConditionComparison:AutotagRuleConditionComparison"
                    }
                },
                "customApplicationTypeComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/AutotagRuleConditionCustomApplicationTypeComparison:AutotagRuleConditionCustomApplicationTypeComparison"
                    },
                    "deprecationMessage": "You should use 'custom_application_type' instead of 'custom_application_type_comparison'. This attribute still exists for backwards compatibility."
                },
                "customApplicationTypes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/AutotagRuleConditionCustomApplicationType:AutotagRuleConditionCustomApplicationType"
                    }
                },
                "customHostMetadataConditionKeys": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/AutotagRuleConditionCustomHostMetadataConditionKey:AutotagRuleConditionCustomHostMetadataConditionKey"
                    },
                    "deprecationMessage": "'custom_host_metadata_condition_key' is deprecated. You should use 'custom_host_metadata'"
                },
                "customHostMetadatas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/AutotagRuleConditionCustomHostMetadata:AutotagRuleConditionCustomHostMetadata"
                    }
                },
                "customProcessMetadataConditionKeys": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/AutotagRuleConditionCustomProcessMetadataConditionKey:AutotagRuleConditionCustomProcessMetadataConditionKey"
                    },
                    "deprecationMessage": "'custom_process_metadata_condition_key' is deprecated. You should use 'custom_process_metadata'"
                },
                "customProcessMetadatas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/AutotagRuleConditionCustomProcessMetadata:AutotagRuleConditionCustomProcessMetadata"
                    }
                },
                "databaseTopologies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/AutotagRuleConditionDatabaseTopology:AutotagRuleConditionDatabaseTopology"
                    }
                },
                "databaseTopologyComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/AutotagRuleConditionDatabaseTopologyComparison:AutotagRuleConditionDatabaseTopologyComparison"
                    },
                    "deprecationMessage": "You should use 'database_topology' instead of 'database_topology_comparison'. This attribute still exists for backwards compatibility."
                },
                "dcrumDecoderComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/AutotagRuleConditionDcrumDecoderComparison:AutotagRuleConditionDcrumDecoderComparison"
                    },
                    "deprecationMessage": "You should use 'dcrum_decoder' instead of 'dcrum_decoder_comparison'. This attribute still exists for backwards compatibility."
                },
                "dcrumDecoders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/AutotagRuleConditionDcrumDecoder:AutotagRuleConditionDcrumDecoder"
                    }
                },
                "entities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/AutotagRuleConditionEntity:AutotagRuleConditionEntity"
                    }
                },
                "entityIdComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/AutotagRuleConditionEntityIdComparison:AutotagRuleConditionEntityIdComparison"
                    },
                    "deprecationMessage": "You should use 'entity' instead of 'entity_id_comparison'. This attribute still exists for backwards compatibility."
                },
                "hostTeches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/AutotagRuleConditionHostTech:AutotagRuleConditionHostTech"
                    }
                },
                "hypervisorTypeComparisions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/AutotagRuleConditionHypervisorTypeComparision:AutotagRuleConditionHypervisorTypeComparision"
                    },
                    "deprecationMessage": "`hypervisor_type_comparision` is deprecated. Use `hypervisor` instead"
                },
                "hypervisors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/AutotagRuleConditionHypervisor:AutotagRuleConditionHypervisor"
                    }
                },
                "indexedNameComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/AutotagRuleConditionIndexedNameComparison:AutotagRuleConditionIndexedNameComparison"
                    },
                    "deprecationMessage": "You should use 'indexed_name' instead of 'indexed_name_comparison'. This attribute still exists for backwards compatibility."
                },
                "indexedNames": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/AutotagRuleConditionIndexedName:AutotagRuleConditionIndexedName"
                    }
                },
                "indexedStringComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/AutotagRuleConditionIndexedStringComparison:AutotagRuleConditionIndexedStringComparison"
                    },
                    "deprecationMessage": "You should use 'indexed_string' instead of 'indexed_string_comparison'. This attribute still exists for backwards compatibility."
                },
                "indexedStrings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/AutotagRuleConditionIndexedString:AutotagRuleConditionIndexedString"
                    }
                },
                "indexedTagComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/AutotagRuleConditionIndexedTagComparison:AutotagRuleConditionIndexedTagComparison"
                    },
                    "deprecationMessage": "You should use 'indexed_tag' instead of 'indexed_tag_comparison'. This attribute still exists for backwards compatibility."
                },
                "indexedTags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/AutotagRuleConditionIndexedTag:AutotagRuleConditionIndexedTag"
                    }
                },
                "integerComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/AutotagRuleConditionIntegerComparison:AutotagRuleConditionIntegerComparison"
                    },
                    "deprecationMessage": "You should use 'integer' instead of 'integer_comparison'. This attribute still exists for backwards compatibility."
                },
                "integers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/AutotagRuleConditionInteger:AutotagRuleConditionInteger"
                    }
                },
                "ipaddressComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/AutotagRuleConditionIpaddressComparison:AutotagRuleConditionIpaddressComparison"
                    },
                    "deprecationMessage": "You should use 'ipaddress' instead of 'ipaddress_comparison'. This attribute still exists for backwards compatibility."
                },
                "ipaddresses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/AutotagRuleConditionIpaddress:AutotagRuleConditionIpaddress"
                    }
                },
                "keys": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/AutotagRuleConditionKey:AutotagRuleConditionKey"
                    }
                },
                "mobilePlatformComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/AutotagRuleConditionMobilePlatformComparison:AutotagRuleConditionMobilePlatformComparison"
                    },
                    "deprecationMessage": "You should use 'mobile_platform' instead of 'mobile_platform_comparison'. This attribute still exists for backwards compatibility."
                },
                "mobilePlatforms": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/AutotagRuleConditionMobilePlatform:AutotagRuleConditionMobilePlatform"
                    }
                },
                "osArches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/AutotagRuleConditionOsArch:AutotagRuleConditionOsArch"
                    }
                },
                "osTypes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/AutotagRuleConditionOsType:AutotagRuleConditionOsType"
                    }
                },
                "osarchitectureComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/AutotagRuleConditionOsarchitectureComparison:AutotagRuleConditionOsarchitectureComparison"
                    },
                    "deprecationMessage": "You should use 'os_arch' instead of 'osarchitecture_comparison'. This attribute still exists for backwards compatibility."
                },
                "ostypeComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/AutotagRuleConditionOstypeComparison:AutotagRuleConditionOstypeComparison"
                    },
                    "deprecationMessage": "You should use 'os_type' instead of 'ostype_comparison'. This attribute still exists for backwards compatibility."
                },
                "paasTypeComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/AutotagRuleConditionPaasTypeComparison:AutotagRuleConditionPaasTypeComparison"
                    },
                    "deprecationMessage": "You should use 'paas_type' instead of 'paas_type_comparison'. This attribute still exists for backwards compatibility."
                },
                "paasTypes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/AutotagRuleConditionPaasType:AutotagRuleConditionPaasType"
                    }
                },
                "processMetadataConditionKeys": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/AutotagRuleConditionProcessMetadataConditionKey:AutotagRuleConditionProcessMetadataConditionKey"
                    },
                    "deprecationMessage": "'process_metadata_condition_key' is deprecated. You should use 'process_metadata'"
                },
                "processMetadatas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/AutotagRuleConditionProcessMetadata:AutotagRuleConditionProcessMetadata"
                    }
                },
                "serviceTopologies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/AutotagRuleConditionServiceTopology:AutotagRuleConditionServiceTopology"
                    }
                },
                "serviceTopologyComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/AutotagRuleConditionServiceTopologyComparison:AutotagRuleConditionServiceTopologyComparison"
                    },
                    "deprecationMessage": "You should use 'service_topology' instead of 'service_topology_comparison'. This attribute still exists for backwards compatibility."
                },
                "serviceTypeComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/AutotagRuleConditionServiceTypeComparison:AutotagRuleConditionServiceTypeComparison"
                    },
                    "deprecationMessage": "You should use 'service_type' instead of 'service_type_comparison'. This attribute still exists for backwards compatibility."
                },
                "serviceTypes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/AutotagRuleConditionServiceType:AutotagRuleConditionServiceType"
                    }
                },
                "simpleHostTechComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/AutotagRuleConditionSimpleHostTechComparison:AutotagRuleConditionSimpleHostTechComparison"
                    },
                    "deprecationMessage": "You should use 'host_tech' instead of 'simple_host_tech_comparison'. This attribute still exists for backwards compatibility."
                },
                "simpleTechComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/AutotagRuleConditionSimpleTechComparison:AutotagRuleConditionSimpleTechComparison"
                    },
                    "deprecationMessage": "You should use 'tech' instead of 'simple_tech_comparison'. This attribute still exists for backwards compatibility."
                },
                "stringComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/AutotagRuleConditionStringComparison:AutotagRuleConditionStringComparison"
                    },
                    "deprecationMessage": "You should use 'string' instead of 'string_comparison'. This attribute still exists for backwards compatibility."
                },
                "stringConditionKeys": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/AutotagRuleConditionStringConditionKey:AutotagRuleConditionStringConditionKey"
                    },
                    "deprecationMessage": "'string_condition_key' is deprecated. You should use 'string_key'"
                },
                "stringKeys": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/AutotagRuleConditionStringKey:AutotagRuleConditionStringKey"
                    }
                },
                "strings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/AutotagRuleConditionString:AutotagRuleConditionString"
                    }
                },
                "syntheticEngineTypeComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/AutotagRuleConditionSyntheticEngineTypeComparison:AutotagRuleConditionSyntheticEngineTypeComparison"
                    },
                    "deprecationMessage": "You should use 'synthetic_engine' instead of 'synthetic_engine_type_comparison'. This attribute still exists for backwards compatibility."
                },
                "syntheticEngines": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/AutotagRuleConditionSyntheticEngine:AutotagRuleConditionSyntheticEngine"
                    }
                },
                "tagComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/AutotagRuleConditionTagComparison:AutotagRuleConditionTagComparison"
                    },
                    "deprecationMessage": "You should use 'tag' instead of 'tag_comparison'. This attribute still exists for backwards compatibility."
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/AutotagRuleConditionTag:AutotagRuleConditionTag"
                    }
                },
                "teches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/AutotagRuleConditionTech:AutotagRuleConditionTech"
                    }
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "dynatrace:index/AutotagRuleConditionApplicationType:AutotagRuleConditionApplicationType": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/AutotagRuleConditionApplicationTypeComparison:AutotagRuleConditionApplicationTypeComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/AutotagRuleConditionAzureComputeMode:AutotagRuleConditionAzureComputeMode": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/AutotagRuleConditionAzureComputeModeComparison:AutotagRuleConditionAzureComputeModeComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/AutotagRuleConditionAzureSkuComparision:AutotagRuleConditionAzureSkuComparision": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/AutotagRuleConditionAzureSkus:AutotagRuleConditionAzureSkus": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/AutotagRuleConditionBaseComparisonBasic:AutotagRuleConditionBaseComparisonBasic": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "type": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "dynatrace:index/AutotagRuleConditionBaseConditionKey:AutotagRuleConditionBaseConditionKey": {
            "properties": {
                "attribute": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "attribute"
            ]
        },
        "dynatrace:index/AutotagRuleConditionBitness:AutotagRuleConditionBitness": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/AutotagRuleConditionBitnessComparision:AutotagRuleConditionBitnessComparision": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/AutotagRuleConditionCloudType:AutotagRuleConditionCloudType": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/AutotagRuleConditionCloudTypeComparison:AutotagRuleConditionCloudTypeComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/AutotagRuleConditionComparison:AutotagRuleConditionComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "type": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "dynatrace:index/AutotagRuleConditionCustomApplicationType:AutotagRuleConditionCustomApplicationType": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/AutotagRuleConditionCustomApplicationTypeComparison:AutotagRuleConditionCustomApplicationTypeComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/AutotagRuleConditionCustomHostMetadata:AutotagRuleConditionCustomHostMetadata": {
            "properties": {
                "attribute": {
                    "type": "string"
                },
                "dynamicKey": {
                    "$ref": "#/types/dynatrace:index/AutotagRuleConditionCustomHostMetadataDynamicKey:AutotagRuleConditionCustomHostMetadataDynamicKey"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "attribute",
                "dynamicKey"
            ]
        },
        "dynatrace:index/AutotagRuleConditionCustomHostMetadataConditionKey:AutotagRuleConditionCustomHostMetadataConditionKey": {
            "properties": {
                "attribute": {
                    "type": "string"
                },
                "dynamicKey": {
                    "$ref": "#/types/dynatrace:index/AutotagRuleConditionCustomHostMetadataConditionKeyDynamicKey:AutotagRuleConditionCustomHostMetadataConditionKeyDynamicKey"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "attribute",
                "dynamicKey"
            ]
        },
        "dynatrace:index/AutotagRuleConditionCustomHostMetadataConditionKeyDynamicKey:AutotagRuleConditionCustomHostMetadataConditionKeyDynamicKey": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "source": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "source"
            ]
        },
        "dynatrace:index/AutotagRuleConditionCustomHostMetadataDynamicKey:AutotagRuleConditionCustomHostMetadataDynamicKey": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "source": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "source"
            ]
        },
        "dynatrace:index/AutotagRuleConditionCustomProcessMetadata:AutotagRuleConditionCustomProcessMetadata": {
            "properties": {
                "attribute": {
                    "type": "string"
                },
                "dynamicKey": {
                    "$ref": "#/types/dynatrace:index/AutotagRuleConditionCustomProcessMetadataDynamicKey:AutotagRuleConditionCustomProcessMetadataDynamicKey"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "attribute",
                "dynamicKey"
            ]
        },
        "dynatrace:index/AutotagRuleConditionCustomProcessMetadataConditionKey:AutotagRuleConditionCustomProcessMetadataConditionKey": {
            "properties": {
                "attribute": {
                    "type": "string"
                },
                "dynamicKey": {
                    "$ref": "#/types/dynatrace:index/AutotagRuleConditionCustomProcessMetadataConditionKeyDynamicKey:AutotagRuleConditionCustomProcessMetadataConditionKeyDynamicKey"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "attribute",
                "dynamicKey"
            ]
        },
        "dynatrace:index/AutotagRuleConditionCustomProcessMetadataConditionKeyDynamicKey:AutotagRuleConditionCustomProcessMetadataConditionKeyDynamicKey": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "source": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "source"
            ]
        },
        "dynatrace:index/AutotagRuleConditionCustomProcessMetadataDynamicKey:AutotagRuleConditionCustomProcessMetadataDynamicKey": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "source": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "source"
            ]
        },
        "dynatrace:index/AutotagRuleConditionDatabaseTopology:AutotagRuleConditionDatabaseTopology": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/AutotagRuleConditionDatabaseTopologyComparison:AutotagRuleConditionDatabaseTopologyComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/AutotagRuleConditionDcrumDecoder:AutotagRuleConditionDcrumDecoder": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/AutotagRuleConditionDcrumDecoderComparison:AutotagRuleConditionDcrumDecoderComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/AutotagRuleConditionEntity:AutotagRuleConditionEntity": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/AutotagRuleConditionEntityIdComparison:AutotagRuleConditionEntityIdComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/AutotagRuleConditionHostTech:AutotagRuleConditionHostTech": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "$ref": "#/types/dynatrace:index/AutotagRuleConditionHostTechValue:AutotagRuleConditionHostTechValue"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/AutotagRuleConditionHostTechValue:AutotagRuleConditionHostTechValue": {
            "properties": {
                "type": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "verbatimType": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "dynatrace:index/AutotagRuleConditionHypervisor:AutotagRuleConditionHypervisor": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/AutotagRuleConditionHypervisorTypeComparision:AutotagRuleConditionHypervisorTypeComparision": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/AutotagRuleConditionIndexedName:AutotagRuleConditionIndexedName": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/AutotagRuleConditionIndexedNameComparison:AutotagRuleConditionIndexedNameComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/AutotagRuleConditionIndexedString:AutotagRuleConditionIndexedString": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/AutotagRuleConditionIndexedStringComparison:AutotagRuleConditionIndexedStringComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/AutotagRuleConditionIndexedTag:AutotagRuleConditionIndexedTag": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "$ref": "#/types/dynatrace:index/AutotagRuleConditionIndexedTagValue:AutotagRuleConditionIndexedTagValue"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/AutotagRuleConditionIndexedTagComparison:AutotagRuleConditionIndexedTagComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "$ref": "#/types/dynatrace:index/AutotagRuleConditionIndexedTagComparisonValue:AutotagRuleConditionIndexedTagComparisonValue"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/AutotagRuleConditionIndexedTagComparisonValue:AutotagRuleConditionIndexedTagComparisonValue": {
            "properties": {
                "context": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "context",
                "key"
            ]
        },
        "dynatrace:index/AutotagRuleConditionIndexedTagValue:AutotagRuleConditionIndexedTagValue": {
            "properties": {
                "context": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "context",
                "key"
            ]
        },
        "dynatrace:index/AutotagRuleConditionInteger:AutotagRuleConditionInteger": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/AutotagRuleConditionIntegerComparison:AutotagRuleConditionIntegerComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/AutotagRuleConditionIpaddress:AutotagRuleConditionIpaddress": {
            "properties": {
                "caseSensitive": {
                    "type": "boolean"
                },
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/AutotagRuleConditionIpaddressComparison:AutotagRuleConditionIpaddressComparison": {
            "properties": {
                "caseSensitive": {
                    "type": "boolean"
                },
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/AutotagRuleConditionKey:AutotagRuleConditionKey": {
            "properties": {
                "attribute": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "attribute"
            ]
        },
        "dynatrace:index/AutotagRuleConditionMobilePlatform:AutotagRuleConditionMobilePlatform": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/AutotagRuleConditionMobilePlatformComparison:AutotagRuleConditionMobilePlatformComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/AutotagRuleConditionOsArch:AutotagRuleConditionOsArch": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/AutotagRuleConditionOsType:AutotagRuleConditionOsType": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/AutotagRuleConditionOsarchitectureComparison:AutotagRuleConditionOsarchitectureComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/AutotagRuleConditionOstypeComparison:AutotagRuleConditionOstypeComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/AutotagRuleConditionPaasType:AutotagRuleConditionPaasType": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/AutotagRuleConditionPaasTypeComparison:AutotagRuleConditionPaasTypeComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/AutotagRuleConditionProcessMetadata:AutotagRuleConditionProcessMetadata": {
            "properties": {
                "attribute": {
                    "type": "string"
                },
                "dynamicKey": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "attribute",
                "dynamicKey"
            ]
        },
        "dynatrace:index/AutotagRuleConditionProcessMetadataConditionKey:AutotagRuleConditionProcessMetadataConditionKey": {
            "properties": {
                "attribute": {
                    "type": "string"
                },
                "dynamicKey": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "attribute",
                "dynamicKey"
            ]
        },
        "dynatrace:index/AutotagRuleConditionServiceTopology:AutotagRuleConditionServiceTopology": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/AutotagRuleConditionServiceTopologyComparison:AutotagRuleConditionServiceTopologyComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/AutotagRuleConditionServiceType:AutotagRuleConditionServiceType": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/AutotagRuleConditionServiceTypeComparison:AutotagRuleConditionServiceTypeComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/AutotagRuleConditionSimpleHostTechComparison:AutotagRuleConditionSimpleHostTechComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "$ref": "#/types/dynatrace:index/AutotagRuleConditionSimpleHostTechComparisonValue:AutotagRuleConditionSimpleHostTechComparisonValue"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/AutotagRuleConditionSimpleHostTechComparisonValue:AutotagRuleConditionSimpleHostTechComparisonValue": {
            "properties": {
                "type": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "verbatimType": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "dynatrace:index/AutotagRuleConditionSimpleTechComparison:AutotagRuleConditionSimpleTechComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "$ref": "#/types/dynatrace:index/AutotagRuleConditionSimpleTechComparisonValue:AutotagRuleConditionSimpleTechComparisonValue"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/AutotagRuleConditionSimpleTechComparisonValue:AutotagRuleConditionSimpleTechComparisonValue": {
            "properties": {
                "type": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "verbatimType": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "dynatrace:index/AutotagRuleConditionString:AutotagRuleConditionString": {
            "properties": {
                "caseSensitive": {
                    "type": "boolean"
                },
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/AutotagRuleConditionStringComparison:AutotagRuleConditionStringComparison": {
            "properties": {
                "caseSensitive": {
                    "type": "boolean"
                },
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/AutotagRuleConditionStringConditionKey:AutotagRuleConditionStringConditionKey": {
            "properties": {
                "attribute": {
                    "type": "string"
                },
                "dynamicKey": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "attribute",
                "dynamicKey"
            ]
        },
        "dynatrace:index/AutotagRuleConditionStringKey:AutotagRuleConditionStringKey": {
            "properties": {
                "attribute": {
                    "type": "string"
                },
                "dynamicKey": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "attribute",
                "dynamicKey"
            ]
        },
        "dynatrace:index/AutotagRuleConditionSyntheticEngine:AutotagRuleConditionSyntheticEngine": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/AutotagRuleConditionSyntheticEngineTypeComparison:AutotagRuleConditionSyntheticEngineTypeComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/AutotagRuleConditionTag:AutotagRuleConditionTag": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "$ref": "#/types/dynatrace:index/AutotagRuleConditionTagValue:AutotagRuleConditionTagValue"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/AutotagRuleConditionTagComparison:AutotagRuleConditionTagComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "$ref": "#/types/dynatrace:index/AutotagRuleConditionTagComparisonValue:AutotagRuleConditionTagComparisonValue"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/AutotagRuleConditionTagComparisonValue:AutotagRuleConditionTagComparisonValue": {
            "properties": {
                "context": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "context",
                "key"
            ]
        },
        "dynatrace:index/AutotagRuleConditionTagValue:AutotagRuleConditionTagValue": {
            "properties": {
                "context": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "context",
                "key"
            ]
        },
        "dynatrace:index/AutotagRuleConditionTech:AutotagRuleConditionTech": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "$ref": "#/types/dynatrace:index/AutotagRuleConditionTechValue:AutotagRuleConditionTechValue"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/AutotagRuleConditionTechValue:AutotagRuleConditionTechValue": {
            "properties": {
                "type": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "verbatimType": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "dynatrace:index/AutotagRulesRules:AutotagRulesRules": {
            "properties": {
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/AutotagRulesRulesRule:AutotagRulesRulesRule"
                    }
                }
            },
            "type": "object",
            "required": [
                "rules"
            ]
        },
        "dynatrace:index/AutotagRulesRulesRule:AutotagRulesRulesRule": {
            "properties": {
                "attributeRule": {
                    "$ref": "#/types/dynatrace:index/AutotagRulesRulesRuleAttributeRule:AutotagRulesRulesRuleAttributeRule"
                },
                "enabled": {
                    "type": "boolean"
                },
                "entitySelector": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "valueFormat": {
                    "type": "string"
                },
                "valueNormalization": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "enabled",
                "type",
                "valueNormalization"
            ]
        },
        "dynatrace:index/AutotagRulesRulesRuleAttributeRule:AutotagRulesRulesRuleAttributeRule": {
            "properties": {
                "azureToPgpropagation": {
                    "type": "boolean"
                },
                "azureToServicePropagation": {
                    "type": "boolean"
                },
                "conditions": {
                    "$ref": "#/types/dynatrace:index/AutotagRulesRulesRuleAttributeRuleConditions:AutotagRulesRulesRuleAttributeRuleConditions"
                },
                "entityType": {
                    "type": "string"
                },
                "hostToPgpropagation": {
                    "type": "boolean"
                },
                "pgToHostPropagation": {
                    "type": "boolean"
                },
                "pgToServicePropagation": {
                    "type": "boolean"
                },
                "serviceToHostPropagation": {
                    "type": "boolean"
                },
                "serviceToPgpropagation": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "conditions",
                "entityType"
            ]
        },
        "dynatrace:index/AutotagRulesRulesRuleAttributeRuleConditions:AutotagRulesRulesRuleAttributeRuleConditions": {
            "properties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/AutotagRulesRulesRuleAttributeRuleConditionsCondition:AutotagRulesRulesRuleAttributeRuleConditionsCondition"
                    }
                }
            },
            "type": "object",
            "required": [
                "conditions"
            ]
        },
        "dynatrace:index/AutotagRulesRulesRuleAttributeRuleConditionsCondition:AutotagRulesRulesRuleAttributeRuleConditionsCondition": {
            "properties": {
                "caseSensitive": {
                    "type": "boolean"
                },
                "dynamicKey": {
                    "type": "string"
                },
                "dynamicKeySource": {
                    "type": "string"
                },
                "entityId": {
                    "type": "string"
                },
                "enumValue": {
                    "type": "string"
                },
                "integerValue": {
                    "type": "integer"
                },
                "key": {
                    "type": "string"
                },
                "operator": {
                    "type": "string"
                },
                "stringValue": {
                    "type": "string"
                },
                "tag": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "operator"
            ]
        },
        "dynatrace:index/AutotagV2Rules:AutotagV2Rules": {
            "properties": {
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/AutotagV2RulesRule:AutotagV2RulesRule"
                    }
                }
            },
            "type": "object",
            "required": [
                "rules"
            ]
        },
        "dynatrace:index/AutotagV2RulesRule:AutotagV2RulesRule": {
            "properties": {
                "attributeRule": {
                    "$ref": "#/types/dynatrace:index/AutotagV2RulesRuleAttributeRule:AutotagV2RulesRuleAttributeRule"
                },
                "enabled": {
                    "type": "boolean"
                },
                "entitySelector": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "valueFormat": {
                    "type": "string"
                },
                "valueNormalization": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "enabled",
                "type",
                "valueNormalization"
            ]
        },
        "dynatrace:index/AutotagV2RulesRuleAttributeRule:AutotagV2RulesRuleAttributeRule": {
            "properties": {
                "azureToPgpropagation": {
                    "type": "boolean"
                },
                "azureToServicePropagation": {
                    "type": "boolean"
                },
                "conditions": {
                    "$ref": "#/types/dynatrace:index/AutotagV2RulesRuleAttributeRuleConditions:AutotagV2RulesRuleAttributeRuleConditions"
                },
                "entityType": {
                    "type": "string"
                },
                "hostToPgpropagation": {
                    "type": "boolean"
                },
                "pgToHostPropagation": {
                    "type": "boolean"
                },
                "pgToServicePropagation": {
                    "type": "boolean"
                },
                "serviceToHostPropagation": {
                    "type": "boolean"
                },
                "serviceToPgpropagation": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "conditions",
                "entityType"
            ]
        },
        "dynatrace:index/AutotagV2RulesRuleAttributeRuleConditions:AutotagV2RulesRuleAttributeRuleConditions": {
            "properties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/AutotagV2RulesRuleAttributeRuleConditionsCondition:AutotagV2RulesRuleAttributeRuleConditionsCondition"
                    }
                }
            },
            "type": "object",
            "required": [
                "conditions"
            ]
        },
        "dynatrace:index/AutotagV2RulesRuleAttributeRuleConditionsCondition:AutotagV2RulesRuleAttributeRuleConditionsCondition": {
            "properties": {
                "caseSensitive": {
                    "type": "boolean"
                },
                "dynamicKey": {
                    "type": "string"
                },
                "dynamicKeySource": {
                    "type": "string"
                },
                "entityId": {
                    "type": "string"
                },
                "enumValue": {
                    "type": "string"
                },
                "integerValue": {
                    "type": "integer"
                },
                "key": {
                    "type": "string"
                },
                "operator": {
                    "type": "string"
                },
                "stringValue": {
                    "type": "string"
                },
                "tag": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "operator"
            ]
        },
        "dynatrace:index/AwsAnomaliesEc2CandidateHighCpuDetection:AwsAnomaliesEc2CandidateHighCpuDetection": {
            "properties": {
                "customThresholds": {
                    "$ref": "#/types/dynatrace:index/AwsAnomaliesEc2CandidateHighCpuDetectionCustomThresholds:AwsAnomaliesEc2CandidateHighCpuDetectionCustomThresholds"
                },
                "detectionMode": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/AwsAnomaliesEc2CandidateHighCpuDetectionCustomThresholds:AwsAnomaliesEc2CandidateHighCpuDetectionCustomThresholds": {
            "properties": {
                "cpuUsage": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "cpuUsage"
            ]
        },
        "dynatrace:index/AwsAnomaliesElbHighConnectionErrorsDetection:AwsAnomaliesElbHighConnectionErrorsDetection": {
            "properties": {
                "customThresholds": {
                    "$ref": "#/types/dynatrace:index/AwsAnomaliesElbHighConnectionErrorsDetectionCustomThresholds:AwsAnomaliesElbHighConnectionErrorsDetectionCustomThresholds"
                },
                "detectionMode": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/AwsAnomaliesElbHighConnectionErrorsDetectionCustomThresholds:AwsAnomaliesElbHighConnectionErrorsDetectionCustomThresholds": {
            "properties": {
                "connectionErrorsPerMinute": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "connectionErrorsPerMinute"
            ]
        },
        "dynatrace:index/AwsAnomaliesLambdaHighErrorRateDetection:AwsAnomaliesLambdaHighErrorRateDetection": {
            "properties": {
                "customThresholds": {
                    "$ref": "#/types/dynatrace:index/AwsAnomaliesLambdaHighErrorRateDetectionCustomThresholds:AwsAnomaliesLambdaHighErrorRateDetectionCustomThresholds"
                },
                "detectionMode": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/AwsAnomaliesLambdaHighErrorRateDetectionCustomThresholds:AwsAnomaliesLambdaHighErrorRateDetectionCustomThresholds": {
            "properties": {
                "failedInvocationsRate": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "failedInvocationsRate"
            ]
        },
        "dynatrace:index/AwsAnomaliesRdsHighCpuDetection:AwsAnomaliesRdsHighCpuDetection": {
            "properties": {
                "customThresholds": {
                    "$ref": "#/types/dynatrace:index/AwsAnomaliesRdsHighCpuDetectionCustomThresholds:AwsAnomaliesRdsHighCpuDetectionCustomThresholds"
                },
                "detectionMode": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/AwsAnomaliesRdsHighCpuDetectionCustomThresholds:AwsAnomaliesRdsHighCpuDetectionCustomThresholds": {
            "properties": {
                "cpuUsage": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "cpuUsage"
            ]
        },
        "dynatrace:index/AwsAnomaliesRdsHighMemoryDetection:AwsAnomaliesRdsHighMemoryDetection": {
            "properties": {
                "customThresholds": {
                    "$ref": "#/types/dynatrace:index/AwsAnomaliesRdsHighMemoryDetectionCustomThresholds:AwsAnomaliesRdsHighMemoryDetectionCustomThresholds"
                },
                "detectionMode": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/AwsAnomaliesRdsHighMemoryDetectionCustomThresholds:AwsAnomaliesRdsHighMemoryDetectionCustomThresholds": {
            "properties": {
                "freeMemory": {
                    "type": "number"
                },
                "swapUsage": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "freeMemory",
                "swapUsage"
            ]
        },
        "dynatrace:index/AwsAnomaliesRdsHighWriteReadLatencyDetection:AwsAnomaliesRdsHighWriteReadLatencyDetection": {
            "properties": {
                "customThresholds": {
                    "$ref": "#/types/dynatrace:index/AwsAnomaliesRdsHighWriteReadLatencyDetectionCustomThresholds:AwsAnomaliesRdsHighWriteReadLatencyDetectionCustomThresholds"
                },
                "detectionMode": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/AwsAnomaliesRdsHighWriteReadLatencyDetectionCustomThresholds:AwsAnomaliesRdsHighWriteReadLatencyDetectionCustomThresholds": {
            "properties": {
                "readWriteLatency": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "readWriteLatency"
            ]
        },
        "dynatrace:index/AwsAnomaliesRdsLowStorageDetection:AwsAnomaliesRdsLowStorageDetection": {
            "properties": {
                "customThresholds": {
                    "$ref": "#/types/dynatrace:index/AwsAnomaliesRdsLowStorageDetectionCustomThresholds:AwsAnomaliesRdsLowStorageDetectionCustomThresholds"
                },
                "detectionMode": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/AwsAnomaliesRdsLowStorageDetectionCustomThresholds:AwsAnomaliesRdsLowStorageDetectionCustomThresholds": {
            "properties": {
                "freeStoragePercentage": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "freeStoragePercentage"
            ]
        },
        "dynatrace:index/AwsAnomaliesRdsRestartsSequenceDetection:AwsAnomaliesRdsRestartsSequenceDetection": {
            "properties": {
                "customThresholds": {
                    "$ref": "#/types/dynatrace:index/AwsAnomaliesRdsRestartsSequenceDetectionCustomThresholds:AwsAnomaliesRdsRestartsSequenceDetectionCustomThresholds"
                },
                "detectionMode": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/AwsAnomaliesRdsRestartsSequenceDetectionCustomThresholds:AwsAnomaliesRdsRestartsSequenceDetectionCustomThresholds": {
            "properties": {
                "restartsPerMinute": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "restartsPerMinute"
            ]
        },
        "dynatrace:index/AwsCredentialsAuthenticationData:AwsCredentialsAuthenticationData": {
            "properties": {
                "accessKey": {
                    "type": "string"
                },
                "accountId": {
                    "type": "string"
                },
                "externalId": {
                    "type": "string"
                },
                "iamRole": {
                    "type": "string"
                },
                "secretKey": {
                    "type": "string",
                    "secret": true
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "externalId"
                    ]
                }
            }
        },
        "dynatrace:index/AwsCredentialsSupportingServicesToMonitor:AwsCredentialsSupportingServicesToMonitor": {
            "properties": {
                "monitoredMetrics": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/AwsCredentialsSupportingServicesToMonitorMonitoredMetric:AwsCredentialsSupportingServicesToMonitorMonitoredMetric"
                    }
                },
                "name": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "dynatrace:index/AwsCredentialsSupportingServicesToMonitorMonitoredMetric:AwsCredentialsSupportingServicesToMonitorMonitoredMetric": {
            "properties": {
                "dimensions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                },
                "statistic": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "dynatrace:index/AwsCredentialsTagsToMonitor:AwsCredentialsTagsToMonitor": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "dynatrace:index/AwsServiceMetric:AwsServiceMetric": {
            "properties": {
                "dimensions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                },
                "statistic": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "dynatrace:index/AzureCredentialsMonitorOnlyExcludingTagPair:AzureCredentialsMonitorOnlyExcludingTagPair": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "dynatrace:index/AzureCredentialsMonitorOnlyTagPair:AzureCredentialsMonitorOnlyTagPair": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "dynatrace:index/AzureCredentialsSupportingService:AzureCredentialsSupportingService": {
            "properties": {
                "monitoredMetrics": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/AzureCredentialsSupportingServiceMonitoredMetric:AzureCredentialsSupportingServiceMonitoredMetric"
                    }
                },
                "name": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "dynatrace:index/AzureCredentialsSupportingServiceMonitoredMetric:AzureCredentialsSupportingServiceMonitoredMetric": {
            "properties": {
                "dimensions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "dynatrace:index/AzureServiceMetric:AzureServiceMetric": {
            "properties": {
                "dimensions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "dynatrace:index/BrowserMonitorAnomalyDetection:BrowserMonitorAnomalyDetection": {
            "properties": {
                "loadingTimeThresholds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/BrowserMonitorAnomalyDetectionLoadingTimeThreshold:BrowserMonitorAnomalyDetectionLoadingTimeThreshold"
                    }
                },
                "outageHandlings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/BrowserMonitorAnomalyDetectionOutageHandling:BrowserMonitorAnomalyDetectionOutageHandling"
                    }
                }
            },
            "type": "object"
        },
        "dynatrace:index/BrowserMonitorAnomalyDetectionLoadingTimeThreshold:BrowserMonitorAnomalyDetectionLoadingTimeThreshold": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "thresholds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/BrowserMonitorAnomalyDetectionLoadingTimeThresholdThreshold:BrowserMonitorAnomalyDetectionLoadingTimeThresholdThreshold"
                    }
                }
            },
            "type": "object"
        },
        "dynatrace:index/BrowserMonitorAnomalyDetectionLoadingTimeThresholdThreshold:BrowserMonitorAnomalyDetectionLoadingTimeThresholdThreshold": {
            "properties": {
                "thresholds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/BrowserMonitorAnomalyDetectionLoadingTimeThresholdThresholdThreshold:BrowserMonitorAnomalyDetectionLoadingTimeThresholdThresholdThreshold"
                    }
                }
            },
            "type": "object",
            "required": [
                "thresholds"
            ]
        },
        "dynatrace:index/BrowserMonitorAnomalyDetectionLoadingTimeThresholdThresholdThreshold:BrowserMonitorAnomalyDetectionLoadingTimeThresholdThresholdThreshold": {
            "properties": {
                "eventIndex": {
                    "type": "integer"
                },
                "requestIndex": {
                    "type": "integer"
                },
                "type": {
                    "type": "string"
                },
                "valueMs": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "valueMs"
            ]
        },
        "dynatrace:index/BrowserMonitorAnomalyDetectionOutageHandling:BrowserMonitorAnomalyDetectionOutageHandling": {
            "properties": {
                "globalOutage": {
                    "type": "boolean"
                },
                "globalOutagePolicies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/BrowserMonitorAnomalyDetectionOutageHandlingGlobalOutagePolicy:BrowserMonitorAnomalyDetectionOutageHandlingGlobalOutagePolicy"
                    }
                },
                "localOutage": {
                    "type": "boolean"
                },
                "localOutagePolicies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/BrowserMonitorAnomalyDetectionOutageHandlingLocalOutagePolicy:BrowserMonitorAnomalyDetectionOutageHandlingLocalOutagePolicy"
                    }
                },
                "retryOnError": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "dynatrace:index/BrowserMonitorAnomalyDetectionOutageHandlingGlobalOutagePolicy:BrowserMonitorAnomalyDetectionOutageHandlingGlobalOutagePolicy": {
            "properties": {
                "consecutiveRuns": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "consecutiveRuns"
            ]
        },
        "dynatrace:index/BrowserMonitorAnomalyDetectionOutageHandlingLocalOutagePolicy:BrowserMonitorAnomalyDetectionOutageHandlingLocalOutagePolicy": {
            "properties": {
                "affectedLocations": {
                    "type": "integer"
                },
                "consecutiveRuns": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "affectedLocations",
                "consecutiveRuns"
            ]
        },
        "dynatrace:index/BrowserMonitorKeyPerformanceMetrics:BrowserMonitorKeyPerformanceMetrics": {
            "properties": {
                "loadActionKpm": {
                    "type": "string"
                },
                "xhrActionKpm": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "loadActionKpm",
                "xhrActionKpm"
            ]
        },
        "dynatrace:index/BrowserMonitorPerformanceThresholds:BrowserMonitorPerformanceThresholds": {
            "properties": {
                "thresholds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/BrowserMonitorPerformanceThresholdsThreshold:BrowserMonitorPerformanceThresholdsThreshold"
                    }
                }
            },
            "type": "object",
            "required": [
                "thresholds"
            ]
        },
        "dynatrace:index/BrowserMonitorPerformanceThresholdsThreshold:BrowserMonitorPerformanceThresholdsThreshold": {
            "properties": {
                "event": {
                    "type": "string"
                },
                "threshold": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "event",
                "threshold"
            ]
        },
        "dynatrace:index/BrowserMonitorScript:BrowserMonitorScript": {
            "properties": {
                "configuration": {
                    "$ref": "#/types/dynatrace:index/BrowserMonitorScriptConfiguration:BrowserMonitorScriptConfiguration"
                },
                "events": {
                    "$ref": "#/types/dynatrace:index/BrowserMonitorScriptEvents:BrowserMonitorScriptEvents"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "dynatrace:index/BrowserMonitorScriptConfiguration:BrowserMonitorScriptConfiguration": {
            "properties": {
                "bandwidth": {
                    "$ref": "#/types/dynatrace:index/BrowserMonitorScriptConfigurationBandwidth:BrowserMonitorScriptConfigurationBandwidth"
                },
                "blocks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "bypassCsp": {
                    "type": "boolean"
                },
                "cookies": {
                    "$ref": "#/types/dynatrace:index/BrowserMonitorScriptConfigurationCookies:BrowserMonitorScriptConfigurationCookies"
                },
                "device": {
                    "$ref": "#/types/dynatrace:index/BrowserMonitorScriptConfigurationDevice:BrowserMonitorScriptConfigurationDevice"
                },
                "disableWebSecurity": {
                    "type": "boolean"
                },
                "headers": {
                    "$ref": "#/types/dynatrace:index/BrowserMonitorScriptConfigurationHeaders:BrowserMonitorScriptConfigurationHeaders"
                },
                "ignoredErrorCodes": {
                    "$ref": "#/types/dynatrace:index/BrowserMonitorScriptConfigurationIgnoredErrorCodes:BrowserMonitorScriptConfigurationIgnoredErrorCodes"
                },
                "javascriptSetttings": {
                    "$ref": "#/types/dynatrace:index/BrowserMonitorScriptConfigurationJavascriptSetttings:BrowserMonitorScriptConfigurationJavascriptSetttings"
                },
                "monitorFrames": {
                    "type": "boolean"
                },
                "userAgent": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "dynatrace:index/BrowserMonitorScriptConfigurationBandwidth:BrowserMonitorScriptConfigurationBandwidth": {
            "properties": {
                "download": {
                    "type": "integer"
                },
                "latency": {
                    "type": "integer"
                },
                "networkType": {
                    "type": "string"
                },
                "upload": {
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "dynatrace:index/BrowserMonitorScriptConfigurationCookies:BrowserMonitorScriptConfigurationCookies": {
            "properties": {
                "cookies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/BrowserMonitorScriptConfigurationCookiesCookie:BrowserMonitorScriptConfigurationCookiesCookie"
                    }
                }
            },
            "type": "object",
            "required": [
                "cookies"
            ]
        },
        "dynatrace:index/BrowserMonitorScriptConfigurationCookiesCookie:BrowserMonitorScriptConfigurationCookiesCookie": {
            "properties": {
                "domain": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "path": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "domain",
                "name",
                "value"
            ]
        },
        "dynatrace:index/BrowserMonitorScriptConfigurationDevice:BrowserMonitorScriptConfigurationDevice": {
            "properties": {
                "height": {
                    "type": "integer"
                },
                "mobile": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "orientation": {
                    "type": "string"
                },
                "scaleFactor": {
                    "type": "number"
                },
                "touchEnabled": {
                    "type": "boolean"
                },
                "width": {
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "dynatrace:index/BrowserMonitorScriptConfigurationHeaders:BrowserMonitorScriptConfigurationHeaders": {
            "properties": {
                "headers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/BrowserMonitorScriptConfigurationHeadersHeader:BrowserMonitorScriptConfigurationHeadersHeader"
                    }
                },
                "restrictions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "headers"
            ]
        },
        "dynatrace:index/BrowserMonitorScriptConfigurationHeadersHeader:BrowserMonitorScriptConfigurationHeadersHeader": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ]
        },
        "dynatrace:index/BrowserMonitorScriptConfigurationIgnoredErrorCodes:BrowserMonitorScriptConfigurationIgnoredErrorCodes": {
            "properties": {
                "matchingDocumentRequests": {
                    "type": "string"
                },
                "statusCodes": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "statusCodes"
            ]
        },
        "dynatrace:index/BrowserMonitorScriptConfigurationJavascriptSetttings:BrowserMonitorScriptConfigurationJavascriptSetttings": {
            "properties": {
                "customProperties": {
                    "type": "string"
                },
                "timeoutSettings": {
                    "$ref": "#/types/dynatrace:index/BrowserMonitorScriptConfigurationJavascriptSetttingsTimeoutSettings:BrowserMonitorScriptConfigurationJavascriptSetttingsTimeoutSettings"
                },
                "visuallyCompleteOptions": {
                    "$ref": "#/types/dynatrace:index/BrowserMonitorScriptConfigurationJavascriptSetttingsVisuallyCompleteOptions:BrowserMonitorScriptConfigurationJavascriptSetttingsVisuallyCompleteOptions"
                }
            },
            "type": "object"
        },
        "dynatrace:index/BrowserMonitorScriptConfigurationJavascriptSetttingsTimeoutSettings:BrowserMonitorScriptConfigurationJavascriptSetttingsTimeoutSettings": {
            "properties": {
                "actionLimit": {
                    "type": "integer"
                },
                "totalTimeout": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "actionLimit",
                "totalTimeout"
            ]
        },
        "dynatrace:index/BrowserMonitorScriptConfigurationJavascriptSetttingsVisuallyCompleteOptions:BrowserMonitorScriptConfigurationJavascriptSetttingsVisuallyCompleteOptions": {
            "properties": {
                "excludedElements": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "excludedUrls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "imageSizeThreshold": {
                    "type": "integer"
                },
                "inactivityTimeout": {
                    "type": "integer"
                },
                "mutationTimeout": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "imageSizeThreshold",
                "inactivityTimeout",
                "mutationTimeout"
            ]
        },
        "dynatrace:index/BrowserMonitorScriptEvents:BrowserMonitorScriptEvents": {
            "properties": {
                "events": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/BrowserMonitorScriptEventsEvent:BrowserMonitorScriptEventsEvent"
                    }
                }
            },
            "type": "object"
        },
        "dynatrace:index/BrowserMonitorScriptEventsEvent:BrowserMonitorScriptEventsEvent": {
            "properties": {
                "click": {
                    "$ref": "#/types/dynatrace:index/BrowserMonitorScriptEventsEventClick:BrowserMonitorScriptEventsEventClick"
                },
                "cookie": {
                    "$ref": "#/types/dynatrace:index/BrowserMonitorScriptEventsEventCookie:BrowserMonitorScriptEventsEventCookie"
                },
                "description": {
                    "type": "string"
                },
                "javascript": {
                    "$ref": "#/types/dynatrace:index/BrowserMonitorScriptEventsEventJavascript:BrowserMonitorScriptEventsEventJavascript"
                },
                "keystrokes": {
                    "$ref": "#/types/dynatrace:index/BrowserMonitorScriptEventsEventKeystrokes:BrowserMonitorScriptEventsEventKeystrokes"
                },
                "navigate": {
                    "$ref": "#/types/dynatrace:index/BrowserMonitorScriptEventsEventNavigate:BrowserMonitorScriptEventsEventNavigate"
                },
                "select": {
                    "$ref": "#/types/dynatrace:index/BrowserMonitorScriptEventsEventSelect:BrowserMonitorScriptEventsEventSelect"
                },
                "tap": {
                    "$ref": "#/types/dynatrace:index/BrowserMonitorScriptEventsEventTap:BrowserMonitorScriptEventsEventTap"
                }
            },
            "type": "object",
            "required": [
                "description"
            ]
        },
        "dynatrace:index/BrowserMonitorScriptEventsEventClick:BrowserMonitorScriptEventsEventClick": {
            "properties": {
                "button": {
                    "type": "integer"
                },
                "target": {
                    "$ref": "#/types/dynatrace:index/BrowserMonitorScriptEventsEventClickTarget:BrowserMonitorScriptEventsEventClickTarget"
                },
                "validate": {
                    "$ref": "#/types/dynatrace:index/BrowserMonitorScriptEventsEventClickValidate:BrowserMonitorScriptEventsEventClickValidate"
                },
                "wait": {
                    "$ref": "#/types/dynatrace:index/BrowserMonitorScriptEventsEventClickWait:BrowserMonitorScriptEventsEventClickWait"
                }
            },
            "type": "object",
            "required": [
                "button"
            ]
        },
        "dynatrace:index/BrowserMonitorScriptEventsEventClickTarget:BrowserMonitorScriptEventsEventClickTarget": {
            "properties": {
                "locators": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/BrowserMonitorScriptEventsEventClickTargetLocator:BrowserMonitorScriptEventsEventClickTargetLocator"
                    }
                },
                "window": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "dynatrace:index/BrowserMonitorScriptEventsEventClickTargetLocator:BrowserMonitorScriptEventsEventClickTargetLocator": {
            "properties": {
                "locators": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/BrowserMonitorScriptEventsEventClickTargetLocatorLocator:BrowserMonitorScriptEventsEventClickTargetLocatorLocator"
                    }
                }
            },
            "type": "object",
            "required": [
                "locators"
            ]
        },
        "dynatrace:index/BrowserMonitorScriptEventsEventClickTargetLocatorLocator:BrowserMonitorScriptEventsEventClickTargetLocatorLocator": {
            "properties": {
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "type",
                "value"
            ]
        },
        "dynatrace:index/BrowserMonitorScriptEventsEventClickValidate:BrowserMonitorScriptEventsEventClickValidate": {
            "properties": {
                "validations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/BrowserMonitorScriptEventsEventClickValidateValidation:BrowserMonitorScriptEventsEventClickValidateValidation"
                    }
                }
            },
            "type": "object",
            "required": [
                "validations"
            ]
        },
        "dynatrace:index/BrowserMonitorScriptEventsEventClickValidateValidation:BrowserMonitorScriptEventsEventClickValidateValidation": {
            "properties": {
                "failIfFound": {
                    "type": "boolean"
                },
                "match": {
                    "type": "string"
                },
                "regex": {
                    "type": "boolean"
                },
                "target": {
                    "$ref": "#/types/dynatrace:index/BrowserMonitorScriptEventsEventClickValidateValidationTarget:BrowserMonitorScriptEventsEventClickValidateValidationTarget"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "dynatrace:index/BrowserMonitorScriptEventsEventClickValidateValidationTarget:BrowserMonitorScriptEventsEventClickValidateValidationTarget": {
            "properties": {
                "locators": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/BrowserMonitorScriptEventsEventClickValidateValidationTargetLocator:BrowserMonitorScriptEventsEventClickValidateValidationTargetLocator"
                    }
                },
                "window": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "dynatrace:index/BrowserMonitorScriptEventsEventClickValidateValidationTargetLocator:BrowserMonitorScriptEventsEventClickValidateValidationTargetLocator": {
            "properties": {
                "locators": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/BrowserMonitorScriptEventsEventClickValidateValidationTargetLocatorLocator:BrowserMonitorScriptEventsEventClickValidateValidationTargetLocatorLocator"
                    }
                }
            },
            "type": "object",
            "required": [
                "locators"
            ]
        },
        "dynatrace:index/BrowserMonitorScriptEventsEventClickValidateValidationTargetLocatorLocator:BrowserMonitorScriptEventsEventClickValidateValidationTargetLocatorLocator": {
            "properties": {
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "type",
                "value"
            ]
        },
        "dynatrace:index/BrowserMonitorScriptEventsEventClickWait:BrowserMonitorScriptEventsEventClickWait": {
            "properties": {
                "milliseconds": {
                    "type": "integer"
                },
                "timeout": {
                    "type": "integer"
                },
                "validation": {
                    "$ref": "#/types/dynatrace:index/BrowserMonitorScriptEventsEventClickWaitValidation:BrowserMonitorScriptEventsEventClickWaitValidation"
                },
                "waitFor": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "waitFor"
            ]
        },
        "dynatrace:index/BrowserMonitorScriptEventsEventClickWaitValidation:BrowserMonitorScriptEventsEventClickWaitValidation": {
            "properties": {
                "failIfFound": {
                    "type": "boolean"
                },
                "match": {
                    "type": "string"
                },
                "regex": {
                    "type": "boolean"
                },
                "target": {
                    "$ref": "#/types/dynatrace:index/BrowserMonitorScriptEventsEventClickWaitValidationTarget:BrowserMonitorScriptEventsEventClickWaitValidationTarget"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "dynatrace:index/BrowserMonitorScriptEventsEventClickWaitValidationTarget:BrowserMonitorScriptEventsEventClickWaitValidationTarget": {
            "properties": {
                "locators": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/BrowserMonitorScriptEventsEventClickWaitValidationTargetLocator:BrowserMonitorScriptEventsEventClickWaitValidationTargetLocator"
                    }
                },
                "window": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "dynatrace:index/BrowserMonitorScriptEventsEventClickWaitValidationTargetLocator:BrowserMonitorScriptEventsEventClickWaitValidationTargetLocator": {
            "properties": {
                "locators": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/BrowserMonitorScriptEventsEventClickWaitValidationTargetLocatorLocator:BrowserMonitorScriptEventsEventClickWaitValidationTargetLocatorLocator"
                    }
                }
            },
            "type": "object",
            "required": [
                "locators"
            ]
        },
        "dynatrace:index/BrowserMonitorScriptEventsEventClickWaitValidationTargetLocatorLocator:BrowserMonitorScriptEventsEventClickWaitValidationTargetLocatorLocator": {
            "properties": {
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "type",
                "value"
            ]
        },
        "dynatrace:index/BrowserMonitorScriptEventsEventCookie:BrowserMonitorScriptEventsEventCookie": {
            "properties": {
                "cookies": {
                    "$ref": "#/types/dynatrace:index/BrowserMonitorScriptEventsEventCookieCookies:BrowserMonitorScriptEventsEventCookieCookies"
                }
            },
            "type": "object",
            "required": [
                "cookies"
            ]
        },
        "dynatrace:index/BrowserMonitorScriptEventsEventCookieCookies:BrowserMonitorScriptEventsEventCookieCookies": {
            "properties": {
                "cookies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/BrowserMonitorScriptEventsEventCookieCookiesCookie:BrowserMonitorScriptEventsEventCookieCookiesCookie"
                    }
                }
            },
            "type": "object",
            "required": [
                "cookies"
            ]
        },
        "dynatrace:index/BrowserMonitorScriptEventsEventCookieCookiesCookie:BrowserMonitorScriptEventsEventCookieCookiesCookie": {
            "properties": {
                "domain": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "path": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "domain",
                "name",
                "value"
            ]
        },
        "dynatrace:index/BrowserMonitorScriptEventsEventJavascript:BrowserMonitorScriptEventsEventJavascript": {
            "properties": {
                "code": {
                    "type": "string"
                },
                "target": {
                    "$ref": "#/types/dynatrace:index/BrowserMonitorScriptEventsEventJavascriptTarget:BrowserMonitorScriptEventsEventJavascriptTarget"
                },
                "wait": {
                    "$ref": "#/types/dynatrace:index/BrowserMonitorScriptEventsEventJavascriptWait:BrowserMonitorScriptEventsEventJavascriptWait"
                }
            },
            "type": "object",
            "required": [
                "code"
            ]
        },
        "dynatrace:index/BrowserMonitorScriptEventsEventJavascriptTarget:BrowserMonitorScriptEventsEventJavascriptTarget": {
            "properties": {
                "locators": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/BrowserMonitorScriptEventsEventJavascriptTargetLocator:BrowserMonitorScriptEventsEventJavascriptTargetLocator"
                    }
                },
                "window": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "dynatrace:index/BrowserMonitorScriptEventsEventJavascriptTargetLocator:BrowserMonitorScriptEventsEventJavascriptTargetLocator": {
            "properties": {
                "locators": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/BrowserMonitorScriptEventsEventJavascriptTargetLocatorLocator:BrowserMonitorScriptEventsEventJavascriptTargetLocatorLocator"
                    }
                }
            },
            "type": "object",
            "required": [
                "locators"
            ]
        },
        "dynatrace:index/BrowserMonitorScriptEventsEventJavascriptTargetLocatorLocator:BrowserMonitorScriptEventsEventJavascriptTargetLocatorLocator": {
            "properties": {
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "type",
                "value"
            ]
        },
        "dynatrace:index/BrowserMonitorScriptEventsEventJavascriptWait:BrowserMonitorScriptEventsEventJavascriptWait": {
            "properties": {
                "milliseconds": {
                    "type": "integer"
                },
                "timeout": {
                    "type": "integer"
                },
                "validation": {
                    "$ref": "#/types/dynatrace:index/BrowserMonitorScriptEventsEventJavascriptWaitValidation:BrowserMonitorScriptEventsEventJavascriptWaitValidation"
                },
                "waitFor": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "waitFor"
            ]
        },
        "dynatrace:index/BrowserMonitorScriptEventsEventJavascriptWaitValidation:BrowserMonitorScriptEventsEventJavascriptWaitValidation": {
            "properties": {
                "failIfFound": {
                    "type": "boolean"
                },
                "match": {
                    "type": "string"
                },
                "regex": {
                    "type": "boolean"
                },
                "target": {
                    "$ref": "#/types/dynatrace:index/BrowserMonitorScriptEventsEventJavascriptWaitValidationTarget:BrowserMonitorScriptEventsEventJavascriptWaitValidationTarget"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "dynatrace:index/BrowserMonitorScriptEventsEventJavascriptWaitValidationTarget:BrowserMonitorScriptEventsEventJavascriptWaitValidationTarget": {
            "properties": {
                "locators": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/BrowserMonitorScriptEventsEventJavascriptWaitValidationTargetLocator:BrowserMonitorScriptEventsEventJavascriptWaitValidationTargetLocator"
                    }
                },
                "window": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "dynatrace:index/BrowserMonitorScriptEventsEventJavascriptWaitValidationTargetLocator:BrowserMonitorScriptEventsEventJavascriptWaitValidationTargetLocator": {
            "properties": {
                "locators": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/BrowserMonitorScriptEventsEventJavascriptWaitValidationTargetLocatorLocator:BrowserMonitorScriptEventsEventJavascriptWaitValidationTargetLocatorLocator"
                    }
                }
            },
            "type": "object",
            "required": [
                "locators"
            ]
        },
        "dynatrace:index/BrowserMonitorScriptEventsEventJavascriptWaitValidationTargetLocatorLocator:BrowserMonitorScriptEventsEventJavascriptWaitValidationTargetLocatorLocator": {
            "properties": {
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "type",
                "value"
            ]
        },
        "dynatrace:index/BrowserMonitorScriptEventsEventKeystrokes:BrowserMonitorScriptEventsEventKeystrokes": {
            "properties": {
                "credential": {
                    "$ref": "#/types/dynatrace:index/BrowserMonitorScriptEventsEventKeystrokesCredential:BrowserMonitorScriptEventsEventKeystrokesCredential"
                },
                "masked": {
                    "type": "boolean"
                },
                "simulateBlurEvent": {
                    "type": "boolean"
                },
                "simulateReturnKey": {
                    "type": "boolean"
                },
                "target": {
                    "$ref": "#/types/dynatrace:index/BrowserMonitorScriptEventsEventKeystrokesTarget:BrowserMonitorScriptEventsEventKeystrokesTarget"
                },
                "text": {
                    "type": "string"
                },
                "validate": {
                    "$ref": "#/types/dynatrace:index/BrowserMonitorScriptEventsEventKeystrokesValidate:BrowserMonitorScriptEventsEventKeystrokesValidate"
                },
                "wait": {
                    "$ref": "#/types/dynatrace:index/BrowserMonitorScriptEventsEventKeystrokesWait:BrowserMonitorScriptEventsEventKeystrokesWait"
                }
            },
            "type": "object"
        },
        "dynatrace:index/BrowserMonitorScriptEventsEventKeystrokesCredential:BrowserMonitorScriptEventsEventKeystrokesCredential": {
            "properties": {
                "field": {
                    "type": "string"
                },
                "vaultId": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "field",
                "vaultId"
            ]
        },
        "dynatrace:index/BrowserMonitorScriptEventsEventKeystrokesTarget:BrowserMonitorScriptEventsEventKeystrokesTarget": {
            "properties": {
                "locators": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/BrowserMonitorScriptEventsEventKeystrokesTargetLocator:BrowserMonitorScriptEventsEventKeystrokesTargetLocator"
                    }
                },
                "window": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "dynatrace:index/BrowserMonitorScriptEventsEventKeystrokesTargetLocator:BrowserMonitorScriptEventsEventKeystrokesTargetLocator": {
            "properties": {
                "locators": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/BrowserMonitorScriptEventsEventKeystrokesTargetLocatorLocator:BrowserMonitorScriptEventsEventKeystrokesTargetLocatorLocator"
                    }
                }
            },
            "type": "object",
            "required": [
                "locators"
            ]
        },
        "dynatrace:index/BrowserMonitorScriptEventsEventKeystrokesTargetLocatorLocator:BrowserMonitorScriptEventsEventKeystrokesTargetLocatorLocator": {
            "properties": {
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "type",
                "value"
            ]
        },
        "dynatrace:index/BrowserMonitorScriptEventsEventKeystrokesValidate:BrowserMonitorScriptEventsEventKeystrokesValidate": {
            "properties": {
                "validations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/BrowserMonitorScriptEventsEventKeystrokesValidateValidation:BrowserMonitorScriptEventsEventKeystrokesValidateValidation"
                    }
                }
            },
            "type": "object",
            "required": [
                "validations"
            ]
        },
        "dynatrace:index/BrowserMonitorScriptEventsEventKeystrokesValidateValidation:BrowserMonitorScriptEventsEventKeystrokesValidateValidation": {
            "properties": {
                "failIfFound": {
                    "type": "boolean"
                },
                "match": {
                    "type": "string"
                },
                "regex": {
                    "type": "boolean"
                },
                "target": {
                    "$ref": "#/types/dynatrace:index/BrowserMonitorScriptEventsEventKeystrokesValidateValidationTarget:BrowserMonitorScriptEventsEventKeystrokesValidateValidationTarget"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "dynatrace:index/BrowserMonitorScriptEventsEventKeystrokesValidateValidationTarget:BrowserMonitorScriptEventsEventKeystrokesValidateValidationTarget": {
            "properties": {
                "locators": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/BrowserMonitorScriptEventsEventKeystrokesValidateValidationTargetLocator:BrowserMonitorScriptEventsEventKeystrokesValidateValidationTargetLocator"
                    }
                },
                "window": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "dynatrace:index/BrowserMonitorScriptEventsEventKeystrokesValidateValidationTargetLocator:BrowserMonitorScriptEventsEventKeystrokesValidateValidationTargetLocator": {
            "properties": {
                "locators": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/BrowserMonitorScriptEventsEventKeystrokesValidateValidationTargetLocatorLocator:BrowserMonitorScriptEventsEventKeystrokesValidateValidationTargetLocatorLocator"
                    }
                }
            },
            "type": "object",
            "required": [
                "locators"
            ]
        },
        "dynatrace:index/BrowserMonitorScriptEventsEventKeystrokesValidateValidationTargetLocatorLocator:BrowserMonitorScriptEventsEventKeystrokesValidateValidationTargetLocatorLocator": {
            "properties": {
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "type",
                "value"
            ]
        },
        "dynatrace:index/BrowserMonitorScriptEventsEventKeystrokesWait:BrowserMonitorScriptEventsEventKeystrokesWait": {
            "properties": {
                "milliseconds": {
                    "type": "integer"
                },
                "timeout": {
                    "type": "integer"
                },
                "validation": {
                    "$ref": "#/types/dynatrace:index/BrowserMonitorScriptEventsEventKeystrokesWaitValidation:BrowserMonitorScriptEventsEventKeystrokesWaitValidation"
                },
                "waitFor": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "waitFor"
            ]
        },
        "dynatrace:index/BrowserMonitorScriptEventsEventKeystrokesWaitValidation:BrowserMonitorScriptEventsEventKeystrokesWaitValidation": {
            "properties": {
                "failIfFound": {
                    "type": "boolean"
                },
                "match": {
                    "type": "string"
                },
                "regex": {
                    "type": "boolean"
                },
                "target": {
                    "$ref": "#/types/dynatrace:index/BrowserMonitorScriptEventsEventKeystrokesWaitValidationTarget:BrowserMonitorScriptEventsEventKeystrokesWaitValidationTarget"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "dynatrace:index/BrowserMonitorScriptEventsEventKeystrokesWaitValidationTarget:BrowserMonitorScriptEventsEventKeystrokesWaitValidationTarget": {
            "properties": {
                "locators": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/BrowserMonitorScriptEventsEventKeystrokesWaitValidationTargetLocator:BrowserMonitorScriptEventsEventKeystrokesWaitValidationTargetLocator"
                    }
                },
                "window": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "dynatrace:index/BrowserMonitorScriptEventsEventKeystrokesWaitValidationTargetLocator:BrowserMonitorScriptEventsEventKeystrokesWaitValidationTargetLocator": {
            "properties": {
                "locators": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/BrowserMonitorScriptEventsEventKeystrokesWaitValidationTargetLocatorLocator:BrowserMonitorScriptEventsEventKeystrokesWaitValidationTargetLocatorLocator"
                    }
                }
            },
            "type": "object",
            "required": [
                "locators"
            ]
        },
        "dynatrace:index/BrowserMonitorScriptEventsEventKeystrokesWaitValidationTargetLocatorLocator:BrowserMonitorScriptEventsEventKeystrokesWaitValidationTargetLocatorLocator": {
            "properties": {
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "type",
                "value"
            ]
        },
        "dynatrace:index/BrowserMonitorScriptEventsEventNavigate:BrowserMonitorScriptEventsEventNavigate": {
            "properties": {
                "authentication": {
                    "$ref": "#/types/dynatrace:index/BrowserMonitorScriptEventsEventNavigateAuthentication:BrowserMonitorScriptEventsEventNavigateAuthentication"
                },
                "target": {
                    "$ref": "#/types/dynatrace:index/BrowserMonitorScriptEventsEventNavigateTarget:BrowserMonitorScriptEventsEventNavigateTarget"
                },
                "url": {
                    "type": "string"
                },
                "validate": {
                    "$ref": "#/types/dynatrace:index/BrowserMonitorScriptEventsEventNavigateValidate:BrowserMonitorScriptEventsEventNavigateValidate"
                },
                "wait": {
                    "$ref": "#/types/dynatrace:index/BrowserMonitorScriptEventsEventNavigateWait:BrowserMonitorScriptEventsEventNavigateWait"
                }
            },
            "type": "object",
            "required": [
                "url"
            ]
        },
        "dynatrace:index/BrowserMonitorScriptEventsEventNavigateAuthentication:BrowserMonitorScriptEventsEventNavigateAuthentication": {
            "properties": {
                "creds": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "creds",
                "type"
            ]
        },
        "dynatrace:index/BrowserMonitorScriptEventsEventNavigateTarget:BrowserMonitorScriptEventsEventNavigateTarget": {
            "properties": {
                "locators": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/BrowserMonitorScriptEventsEventNavigateTargetLocator:BrowserMonitorScriptEventsEventNavigateTargetLocator"
                    }
                },
                "window": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "dynatrace:index/BrowserMonitorScriptEventsEventNavigateTargetLocator:BrowserMonitorScriptEventsEventNavigateTargetLocator": {
            "properties": {
                "locators": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/BrowserMonitorScriptEventsEventNavigateTargetLocatorLocator:BrowserMonitorScriptEventsEventNavigateTargetLocatorLocator"
                    }
                }
            },
            "type": "object",
            "required": [
                "locators"
            ]
        },
        "dynatrace:index/BrowserMonitorScriptEventsEventNavigateTargetLocatorLocator:BrowserMonitorScriptEventsEventNavigateTargetLocatorLocator": {
            "properties": {
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "type",
                "value"
            ]
        },
        "dynatrace:index/BrowserMonitorScriptEventsEventNavigateValidate:BrowserMonitorScriptEventsEventNavigateValidate": {
            "properties": {
                "validations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/BrowserMonitorScriptEventsEventNavigateValidateValidation:BrowserMonitorScriptEventsEventNavigateValidateValidation"
                    }
                }
            },
            "type": "object",
            "required": [
                "validations"
            ]
        },
        "dynatrace:index/BrowserMonitorScriptEventsEventNavigateValidateValidation:BrowserMonitorScriptEventsEventNavigateValidateValidation": {
            "properties": {
                "failIfFound": {
                    "type": "boolean"
                },
                "match": {
                    "type": "string"
                },
                "regex": {
                    "type": "boolean"
                },
                "target": {
                    "$ref": "#/types/dynatrace:index/BrowserMonitorScriptEventsEventNavigateValidateValidationTarget:BrowserMonitorScriptEventsEventNavigateValidateValidationTarget"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "dynatrace:index/BrowserMonitorScriptEventsEventNavigateValidateValidationTarget:BrowserMonitorScriptEventsEventNavigateValidateValidationTarget": {
            "properties": {
                "locators": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/BrowserMonitorScriptEventsEventNavigateValidateValidationTargetLocator:BrowserMonitorScriptEventsEventNavigateValidateValidationTargetLocator"
                    }
                },
                "window": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "dynatrace:index/BrowserMonitorScriptEventsEventNavigateValidateValidationTargetLocator:BrowserMonitorScriptEventsEventNavigateValidateValidationTargetLocator": {
            "properties": {
                "locators": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/BrowserMonitorScriptEventsEventNavigateValidateValidationTargetLocatorLocator:BrowserMonitorScriptEventsEventNavigateValidateValidationTargetLocatorLocator"
                    }
                }
            },
            "type": "object",
            "required": [
                "locators"
            ]
        },
        "dynatrace:index/BrowserMonitorScriptEventsEventNavigateValidateValidationTargetLocatorLocator:BrowserMonitorScriptEventsEventNavigateValidateValidationTargetLocatorLocator": {
            "properties": {
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "type",
                "value"
            ]
        },
        "dynatrace:index/BrowserMonitorScriptEventsEventNavigateWait:BrowserMonitorScriptEventsEventNavigateWait": {
            "properties": {
                "milliseconds": {
                    "type": "integer"
                },
                "timeout": {
                    "type": "integer"
                },
                "validation": {
                    "$ref": "#/types/dynatrace:index/BrowserMonitorScriptEventsEventNavigateWaitValidation:BrowserMonitorScriptEventsEventNavigateWaitValidation"
                },
                "waitFor": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "waitFor"
            ]
        },
        "dynatrace:index/BrowserMonitorScriptEventsEventNavigateWaitValidation:BrowserMonitorScriptEventsEventNavigateWaitValidation": {
            "properties": {
                "failIfFound": {
                    "type": "boolean"
                },
                "match": {
                    "type": "string"
                },
                "regex": {
                    "type": "boolean"
                },
                "target": {
                    "$ref": "#/types/dynatrace:index/BrowserMonitorScriptEventsEventNavigateWaitValidationTarget:BrowserMonitorScriptEventsEventNavigateWaitValidationTarget"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "dynatrace:index/BrowserMonitorScriptEventsEventNavigateWaitValidationTarget:BrowserMonitorScriptEventsEventNavigateWaitValidationTarget": {
            "properties": {
                "locators": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/BrowserMonitorScriptEventsEventNavigateWaitValidationTargetLocator:BrowserMonitorScriptEventsEventNavigateWaitValidationTargetLocator"
                    }
                },
                "window": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "dynatrace:index/BrowserMonitorScriptEventsEventNavigateWaitValidationTargetLocator:BrowserMonitorScriptEventsEventNavigateWaitValidationTargetLocator": {
            "properties": {
                "locators": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/BrowserMonitorScriptEventsEventNavigateWaitValidationTargetLocatorLocator:BrowserMonitorScriptEventsEventNavigateWaitValidationTargetLocatorLocator"
                    }
                }
            },
            "type": "object",
            "required": [
                "locators"
            ]
        },
        "dynatrace:index/BrowserMonitorScriptEventsEventNavigateWaitValidationTargetLocatorLocator:BrowserMonitorScriptEventsEventNavigateWaitValidationTargetLocatorLocator": {
            "properties": {
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "type",
                "value"
            ]
        },
        "dynatrace:index/BrowserMonitorScriptEventsEventSelect:BrowserMonitorScriptEventsEventSelect": {
            "properties": {
                "selections": {
                    "$ref": "#/types/dynatrace:index/BrowserMonitorScriptEventsEventSelectSelections:BrowserMonitorScriptEventsEventSelectSelections"
                },
                "target": {
                    "$ref": "#/types/dynatrace:index/BrowserMonitorScriptEventsEventSelectTarget:BrowserMonitorScriptEventsEventSelectTarget"
                },
                "validate": {
                    "$ref": "#/types/dynatrace:index/BrowserMonitorScriptEventsEventSelectValidate:BrowserMonitorScriptEventsEventSelectValidate"
                },
                "wait": {
                    "$ref": "#/types/dynatrace:index/BrowserMonitorScriptEventsEventSelectWait:BrowserMonitorScriptEventsEventSelectWait"
                }
            },
            "type": "object",
            "required": [
                "selections"
            ]
        },
        "dynatrace:index/BrowserMonitorScriptEventsEventSelectSelections:BrowserMonitorScriptEventsEventSelectSelections": {
            "properties": {
                "options": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/BrowserMonitorScriptEventsEventSelectSelectionsOption:BrowserMonitorScriptEventsEventSelectSelectionsOption"
                    }
                }
            },
            "type": "object",
            "required": [
                "options"
            ]
        },
        "dynatrace:index/BrowserMonitorScriptEventsEventSelectSelectionsOption:BrowserMonitorScriptEventsEventSelectSelectionsOption": {
            "properties": {
                "index": {
                    "type": "integer"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "index",
                "value"
            ]
        },
        "dynatrace:index/BrowserMonitorScriptEventsEventSelectTarget:BrowserMonitorScriptEventsEventSelectTarget": {
            "properties": {
                "locators": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/BrowserMonitorScriptEventsEventSelectTargetLocator:BrowserMonitorScriptEventsEventSelectTargetLocator"
                    }
                },
                "window": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "dynatrace:index/BrowserMonitorScriptEventsEventSelectTargetLocator:BrowserMonitorScriptEventsEventSelectTargetLocator": {
            "properties": {
                "locators": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/BrowserMonitorScriptEventsEventSelectTargetLocatorLocator:BrowserMonitorScriptEventsEventSelectTargetLocatorLocator"
                    }
                }
            },
            "type": "object",
            "required": [
                "locators"
            ]
        },
        "dynatrace:index/BrowserMonitorScriptEventsEventSelectTargetLocatorLocator:BrowserMonitorScriptEventsEventSelectTargetLocatorLocator": {
            "properties": {
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "type",
                "value"
            ]
        },
        "dynatrace:index/BrowserMonitorScriptEventsEventSelectValidate:BrowserMonitorScriptEventsEventSelectValidate": {
            "properties": {
                "validations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/BrowserMonitorScriptEventsEventSelectValidateValidation:BrowserMonitorScriptEventsEventSelectValidateValidation"
                    }
                }
            },
            "type": "object",
            "required": [
                "validations"
            ]
        },
        "dynatrace:index/BrowserMonitorScriptEventsEventSelectValidateValidation:BrowserMonitorScriptEventsEventSelectValidateValidation": {
            "properties": {
                "failIfFound": {
                    "type": "boolean"
                },
                "match": {
                    "type": "string"
                },
                "regex": {
                    "type": "boolean"
                },
                "target": {
                    "$ref": "#/types/dynatrace:index/BrowserMonitorScriptEventsEventSelectValidateValidationTarget:BrowserMonitorScriptEventsEventSelectValidateValidationTarget"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "dynatrace:index/BrowserMonitorScriptEventsEventSelectValidateValidationTarget:BrowserMonitorScriptEventsEventSelectValidateValidationTarget": {
            "properties": {
                "locators": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/BrowserMonitorScriptEventsEventSelectValidateValidationTargetLocator:BrowserMonitorScriptEventsEventSelectValidateValidationTargetLocator"
                    }
                },
                "window": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "dynatrace:index/BrowserMonitorScriptEventsEventSelectValidateValidationTargetLocator:BrowserMonitorScriptEventsEventSelectValidateValidationTargetLocator": {
            "properties": {
                "locators": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/BrowserMonitorScriptEventsEventSelectValidateValidationTargetLocatorLocator:BrowserMonitorScriptEventsEventSelectValidateValidationTargetLocatorLocator"
                    }
                }
            },
            "type": "object",
            "required": [
                "locators"
            ]
        },
        "dynatrace:index/BrowserMonitorScriptEventsEventSelectValidateValidationTargetLocatorLocator:BrowserMonitorScriptEventsEventSelectValidateValidationTargetLocatorLocator": {
            "properties": {
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "type",
                "value"
            ]
        },
        "dynatrace:index/BrowserMonitorScriptEventsEventSelectWait:BrowserMonitorScriptEventsEventSelectWait": {
            "properties": {
                "milliseconds": {
                    "type": "integer"
                },
                "timeout": {
                    "type": "integer"
                },
                "validation": {
                    "$ref": "#/types/dynatrace:index/BrowserMonitorScriptEventsEventSelectWaitValidation:BrowserMonitorScriptEventsEventSelectWaitValidation"
                },
                "waitFor": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "waitFor"
            ]
        },
        "dynatrace:index/BrowserMonitorScriptEventsEventSelectWaitValidation:BrowserMonitorScriptEventsEventSelectWaitValidation": {
            "properties": {
                "failIfFound": {
                    "type": "boolean"
                },
                "match": {
                    "type": "string"
                },
                "regex": {
                    "type": "boolean"
                },
                "target": {
                    "$ref": "#/types/dynatrace:index/BrowserMonitorScriptEventsEventSelectWaitValidationTarget:BrowserMonitorScriptEventsEventSelectWaitValidationTarget"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "dynatrace:index/BrowserMonitorScriptEventsEventSelectWaitValidationTarget:BrowserMonitorScriptEventsEventSelectWaitValidationTarget": {
            "properties": {
                "locators": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/BrowserMonitorScriptEventsEventSelectWaitValidationTargetLocator:BrowserMonitorScriptEventsEventSelectWaitValidationTargetLocator"
                    }
                },
                "window": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "dynatrace:index/BrowserMonitorScriptEventsEventSelectWaitValidationTargetLocator:BrowserMonitorScriptEventsEventSelectWaitValidationTargetLocator": {
            "properties": {
                "locators": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/BrowserMonitorScriptEventsEventSelectWaitValidationTargetLocatorLocator:BrowserMonitorScriptEventsEventSelectWaitValidationTargetLocatorLocator"
                    }
                }
            },
            "type": "object",
            "required": [
                "locators"
            ]
        },
        "dynatrace:index/BrowserMonitorScriptEventsEventSelectWaitValidationTargetLocatorLocator:BrowserMonitorScriptEventsEventSelectWaitValidationTargetLocatorLocator": {
            "properties": {
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "type",
                "value"
            ]
        },
        "dynatrace:index/BrowserMonitorScriptEventsEventTap:BrowserMonitorScriptEventsEventTap": {
            "properties": {
                "button": {
                    "type": "integer"
                },
                "target": {
                    "$ref": "#/types/dynatrace:index/BrowserMonitorScriptEventsEventTapTarget:BrowserMonitorScriptEventsEventTapTarget"
                },
                "validate": {
                    "$ref": "#/types/dynatrace:index/BrowserMonitorScriptEventsEventTapValidate:BrowserMonitorScriptEventsEventTapValidate"
                },
                "wait": {
                    "$ref": "#/types/dynatrace:index/BrowserMonitorScriptEventsEventTapWait:BrowserMonitorScriptEventsEventTapWait"
                }
            },
            "type": "object",
            "required": [
                "button"
            ]
        },
        "dynatrace:index/BrowserMonitorScriptEventsEventTapTarget:BrowserMonitorScriptEventsEventTapTarget": {
            "properties": {
                "locators": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/BrowserMonitorScriptEventsEventTapTargetLocator:BrowserMonitorScriptEventsEventTapTargetLocator"
                    }
                },
                "window": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "dynatrace:index/BrowserMonitorScriptEventsEventTapTargetLocator:BrowserMonitorScriptEventsEventTapTargetLocator": {
            "properties": {
                "locators": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/BrowserMonitorScriptEventsEventTapTargetLocatorLocator:BrowserMonitorScriptEventsEventTapTargetLocatorLocator"
                    }
                }
            },
            "type": "object",
            "required": [
                "locators"
            ]
        },
        "dynatrace:index/BrowserMonitorScriptEventsEventTapTargetLocatorLocator:BrowserMonitorScriptEventsEventTapTargetLocatorLocator": {
            "properties": {
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "type",
                "value"
            ]
        },
        "dynatrace:index/BrowserMonitorScriptEventsEventTapValidate:BrowserMonitorScriptEventsEventTapValidate": {
            "properties": {
                "validations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/BrowserMonitorScriptEventsEventTapValidateValidation:BrowserMonitorScriptEventsEventTapValidateValidation"
                    }
                }
            },
            "type": "object",
            "required": [
                "validations"
            ]
        },
        "dynatrace:index/BrowserMonitorScriptEventsEventTapValidateValidation:BrowserMonitorScriptEventsEventTapValidateValidation": {
            "properties": {
                "failIfFound": {
                    "type": "boolean"
                },
                "match": {
                    "type": "string"
                },
                "regex": {
                    "type": "boolean"
                },
                "target": {
                    "$ref": "#/types/dynatrace:index/BrowserMonitorScriptEventsEventTapValidateValidationTarget:BrowserMonitorScriptEventsEventTapValidateValidationTarget"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "dynatrace:index/BrowserMonitorScriptEventsEventTapValidateValidationTarget:BrowserMonitorScriptEventsEventTapValidateValidationTarget": {
            "properties": {
                "locators": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/BrowserMonitorScriptEventsEventTapValidateValidationTargetLocator:BrowserMonitorScriptEventsEventTapValidateValidationTargetLocator"
                    }
                },
                "window": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "dynatrace:index/BrowserMonitorScriptEventsEventTapValidateValidationTargetLocator:BrowserMonitorScriptEventsEventTapValidateValidationTargetLocator": {
            "properties": {
                "locators": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/BrowserMonitorScriptEventsEventTapValidateValidationTargetLocatorLocator:BrowserMonitorScriptEventsEventTapValidateValidationTargetLocatorLocator"
                    }
                }
            },
            "type": "object",
            "required": [
                "locators"
            ]
        },
        "dynatrace:index/BrowserMonitorScriptEventsEventTapValidateValidationTargetLocatorLocator:BrowserMonitorScriptEventsEventTapValidateValidationTargetLocatorLocator": {
            "properties": {
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "type",
                "value"
            ]
        },
        "dynatrace:index/BrowserMonitorScriptEventsEventTapWait:BrowserMonitorScriptEventsEventTapWait": {
            "properties": {
                "milliseconds": {
                    "type": "integer"
                },
                "timeout": {
                    "type": "integer"
                },
                "validation": {
                    "$ref": "#/types/dynatrace:index/BrowserMonitorScriptEventsEventTapWaitValidation:BrowserMonitorScriptEventsEventTapWaitValidation"
                },
                "waitFor": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "waitFor"
            ]
        },
        "dynatrace:index/BrowserMonitorScriptEventsEventTapWaitValidation:BrowserMonitorScriptEventsEventTapWaitValidation": {
            "properties": {
                "failIfFound": {
                    "type": "boolean"
                },
                "match": {
                    "type": "string"
                },
                "regex": {
                    "type": "boolean"
                },
                "target": {
                    "$ref": "#/types/dynatrace:index/BrowserMonitorScriptEventsEventTapWaitValidationTarget:BrowserMonitorScriptEventsEventTapWaitValidationTarget"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "dynatrace:index/BrowserMonitorScriptEventsEventTapWaitValidationTarget:BrowserMonitorScriptEventsEventTapWaitValidationTarget": {
            "properties": {
                "locators": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/BrowserMonitorScriptEventsEventTapWaitValidationTargetLocator:BrowserMonitorScriptEventsEventTapWaitValidationTargetLocator"
                    }
                },
                "window": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "dynatrace:index/BrowserMonitorScriptEventsEventTapWaitValidationTargetLocator:BrowserMonitorScriptEventsEventTapWaitValidationTargetLocator": {
            "properties": {
                "locators": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/BrowserMonitorScriptEventsEventTapWaitValidationTargetLocatorLocator:BrowserMonitorScriptEventsEventTapWaitValidationTargetLocatorLocator"
                    }
                }
            },
            "type": "object",
            "required": [
                "locators"
            ]
        },
        "dynatrace:index/BrowserMonitorScriptEventsEventTapWaitValidationTargetLocatorLocator:BrowserMonitorScriptEventsEventTapWaitValidationTargetLocatorLocator": {
            "properties": {
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "type",
                "value"
            ]
        },
        "dynatrace:index/BrowserMonitorTag:BrowserMonitorTag": {
            "properties": {
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/BrowserMonitorTagTag:BrowserMonitorTagTag"
                    }
                }
            },
            "type": "object"
        },
        "dynatrace:index/BrowserMonitorTagTag:BrowserMonitorTagTag": {
            "properties": {
                "context": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "source": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "context",
                "key"
            ]
        },
        "dynatrace:index/BusinessEventsOneagentEvent:BusinessEventsOneagentEvent": {
            "properties": {
                "category": {
                    "$ref": "#/types/dynatrace:index/BusinessEventsOneagentEventCategory:BusinessEventsOneagentEventCategory"
                },
                "data": {
                    "$ref": "#/types/dynatrace:index/BusinessEventsOneagentEventData:BusinessEventsOneagentEventData"
                },
                "provider": {
                    "$ref": "#/types/dynatrace:index/BusinessEventsOneagentEventProvider:BusinessEventsOneagentEventProvider"
                },
                "type": {
                    "$ref": "#/types/dynatrace:index/BusinessEventsOneagentEventType:BusinessEventsOneagentEventType"
                }
            },
            "type": "object",
            "required": [
                "category",
                "provider",
                "type"
            ]
        },
        "dynatrace:index/BusinessEventsOneagentEventCategory:BusinessEventsOneagentEventCategory": {
            "properties": {
                "path": {
                    "type": "string"
                },
                "source": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "sourceType"
            ]
        },
        "dynatrace:index/BusinessEventsOneagentEventData:BusinessEventsOneagentEventData": {
            "properties": {
                "eventDataFieldComplexes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/BusinessEventsOneagentEventDataEventDataFieldComplex:BusinessEventsOneagentEventDataEventDataFieldComplex"
                    }
                }
            },
            "type": "object",
            "required": [
                "eventDataFieldComplexes"
            ]
        },
        "dynatrace:index/BusinessEventsOneagentEventDataEventDataFieldComplex:BusinessEventsOneagentEventDataEventDataFieldComplex": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "source": {
                    "$ref": "#/types/dynatrace:index/BusinessEventsOneagentEventDataEventDataFieldComplexSource:BusinessEventsOneagentEventDataEventDataFieldComplexSource"
                }
            },
            "type": "object",
            "required": [
                "name",
                "source"
            ]
        },
        "dynatrace:index/BusinessEventsOneagentEventDataEventDataFieldComplexSource:BusinessEventsOneagentEventDataEventDataFieldComplexSource": {
            "properties": {
                "path": {
                    "type": "string"
                },
                "source": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "sourceType"
            ]
        },
        "dynatrace:index/BusinessEventsOneagentEventProvider:BusinessEventsOneagentEventProvider": {
            "properties": {
                "path": {
                    "type": "string"
                },
                "source": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "sourceType"
            ]
        },
        "dynatrace:index/BusinessEventsOneagentEventType:BusinessEventsOneagentEventType": {
            "properties": {
                "path": {
                    "type": "string"
                },
                "source": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "sourceType"
            ]
        },
        "dynatrace:index/BusinessEventsOneagentTriggers:BusinessEventsOneagentTriggers": {
            "properties": {
                "triggers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/BusinessEventsOneagentTriggersTrigger:BusinessEventsOneagentTriggersTrigger"
                    }
                }
            },
            "type": "object",
            "required": [
                "triggers"
            ]
        },
        "dynatrace:index/BusinessEventsOneagentTriggersTrigger:BusinessEventsOneagentTriggersTrigger": {
            "properties": {
                "caseSensitive": {
                    "type": "boolean"
                },
                "source": {
                    "$ref": "#/types/dynatrace:index/BusinessEventsOneagentTriggersTriggerSource:BusinessEventsOneagentTriggersTriggerSource"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "source",
                "type"
            ]
        },
        "dynatrace:index/BusinessEventsOneagentTriggersTriggerSource:BusinessEventsOneagentTriggersTriggerSource": {
            "properties": {
                "dataSource": {
                    "type": "string"
                },
                "path": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "dataSource"
            ]
        },
        "dynatrace:index/BusinessEventsProcessingRuleTesting:BusinessEventsProcessingRuleTesting": {
            "properties": {
                "sampleEvent": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "sampleEvent"
            ]
        },
        "dynatrace:index/BusinessEventsProcessingTransformationFields:BusinessEventsProcessingTransformationFields": {
            "properties": {
                "transformationFields": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/BusinessEventsProcessingTransformationFieldsTransformationField:BusinessEventsProcessingTransformationFieldsTransformationField"
                    }
                }
            },
            "type": "object",
            "required": [
                "transformationFields"
            ]
        },
        "dynatrace:index/BusinessEventsProcessingTransformationFieldsTransformationField:BusinessEventsProcessingTransformationFieldsTransformationField": {
            "properties": {
                "array": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "optional": {
                    "type": "boolean"
                },
                "readonly": {
                    "type": "boolean"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "array",
                "name",
                "optional",
                "readonly",
                "type"
            ]
        },
        "dynatrace:index/BusinessEventsSecurityContextSecurityContextRule:BusinessEventsSecurityContextSecurityContextRule": {
            "properties": {
                "query": {
                    "type": "string"
                },
                "ruleName": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                },
                "valueSource": {
                    "type": "string"
                },
                "valueSourceField": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "query",
                "ruleName",
                "valueSource"
            ]
        },
        "dynatrace:index/CalculatedMobileMetricDimension:CalculatedMobileMetricDimension": {
            "properties": {
                "dimensions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/CalculatedMobileMetricDimensionDimension:CalculatedMobileMetricDimensionDimension"
                    }
                }
            },
            "type": "object"
        },
        "dynatrace:index/CalculatedMobileMetricDimensionDimension:CalculatedMobileMetricDimensionDimension": {
            "properties": {
                "dimension": {
                    "type": "string"
                },
                "topX": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "dimension",
                "topX"
            ]
        },
        "dynatrace:index/CalculatedMobileMetricUserActionFilter:CalculatedMobileMetricUserActionFilter": {
            "properties": {
                "actionDurationFromMilliseconds": {
                    "type": "integer"
                },
                "actionDurationToMilliseconds": {
                    "type": "integer"
                },
                "apdex": {
                    "type": "string"
                },
                "appVersion": {
                    "type": "string"
                },
                "carrier": {
                    "type": "string"
                },
                "city": {
                    "type": "string"
                },
                "connectionType": {
                    "type": "string"
                },
                "continent": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "device": {
                    "type": "string"
                },
                "hasHttpError": {
                    "type": "boolean"
                },
                "hasReportedError": {
                    "type": "boolean"
                },
                "isp": {
                    "type": "string"
                },
                "manufacturer": {
                    "type": "string"
                },
                "networkTechnology": {
                    "type": "string"
                },
                "orientation": {
                    "type": "string"
                },
                "osFamily": {
                    "type": "string"
                },
                "osVersion": {
                    "type": "string"
                },
                "region": {
                    "type": "string"
                },
                "resolution": {
                    "type": "string"
                },
                "userActionName": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "dynatrace:index/CalculatedServiceMetricCondition:CalculatedServiceMetricCondition": {
            "properties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/CalculatedServiceMetricConditionCondition:CalculatedServiceMetricConditionCondition"
                    }
                }
            },
            "type": "object"
        },
        "dynatrace:index/CalculatedServiceMetricConditionCondition:CalculatedServiceMetricConditionCondition": {
            "properties": {
                "attribute": {
                    "type": "string"
                },
                "comparison": {
                    "$ref": "#/types/dynatrace:index/CalculatedServiceMetricConditionConditionComparison:CalculatedServiceMetricConditionConditionComparison"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "attribute",
                "comparison"
            ]
        },
        "dynatrace:index/CalculatedServiceMetricConditionConditionComparison:CalculatedServiceMetricConditionConditionComparison": {
            "properties": {
                "boolean": {
                    "$ref": "#/types/dynatrace:index/CalculatedServiceMetricConditionConditionComparisonBoolean:CalculatedServiceMetricConditionConditionComparisonBoolean"
                },
                "esbInputNodeType": {
                    "$ref": "#/types/dynatrace:index/CalculatedServiceMetricConditionConditionComparisonEsbInputNodeType:CalculatedServiceMetricConditionConditionComparisonEsbInputNodeType"
                },
                "failedState": {
                    "$ref": "#/types/dynatrace:index/CalculatedServiceMetricConditionConditionComparisonFailedState:CalculatedServiceMetricConditionConditionComparisonFailedState"
                },
                "failureReason": {
                    "$ref": "#/types/dynatrace:index/CalculatedServiceMetricConditionConditionComparisonFailureReason:CalculatedServiceMetricConditionConditionComparisonFailureReason"
                },
                "fastString": {
                    "$ref": "#/types/dynatrace:index/CalculatedServiceMetricConditionConditionComparisonFastString:CalculatedServiceMetricConditionConditionComparisonFastString"
                },
                "flawState": {
                    "$ref": "#/types/dynatrace:index/CalculatedServiceMetricConditionConditionComparisonFlawState:CalculatedServiceMetricConditionConditionComparisonFlawState"
                },
                "generic": {
                    "$ref": "#/types/dynatrace:index/CalculatedServiceMetricConditionConditionComparisonGeneric:CalculatedServiceMetricConditionConditionComparisonGeneric"
                },
                "httpMethod": {
                    "$ref": "#/types/dynatrace:index/CalculatedServiceMetricConditionConditionComparisonHttpMethod:CalculatedServiceMetricConditionConditionComparisonHttpMethod"
                },
                "httpStatusClass": {
                    "$ref": "#/types/dynatrace:index/CalculatedServiceMetricConditionConditionComparisonHttpStatusClass:CalculatedServiceMetricConditionConditionComparisonHttpStatusClass"
                },
                "iibInputNodeType": {
                    "$ref": "#/types/dynatrace:index/CalculatedServiceMetricConditionConditionComparisonIibInputNodeType:CalculatedServiceMetricConditionConditionComparisonIibInputNodeType"
                },
                "negate": {
                    "type": "boolean"
                },
                "number": {
                    "$ref": "#/types/dynatrace:index/CalculatedServiceMetricConditionConditionComparisonNumber:CalculatedServiceMetricConditionConditionComparisonNumber"
                },
                "numberRequestAttribute": {
                    "$ref": "#/types/dynatrace:index/CalculatedServiceMetricConditionConditionComparisonNumberRequestAttribute:CalculatedServiceMetricConditionConditionComparisonNumberRequestAttribute"
                },
                "serviceType": {
                    "$ref": "#/types/dynatrace:index/CalculatedServiceMetricConditionConditionComparisonServiceType:CalculatedServiceMetricConditionConditionComparisonServiceType"
                },
                "string": {
                    "$ref": "#/types/dynatrace:index/CalculatedServiceMetricConditionConditionComparisonString:CalculatedServiceMetricConditionConditionComparisonString"
                },
                "stringRequestAttribute": {
                    "$ref": "#/types/dynatrace:index/CalculatedServiceMetricConditionConditionComparisonStringRequestAttribute:CalculatedServiceMetricConditionConditionComparisonStringRequestAttribute"
                },
                "tag": {
                    "$ref": "#/types/dynatrace:index/CalculatedServiceMetricConditionConditionComparisonTag:CalculatedServiceMetricConditionConditionComparisonTag"
                },
                "zosCallType": {
                    "$ref": "#/types/dynatrace:index/CalculatedServiceMetricConditionConditionComparisonZosCallType:CalculatedServiceMetricConditionConditionComparisonZosCallType"
                }
            },
            "type": "object"
        },
        "dynatrace:index/CalculatedServiceMetricConditionConditionComparisonBoolean:CalculatedServiceMetricConditionConditionComparisonBoolean": {
            "properties": {
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "boolean"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "boolean"
                    }
                }
            },
            "type": "object",
            "required": [
                "value"
            ]
        },
        "dynatrace:index/CalculatedServiceMetricConditionConditionComparisonEsbInputNodeType:CalculatedServiceMetricConditionConditionComparisonEsbInputNodeType": {
            "properties": {
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object"
        },
        "dynatrace:index/CalculatedServiceMetricConditionConditionComparisonFailedState:CalculatedServiceMetricConditionConditionComparisonFailedState": {
            "properties": {
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object"
        },
        "dynatrace:index/CalculatedServiceMetricConditionConditionComparisonFailureReason:CalculatedServiceMetricConditionConditionComparisonFailureReason": {
            "properties": {
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object"
        },
        "dynatrace:index/CalculatedServiceMetricConditionConditionComparisonFastString:CalculatedServiceMetricConditionConditionComparisonFastString": {
            "properties": {
                "caseSensitive": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object"
        },
        "dynatrace:index/CalculatedServiceMetricConditionConditionComparisonFlawState:CalculatedServiceMetricConditionConditionComparisonFlawState": {
            "properties": {
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object"
        },
        "dynatrace:index/CalculatedServiceMetricConditionConditionComparisonGeneric:CalculatedServiceMetricConditionConditionComparisonGeneric": {
            "properties": {
                "type": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "dynatrace:index/CalculatedServiceMetricConditionConditionComparisonHttpMethod:CalculatedServiceMetricConditionConditionComparisonHttpMethod": {
            "properties": {
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object"
        },
        "dynatrace:index/CalculatedServiceMetricConditionConditionComparisonHttpStatusClass:CalculatedServiceMetricConditionConditionComparisonHttpStatusClass": {
            "properties": {
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object"
        },
        "dynatrace:index/CalculatedServiceMetricConditionConditionComparisonIibInputNodeType:CalculatedServiceMetricConditionConditionComparisonIibInputNodeType": {
            "properties": {
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object"
        },
        "dynatrace:index/CalculatedServiceMetricConditionConditionComparisonNumber:CalculatedServiceMetricConditionConditionComparisonNumber": {
            "properties": {
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "number"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                }
            },
            "type": "object"
        },
        "dynatrace:index/CalculatedServiceMetricConditionConditionComparisonNumberRequestAttribute:CalculatedServiceMetricConditionConditionComparisonNumberRequestAttribute": {
            "properties": {
                "matchOnChildCalls": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "requestAttribute": {
                    "type": "string"
                },
                "source": {
                    "$ref": "#/types/dynatrace:index/CalculatedServiceMetricConditionConditionComparisonNumberRequestAttributeSource:CalculatedServiceMetricConditionConditionComparisonNumberRequestAttributeSource"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "number"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                }
            },
            "type": "object",
            "required": [
                "requestAttribute"
            ]
        },
        "dynatrace:index/CalculatedServiceMetricConditionConditionComparisonNumberRequestAttributeSource:CalculatedServiceMetricConditionConditionComparisonNumberRequestAttributeSource": {
            "properties": {
                "managementZone": {
                    "type": "string"
                },
                "serviceTag": {
                    "$ref": "#/types/dynatrace:index/CalculatedServiceMetricConditionConditionComparisonNumberRequestAttributeSourceServiceTag:CalculatedServiceMetricConditionConditionComparisonNumberRequestAttributeSourceServiceTag"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "dynatrace:index/CalculatedServiceMetricConditionConditionComparisonNumberRequestAttributeSourceServiceTag:CalculatedServiceMetricConditionConditionComparisonNumberRequestAttributeSourceServiceTag": {
            "properties": {
                "context": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "tagKey": {
                    "$ref": "#/types/dynatrace:index/CalculatedServiceMetricConditionConditionComparisonNumberRequestAttributeSourceServiceTagTagKey:CalculatedServiceMetricConditionConditionComparisonNumberRequestAttributeSourceServiceTagTagKey"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key"
            ]
        },
        "dynatrace:index/CalculatedServiceMetricConditionConditionComparisonNumberRequestAttributeSourceServiceTagTagKey:CalculatedServiceMetricConditionConditionComparisonNumberRequestAttributeSourceServiceTagTagKey": {
            "properties": {
                "context": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "dynatrace:index/CalculatedServiceMetricConditionConditionComparisonServiceType:CalculatedServiceMetricConditionConditionComparisonServiceType": {
            "properties": {
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object"
        },
        "dynatrace:index/CalculatedServiceMetricConditionConditionComparisonString:CalculatedServiceMetricConditionConditionComparisonString": {
            "properties": {
                "caseSensitive": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object"
        },
        "dynatrace:index/CalculatedServiceMetricConditionConditionComparisonStringRequestAttribute:CalculatedServiceMetricConditionConditionComparisonStringRequestAttribute": {
            "properties": {
                "caseSensitive": {
                    "type": "boolean"
                },
                "matchOnChildCalls": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "requestAttribute": {
                    "type": "string"
                },
                "source": {
                    "$ref": "#/types/dynatrace:index/CalculatedServiceMetricConditionConditionComparisonStringRequestAttributeSource:CalculatedServiceMetricConditionConditionComparisonStringRequestAttributeSource"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "requestAttribute"
            ]
        },
        "dynatrace:index/CalculatedServiceMetricConditionConditionComparisonStringRequestAttributeSource:CalculatedServiceMetricConditionConditionComparisonStringRequestAttributeSource": {
            "properties": {
                "managementZone": {
                    "type": "string"
                },
                "serviceTag": {
                    "$ref": "#/types/dynatrace:index/CalculatedServiceMetricConditionConditionComparisonStringRequestAttributeSourceServiceTag:CalculatedServiceMetricConditionConditionComparisonStringRequestAttributeSourceServiceTag"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "dynatrace:index/CalculatedServiceMetricConditionConditionComparisonStringRequestAttributeSourceServiceTag:CalculatedServiceMetricConditionConditionComparisonStringRequestAttributeSourceServiceTag": {
            "properties": {
                "context": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "tagKey": {
                    "$ref": "#/types/dynatrace:index/CalculatedServiceMetricConditionConditionComparisonStringRequestAttributeSourceServiceTagTagKey:CalculatedServiceMetricConditionConditionComparisonStringRequestAttributeSourceServiceTagTagKey"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key"
            ]
        },
        "dynatrace:index/CalculatedServiceMetricConditionConditionComparisonStringRequestAttributeSourceServiceTagTagKey:CalculatedServiceMetricConditionConditionComparisonStringRequestAttributeSourceServiceTagTagKey": {
            "properties": {
                "context": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "dynatrace:index/CalculatedServiceMetricConditionConditionComparisonTag:CalculatedServiceMetricConditionConditionComparisonTag": {
            "properties": {
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "$ref": "#/types/dynatrace:index/CalculatedServiceMetricConditionConditionComparisonTagValue:CalculatedServiceMetricConditionConditionComparisonTagValue"
                },
                "values": {
                    "$ref": "#/types/dynatrace:index/CalculatedServiceMetricConditionConditionComparisonTagValues:CalculatedServiceMetricConditionConditionComparisonTagValues"
                }
            },
            "type": "object"
        },
        "dynatrace:index/CalculatedServiceMetricConditionConditionComparisonTagValue:CalculatedServiceMetricConditionConditionComparisonTagValue": {
            "properties": {
                "context": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "context",
                "key"
            ]
        },
        "dynatrace:index/CalculatedServiceMetricConditionConditionComparisonTagValues:CalculatedServiceMetricConditionConditionComparisonTagValues": {
            "properties": {
                "values": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/CalculatedServiceMetricConditionConditionComparisonTagValuesValue:CalculatedServiceMetricConditionConditionComparisonTagValuesValue"
                    }
                }
            },
            "type": "object"
        },
        "dynatrace:index/CalculatedServiceMetricConditionConditionComparisonTagValuesValue:CalculatedServiceMetricConditionConditionComparisonTagValuesValue": {
            "properties": {
                "context": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "context",
                "key"
            ]
        },
        "dynatrace:index/CalculatedServiceMetricConditionConditionComparisonZosCallType:CalculatedServiceMetricConditionConditionComparisonZosCallType": {
            "properties": {
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object"
        },
        "dynatrace:index/CalculatedServiceMetricDimensionDefinition:CalculatedServiceMetricDimensionDefinition": {
            "properties": {
                "dimension": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "placeholders": {
                    "$ref": "#/types/dynatrace:index/CalculatedServiceMetricDimensionDefinitionPlaceholders:CalculatedServiceMetricDimensionDefinitionPlaceholders"
                },
                "topX": {
                    "type": "integer"
                },
                "topXAggregation": {
                    "type": "string"
                },
                "topXDirection": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "dimension",
                "name",
                "topX",
                "topXAggregation",
                "topXDirection"
            ]
        },
        "dynatrace:index/CalculatedServiceMetricDimensionDefinitionPlaceholders:CalculatedServiceMetricDimensionDefinitionPlaceholders": {
            "properties": {
                "placeholders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/CalculatedServiceMetricDimensionDefinitionPlaceholdersPlaceholder:CalculatedServiceMetricDimensionDefinitionPlaceholdersPlaceholder"
                    }
                }
            },
            "type": "object"
        },
        "dynatrace:index/CalculatedServiceMetricDimensionDefinitionPlaceholdersPlaceholder:CalculatedServiceMetricDimensionDefinitionPlaceholdersPlaceholder": {
            "properties": {
                "aggregation": {
                    "type": "string"
                },
                "attribute": {
                    "type": "string"
                },
                "delimiterOrRegex": {
                    "type": "string"
                },
                "endDelimiter": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "normalization": {
                    "type": "string"
                },
                "requestAttribute": {
                    "type": "string"
                },
                "source": {
                    "$ref": "#/types/dynatrace:index/CalculatedServiceMetricDimensionDefinitionPlaceholdersPlaceholderSource:CalculatedServiceMetricDimensionDefinitionPlaceholdersPlaceholderSource"
                },
                "unknowns": {
                    "type": "string"
                },
                "useFromChildCalls": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "attribute",
                "kind",
                "name"
            ]
        },
        "dynatrace:index/CalculatedServiceMetricDimensionDefinitionPlaceholdersPlaceholderSource:CalculatedServiceMetricDimensionDefinitionPlaceholdersPlaceholderSource": {
            "properties": {
                "managementZone": {
                    "type": "string"
                },
                "serviceTag": {
                    "$ref": "#/types/dynatrace:index/CalculatedServiceMetricDimensionDefinitionPlaceholdersPlaceholderSourceServiceTag:CalculatedServiceMetricDimensionDefinitionPlaceholdersPlaceholderSourceServiceTag"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "dynatrace:index/CalculatedServiceMetricDimensionDefinitionPlaceholdersPlaceholderSourceServiceTag:CalculatedServiceMetricDimensionDefinitionPlaceholdersPlaceholderSourceServiceTag": {
            "properties": {
                "context": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "tagKey": {
                    "$ref": "#/types/dynatrace:index/CalculatedServiceMetricDimensionDefinitionPlaceholdersPlaceholderSourceServiceTagTagKey:CalculatedServiceMetricDimensionDefinitionPlaceholdersPlaceholderSourceServiceTagTagKey"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key"
            ]
        },
        "dynatrace:index/CalculatedServiceMetricDimensionDefinitionPlaceholdersPlaceholderSourceServiceTagTagKey:CalculatedServiceMetricDimensionDefinitionPlaceholdersPlaceholderSourceServiceTagTagKey": {
            "properties": {
                "context": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "dynatrace:index/CalculatedServiceMetricMetricDefinition:CalculatedServiceMetricMetricDefinition": {
            "properties": {
                "metric": {
                    "type": "string"
                },
                "requestAttribute": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "metric"
            ]
        },
        "dynatrace:index/CalculatedSyntheticMetricDimension:CalculatedSyntheticMetricDimension": {
            "properties": {
                "dimensions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/CalculatedSyntheticMetricDimensionDimension:CalculatedSyntheticMetricDimensionDimension"
                    }
                }
            },
            "type": "object"
        },
        "dynatrace:index/CalculatedSyntheticMetricDimensionDimension:CalculatedSyntheticMetricDimensionDimension": {
            "properties": {
                "dimension": {
                    "type": "string"
                },
                "topX": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "dimension"
            ]
        },
        "dynatrace:index/CalculatedSyntheticMetricFilter:CalculatedSyntheticMetricFilter": {
            "properties": {
                "actionType": {
                    "type": "string"
                },
                "errorCode": {
                    "type": "integer"
                },
                "event": {
                    "type": "string"
                },
                "hasError": {
                    "type": "boolean"
                },
                "location": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "dynatrace:index/CalculatedWebMetricDimension:CalculatedWebMetricDimension": {
            "properties": {
                "dimensions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/CalculatedWebMetricDimensionDimension:CalculatedWebMetricDimensionDimension"
                    }
                }
            },
            "type": "object"
        },
        "dynatrace:index/CalculatedWebMetricDimensionDimension:CalculatedWebMetricDimensionDimension": {
            "properties": {
                "dimension": {
                    "type": "string"
                },
                "propertyKey": {
                    "type": "string"
                },
                "topX": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "dimension",
                "topX"
            ]
        },
        "dynatrace:index/CalculatedWebMetricMetricDefinition:CalculatedWebMetricMetricDefinition": {
            "properties": {
                "metric": {
                    "type": "string"
                },
                "propertyKey": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "metric"
            ]
        },
        "dynatrace:index/CalculatedWebMetricUserActionFilter:CalculatedWebMetricUserActionFilter": {
            "properties": {
                "actionDurationFromMilliseconds": {
                    "type": "integer"
                },
                "actionDurationToMilliseconds": {
                    "type": "integer"
                },
                "apdex": {
                    "type": "string"
                },
                "browserFamily": {
                    "type": "string"
                },
                "browserType": {
                    "type": "string"
                },
                "browserVersion": {
                    "type": "string"
                },
                "city": {
                    "type": "string"
                },
                "continent": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "customAction": {
                    "type": "boolean"
                },
                "customErrorName": {
                    "type": "string"
                },
                "customErrorType": {
                    "type": "string"
                },
                "domain": {
                    "type": "string"
                },
                "hasAnyError": {
                    "type": "boolean"
                },
                "hasCustomErrors": {
                    "type": "boolean"
                },
                "hasHttpErrors": {
                    "type": "boolean"
                },
                "hasJavascriptErrors": {
                    "type": "boolean"
                },
                "httpErrorCode": {
                    "type": "integer"
                },
                "httpErrorCodeTo": {
                    "type": "integer"
                },
                "httpPath": {
                    "type": "string"
                },
                "ip": {
                    "type": "string"
                },
                "ipV6Traffic": {
                    "type": "boolean"
                },
                "loadAction": {
                    "type": "boolean"
                },
                "osFamily": {
                    "type": "string"
                },
                "osVersion": {
                    "type": "string"
                },
                "realUser": {
                    "type": "boolean"
                },
                "region": {
                    "type": "string"
                },
                "robot": {
                    "type": "boolean"
                },
                "synthetic": {
                    "type": "boolean"
                },
                "targetViewGroup": {
                    "type": "string"
                },
                "targetViewGroupNameMatchType": {
                    "type": "string"
                },
                "targetViewName": {
                    "type": "string"
                },
                "targetViewNameMatchType": {
                    "type": "string"
                },
                "userActionName": {
                    "type": "string"
                },
                "userActionProperties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/CalculatedWebMetricUserActionFilterUserActionProperty:CalculatedWebMetricUserActionFilterUserActionProperty"
                    }
                },
                "xhrAction": {
                    "type": "boolean"
                },
                "xhrRouteChangeAction": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "dynatrace:index/CalculatedWebMetricUserActionFilterUserActionProperty:CalculatedWebMetricUserActionFilterUserActionProperty": {
            "properties": {
                "properties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/CalculatedWebMetricUserActionFilterUserActionPropertyProperty:CalculatedWebMetricUserActionFilterUserActionPropertyProperty"
                    }
                }
            },
            "type": "object"
        },
        "dynatrace:index/CalculatedWebMetricUserActionFilterUserActionPropertyProperty:CalculatedWebMetricUserActionFilterUserActionPropertyProperty": {
            "properties": {
                "from": {
                    "type": "number"
                },
                "key": {
                    "type": "string"
                },
                "matchType": {
                    "type": "string"
                },
                "to": {
                    "type": "number"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "dynatrace:index/CloudappWorkloaddetectionCloudFoundry:CloudappWorkloaddetectionCloudFoundry": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/CloudappWorkloaddetectionDocker:CloudappWorkloaddetectionDocker": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/CloudappWorkloaddetectionKubernetes:CloudappWorkloaddetectionKubernetes": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "filters": {
                    "$ref": "#/types/dynatrace:index/CloudappWorkloaddetectionKubernetesFilters:CloudappWorkloaddetectionKubernetesFilters"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/CloudappWorkloaddetectionKubernetesFilters:CloudappWorkloaddetectionKubernetesFilters": {
            "properties": {
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/CloudappWorkloaddetectionKubernetesFiltersFilter:CloudappWorkloaddetectionKubernetesFiltersFilter"
                    }
                }
            },
            "type": "object",
            "required": [
                "filters"
            ]
        },
        "dynatrace:index/CloudappWorkloaddetectionKubernetesFiltersFilter:CloudappWorkloaddetectionKubernetesFiltersFilter": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "inclusionToggles": {
                    "$ref": "#/types/dynatrace:index/CloudappWorkloaddetectionKubernetesFiltersFilterInclusionToggles:CloudappWorkloaddetectionKubernetesFiltersFilterInclusionToggles"
                },
                "matchFilter": {
                    "$ref": "#/types/dynatrace:index/CloudappWorkloaddetectionKubernetesFiltersFilterMatchFilter:CloudappWorkloaddetectionKubernetesFiltersFilterMatchFilter"
                }
            },
            "type": "object",
            "required": [
                "enabled",
                "inclusionToggles",
                "matchFilter"
            ]
        },
        "dynatrace:index/CloudappWorkloaddetectionKubernetesFiltersFilterInclusionToggles:CloudappWorkloaddetectionKubernetesFiltersFilterInclusionToggles": {
            "properties": {
                "incBasepod": {
                    "type": "boolean"
                },
                "incContainer": {
                    "type": "boolean"
                },
                "incNamespace": {
                    "type": "boolean"
                },
                "incProduct": {
                    "type": "boolean"
                },
                "incStage": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "incBasepod",
                "incContainer",
                "incNamespace",
                "incProduct",
                "incStage"
            ]
        },
        "dynatrace:index/CloudappWorkloaddetectionKubernetesFiltersFilterMatchFilter:CloudappWorkloaddetectionKubernetesFiltersFilterMatchFilter": {
            "properties": {
                "matchOperator": {
                    "type": "string"
                },
                "namespace": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "matchOperator"
            ]
        },
        "dynatrace:index/CredentialsCredentialUsageSummary:CredentialsCredentialUsageSummary": {
            "properties": {
                "count": {
                    "type": "integer"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "count",
                "type"
            ]
        },
        "dynatrace:index/CredentialsExternal:CredentialsExternal": {
            "properties": {
                "certificate": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "clientid": {
                    "type": "string"
                },
                "credentialsUsedForExternalSynchronizations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "passwordSecretName": {
                    "type": "string"
                },
                "pathToCredentials": {
                    "type": "string"
                },
                "roleid": {
                    "type": "string"
                },
                "secretid": {
                    "type": "string"
                },
                "tenantid": {
                    "type": "string"
                },
                "tokenSecretName": {
                    "type": "string"
                },
                "usernameSecretName": {
                    "type": "string"
                },
                "vaultNamespace": {
                    "type": "string"
                },
                "vaultUrl": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "dynatrace:index/CustomAnomaliesDimension:CustomAnomaliesDimension": {
            "properties": {
                "dimensions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/CustomAnomaliesDimensionDimension:CustomAnomaliesDimensionDimension"
                    }
                },
                "entities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/CustomAnomaliesDimensionEntity:CustomAnomaliesDimensionEntity"
                    }
                },
                "strings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/CustomAnomaliesDimensionString:CustomAnomaliesDimensionString"
                    }
                }
            },
            "type": "object"
        },
        "dynatrace:index/CustomAnomaliesDimensionDimension:CustomAnomaliesDimensionDimension": {
            "properties": {
                "index": {
                    "type": "integer"
                },
                "key": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "dynatrace:index/CustomAnomaliesDimensionEntity:CustomAnomaliesDimensionEntity": {
            "properties": {
                "filter": {
                    "$ref": "#/types/dynatrace:index/CustomAnomaliesDimensionEntityFilter:CustomAnomaliesDimensionEntityFilter"
                },
                "key": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "filter"
            ]
        },
        "dynatrace:index/CustomAnomaliesDimensionEntityFilter:CustomAnomaliesDimensionEntityFilter": {
            "properties": {
                "operator": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator",
                "value"
            ]
        },
        "dynatrace:index/CustomAnomaliesDimensionString:CustomAnomaliesDimensionString": {
            "properties": {
                "filter": {
                    "$ref": "#/types/dynatrace:index/CustomAnomaliesDimensionStringFilter:CustomAnomaliesDimensionStringFilter"
                },
                "index": {
                    "type": "integer"
                },
                "key": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "filter"
            ]
        },
        "dynatrace:index/CustomAnomaliesDimensionStringFilter:CustomAnomaliesDimensionStringFilter": {
            "properties": {
                "operator": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator",
                "value"
            ]
        },
        "dynatrace:index/CustomAnomaliesScope:CustomAnomaliesScope": {
            "properties": {
                "customDeviceGroupNames": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/CustomAnomaliesScopeCustomDeviceGroupName:CustomAnomaliesScopeCustomDeviceGroupName"
                    }
                },
                "entities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/CustomAnomaliesScopeEntity:CustomAnomaliesScopeEntity"
                    }
                },
                "hostGroupNames": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/CustomAnomaliesScopeHostGroupName:CustomAnomaliesScopeHostGroupName"
                    }
                },
                "hostNames": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/CustomAnomaliesScopeHostName:CustomAnomaliesScopeHostName"
                    }
                },
                "managementZones": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/CustomAnomaliesScopeManagementZone:CustomAnomaliesScopeManagementZone"
                    }
                },
                "names": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/CustomAnomaliesScopeName:CustomAnomaliesScopeName"
                    }
                },
                "processGroupIds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/CustomAnomaliesScopeProcessGroupId:CustomAnomaliesScopeProcessGroupId"
                    }
                },
                "processGroupNames": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/CustomAnomaliesScopeProcessGroupName:CustomAnomaliesScopeProcessGroupName"
                    }
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/CustomAnomaliesScopeScope:CustomAnomaliesScopeScope"
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/CustomAnomaliesScopeTag:CustomAnomaliesScopeTag"
                    }
                }
            },
            "type": "object"
        },
        "dynatrace:index/CustomAnomaliesScopeCustomDeviceGroupName:CustomAnomaliesScopeCustomDeviceGroupName": {
            "properties": {
                "filter": {
                    "$ref": "#/types/dynatrace:index/CustomAnomaliesScopeCustomDeviceGroupNameFilter:CustomAnomaliesScopeCustomDeviceGroupNameFilter"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "filter"
            ]
        },
        "dynatrace:index/CustomAnomaliesScopeCustomDeviceGroupNameFilter:CustomAnomaliesScopeCustomDeviceGroupNameFilter": {
            "properties": {
                "operator": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator",
                "value"
            ]
        },
        "dynatrace:index/CustomAnomaliesScopeEntity:CustomAnomaliesScopeEntity": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "dynatrace:index/CustomAnomaliesScopeHostGroupName:CustomAnomaliesScopeHostGroupName": {
            "properties": {
                "filter": {
                    "$ref": "#/types/dynatrace:index/CustomAnomaliesScopeHostGroupNameFilter:CustomAnomaliesScopeHostGroupNameFilter"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "filter"
            ]
        },
        "dynatrace:index/CustomAnomaliesScopeHostGroupNameFilter:CustomAnomaliesScopeHostGroupNameFilter": {
            "properties": {
                "operator": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator",
                "value"
            ]
        },
        "dynatrace:index/CustomAnomaliesScopeHostName:CustomAnomaliesScopeHostName": {
            "properties": {
                "filter": {
                    "$ref": "#/types/dynatrace:index/CustomAnomaliesScopeHostNameFilter:CustomAnomaliesScopeHostNameFilter"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "filter"
            ]
        },
        "dynatrace:index/CustomAnomaliesScopeHostNameFilter:CustomAnomaliesScopeHostNameFilter": {
            "properties": {
                "operator": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator",
                "value"
            ]
        },
        "dynatrace:index/CustomAnomaliesScopeManagementZone:CustomAnomaliesScopeManagementZone": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "dynatrace:index/CustomAnomaliesScopeName:CustomAnomaliesScopeName": {
            "properties": {
                "filter": {
                    "$ref": "#/types/dynatrace:index/CustomAnomaliesScopeNameFilter:CustomAnomaliesScopeNameFilter"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "filter"
            ]
        },
        "dynatrace:index/CustomAnomaliesScopeNameFilter:CustomAnomaliesScopeNameFilter": {
            "properties": {
                "operator": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator",
                "value"
            ]
        },
        "dynatrace:index/CustomAnomaliesScopeProcessGroupId:CustomAnomaliesScopeProcessGroupId": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "dynatrace:index/CustomAnomaliesScopeProcessGroupName:CustomAnomaliesScopeProcessGroupName": {
            "properties": {
                "filter": {
                    "$ref": "#/types/dynatrace:index/CustomAnomaliesScopeProcessGroupNameFilter:CustomAnomaliesScopeProcessGroupNameFilter"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "filter"
            ]
        },
        "dynatrace:index/CustomAnomaliesScopeProcessGroupNameFilter:CustomAnomaliesScopeProcessGroupNameFilter": {
            "properties": {
                "operator": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator",
                "value"
            ]
        },
        "dynatrace:index/CustomAnomaliesScopeScope:CustomAnomaliesScopeScope": {
            "properties": {
                "type": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "dynatrace:index/CustomAnomaliesScopeTag:CustomAnomaliesScopeTag": {
            "properties": {
                "filter": {
                    "$ref": "#/types/dynatrace:index/CustomAnomaliesScopeTagFilter:CustomAnomaliesScopeTagFilter"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "filter"
            ]
        },
        "dynatrace:index/CustomAnomaliesScopeTagFilter:CustomAnomaliesScopeTagFilter": {
            "properties": {
                "context": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "context",
                "key"
            ]
        },
        "dynatrace:index/CustomAnomaliesStrategy:CustomAnomaliesStrategy": {
            "properties": {
                "auto": {
                    "$ref": "#/types/dynatrace:index/CustomAnomaliesStrategyAuto:CustomAnomaliesStrategyAuto"
                },
                "generics": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/CustomAnomaliesStrategyGeneric:CustomAnomaliesStrategyGeneric"
                    }
                },
                "static": {
                    "$ref": "#/types/dynatrace:index/CustomAnomaliesStrategyStatic:CustomAnomaliesStrategyStatic"
                }
            },
            "type": "object"
        },
        "dynatrace:index/CustomAnomaliesStrategyAuto:CustomAnomaliesStrategyAuto": {
            "properties": {
                "alertCondition": {
                    "type": "string"
                },
                "alertingOnMissingData": {
                    "type": "boolean"
                },
                "dealertingSamples": {
                    "type": "integer"
                },
                "samples": {
                    "type": "integer"
                },
                "signalFluctuations": {
                    "type": "number"
                },
                "unknowns": {
                    "type": "string"
                },
                "violatingSamples": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "alertCondition",
                "dealertingSamples",
                "samples",
                "signalFluctuations",
                "violatingSamples"
            ]
        },
        "dynatrace:index/CustomAnomaliesStrategyGeneric:CustomAnomaliesStrategyGeneric": {
            "properties": {
                "type": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "dynatrace:index/CustomAnomaliesStrategyStatic:CustomAnomaliesStrategyStatic": {
            "properties": {
                "alertCondition": {
                    "type": "string"
                },
                "alertingOnMissingData": {
                    "type": "boolean"
                },
                "dealertingSamples": {
                    "type": "integer"
                },
                "samples": {
                    "type": "integer"
                },
                "threshold": {
                    "type": "number"
                },
                "unit": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "violatingSamples": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "alertCondition",
                "dealertingSamples",
                "samples",
                "threshold",
                "unit",
                "violatingSamples"
            ]
        },
        "dynatrace:index/CustomAppAnomaliesErrorRateIncrease:CustomAppAnomaliesErrorRateIncrease": {
            "properties": {
                "detectionMode": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "errorRateIncreaseAuto": {
                    "$ref": "#/types/dynatrace:index/CustomAppAnomaliesErrorRateIncreaseErrorRateIncreaseAuto:CustomAppAnomaliesErrorRateIncreaseErrorRateIncreaseAuto"
                },
                "errorRateIncreaseFixed": {
                    "$ref": "#/types/dynatrace:index/CustomAppAnomaliesErrorRateIncreaseErrorRateIncreaseFixed:CustomAppAnomaliesErrorRateIncreaseErrorRateIncreaseFixed"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/CustomAppAnomaliesErrorRateIncreaseErrorRateIncreaseAuto:CustomAppAnomaliesErrorRateIncreaseErrorRateIncreaseAuto": {
            "properties": {
                "thresholdAbsolute": {
                    "type": "number"
                },
                "thresholdRelative": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "thresholdAbsolute",
                "thresholdRelative"
            ]
        },
        "dynatrace:index/CustomAppAnomaliesErrorRateIncreaseErrorRateIncreaseFixed:CustomAppAnomaliesErrorRateIncreaseErrorRateIncreaseFixed": {
            "properties": {
                "sensitivity": {
                    "type": "string"
                },
                "thresholdAbsolute": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "sensitivity",
                "thresholdAbsolute"
            ]
        },
        "dynatrace:index/CustomAppAnomaliesSlowUserActions:CustomAppAnomaliesSlowUserActions": {
            "properties": {
                "detectionMode": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "slowUserActionsAuto": {
                    "$ref": "#/types/dynatrace:index/CustomAppAnomaliesSlowUserActionsSlowUserActionsAuto:CustomAppAnomaliesSlowUserActionsSlowUserActionsAuto"
                },
                "slowUserActionsFixed": {
                    "$ref": "#/types/dynatrace:index/CustomAppAnomaliesSlowUserActionsSlowUserActionsFixed:CustomAppAnomaliesSlowUserActionsSlowUserActionsFixed"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/CustomAppAnomaliesSlowUserActionsSlowUserActionsAuto:CustomAppAnomaliesSlowUserActionsSlowUserActionsAuto": {
            "properties": {
                "durationAvoidOveralerting": {
                    "$ref": "#/types/dynatrace:index/CustomAppAnomaliesSlowUserActionsSlowUserActionsAutoDurationAvoidOveralerting:CustomAppAnomaliesSlowUserActionsSlowUserActionsAutoDurationAvoidOveralerting"
                },
                "durationThresholdAll": {
                    "$ref": "#/types/dynatrace:index/CustomAppAnomaliesSlowUserActionsSlowUserActionsAutoDurationThresholdAll:CustomAppAnomaliesSlowUserActionsSlowUserActionsAutoDurationThresholdAll"
                },
                "durationThresholdSlowest": {
                    "$ref": "#/types/dynatrace:index/CustomAppAnomaliesSlowUserActionsSlowUserActionsAutoDurationThresholdSlowest:CustomAppAnomaliesSlowUserActionsSlowUserActionsAutoDurationThresholdSlowest"
                }
            },
            "type": "object",
            "required": [
                "durationAvoidOveralerting",
                "durationThresholdAll",
                "durationThresholdSlowest"
            ]
        },
        "dynatrace:index/CustomAppAnomaliesSlowUserActionsSlowUserActionsAutoDurationAvoidOveralerting:CustomAppAnomaliesSlowUserActionsSlowUserActionsAutoDurationAvoidOveralerting": {
            "properties": {
                "minActionRate": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "minActionRate"
            ]
        },
        "dynatrace:index/CustomAppAnomaliesSlowUserActionsSlowUserActionsAutoDurationThresholdAll:CustomAppAnomaliesSlowUserActionsSlowUserActionsAutoDurationThresholdAll": {
            "properties": {
                "durationThreshold": {
                    "type": "number"
                },
                "slowdownPercentage": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "durationThreshold",
                "slowdownPercentage"
            ]
        },
        "dynatrace:index/CustomAppAnomaliesSlowUserActionsSlowUserActionsAutoDurationThresholdSlowest:CustomAppAnomaliesSlowUserActionsSlowUserActionsAutoDurationThresholdSlowest": {
            "properties": {
                "durationThreshold": {
                    "type": "number"
                },
                "slowdownPercentage": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "durationThreshold",
                "slowdownPercentage"
            ]
        },
        "dynatrace:index/CustomAppAnomaliesSlowUserActionsSlowUserActionsFixed:CustomAppAnomaliesSlowUserActionsSlowUserActionsFixed": {
            "properties": {
                "durationAvoidOveralerting": {
                    "$ref": "#/types/dynatrace:index/CustomAppAnomaliesSlowUserActionsSlowUserActionsFixedDurationAvoidOveralerting:CustomAppAnomaliesSlowUserActionsSlowUserActionsFixedDurationAvoidOveralerting"
                },
                "durationThresholdAllFixed": {
                    "$ref": "#/types/dynatrace:index/CustomAppAnomaliesSlowUserActionsSlowUserActionsFixedDurationThresholdAllFixed:CustomAppAnomaliesSlowUserActionsSlowUserActionsFixedDurationThresholdAllFixed"
                },
                "durationThresholdSlowest": {
                    "$ref": "#/types/dynatrace:index/CustomAppAnomaliesSlowUserActionsSlowUserActionsFixedDurationThresholdSlowest:CustomAppAnomaliesSlowUserActionsSlowUserActionsFixedDurationThresholdSlowest"
                },
                "sensitivity": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "durationAvoidOveralerting",
                "durationThresholdAllFixed",
                "durationThresholdSlowest",
                "sensitivity"
            ]
        },
        "dynatrace:index/CustomAppAnomaliesSlowUserActionsSlowUserActionsFixedDurationAvoidOveralerting:CustomAppAnomaliesSlowUserActionsSlowUserActionsFixedDurationAvoidOveralerting": {
            "properties": {
                "minActionRate": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "minActionRate"
            ]
        },
        "dynatrace:index/CustomAppAnomaliesSlowUserActionsSlowUserActionsFixedDurationThresholdAllFixed:CustomAppAnomaliesSlowUserActionsSlowUserActionsFixedDurationThresholdAllFixed": {
            "properties": {
                "durationThreshold": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "durationThreshold"
            ]
        },
        "dynatrace:index/CustomAppAnomaliesSlowUserActionsSlowUserActionsFixedDurationThresholdSlowest:CustomAppAnomaliesSlowUserActionsSlowUserActionsFixedDurationThresholdSlowest": {
            "properties": {
                "durationThreshold": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "durationThreshold"
            ]
        },
        "dynatrace:index/CustomAppAnomaliesUnexpectedHighLoad:CustomAppAnomaliesUnexpectedHighLoad": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "thresholdPercentage": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/CustomAppAnomaliesUnexpectedLowLoad:CustomAppAnomaliesUnexpectedLowLoad": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "thresholdPercentage": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/CustomAppCrashRateCrashRateIncrease:CustomAppCrashRateCrashRateIncrease": {
            "properties": {
                "crashRateIncreaseAuto": {
                    "$ref": "#/types/dynatrace:index/CustomAppCrashRateCrashRateIncreaseCrashRateIncreaseAuto:CustomAppCrashRateCrashRateIncreaseCrashRateIncreaseAuto"
                },
                "crashRateIncreaseFixed": {
                    "$ref": "#/types/dynatrace:index/CustomAppCrashRateCrashRateIncreaseCrashRateIncreaseFixed:CustomAppCrashRateCrashRateIncreaseCrashRateIncreaseFixed"
                },
                "detectionMode": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/CustomAppCrashRateCrashRateIncreaseCrashRateIncreaseAuto:CustomAppCrashRateCrashRateIncreaseCrashRateIncreaseAuto": {
            "properties": {
                "baselineViolationPercentage": {
                    "type": "number"
                },
                "concurrentUsers": {
                    "type": "number"
                },
                "sensitivity": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "baselineViolationPercentage",
                "concurrentUsers",
                "sensitivity"
            ]
        },
        "dynatrace:index/CustomAppCrashRateCrashRateIncreaseCrashRateIncreaseFixed:CustomAppCrashRateCrashRateIncreaseCrashRateIncreaseFixed": {
            "properties": {
                "absoluteCrashRate": {
                    "type": "number"
                },
                "concurrentUsers": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "absoluteCrashRate",
                "concurrentUsers"
            ]
        },
        "dynatrace:index/CustomAppEnablementRum:CustomAppEnablementRum": {
            "properties": {
                "costAndTrafficControl": {
                    "type": "integer"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "costAndTrafficControl",
                "enabled"
            ]
        },
        "dynatrace:index/CustomServiceRule:CustomServiceRule": {
            "properties": {
                "annotations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "class": {
                    "$ref": "#/types/dynatrace:index/CustomServiceRuleClass:CustomServiceRuleClass"
                },
                "enabled": {
                    "type": "boolean"
                },
                "file": {
                    "$ref": "#/types/dynatrace:index/CustomServiceRuleFile:CustomServiceRuleFile"
                },
                "methods": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/CustomServiceRuleMethod:CustomServiceRuleMethod"
                    }
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "enabled",
                "methods"
            ]
        },
        "dynatrace:index/CustomServiceRuleClass:CustomServiceRuleClass": {
            "properties": {
                "match": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "dynatrace:index/CustomServiceRuleFile:CustomServiceRuleFile": {
            "properties": {
                "match": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "dynatrace:index/CustomServiceRuleMethod:CustomServiceRuleMethod": {
            "properties": {
                "arguments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "string"
                },
                "modifiers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                },
                "returns": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "visibility": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "name"
                    ]
                }
            }
        },
        "dynatrace:index/CustomTagsTags:CustomTagsTags": {
            "properties": {
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/CustomTagsTagsFilter:CustomTagsTagsFilter"
                    }
                }
            },
            "type": "object"
        },
        "dynatrace:index/CustomTagsTagsFilter:CustomTagsTagsFilter": {
            "properties": {
                "context": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "context",
                "key"
            ]
        },
        "dynatrace:index/DashboardDashboardMetadata:DashboardDashboardMetadata": {
            "properties": {
                "consistentColors": {
                    "type": "boolean"
                },
                "dynamicFilters": {
                    "$ref": "#/types/dynatrace:index/DashboardDashboardMetadataDynamicFilters:DashboardDashboardMetadataDynamicFilters"
                },
                "filter": {
                    "$ref": "#/types/dynatrace:index/DashboardDashboardMetadataFilter:DashboardDashboardMetadataFilter"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "preset": {
                    "type": "boolean"
                },
                "shared": {
                    "type": "boolean",
                    "deprecationMessage": "Please use the resource `dynatrace_dashboard_sharing` to configure share settings"
                },
                "sharingDetails": {
                    "$ref": "#/types/dynatrace:index/DashboardDashboardMetadataSharingDetails:DashboardDashboardMetadataSharingDetails",
                    "deprecationMessage": "Please use the resource `dynatrace_dashboard_sharing` to configure share settings"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tilesNameSize": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "validFilterKeys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "owner"
            ]
        },
        "dynatrace:index/DashboardDashboardMetadataDynamicFilters:DashboardDashboardMetadataDynamicFilters": {
            "properties": {
                "filters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "genericTagFilters": {
                    "$ref": "#/types/dynatrace:index/DashboardDashboardMetadataDynamicFiltersGenericTagFilters:DashboardDashboardMetadataDynamicFiltersGenericTagFilters"
                },
                "tagSuggestionTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "filters"
            ]
        },
        "dynatrace:index/DashboardDashboardMetadataDynamicFiltersGenericTagFilters:DashboardDashboardMetadataDynamicFiltersGenericTagFilters": {
            "properties": {
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/DashboardDashboardMetadataDynamicFiltersGenericTagFiltersFilter:DashboardDashboardMetadataDynamicFiltersGenericTagFiltersFilter"
                    }
                }
            },
            "type": "object",
            "required": [
                "filters"
            ]
        },
        "dynatrace:index/DashboardDashboardMetadataDynamicFiltersGenericTagFiltersFilter:DashboardDashboardMetadataDynamicFiltersGenericTagFiltersFilter": {
            "properties": {
                "entityTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                },
                "suggestionsFromEntityType": {
                    "type": "string"
                },
                "tagKey": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "entityTypes"
            ]
        },
        "dynatrace:index/DashboardDashboardMetadataFilter:DashboardDashboardMetadataFilter": {
            "properties": {
                "managementZones": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/DashboardDashboardMetadataFilterManagementZone:DashboardDashboardMetadataFilterManagementZone"
                    }
                },
                "timeframe": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "dynatrace:index/DashboardDashboardMetadataFilterManagementZone:DashboardDashboardMetadataFilterManagementZone": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "dynatrace:index/DashboardDashboardMetadataSharingDetails:DashboardDashboardMetadataSharingDetails": {
            "properties": {
                "linkShared": {
                    "type": "boolean"
                },
                "published": {
                    "type": "boolean"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "dynatrace:index/DashboardMetadata:DashboardMetadata": {
            "properties": {
                "clusterVersion": {
                    "type": "string"
                },
                "configurationVersions": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "currentConfigurationVersions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object"
        },
        "dynatrace:index/DashboardSharingPermissions:DashboardSharingPermissions": {
            "properties": {
                "permissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/DashboardSharingPermissionsPermission:DashboardSharingPermissionsPermission"
                    }
                }
            },
            "type": "object"
        },
        "dynatrace:index/DashboardSharingPermissionsPermission:DashboardSharingPermissionsPermission": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "level": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "level",
                "type"
            ]
        },
        "dynatrace:index/DashboardSharingPublic:DashboardSharingPublic": {
            "properties": {
                "managementZones": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "urls": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "managementZones"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "managementZones",
                        "urls"
                    ]
                }
            }
        },
        "dynatrace:index/DashboardTile:DashboardTile": {
            "properties": {
                "assignedEntities": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "autoRefreshDisabled": {
                    "type": "boolean"
                },
                "bounds": {
                    "$ref": "#/types/dynatrace:index/DashboardTileBounds:DashboardTileBounds"
                },
                "chartVisible": {
                    "type": "boolean"
                },
                "configured": {
                    "type": "boolean"
                },
                "customName": {
                    "type": "string"
                },
                "excludeMaintenanceWindows": {
                    "type": "boolean"
                },
                "filter": {
                    "$ref": "#/types/dynatrace:index/DashboardTileFilter:DashboardTileFilter"
                },
                "filterConfig": {
                    "$ref": "#/types/dynatrace:index/DashboardTileFilterConfig:DashboardTileFilterConfig"
                },
                "limit": {
                    "type": "integer"
                },
                "markdown": {
                    "type": "string"
                },
                "metric": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "nameSize": {
                    "type": "string"
                },
                "query": {
                    "type": "string"
                },
                "tileType": {
                    "type": "string"
                },
                "timeFrameShift": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "visualization": {
                    "type": "string"
                },
                "visualizationConfig": {
                    "$ref": "#/types/dynatrace:index/DashboardTileVisualizationConfig:DashboardTileVisualizationConfig"
                }
            },
            "type": "object",
            "required": [
                "name",
                "tileType"
            ]
        },
        "dynatrace:index/DashboardTileBounds:DashboardTileBounds": {
            "properties": {
                "height": {
                    "type": "integer"
                },
                "left": {
                    "type": "integer"
                },
                "top": {
                    "type": "integer"
                },
                "unknowns": {
                    "type": "string"
                },
                "width": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "height",
                "left",
                "top",
                "width"
            ]
        },
        "dynatrace:index/DashboardTileFilter:DashboardTileFilter": {
            "properties": {
                "managementZones": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/DashboardTileFilterManagementZone:DashboardTileFilterManagementZone"
                    }
                },
                "timeframe": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "dynatrace:index/DashboardTileFilterConfig:DashboardTileFilterConfig": {
            "properties": {
                "chartConfig": {
                    "$ref": "#/types/dynatrace:index/DashboardTileFilterConfigChartConfig:DashboardTileFilterConfigChartConfig"
                },
                "customName": {
                    "type": "string"
                },
                "defaultName": {
                    "type": "string"
                },
                "filters": {
                    "$ref": "#/types/dynatrace:index/DashboardTileFilterConfigFilters:DashboardTileFilterConfigFilters"
                },
                "type": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "customName",
                "defaultName",
                "type"
            ]
        },
        "dynatrace:index/DashboardTileFilterConfigChartConfig:DashboardTileFilterConfigChartConfig": {
            "properties": {
                "axisLimits": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "number"
                    }
                },
                "leftAxisCustomUnit": {
                    "type": "string"
                },
                "legend": {
                    "type": "boolean"
                },
                "resultMetadatas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/DashboardTileFilterConfigChartConfigResultMetadata:DashboardTileFilterConfigChartConfigResultMetadata"
                    }
                },
                "rightAxisCustomUnit": {
                    "type": "string"
                },
                "series": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/DashboardTileFilterConfigChartConfigSeries:DashboardTileFilterConfigChartConfigSeries"
                    }
                },
                "type": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "dynatrace:index/DashboardTileFilterConfigChartConfigResultMetadata:DashboardTileFilterConfigChartConfigResultMetadata": {
            "properties": {
                "configs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/DashboardTileFilterConfigChartConfigResultMetadataConfig:DashboardTileFilterConfigChartConfigResultMetadataConfig"
                    }
                }
            },
            "type": "object"
        },
        "dynatrace:index/DashboardTileFilterConfigChartConfigResultMetadataConfig:DashboardTileFilterConfigChartConfigResultMetadataConfig": {
            "properties": {
                "customColor": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "lastModified": {
                    "type": "integer"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "dynatrace:index/DashboardTileFilterConfigChartConfigSeries:DashboardTileFilterConfigChartConfigSeries": {
            "properties": {
                "aggregation": {
                    "type": "string"
                },
                "aggregationRate": {
                    "type": "string"
                },
                "dimensions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/DashboardTileFilterConfigChartConfigSeriesDimension:DashboardTileFilterConfigChartConfigSeriesDimension"
                    }
                },
                "entityType": {
                    "type": "string"
                },
                "metric": {
                    "type": "string"
                },
                "percentile": {
                    "type": "integer"
                },
                "sortAscending": {
                    "type": "boolean"
                },
                "sortColumn": {
                    "type": "boolean"
                },
                "type": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "aggregation",
                "entityType",
                "metric",
                "type"
            ]
        },
        "dynatrace:index/DashboardTileFilterConfigChartConfigSeriesDimension:DashboardTileFilterConfigChartConfigSeriesDimension": {
            "properties": {
                "entityDimension": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "dynatrace:index/DashboardTileFilterConfigFilters:DashboardTileFilterConfigFilters": {
            "properties": {
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/DashboardTileFilterConfigFiltersFilter:DashboardTileFilterConfigFiltersFilter"
                    }
                }
            },
            "type": "object"
        },
        "dynatrace:index/DashboardTileFilterConfigFiltersFilter:DashboardTileFilterConfigFiltersFilter": {
            "properties": {
                "entityType": {
                    "type": "string"
                },
                "matches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/DashboardTileFilterConfigFiltersFilterMatch:DashboardTileFilterConfigFiltersFilterMatch"
                    }
                }
            },
            "type": "object",
            "required": [
                "entityType"
            ]
        },
        "dynatrace:index/DashboardTileFilterConfigFiltersFilterMatch:DashboardTileFilterConfigFiltersFilterMatch": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "key"
            ]
        },
        "dynatrace:index/DashboardTileFilterManagementZone:DashboardTileFilterManagementZone": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "dynatrace:index/DashboardTileVisualizationConfig:DashboardTileVisualizationConfig": {
            "properties": {
                "hasAxisBucketing": {
                    "type": "boolean"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "dynatrace:index/DashboardsAllowlistAllowlist:DashboardsAllowlistAllowlist": {
            "properties": {
                "urlpatterns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/DashboardsAllowlistAllowlistUrlpattern:DashboardsAllowlistAllowlistUrlpattern"
                    }
                }
            },
            "type": "object",
            "required": [
                "urlpatterns"
            ]
        },
        "dynatrace:index/DashboardsAllowlistAllowlistUrlpattern:DashboardsAllowlistAllowlistUrlpattern": {
            "properties": {
                "rule": {
                    "type": "string"
                },
                "template": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "rule",
                "template"
            ]
        },
        "dynatrace:index/DashboardsGeneralDefaultDashboardList:DashboardsGeneralDefaultDashboardList": {
            "properties": {
                "defaultDashboards": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/DashboardsGeneralDefaultDashboardListDefaultDashboard:DashboardsGeneralDefaultDashboardListDefaultDashboard"
                    }
                }
            },
            "type": "object",
            "required": [
                "defaultDashboards"
            ]
        },
        "dynatrace:index/DashboardsGeneralDefaultDashboardListDefaultDashboard:DashboardsGeneralDefaultDashboardListDefaultDashboard": {
            "properties": {
                "dashboard": {
                    "type": "string"
                },
                "userGroup": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "dashboard",
                "userGroup"
            ]
        },
        "dynatrace:index/DashboardsPresetsDashboardPresetsList:DashboardsPresetsDashboardPresetsList": {
            "properties": {
                "dashboardPresets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/DashboardsPresetsDashboardPresetsListDashboardPreset:DashboardsPresetsDashboardPresetsListDashboardPreset"
                    }
                }
            },
            "type": "object",
            "required": [
                "dashboardPresets"
            ]
        },
        "dynatrace:index/DashboardsPresetsDashboardPresetsListDashboardPreset:DashboardsPresetsDashboardPresetsListDashboardPreset": {
            "properties": {
                "dashboardPreset": {
                    "type": "string"
                },
                "userGroup": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "dashboardPreset",
                "userGroup"
            ]
        },
        "dynatrace:index/DataPrivacyDataCollection:DataPrivacyDataCollection": {
            "properties": {
                "optInModeEnabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "optInModeEnabled"
            ]
        },
        "dynatrace:index/DataPrivacyDoNotTrack:DataPrivacyDoNotTrack": {
            "properties": {
                "complyWithDoNotTrack": {
                    "type": "boolean"
                },
                "doNotTrack": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "complyWithDoNotTrack"
            ]
        },
        "dynatrace:index/DataPrivacyMasking:DataPrivacyMasking": {
            "properties": {
                "ipAddressMasking": {
                    "type": "string",
                    "deprecationMessage": "This property is not supported anymore by the Dynatrace REST API (since schema version 4)"
                },
                "ipAddressMaskingEnabled": {
                    "type": "boolean",
                    "deprecationMessage": "This property is not supported anymore by the Dynatrace REST API (since schema version 4)"
                },
                "personalDataUriMaskingEnabled": {
                    "type": "boolean"
                },
                "userActionMaskingEnabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "personalDataUriMaskingEnabled",
                "userActionMaskingEnabled"
            ]
        },
        "dynatrace:index/DataPrivacyUserTracking:DataPrivacyUserTracking": {
            "properties": {
                "persistentCookieEnabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "persistentCookieEnabled"
            ]
        },
        "dynatrace:index/DatabaseAnomaliesDbConnectFailures:DatabaseAnomaliesDbConnectFailures": {
            "properties": {
                "connectionFailsCount": {
                    "type": "integer"
                },
                "evalPeriod": {
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "dynatrace:index/DatabaseAnomaliesFailureRate:DatabaseAnomaliesFailureRate": {
            "properties": {
                "auto": {
                    "$ref": "#/types/dynatrace:index/DatabaseAnomaliesFailureRateAuto:DatabaseAnomaliesFailureRateAuto"
                },
                "thresholds": {
                    "$ref": "#/types/dynatrace:index/DatabaseAnomaliesFailureRateThresholds:DatabaseAnomaliesFailureRateThresholds"
                }
            },
            "type": "object"
        },
        "dynatrace:index/DatabaseAnomaliesFailureRateAuto:DatabaseAnomaliesFailureRateAuto": {
            "properties": {
                "absolute": {
                    "type": "integer"
                },
                "relative": {
                    "type": "integer"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "absolute",
                "relative"
            ]
        },
        "dynatrace:index/DatabaseAnomaliesFailureRateThresholds:DatabaseAnomaliesFailureRateThresholds": {
            "properties": {
                "sensitivity": {
                    "type": "string"
                },
                "threshold": {
                    "type": "integer"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "sensitivity",
                "threshold"
            ]
        },
        "dynatrace:index/DatabaseAnomaliesLoad:DatabaseAnomaliesLoad": {
            "properties": {
                "drops": {
                    "$ref": "#/types/dynatrace:index/DatabaseAnomaliesLoadDrops:DatabaseAnomaliesLoadDrops"
                },
                "spikes": {
                    "$ref": "#/types/dynatrace:index/DatabaseAnomaliesLoadSpikes:DatabaseAnomaliesLoadSpikes"
                }
            },
            "type": "object"
        },
        "dynatrace:index/DatabaseAnomaliesLoadDrops:DatabaseAnomaliesLoadDrops": {
            "properties": {
                "minutes": {
                    "type": "integer"
                },
                "percent": {
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "dynatrace:index/DatabaseAnomaliesLoadSpikes:DatabaseAnomaliesLoadSpikes": {
            "properties": {
                "minutes": {
                    "type": "integer"
                },
                "percent": {
                    "type": "integer"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "dynatrace:index/DatabaseAnomaliesResponseTime:DatabaseAnomaliesResponseTime": {
            "properties": {
                "auto": {
                    "$ref": "#/types/dynatrace:index/DatabaseAnomaliesResponseTimeAuto:DatabaseAnomaliesResponseTimeAuto"
                },
                "thresholds": {
                    "$ref": "#/types/dynatrace:index/DatabaseAnomaliesResponseTimeThresholds:DatabaseAnomaliesResponseTimeThresholds"
                }
            },
            "type": "object"
        },
        "dynatrace:index/DatabaseAnomaliesResponseTimeAuto:DatabaseAnomaliesResponseTimeAuto": {
            "properties": {
                "load": {
                    "type": "string"
                },
                "milliseconds": {
                    "type": "integer"
                },
                "percent": {
                    "type": "integer"
                },
                "slowestMilliseconds": {
                    "type": "integer"
                },
                "slowestPercent": {
                    "type": "integer"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "load",
                "milliseconds",
                "percent",
                "slowestMilliseconds",
                "slowestPercent"
            ]
        },
        "dynatrace:index/DatabaseAnomaliesResponseTimeThresholds:DatabaseAnomaliesResponseTimeThresholds": {
            "properties": {
                "load": {
                    "type": "string"
                },
                "milliseconds": {
                    "type": "integer"
                },
                "sensitivity": {
                    "type": "string"
                },
                "slowestMilliseconds": {
                    "type": "integer"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "load",
                "milliseconds",
                "sensitivity",
                "slowestMilliseconds"
            ]
        },
        "dynatrace:index/DatabaseAnomaliesV2DatabaseConnections:DatabaseAnomaliesV2DatabaseConnections": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "maxFailedConnects": {
                    "type": "integer"
                },
                "timePeriod": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/DatabaseAnomaliesV2FailureRate:DatabaseAnomaliesV2FailureRate": {
            "properties": {
                "autoDetection": {
                    "$ref": "#/types/dynatrace:index/DatabaseAnomaliesV2FailureRateAutoDetection:DatabaseAnomaliesV2FailureRateAutoDetection"
                },
                "detectionMode": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "fixedDetection": {
                    "$ref": "#/types/dynatrace:index/DatabaseAnomaliesV2FailureRateFixedDetection:DatabaseAnomaliesV2FailureRateFixedDetection"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/DatabaseAnomaliesV2FailureRateAutoDetection:DatabaseAnomaliesV2FailureRateAutoDetection": {
            "properties": {
                "absoluteIncrease": {
                    "type": "number"
                },
                "overAlertingProtection": {
                    "$ref": "#/types/dynatrace:index/DatabaseAnomaliesV2FailureRateAutoDetectionOverAlertingProtection:DatabaseAnomaliesV2FailureRateAutoDetectionOverAlertingProtection"
                },
                "relativeIncrease": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "absoluteIncrease",
                "overAlertingProtection",
                "relativeIncrease"
            ]
        },
        "dynatrace:index/DatabaseAnomaliesV2FailureRateAutoDetectionOverAlertingProtection:DatabaseAnomaliesV2FailureRateAutoDetectionOverAlertingProtection": {
            "properties": {
                "minutesAbnormalState": {
                    "type": "integer"
                },
                "requestsPerMinute": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "minutesAbnormalState",
                "requestsPerMinute"
            ]
        },
        "dynatrace:index/DatabaseAnomaliesV2FailureRateFixedDetection:DatabaseAnomaliesV2FailureRateFixedDetection": {
            "properties": {
                "overAlertingProtection": {
                    "$ref": "#/types/dynatrace:index/DatabaseAnomaliesV2FailureRateFixedDetectionOverAlertingProtection:DatabaseAnomaliesV2FailureRateFixedDetectionOverAlertingProtection"
                },
                "sensitivity": {
                    "type": "string"
                },
                "threshold": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "overAlertingProtection",
                "sensitivity",
                "threshold"
            ]
        },
        "dynatrace:index/DatabaseAnomaliesV2FailureRateFixedDetectionOverAlertingProtection:DatabaseAnomaliesV2FailureRateFixedDetectionOverAlertingProtection": {
            "properties": {
                "minutesAbnormalState": {
                    "type": "integer"
                },
                "requestsPerMinute": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "minutesAbnormalState",
                "requestsPerMinute"
            ]
        },
        "dynatrace:index/DatabaseAnomaliesV2LoadDrops:DatabaseAnomaliesV2LoadDrops": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "loadDropPercent": {
                    "type": "number"
                },
                "minutesAbnormalState": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/DatabaseAnomaliesV2LoadSpikes:DatabaseAnomaliesV2LoadSpikes": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "loadSpikePercent": {
                    "type": "number"
                },
                "minutesAbnormalState": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/DatabaseAnomaliesV2ResponseTime:DatabaseAnomaliesV2ResponseTime": {
            "properties": {
                "autoDetection": {
                    "$ref": "#/types/dynatrace:index/DatabaseAnomaliesV2ResponseTimeAutoDetection:DatabaseAnomaliesV2ResponseTimeAutoDetection"
                },
                "detectionMode": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "fixedDetection": {
                    "$ref": "#/types/dynatrace:index/DatabaseAnomaliesV2ResponseTimeFixedDetection:DatabaseAnomaliesV2ResponseTimeFixedDetection"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/DatabaseAnomaliesV2ResponseTimeAutoDetection:DatabaseAnomaliesV2ResponseTimeAutoDetection": {
            "properties": {
                "overAlertingProtection": {
                    "$ref": "#/types/dynatrace:index/DatabaseAnomaliesV2ResponseTimeAutoDetectionOverAlertingProtection:DatabaseAnomaliesV2ResponseTimeAutoDetectionOverAlertingProtection"
                },
                "responseTimeAll": {
                    "$ref": "#/types/dynatrace:index/DatabaseAnomaliesV2ResponseTimeAutoDetectionResponseTimeAll:DatabaseAnomaliesV2ResponseTimeAutoDetectionResponseTimeAll"
                },
                "responseTimeSlowest": {
                    "$ref": "#/types/dynatrace:index/DatabaseAnomaliesV2ResponseTimeAutoDetectionResponseTimeSlowest:DatabaseAnomaliesV2ResponseTimeAutoDetectionResponseTimeSlowest"
                }
            },
            "type": "object",
            "required": [
                "overAlertingProtection",
                "responseTimeAll",
                "responseTimeSlowest"
            ]
        },
        "dynatrace:index/DatabaseAnomaliesV2ResponseTimeAutoDetectionOverAlertingProtection:DatabaseAnomaliesV2ResponseTimeAutoDetectionOverAlertingProtection": {
            "properties": {
                "minutesAbnormalState": {
                    "type": "integer"
                },
                "requestsPerMinute": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "minutesAbnormalState",
                "requestsPerMinute"
            ]
        },
        "dynatrace:index/DatabaseAnomaliesV2ResponseTimeAutoDetectionResponseTimeAll:DatabaseAnomaliesV2ResponseTimeAutoDetectionResponseTimeAll": {
            "properties": {
                "degradationMilliseconds": {
                    "type": "number"
                },
                "degradationPercent": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "degradationMilliseconds",
                "degradationPercent"
            ]
        },
        "dynatrace:index/DatabaseAnomaliesV2ResponseTimeAutoDetectionResponseTimeSlowest:DatabaseAnomaliesV2ResponseTimeAutoDetectionResponseTimeSlowest": {
            "properties": {
                "slowestDegradationMilliseconds": {
                    "type": "number"
                },
                "slowestDegradationPercent": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "slowestDegradationMilliseconds",
                "slowestDegradationPercent"
            ]
        },
        "dynatrace:index/DatabaseAnomaliesV2ResponseTimeFixedDetection:DatabaseAnomaliesV2ResponseTimeFixedDetection": {
            "properties": {
                "overAlertingProtection": {
                    "$ref": "#/types/dynatrace:index/DatabaseAnomaliesV2ResponseTimeFixedDetectionOverAlertingProtection:DatabaseAnomaliesV2ResponseTimeFixedDetectionOverAlertingProtection"
                },
                "responseTimeAll": {
                    "$ref": "#/types/dynatrace:index/DatabaseAnomaliesV2ResponseTimeFixedDetectionResponseTimeAll:DatabaseAnomaliesV2ResponseTimeFixedDetectionResponseTimeAll"
                },
                "responseTimeSlowest": {
                    "$ref": "#/types/dynatrace:index/DatabaseAnomaliesV2ResponseTimeFixedDetectionResponseTimeSlowest:DatabaseAnomaliesV2ResponseTimeFixedDetectionResponseTimeSlowest"
                },
                "sensitivity": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "overAlertingProtection",
                "responseTimeAll",
                "responseTimeSlowest",
                "sensitivity"
            ]
        },
        "dynatrace:index/DatabaseAnomaliesV2ResponseTimeFixedDetectionOverAlertingProtection:DatabaseAnomaliesV2ResponseTimeFixedDetectionOverAlertingProtection": {
            "properties": {
                "minutesAbnormalState": {
                    "type": "integer"
                },
                "requestsPerMinute": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "minutesAbnormalState",
                "requestsPerMinute"
            ]
        },
        "dynatrace:index/DatabaseAnomaliesV2ResponseTimeFixedDetectionResponseTimeAll:DatabaseAnomaliesV2ResponseTimeFixedDetectionResponseTimeAll": {
            "properties": {
                "degradationMilliseconds": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "degradationMilliseconds"
            ]
        },
        "dynatrace:index/DatabaseAnomaliesV2ResponseTimeFixedDetectionResponseTimeSlowest:DatabaseAnomaliesV2ResponseTimeFixedDetectionResponseTimeSlowest": {
            "properties": {
                "slowestDegradationMilliseconds": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "slowestDegradationMilliseconds"
            ]
        },
        "dynatrace:index/DduPoolEvents:DduPoolEvents": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/DduPoolLogMonitoring:DduPoolLogMonitoring": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/DduPoolMetrics:DduPoolMetrics": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/DduPoolServerless:DduPoolServerless": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/DduPoolTraces:DduPoolTraces": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/DeclarativeGroupingDetection:DeclarativeGroupingDetection": {
            "properties": {
                "processDefinitions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/DeclarativeGroupingDetectionProcessDefinition:DeclarativeGroupingDetectionProcessDefinition"
                    }
                }
            },
            "type": "object",
            "required": [
                "processDefinitions"
            ]
        },
        "dynatrace:index/DeclarativeGroupingDetectionProcessDefinition:DeclarativeGroupingDetectionProcessDefinition": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "processGroupName": {
                    "type": "string"
                },
                "report": {
                    "type": "string"
                },
                "rules": {
                    "$ref": "#/types/dynatrace:index/DeclarativeGroupingDetectionProcessDefinitionRules:DeclarativeGroupingDetectionProcessDefinitionRules"
                }
            },
            "type": "object",
            "required": [
                "id",
                "processGroupName",
                "report"
            ]
        },
        "dynatrace:index/DeclarativeGroupingDetectionProcessDefinitionRules:DeclarativeGroupingDetectionProcessDefinitionRules": {
            "properties": {
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/DeclarativeGroupingDetectionProcessDefinitionRulesRule:DeclarativeGroupingDetectionProcessDefinitionRulesRule"
                    }
                }
            },
            "type": "object",
            "required": [
                "rules"
            ]
        },
        "dynatrace:index/DeclarativeGroupingDetectionProcessDefinitionRulesRule:DeclarativeGroupingDetectionProcessDefinitionRulesRule": {
            "properties": {
                "condition": {
                    "type": "string"
                },
                "property": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "condition",
                "property"
            ]
        },
        "dynatrace:index/DirectSharesRecipients:DirectSharesRecipients": {
            "properties": {
                "recipients": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/DirectSharesRecipientsRecipient:DirectSharesRecipientsRecipient"
                    }
                }
            },
            "type": "object"
        },
        "dynatrace:index/DirectSharesRecipientsRecipient:DirectSharesRecipientsRecipient": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "dynatrace:index/DiskAnomaliesDiskName:DiskAnomaliesDiskName": {
            "properties": {
                "operator": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator",
                "value"
            ]
        },
        "dynatrace:index/DiskAnomaliesTags:DiskAnomaliesTags": {
            "properties": {
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/DiskAnomaliesTagsFilter:DiskAnomaliesTagsFilter"
                    }
                }
            },
            "type": "object"
        },
        "dynatrace:index/DiskAnomaliesTagsFilter:DiskAnomaliesTagsFilter": {
            "properties": {
                "context": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "context",
                "key"
            ]
        },
        "dynatrace:index/DiskAnomaliesV2Disk:DiskAnomaliesV2Disk": {
            "properties": {
                "diskLowInodesDetection": {
                    "$ref": "#/types/dynatrace:index/DiskAnomaliesV2DiskDiskLowInodesDetection:DiskAnomaliesV2DiskDiskLowInodesDetection"
                },
                "diskLowSpaceDetection": {
                    "$ref": "#/types/dynatrace:index/DiskAnomaliesV2DiskDiskLowSpaceDetection:DiskAnomaliesV2DiskDiskLowSpaceDetection"
                },
                "diskSlowWritesAndReadsDetection": {
                    "$ref": "#/types/dynatrace:index/DiskAnomaliesV2DiskDiskSlowWritesAndReadsDetection:DiskAnomaliesV2DiskDiskSlowWritesAndReadsDetection"
                }
            },
            "type": "object",
            "required": [
                "diskLowInodesDetection",
                "diskLowSpaceDetection",
                "diskSlowWritesAndReadsDetection"
            ]
        },
        "dynatrace:index/DiskAnomaliesV2DiskDiskLowInodesDetection:DiskAnomaliesV2DiskDiskLowInodesDetection": {
            "properties": {
                "customThresholds": {
                    "$ref": "#/types/dynatrace:index/DiskAnomaliesV2DiskDiskLowInodesDetectionCustomThresholds:DiskAnomaliesV2DiskDiskLowInodesDetectionCustomThresholds"
                },
                "detectionMode": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/DiskAnomaliesV2DiskDiskLowInodesDetectionCustomThresholds:DiskAnomaliesV2DiskDiskLowInodesDetectionCustomThresholds": {
            "properties": {
                "freeInodesPercentage": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "freeInodesPercentage"
            ]
        },
        "dynatrace:index/DiskAnomaliesV2DiskDiskLowSpaceDetection:DiskAnomaliesV2DiskDiskLowSpaceDetection": {
            "properties": {
                "customThresholds": {
                    "$ref": "#/types/dynatrace:index/DiskAnomaliesV2DiskDiskLowSpaceDetectionCustomThresholds:DiskAnomaliesV2DiskDiskLowSpaceDetectionCustomThresholds"
                },
                "detectionMode": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/DiskAnomaliesV2DiskDiskLowSpaceDetectionCustomThresholds:DiskAnomaliesV2DiskDiskLowSpaceDetectionCustomThresholds": {
            "properties": {
                "freeSpacePercentage": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "freeSpacePercentage"
            ]
        },
        "dynatrace:index/DiskAnomaliesV2DiskDiskSlowWritesAndReadsDetection:DiskAnomaliesV2DiskDiskSlowWritesAndReadsDetection": {
            "properties": {
                "customThresholds": {
                    "$ref": "#/types/dynatrace:index/DiskAnomaliesV2DiskDiskSlowWritesAndReadsDetectionCustomThresholds:DiskAnomaliesV2DiskDiskSlowWritesAndReadsDetectionCustomThresholds"
                },
                "detectionMode": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/DiskAnomaliesV2DiskDiskSlowWritesAndReadsDetectionCustomThresholds:DiskAnomaliesV2DiskDiskSlowWritesAndReadsDetectionCustomThresholds": {
            "properties": {
                "writeAndReadTime": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "writeAndReadTime"
            ]
        },
        "dynatrace:index/DiskAnomalyRulesDiskNameFilter:DiskAnomalyRulesDiskNameFilter": {
            "properties": {
                "operator": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/DiskAnomalyRulesSampleLimit:DiskAnomalyRulesSampleLimit": {
            "properties": {
                "samples": {
                    "type": "integer"
                },
                "violatingSamples": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "samples",
                "violatingSamples"
            ]
        },
        "dynatrace:index/DiskOptionsExclusions:DiskOptionsExclusions": {
            "properties": {
                "exclusions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/DiskOptionsExclusionsExclusion:DiskOptionsExclusionsExclusion"
                    }
                }
            },
            "type": "object",
            "required": [
                "exclusions"
            ]
        },
        "dynatrace:index/DiskOptionsExclusionsExclusion:DiskOptionsExclusionsExclusion": {
            "properties": {
                "filesystem": {
                    "type": "string"
                },
                "mountpoint": {
                    "type": "string"
                },
                "os": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "os"
            ]
        },
        "dynatrace:index/DiskSpecificAnomaliesV2DiskLowInodesDetection:DiskSpecificAnomaliesV2DiskLowInodesDetection": {
            "properties": {
                "customThresholds": {
                    "$ref": "#/types/dynatrace:index/DiskSpecificAnomaliesV2DiskLowInodesDetectionCustomThresholds:DiskSpecificAnomaliesV2DiskLowInodesDetectionCustomThresholds"
                },
                "detectionMode": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/DiskSpecificAnomaliesV2DiskLowInodesDetectionCustomThresholds:DiskSpecificAnomaliesV2DiskLowInodesDetectionCustomThresholds": {
            "properties": {
                "freeInodesPercentage": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "freeInodesPercentage"
            ]
        },
        "dynatrace:index/DiskSpecificAnomaliesV2DiskLowSpaceDetection:DiskSpecificAnomaliesV2DiskLowSpaceDetection": {
            "properties": {
                "customThresholds": {
                    "$ref": "#/types/dynatrace:index/DiskSpecificAnomaliesV2DiskLowSpaceDetectionCustomThresholds:DiskSpecificAnomaliesV2DiskLowSpaceDetectionCustomThresholds"
                },
                "detectionMode": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/DiskSpecificAnomaliesV2DiskLowSpaceDetectionCustomThresholds:DiskSpecificAnomaliesV2DiskLowSpaceDetectionCustomThresholds": {
            "properties": {
                "freeSpacePercentage": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "freeSpacePercentage"
            ]
        },
        "dynatrace:index/DiskSpecificAnomaliesV2DiskSlowWritesAndReadsDetection:DiskSpecificAnomaliesV2DiskSlowWritesAndReadsDetection": {
            "properties": {
                "customThresholds": {
                    "$ref": "#/types/dynatrace:index/DiskSpecificAnomaliesV2DiskSlowWritesAndReadsDetectionCustomThresholds:DiskSpecificAnomaliesV2DiskSlowWritesAndReadsDetectionCustomThresholds"
                },
                "detectionMode": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/DiskSpecificAnomaliesV2DiskSlowWritesAndReadsDetectionCustomThresholds:DiskSpecificAnomaliesV2DiskSlowWritesAndReadsDetectionCustomThresholds": {
            "properties": {
                "writeAndReadTime": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "writeAndReadTime"
            ]
        },
        "dynatrace:index/EnvironmentQuotas:EnvironmentQuotas": {
            "properties": {
                "ddus": {
                    "$ref": "#/types/dynatrace:index/EnvironmentQuotasDdus:EnvironmentQuotasDdus"
                },
                "demUnits": {
                    "$ref": "#/types/dynatrace:index/EnvironmentQuotasDemUnits:EnvironmentQuotasDemUnits"
                },
                "hostUnits": {
                    "type": "integer"
                },
                "logs": {
                    "$ref": "#/types/dynatrace:index/EnvironmentQuotasLogs:EnvironmentQuotasLogs"
                },
                "synthetic": {
                    "$ref": "#/types/dynatrace:index/EnvironmentQuotasSynthetic:EnvironmentQuotasSynthetic"
                },
                "userSessions": {
                    "$ref": "#/types/dynatrace:index/EnvironmentQuotasUserSessions:EnvironmentQuotasUserSessions"
                }
            },
            "type": "object"
        },
        "dynatrace:index/EnvironmentQuotasDdus:EnvironmentQuotasDdus": {
            "properties": {
                "annual": {
                    "type": "integer"
                },
                "monthly": {
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "dynatrace:index/EnvironmentQuotasDemUnits:EnvironmentQuotasDemUnits": {
            "properties": {
                "annual": {
                    "type": "integer"
                },
                "monthly": {
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "dynatrace:index/EnvironmentQuotasLogs:EnvironmentQuotasLogs": {
            "properties": {
                "annual": {
                    "type": "integer"
                },
                "monthly": {
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "dynatrace:index/EnvironmentQuotasSynthetic:EnvironmentQuotasSynthetic": {
            "properties": {
                "annual": {
                    "type": "integer"
                },
                "monthly": {
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "dynatrace:index/EnvironmentQuotasUserSessions:EnvironmentQuotasUserSessions": {
            "properties": {
                "annual": {
                    "type": "integer"
                },
                "monthly": {
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "dynatrace:index/EnvironmentStorage:EnvironmentStorage": {
            "properties": {
                "limits": {
                    "$ref": "#/types/dynatrace:index/EnvironmentStorageLimits:EnvironmentStorageLimits"
                },
                "retention": {
                    "$ref": "#/types/dynatrace:index/EnvironmentStorageRetention:EnvironmentStorageRetention"
                },
                "transactions": {
                    "type": "integer"
                },
                "userActions": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "transactions"
            ]
        },
        "dynatrace:index/EnvironmentStorageLimits:EnvironmentStorageLimits": {
            "properties": {
                "logs": {
                    "type": "integer"
                },
                "sessionReplay": {
                    "type": "integer"
                },
                "symbolFiles": {
                    "type": "integer"
                },
                "transactions": {
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "dynatrace:index/EnvironmentStorageRetention:EnvironmentStorageRetention": {
            "properties": {
                "logs": {
                    "type": "integer"
                },
                "rum": {
                    "type": "integer"
                },
                "serviceCodeLevel": {
                    "type": "integer"
                },
                "serviceRequestLevel": {
                    "type": "integer"
                },
                "sessionReplay": {
                    "type": "integer"
                },
                "synthetic": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "rum",
                "serviceCodeLevel",
                "serviceRequestLevel",
                "sessionReplay",
                "synthetic"
            ]
        },
        "dynatrace:index/FailureDetectionParametersBrokenLinks:FailureDetectionParametersBrokenLinks": {
            "properties": {
                "brokenLinkDomains": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "http404NotFoundFailures": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "http404NotFoundFailures"
            ]
        },
        "dynatrace:index/FailureDetectionParametersExceptionRules:FailureDetectionParametersExceptionRules": {
            "properties": {
                "customErrorRules": {
                    "$ref": "#/types/dynatrace:index/FailureDetectionParametersExceptionRulesCustomErrorRules:FailureDetectionParametersExceptionRulesCustomErrorRules"
                },
                "customHandledExceptions": {
                    "$ref": "#/types/dynatrace:index/FailureDetectionParametersExceptionRulesCustomHandledExceptions:FailureDetectionParametersExceptionRulesCustomHandledExceptions"
                },
                "ignoreAllExceptions": {
                    "type": "boolean"
                },
                "ignoreSpanFailureDetection": {
                    "type": "boolean"
                },
                "ignoredExceptions": {
                    "$ref": "#/types/dynatrace:index/FailureDetectionParametersExceptionRulesIgnoredExceptions:FailureDetectionParametersExceptionRulesIgnoredExceptions"
                },
                "successForcingExceptions": {
                    "$ref": "#/types/dynatrace:index/FailureDetectionParametersExceptionRulesSuccessForcingExceptions:FailureDetectionParametersExceptionRulesSuccessForcingExceptions"
                }
            },
            "type": "object",
            "required": [
                "ignoreAllExceptions",
                "ignoreSpanFailureDetection"
            ]
        },
        "dynatrace:index/FailureDetectionParametersExceptionRulesCustomErrorRules:FailureDetectionParametersExceptionRulesCustomErrorRules": {
            "properties": {
                "customErrorRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/FailureDetectionParametersExceptionRulesCustomErrorRulesCustomErrorRule:FailureDetectionParametersExceptionRulesCustomErrorRulesCustomErrorRule"
                    }
                }
            },
            "type": "object",
            "required": [
                "customErrorRules"
            ]
        },
        "dynatrace:index/FailureDetectionParametersExceptionRulesCustomErrorRulesCustomErrorRule:FailureDetectionParametersExceptionRulesCustomErrorRulesCustomErrorRule": {
            "properties": {
                "condition": {
                    "$ref": "#/types/dynatrace:index/FailureDetectionParametersExceptionRulesCustomErrorRulesCustomErrorRuleCondition:FailureDetectionParametersExceptionRulesCustomErrorRulesCustomErrorRuleCondition"
                },
                "requestAttribute": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "condition",
                "requestAttribute"
            ]
        },
        "dynatrace:index/FailureDetectionParametersExceptionRulesCustomErrorRulesCustomErrorRuleCondition:FailureDetectionParametersExceptionRulesCustomErrorRulesCustomErrorRuleCondition": {
            "properties": {
                "caseSensitive": {
                    "type": "boolean"
                },
                "compareOperationType": {
                    "type": "string"
                },
                "doubleValue": {
                    "type": "number"
                },
                "intValue": {
                    "type": "integer"
                },
                "textValue": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "compareOperationType"
            ]
        },
        "dynatrace:index/FailureDetectionParametersExceptionRulesCustomHandledExceptions:FailureDetectionParametersExceptionRulesCustomHandledExceptions": {
            "properties": {
                "customHandledExceptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/FailureDetectionParametersExceptionRulesCustomHandledExceptionsCustomHandledException:FailureDetectionParametersExceptionRulesCustomHandledExceptionsCustomHandledException"
                    }
                }
            },
            "type": "object",
            "required": [
                "customHandledExceptions"
            ]
        },
        "dynatrace:index/FailureDetectionParametersExceptionRulesCustomHandledExceptionsCustomHandledException:FailureDetectionParametersExceptionRulesCustomHandledExceptionsCustomHandledException": {
            "properties": {
                "classPattern": {
                    "type": "string"
                },
                "messagePattern": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "dynatrace:index/FailureDetectionParametersExceptionRulesIgnoredExceptions:FailureDetectionParametersExceptionRulesIgnoredExceptions": {
            "properties": {
                "customHandledExceptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/FailureDetectionParametersExceptionRulesIgnoredExceptionsCustomHandledException:FailureDetectionParametersExceptionRulesIgnoredExceptionsCustomHandledException"
                    }
                }
            },
            "type": "object",
            "required": [
                "customHandledExceptions"
            ]
        },
        "dynatrace:index/FailureDetectionParametersExceptionRulesIgnoredExceptionsCustomHandledException:FailureDetectionParametersExceptionRulesIgnoredExceptionsCustomHandledException": {
            "properties": {
                "classPattern": {
                    "type": "string"
                },
                "messagePattern": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "dynatrace:index/FailureDetectionParametersExceptionRulesSuccessForcingExceptions:FailureDetectionParametersExceptionRulesSuccessForcingExceptions": {
            "properties": {
                "customHandledExceptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/FailureDetectionParametersExceptionRulesSuccessForcingExceptionsCustomHandledException:FailureDetectionParametersExceptionRulesSuccessForcingExceptionsCustomHandledException"
                    }
                }
            },
            "type": "object",
            "required": [
                "customHandledExceptions"
            ]
        },
        "dynatrace:index/FailureDetectionParametersExceptionRulesSuccessForcingExceptionsCustomHandledException:FailureDetectionParametersExceptionRulesSuccessForcingExceptionsCustomHandledException": {
            "properties": {
                "classPattern": {
                    "type": "string"
                },
                "messagePattern": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "dynatrace:index/FailureDetectionParametersHttpResponseCodes:FailureDetectionParametersHttpResponseCodes": {
            "properties": {
                "clientSideErrors": {
                    "type": "string"
                },
                "failOnMissingResponseCodeClientSide": {
                    "type": "boolean"
                },
                "failOnMissingResponseCodeServerSide": {
                    "type": "boolean"
                },
                "serverSideErrors": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "clientSideErrors",
                "failOnMissingResponseCodeClientSide",
                "failOnMissingResponseCodeServerSide",
                "serverSideErrors"
            ]
        },
        "dynatrace:index/FailureDetectionRulesConditions:FailureDetectionRulesConditions": {
            "properties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/FailureDetectionRulesConditionsCondition:FailureDetectionRulesConditionsCondition"
                    }
                }
            },
            "type": "object",
            "required": [
                "conditions"
            ]
        },
        "dynatrace:index/FailureDetectionRulesConditionsCondition:FailureDetectionRulesConditionsCondition": {
            "properties": {
                "attribute": {
                    "type": "string"
                },
                "predicate": {
                    "$ref": "#/types/dynatrace:index/FailureDetectionRulesConditionsConditionPredicate:FailureDetectionRulesConditionsConditionPredicate"
                }
            },
            "type": "object",
            "required": [
                "attribute",
                "predicate"
            ]
        },
        "dynatrace:index/FailureDetectionRulesConditionsConditionPredicate:FailureDetectionRulesConditionsConditionPredicate": {
            "properties": {
                "caseSensitive": {
                    "type": "boolean"
                },
                "managementZones": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "predicateType": {
                    "type": "string"
                },
                "serviceTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tagKeys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "textValues": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "predicateType"
            ]
        },
        "dynatrace:index/GenericRelationshipsSources:GenericRelationshipsSources": {
            "properties": {
                "sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/GenericRelationshipsSourcesSource:GenericRelationshipsSourcesSource"
                    }
                }
            },
            "type": "object",
            "required": [
                "sources"
            ]
        },
        "dynatrace:index/GenericRelationshipsSourcesSource:GenericRelationshipsSourcesSource": {
            "properties": {
                "condition": {
                    "type": "string"
                },
                "mappingRules": {
                    "$ref": "#/types/dynatrace:index/GenericRelationshipsSourcesSourceMappingRules:GenericRelationshipsSourcesSourceMappingRules"
                },
                "sourceType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "sourceType"
            ]
        },
        "dynatrace:index/GenericRelationshipsSourcesSourceMappingRules:GenericRelationshipsSourcesSourceMappingRules": {
            "properties": {
                "mappingRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/GenericRelationshipsSourcesSourceMappingRulesMappingRule:GenericRelationshipsSourcesSourceMappingRulesMappingRule"
                    }
                }
            },
            "type": "object",
            "required": [
                "mappingRules"
            ]
        },
        "dynatrace:index/GenericRelationshipsSourcesSourceMappingRulesMappingRule:GenericRelationshipsSourcesSourceMappingRulesMappingRule": {
            "properties": {
                "destinationProperty": {
                    "type": "string"
                },
                "destinationTransformation": {
                    "type": "string"
                },
                "sourceProperty": {
                    "type": "string"
                },
                "sourceTransformation": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "destinationProperty",
                "destinationTransformation",
                "sourceProperty",
                "sourceTransformation"
            ]
        },
        "dynatrace:index/GenericTypesRules:GenericTypesRules": {
            "properties": {
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/GenericTypesRulesRule:GenericTypesRulesRule"
                    }
                }
            },
            "type": "object",
            "required": [
                "rules"
            ]
        },
        "dynatrace:index/GenericTypesRulesRule:GenericTypesRulesRule": {
            "properties": {
                "attributes": {
                    "$ref": "#/types/dynatrace:index/GenericTypesRulesRuleAttributes:GenericTypesRulesRuleAttributes"
                },
                "iconPattern": {
                    "type": "string"
                },
                "idPattern": {
                    "type": "string"
                },
                "instanceNamePattern": {
                    "type": "string"
                },
                "requiredDimensions": {
                    "$ref": "#/types/dynatrace:index/GenericTypesRulesRuleRequiredDimensions:GenericTypesRulesRuleRequiredDimensions"
                },
                "role": {
                    "type": "string"
                },
                "sources": {
                    "$ref": "#/types/dynatrace:index/GenericTypesRulesRuleSources:GenericTypesRulesRuleSources"
                }
            },
            "type": "object",
            "required": [
                "idPattern",
                "sources"
            ]
        },
        "dynatrace:index/GenericTypesRulesRuleAttributes:GenericTypesRulesRuleAttributes": {
            "properties": {
                "attributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/GenericTypesRulesRuleAttributesAttribute:GenericTypesRulesRuleAttributesAttribute"
                    }
                }
            },
            "type": "object",
            "required": [
                "attributes"
            ]
        },
        "dynatrace:index/GenericTypesRulesRuleAttributesAttribute:GenericTypesRulesRuleAttributesAttribute": {
            "properties": {
                "displayName": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "pattern": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "pattern"
            ]
        },
        "dynatrace:index/GenericTypesRulesRuleRequiredDimensions:GenericTypesRulesRuleRequiredDimensions": {
            "properties": {
                "requiredDimensions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/GenericTypesRulesRuleRequiredDimensionsRequiredDimension:GenericTypesRulesRuleRequiredDimensionsRequiredDimension"
                    }
                }
            },
            "type": "object",
            "required": [
                "requiredDimensions"
            ]
        },
        "dynatrace:index/GenericTypesRulesRuleRequiredDimensionsRequiredDimension:GenericTypesRulesRuleRequiredDimensionsRequiredDimension": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "valuePattern": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key"
            ]
        },
        "dynatrace:index/GenericTypesRulesRuleSources:GenericTypesRulesRuleSources": {
            "properties": {
                "sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/GenericTypesRulesRuleSourcesSource:GenericTypesRulesRuleSourcesSource"
                    }
                }
            },
            "type": "object",
            "required": [
                "sources"
            ]
        },
        "dynatrace:index/GenericTypesRulesRuleSourcesSource:GenericTypesRulesRuleSourcesSource": {
            "properties": {
                "condition": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "sourceType"
            ]
        },
        "dynatrace:index/GrailMetricsAllowlistAllowRules:GrailMetricsAllowlistAllowRules": {
            "properties": {
                "allowRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/GrailMetricsAllowlistAllowRulesAllowRule:GrailMetricsAllowlistAllowRulesAllowRule"
                    }
                }
            },
            "type": "object",
            "required": [
                "allowRules"
            ]
        },
        "dynatrace:index/GrailMetricsAllowlistAllowRulesAllowRule:GrailMetricsAllowlistAllowRulesAllowRule": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "metricKey": {
                    "type": "string"
                },
                "pattern": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "enabled",
                "metricKey",
                "pattern"
            ]
        },
        "dynatrace:index/HostAnomaliesConnections:HostAnomaliesConnections": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "enabledOnGracefulShutdowns": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "enabled",
                "enabledOnGracefulShutdowns"
            ]
        },
        "dynatrace:index/HostAnomaliesCpu:HostAnomaliesCpu": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "thresholds": {
                    "$ref": "#/types/dynatrace:index/HostAnomaliesCpuThresholds:HostAnomaliesCpuThresholds"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/HostAnomaliesCpuThresholds:HostAnomaliesCpuThresholds": {
            "properties": {
                "saturation": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "saturation"
            ]
        },
        "dynatrace:index/HostAnomaliesDisks:HostAnomaliesDisks": {
            "properties": {
                "inodes": {
                    "$ref": "#/types/dynatrace:index/HostAnomaliesDisksInodes:HostAnomaliesDisksInodes"
                },
                "space": {
                    "$ref": "#/types/dynatrace:index/HostAnomaliesDisksSpace:HostAnomaliesDisksSpace"
                },
                "speed": {
                    "$ref": "#/types/dynatrace:index/HostAnomaliesDisksSpeed:HostAnomaliesDisksSpeed"
                }
            },
            "type": "object"
        },
        "dynatrace:index/HostAnomaliesDisksInodes:HostAnomaliesDisksInodes": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "thresholds": {
                    "$ref": "#/types/dynatrace:index/HostAnomaliesDisksInodesThresholds:HostAnomaliesDisksInodesThresholds"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/HostAnomaliesDisksInodesThresholds:HostAnomaliesDisksInodesThresholds": {
            "properties": {
                "percentage": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "percentage"
            ]
        },
        "dynatrace:index/HostAnomaliesDisksSpace:HostAnomaliesDisksSpace": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "thresholds": {
                    "$ref": "#/types/dynatrace:index/HostAnomaliesDisksSpaceThresholds:HostAnomaliesDisksSpaceThresholds"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/HostAnomaliesDisksSpaceThresholds:HostAnomaliesDisksSpaceThresholds": {
            "properties": {
                "percentage": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "percentage"
            ]
        },
        "dynatrace:index/HostAnomaliesDisksSpeed:HostAnomaliesDisksSpeed": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "thresholds": {
                    "$ref": "#/types/dynatrace:index/HostAnomaliesDisksSpeedThresholds:HostAnomaliesDisksSpeedThresholds"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/HostAnomaliesDisksSpeedThresholds:HostAnomaliesDisksSpeedThresholds": {
            "properties": {
                "writeAndReadTime": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "writeAndReadTime"
            ]
        },
        "dynatrace:index/HostAnomaliesGc:HostAnomaliesGc": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "thresholds": {
                    "$ref": "#/types/dynatrace:index/HostAnomaliesGcThresholds:HostAnomaliesGcThresholds"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/HostAnomaliesGcThresholds:HostAnomaliesGcThresholds": {
            "properties": {
                "suspensionPercentage": {
                    "type": "integer"
                },
                "timePercentage": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "suspensionPercentage",
                "timePercentage"
            ]
        },
        "dynatrace:index/HostAnomaliesJava:HostAnomaliesJava": {
            "properties": {
                "outOfMemory": {
                    "$ref": "#/types/dynatrace:index/HostAnomaliesJavaOutOfMemory:HostAnomaliesJavaOutOfMemory"
                },
                "outOfThreads": {
                    "$ref": "#/types/dynatrace:index/HostAnomaliesJavaOutOfThreads:HostAnomaliesJavaOutOfThreads"
                }
            },
            "type": "object"
        },
        "dynatrace:index/HostAnomaliesJavaOutOfMemory:HostAnomaliesJavaOutOfMemory": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "thresholds": {
                    "$ref": "#/types/dynatrace:index/HostAnomaliesJavaOutOfMemoryThresholds:HostAnomaliesJavaOutOfMemoryThresholds"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/HostAnomaliesJavaOutOfMemoryThresholds:HostAnomaliesJavaOutOfMemoryThresholds": {
            "properties": {
                "exceptionCount": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "exceptionCount"
            ]
        },
        "dynatrace:index/HostAnomaliesJavaOutOfThreads:HostAnomaliesJavaOutOfThreads": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "thresholds": {
                    "$ref": "#/types/dynatrace:index/HostAnomaliesJavaOutOfThreadsThresholds:HostAnomaliesJavaOutOfThreadsThresholds"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/HostAnomaliesJavaOutOfThreadsThresholds:HostAnomaliesJavaOutOfThreadsThresholds": {
            "properties": {
                "exceptionCount": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "exceptionCount"
            ]
        },
        "dynatrace:index/HostAnomaliesMemory:HostAnomaliesMemory": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "thresholds": {
                    "$ref": "#/types/dynatrace:index/HostAnomaliesMemoryThresholds:HostAnomaliesMemoryThresholds"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/HostAnomaliesMemoryThresholds:HostAnomaliesMemoryThresholds": {
            "properties": {
                "linux": {
                    "$ref": "#/types/dynatrace:index/HostAnomaliesMemoryThresholdsLinux:HostAnomaliesMemoryThresholdsLinux"
                },
                "windows": {
                    "$ref": "#/types/dynatrace:index/HostAnomaliesMemoryThresholdsWindows:HostAnomaliesMemoryThresholdsWindows"
                }
            },
            "type": "object",
            "required": [
                "linux",
                "windows"
            ]
        },
        "dynatrace:index/HostAnomaliesMemoryThresholdsLinux:HostAnomaliesMemoryThresholdsLinux": {
            "properties": {
                "pageFaults": {
                    "type": "integer"
                },
                "usage": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "pageFaults",
                "usage"
            ]
        },
        "dynatrace:index/HostAnomaliesMemoryThresholdsWindows:HostAnomaliesMemoryThresholdsWindows": {
            "properties": {
                "pageFaults": {
                    "type": "integer"
                },
                "usage": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "pageFaults",
                "usage"
            ]
        },
        "dynatrace:index/HostAnomaliesNetwork:HostAnomaliesNetwork": {
            "properties": {
                "connectivity": {
                    "$ref": "#/types/dynatrace:index/HostAnomaliesNetworkConnectivity:HostAnomaliesNetworkConnectivity"
                },
                "droppedPackets": {
                    "$ref": "#/types/dynatrace:index/HostAnomaliesNetworkDroppedPackets:HostAnomaliesNetworkDroppedPackets"
                },
                "errors": {
                    "$ref": "#/types/dynatrace:index/HostAnomaliesNetworkErrors:HostAnomaliesNetworkErrors"
                },
                "retransmission": {
                    "$ref": "#/types/dynatrace:index/HostAnomaliesNetworkRetransmission:HostAnomaliesNetworkRetransmission"
                },
                "utilization": {
                    "$ref": "#/types/dynatrace:index/HostAnomaliesNetworkUtilization:HostAnomaliesNetworkUtilization"
                }
            },
            "type": "object"
        },
        "dynatrace:index/HostAnomaliesNetworkConnectivity:HostAnomaliesNetworkConnectivity": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "thresholds": {
                    "$ref": "#/types/dynatrace:index/HostAnomaliesNetworkConnectivityThresholds:HostAnomaliesNetworkConnectivityThresholds"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/HostAnomaliesNetworkConnectivityThresholds:HostAnomaliesNetworkConnectivityThresholds": {
            "properties": {
                "failedConnections": {
                    "type": "integer"
                },
                "newConnectionFailures": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "failedConnections",
                "newConnectionFailures"
            ]
        },
        "dynatrace:index/HostAnomaliesNetworkDroppedPackets:HostAnomaliesNetworkDroppedPackets": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "thresholds": {
                    "$ref": "#/types/dynatrace:index/HostAnomaliesNetworkDroppedPacketsThresholds:HostAnomaliesNetworkDroppedPacketsThresholds"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/HostAnomaliesNetworkDroppedPacketsThresholds:HostAnomaliesNetworkDroppedPacketsThresholds": {
            "properties": {
                "droppedPackets": {
                    "type": "integer"
                },
                "totalPacketsRate": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "droppedPackets",
                "totalPacketsRate"
            ]
        },
        "dynatrace:index/HostAnomaliesNetworkErrors:HostAnomaliesNetworkErrors": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "thresholds": {
                    "$ref": "#/types/dynatrace:index/HostAnomaliesNetworkErrorsThresholds:HostAnomaliesNetworkErrorsThresholds"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/HostAnomaliesNetworkErrorsThresholds:HostAnomaliesNetworkErrorsThresholds": {
            "properties": {
                "errorsPercentage": {
                    "type": "integer"
                },
                "totalPacketsRate": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "errorsPercentage",
                "totalPacketsRate"
            ]
        },
        "dynatrace:index/HostAnomaliesNetworkRetransmission:HostAnomaliesNetworkRetransmission": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "thresholds": {
                    "$ref": "#/types/dynatrace:index/HostAnomaliesNetworkRetransmissionThresholds:HostAnomaliesNetworkRetransmissionThresholds"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/HostAnomaliesNetworkRetransmissionThresholds:HostAnomaliesNetworkRetransmissionThresholds": {
            "properties": {
                "retransmissionRate": {
                    "type": "integer"
                },
                "retransmittedPackets": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "retransmissionRate",
                "retransmittedPackets"
            ]
        },
        "dynatrace:index/HostAnomaliesNetworkUtilization:HostAnomaliesNetworkUtilization": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "thresholds": {
                    "$ref": "#/types/dynatrace:index/HostAnomaliesNetworkUtilizationThresholds:HostAnomaliesNetworkUtilizationThresholds"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/HostAnomaliesNetworkUtilizationThresholds:HostAnomaliesNetworkUtilizationThresholds": {
            "properties": {
                "utilization": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "utilization"
            ]
        },
        "dynatrace:index/HostAnomaliesV2Host:HostAnomaliesV2Host": {
            "properties": {
                "connectionLostDetection": {
                    "$ref": "#/types/dynatrace:index/HostAnomaliesV2HostConnectionLostDetection:HostAnomaliesV2HostConnectionLostDetection"
                },
                "highCpuSaturationDetection": {
                    "$ref": "#/types/dynatrace:index/HostAnomaliesV2HostHighCpuSaturationDetection:HostAnomaliesV2HostHighCpuSaturationDetection"
                },
                "highGcActivityDetection": {
                    "$ref": "#/types/dynatrace:index/HostAnomaliesV2HostHighGcActivityDetection:HostAnomaliesV2HostHighGcActivityDetection"
                },
                "highMemoryDetection": {
                    "$ref": "#/types/dynatrace:index/HostAnomaliesV2HostHighMemoryDetection:HostAnomaliesV2HostHighMemoryDetection"
                },
                "highSystemLoadDetection": {
                    "$ref": "#/types/dynatrace:index/HostAnomaliesV2HostHighSystemLoadDetection:HostAnomaliesV2HostHighSystemLoadDetection"
                },
                "outOfMemoryDetection": {
                    "$ref": "#/types/dynatrace:index/HostAnomaliesV2HostOutOfMemoryDetection:HostAnomaliesV2HostOutOfMemoryDetection"
                },
                "outOfThreadsDetection": {
                    "$ref": "#/types/dynatrace:index/HostAnomaliesV2HostOutOfThreadsDetection:HostAnomaliesV2HostOutOfThreadsDetection"
                }
            },
            "type": "object",
            "required": [
                "connectionLostDetection",
                "highCpuSaturationDetection",
                "highGcActivityDetection",
                "highMemoryDetection",
                "highSystemLoadDetection",
                "outOfMemoryDetection",
                "outOfThreadsDetection"
            ]
        },
        "dynatrace:index/HostAnomaliesV2HostConnectionLostDetection:HostAnomaliesV2HostConnectionLostDetection": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "onGracefulShutdowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/HostAnomaliesV2HostHighCpuSaturationDetection:HostAnomaliesV2HostHighCpuSaturationDetection": {
            "properties": {
                "customThresholds": {
                    "$ref": "#/types/dynatrace:index/HostAnomaliesV2HostHighCpuSaturationDetectionCustomThresholds:HostAnomaliesV2HostHighCpuSaturationDetectionCustomThresholds"
                },
                "detectionMode": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/HostAnomaliesV2HostHighCpuSaturationDetectionCustomThresholds:HostAnomaliesV2HostHighCpuSaturationDetectionCustomThresholds": {
            "properties": {
                "cpuSaturation": {
                    "type": "integer"
                },
                "eventThresholds": {
                    "$ref": "#/types/dynatrace:index/HostAnomaliesV2HostHighCpuSaturationDetectionCustomThresholdsEventThresholds:HostAnomaliesV2HostHighCpuSaturationDetectionCustomThresholdsEventThresholds"
                }
            },
            "type": "object",
            "required": [
                "cpuSaturation",
                "eventThresholds"
            ]
        },
        "dynatrace:index/HostAnomaliesV2HostHighCpuSaturationDetectionCustomThresholdsEventThresholds:HostAnomaliesV2HostHighCpuSaturationDetectionCustomThresholdsEventThresholds": {
            "properties": {
                "dealertingEvaluationWindow": {
                    "type": "integer"
                },
                "dealertingSamples": {
                    "type": "integer"
                },
                "violatingEvaluationWindow": {
                    "type": "integer"
                },
                "violatingSamples": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "dealertingEvaluationWindow",
                "dealertingSamples",
                "violatingEvaluationWindow",
                "violatingSamples"
            ]
        },
        "dynatrace:index/HostAnomaliesV2HostHighGcActivityDetection:HostAnomaliesV2HostHighGcActivityDetection": {
            "properties": {
                "customThresholds": {
                    "$ref": "#/types/dynatrace:index/HostAnomaliesV2HostHighGcActivityDetectionCustomThresholds:HostAnomaliesV2HostHighGcActivityDetectionCustomThresholds"
                },
                "detectionMode": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/HostAnomaliesV2HostHighGcActivityDetectionCustomThresholds:HostAnomaliesV2HostHighGcActivityDetectionCustomThresholds": {
            "properties": {
                "eventThresholds": {
                    "$ref": "#/types/dynatrace:index/HostAnomaliesV2HostHighGcActivityDetectionCustomThresholdsEventThresholds:HostAnomaliesV2HostHighGcActivityDetectionCustomThresholdsEventThresholds"
                },
                "gcSuspensionPercentage": {
                    "type": "integer"
                },
                "gcTimePercentage": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "eventThresholds",
                "gcSuspensionPercentage",
                "gcTimePercentage"
            ]
        },
        "dynatrace:index/HostAnomaliesV2HostHighGcActivityDetectionCustomThresholdsEventThresholds:HostAnomaliesV2HostHighGcActivityDetectionCustomThresholdsEventThresholds": {
            "properties": {
                "dealertingEvaluationWindow": {
                    "type": "integer"
                },
                "dealertingSamples": {
                    "type": "integer"
                },
                "violatingEvaluationWindow": {
                    "type": "integer"
                },
                "violatingSamples": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "dealertingEvaluationWindow",
                "dealertingSamples",
                "violatingEvaluationWindow",
                "violatingSamples"
            ]
        },
        "dynatrace:index/HostAnomaliesV2HostHighMemoryDetection:HostAnomaliesV2HostHighMemoryDetection": {
            "properties": {
                "customThresholds": {
                    "$ref": "#/types/dynatrace:index/HostAnomaliesV2HostHighMemoryDetectionCustomThresholds:HostAnomaliesV2HostHighMemoryDetectionCustomThresholds"
                },
                "detectionMode": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/HostAnomaliesV2HostHighMemoryDetectionCustomThresholds:HostAnomaliesV2HostHighMemoryDetectionCustomThresholds": {
            "properties": {
                "eventThresholds": {
                    "$ref": "#/types/dynatrace:index/HostAnomaliesV2HostHighMemoryDetectionCustomThresholdsEventThresholds:HostAnomaliesV2HostHighMemoryDetectionCustomThresholdsEventThresholds"
                },
                "pageFaultsPerSecondNonWindows": {
                    "type": "integer"
                },
                "pageFaultsPerSecondWindows": {
                    "type": "integer"
                },
                "usedMemoryPercentageNonWindows": {
                    "type": "integer"
                },
                "usedMemoryPercentageWindows": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "eventThresholds",
                "pageFaultsPerSecondNonWindows",
                "pageFaultsPerSecondWindows",
                "usedMemoryPercentageNonWindows",
                "usedMemoryPercentageWindows"
            ]
        },
        "dynatrace:index/HostAnomaliesV2HostHighMemoryDetectionCustomThresholdsEventThresholds:HostAnomaliesV2HostHighMemoryDetectionCustomThresholdsEventThresholds": {
            "properties": {
                "dealertingEvaluationWindow": {
                    "type": "integer"
                },
                "dealertingSamples": {
                    "type": "integer"
                },
                "violatingEvaluationWindow": {
                    "type": "integer"
                },
                "violatingSamples": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "dealertingEvaluationWindow",
                "dealertingSamples",
                "violatingEvaluationWindow",
                "violatingSamples"
            ]
        },
        "dynatrace:index/HostAnomaliesV2HostHighSystemLoadDetection:HostAnomaliesV2HostHighSystemLoadDetection": {
            "properties": {
                "customThresholds": {
                    "$ref": "#/types/dynatrace:index/HostAnomaliesV2HostHighSystemLoadDetectionCustomThresholds:HostAnomaliesV2HostHighSystemLoadDetectionCustomThresholds"
                },
                "detectionMode": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/HostAnomaliesV2HostHighSystemLoadDetectionCustomThresholds:HostAnomaliesV2HostHighSystemLoadDetectionCustomThresholds": {
            "properties": {
                "eventThresholds": {
                    "$ref": "#/types/dynatrace:index/HostAnomaliesV2HostHighSystemLoadDetectionCustomThresholdsEventThresholds:HostAnomaliesV2HostHighSystemLoadDetectionCustomThresholdsEventThresholds"
                },
                "systemLoad": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "eventThresholds",
                "systemLoad"
            ]
        },
        "dynatrace:index/HostAnomaliesV2HostHighSystemLoadDetectionCustomThresholdsEventThresholds:HostAnomaliesV2HostHighSystemLoadDetectionCustomThresholdsEventThresholds": {
            "properties": {
                "dealertingEvaluationWindow": {
                    "type": "integer"
                },
                "dealertingSamples": {
                    "type": "integer"
                },
                "violatingEvaluationWindow": {
                    "type": "integer"
                },
                "violatingSamples": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "dealertingEvaluationWindow",
                "dealertingSamples",
                "violatingEvaluationWindow",
                "violatingSamples"
            ]
        },
        "dynatrace:index/HostAnomaliesV2HostOutOfMemoryDetection:HostAnomaliesV2HostOutOfMemoryDetection": {
            "properties": {
                "customThresholds": {
                    "$ref": "#/types/dynatrace:index/HostAnomaliesV2HostOutOfMemoryDetectionCustomThresholds:HostAnomaliesV2HostOutOfMemoryDetectionCustomThresholds"
                },
                "detectionMode": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/HostAnomaliesV2HostOutOfMemoryDetectionCustomThresholds:HostAnomaliesV2HostOutOfMemoryDetectionCustomThresholds": {
            "properties": {
                "eventThresholds": {
                    "$ref": "#/types/dynatrace:index/HostAnomaliesV2HostOutOfMemoryDetectionCustomThresholdsEventThresholds:HostAnomaliesV2HostOutOfMemoryDetectionCustomThresholdsEventThresholds"
                },
                "outOfMemoryExceptionsNumber": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "eventThresholds",
                "outOfMemoryExceptionsNumber"
            ]
        },
        "dynatrace:index/HostAnomaliesV2HostOutOfMemoryDetectionCustomThresholdsEventThresholds:HostAnomaliesV2HostOutOfMemoryDetectionCustomThresholdsEventThresholds": {
            "properties": {
                "dealertingEvaluationWindow": {
                    "type": "integer"
                },
                "dealertingSamples": {
                    "type": "integer"
                },
                "violatingEvaluationWindow": {
                    "type": "integer"
                },
                "violatingSamples": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "dealertingEvaluationWindow",
                "dealertingSamples",
                "violatingEvaluationWindow",
                "violatingSamples"
            ]
        },
        "dynatrace:index/HostAnomaliesV2HostOutOfThreadsDetection:HostAnomaliesV2HostOutOfThreadsDetection": {
            "properties": {
                "customThresholds": {
                    "$ref": "#/types/dynatrace:index/HostAnomaliesV2HostOutOfThreadsDetectionCustomThresholds:HostAnomaliesV2HostOutOfThreadsDetectionCustomThresholds"
                },
                "detectionMode": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/HostAnomaliesV2HostOutOfThreadsDetectionCustomThresholds:HostAnomaliesV2HostOutOfThreadsDetectionCustomThresholds": {
            "properties": {
                "eventThresholds": {
                    "$ref": "#/types/dynatrace:index/HostAnomaliesV2HostOutOfThreadsDetectionCustomThresholdsEventThresholds:HostAnomaliesV2HostOutOfThreadsDetectionCustomThresholdsEventThresholds"
                },
                "outOfThreadsExceptionsNumber": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "eventThresholds",
                "outOfThreadsExceptionsNumber"
            ]
        },
        "dynatrace:index/HostAnomaliesV2HostOutOfThreadsDetectionCustomThresholdsEventThresholds:HostAnomaliesV2HostOutOfThreadsDetectionCustomThresholdsEventThresholds": {
            "properties": {
                "dealertingEvaluationWindow": {
                    "type": "integer"
                },
                "dealertingSamples": {
                    "type": "integer"
                },
                "violatingEvaluationWindow": {
                    "type": "integer"
                },
                "violatingSamples": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "dealertingEvaluationWindow",
                "dealertingSamples",
                "violatingEvaluationWindow",
                "violatingSamples"
            ]
        },
        "dynatrace:index/HostAnomaliesV2Network:HostAnomaliesV2Network": {
            "properties": {
                "highNetworkDetection": {
                    "$ref": "#/types/dynatrace:index/HostAnomaliesV2NetworkHighNetworkDetection:HostAnomaliesV2NetworkHighNetworkDetection"
                },
                "networkDroppedPacketsDetection": {
                    "$ref": "#/types/dynatrace:index/HostAnomaliesV2NetworkNetworkDroppedPacketsDetection:HostAnomaliesV2NetworkNetworkDroppedPacketsDetection"
                },
                "networkErrorsDetection": {
                    "$ref": "#/types/dynatrace:index/HostAnomaliesV2NetworkNetworkErrorsDetection:HostAnomaliesV2NetworkNetworkErrorsDetection"
                },
                "networkHighRetransmissionDetection": {
                    "$ref": "#/types/dynatrace:index/HostAnomaliesV2NetworkNetworkHighRetransmissionDetection:HostAnomaliesV2NetworkNetworkHighRetransmissionDetection"
                },
                "networkTcpProblemsDetection": {
                    "$ref": "#/types/dynatrace:index/HostAnomaliesV2NetworkNetworkTcpProblemsDetection:HostAnomaliesV2NetworkNetworkTcpProblemsDetection"
                }
            },
            "type": "object",
            "required": [
                "highNetworkDetection",
                "networkDroppedPacketsDetection",
                "networkErrorsDetection",
                "networkHighRetransmissionDetection",
                "networkTcpProblemsDetection"
            ]
        },
        "dynatrace:index/HostAnomaliesV2NetworkHighNetworkDetection:HostAnomaliesV2NetworkHighNetworkDetection": {
            "properties": {
                "customThresholds": {
                    "$ref": "#/types/dynatrace:index/HostAnomaliesV2NetworkHighNetworkDetectionCustomThresholds:HostAnomaliesV2NetworkHighNetworkDetectionCustomThresholds"
                },
                "detectionMode": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/HostAnomaliesV2NetworkHighNetworkDetectionCustomThresholds:HostAnomaliesV2NetworkHighNetworkDetectionCustomThresholds": {
            "properties": {
                "errorsPercentage": {
                    "type": "integer"
                },
                "eventThresholds": {
                    "$ref": "#/types/dynatrace:index/HostAnomaliesV2NetworkHighNetworkDetectionCustomThresholdsEventThresholds:HostAnomaliesV2NetworkHighNetworkDetectionCustomThresholdsEventThresholds"
                }
            },
            "type": "object",
            "required": [
                "errorsPercentage",
                "eventThresholds"
            ]
        },
        "dynatrace:index/HostAnomaliesV2NetworkHighNetworkDetectionCustomThresholdsEventThresholds:HostAnomaliesV2NetworkHighNetworkDetectionCustomThresholdsEventThresholds": {
            "properties": {
                "dealertingEvaluationWindow": {
                    "type": "integer"
                },
                "dealertingSamples": {
                    "type": "integer"
                },
                "violatingEvaluationWindow": {
                    "type": "integer"
                },
                "violatingSamples": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "dealertingEvaluationWindow",
                "dealertingSamples",
                "violatingEvaluationWindow",
                "violatingSamples"
            ]
        },
        "dynatrace:index/HostAnomaliesV2NetworkNetworkDroppedPacketsDetection:HostAnomaliesV2NetworkNetworkDroppedPacketsDetection": {
            "properties": {
                "customThresholds": {
                    "$ref": "#/types/dynatrace:index/HostAnomaliesV2NetworkNetworkDroppedPacketsDetectionCustomThresholds:HostAnomaliesV2NetworkNetworkDroppedPacketsDetectionCustomThresholds"
                },
                "detectionMode": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/HostAnomaliesV2NetworkNetworkDroppedPacketsDetectionCustomThresholds:HostAnomaliesV2NetworkNetworkDroppedPacketsDetectionCustomThresholds": {
            "properties": {
                "droppedPacketsPercentage": {
                    "type": "integer"
                },
                "eventThresholds": {
                    "$ref": "#/types/dynatrace:index/HostAnomaliesV2NetworkNetworkDroppedPacketsDetectionCustomThresholdsEventThresholds:HostAnomaliesV2NetworkNetworkDroppedPacketsDetectionCustomThresholdsEventThresholds"
                },
                "totalPacketsRate": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "droppedPacketsPercentage",
                "eventThresholds",
                "totalPacketsRate"
            ]
        },
        "dynatrace:index/HostAnomaliesV2NetworkNetworkDroppedPacketsDetectionCustomThresholdsEventThresholds:HostAnomaliesV2NetworkNetworkDroppedPacketsDetectionCustomThresholdsEventThresholds": {
            "properties": {
                "dealertingEvaluationWindow": {
                    "type": "integer"
                },
                "dealertingSamples": {
                    "type": "integer"
                },
                "violatingEvaluationWindow": {
                    "type": "integer"
                },
                "violatingSamples": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "dealertingEvaluationWindow",
                "dealertingSamples",
                "violatingEvaluationWindow",
                "violatingSamples"
            ]
        },
        "dynatrace:index/HostAnomaliesV2NetworkNetworkErrorsDetection:HostAnomaliesV2NetworkNetworkErrorsDetection": {
            "properties": {
                "customThresholds": {
                    "$ref": "#/types/dynatrace:index/HostAnomaliesV2NetworkNetworkErrorsDetectionCustomThresholds:HostAnomaliesV2NetworkNetworkErrorsDetectionCustomThresholds"
                },
                "detectionMode": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/HostAnomaliesV2NetworkNetworkErrorsDetectionCustomThresholds:HostAnomaliesV2NetworkNetworkErrorsDetectionCustomThresholds": {
            "properties": {
                "errorsPercentage": {
                    "type": "integer"
                },
                "eventThresholds": {
                    "$ref": "#/types/dynatrace:index/HostAnomaliesV2NetworkNetworkErrorsDetectionCustomThresholdsEventThresholds:HostAnomaliesV2NetworkNetworkErrorsDetectionCustomThresholdsEventThresholds"
                },
                "totalPacketsRate": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "errorsPercentage",
                "eventThresholds",
                "totalPacketsRate"
            ]
        },
        "dynatrace:index/HostAnomaliesV2NetworkNetworkErrorsDetectionCustomThresholdsEventThresholds:HostAnomaliesV2NetworkNetworkErrorsDetectionCustomThresholdsEventThresholds": {
            "properties": {
                "dealertingEvaluationWindow": {
                    "type": "integer"
                },
                "dealertingSamples": {
                    "type": "integer"
                },
                "violatingEvaluationWindow": {
                    "type": "integer"
                },
                "violatingSamples": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "dealertingEvaluationWindow",
                "dealertingSamples",
                "violatingEvaluationWindow",
                "violatingSamples"
            ]
        },
        "dynatrace:index/HostAnomaliesV2NetworkNetworkHighRetransmissionDetection:HostAnomaliesV2NetworkNetworkHighRetransmissionDetection": {
            "properties": {
                "customThresholds": {
                    "$ref": "#/types/dynatrace:index/HostAnomaliesV2NetworkNetworkHighRetransmissionDetectionCustomThresholds:HostAnomaliesV2NetworkNetworkHighRetransmissionDetectionCustomThresholds"
                },
                "detectionMode": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/HostAnomaliesV2NetworkNetworkHighRetransmissionDetectionCustomThresholds:HostAnomaliesV2NetworkNetworkHighRetransmissionDetectionCustomThresholds": {
            "properties": {
                "eventThresholds": {
                    "$ref": "#/types/dynatrace:index/HostAnomaliesV2NetworkNetworkHighRetransmissionDetectionCustomThresholdsEventThresholds:HostAnomaliesV2NetworkNetworkHighRetransmissionDetectionCustomThresholdsEventThresholds"
                },
                "retransmissionRatePercentage": {
                    "type": "integer"
                },
                "retransmittedPacketsNumberPerMinute": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "eventThresholds",
                "retransmissionRatePercentage",
                "retransmittedPacketsNumberPerMinute"
            ]
        },
        "dynatrace:index/HostAnomaliesV2NetworkNetworkHighRetransmissionDetectionCustomThresholdsEventThresholds:HostAnomaliesV2NetworkNetworkHighRetransmissionDetectionCustomThresholdsEventThresholds": {
            "properties": {
                "dealertingEvaluationWindow": {
                    "type": "integer"
                },
                "dealertingSamples": {
                    "type": "integer"
                },
                "violatingEvaluationWindow": {
                    "type": "integer"
                },
                "violatingSamples": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "dealertingEvaluationWindow",
                "dealertingSamples",
                "violatingEvaluationWindow",
                "violatingSamples"
            ]
        },
        "dynatrace:index/HostAnomaliesV2NetworkNetworkTcpProblemsDetection:HostAnomaliesV2NetworkNetworkTcpProblemsDetection": {
            "properties": {
                "customThresholds": {
                    "$ref": "#/types/dynatrace:index/HostAnomaliesV2NetworkNetworkTcpProblemsDetectionCustomThresholds:HostAnomaliesV2NetworkNetworkTcpProblemsDetectionCustomThresholds"
                },
                "detectionMode": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/HostAnomaliesV2NetworkNetworkTcpProblemsDetectionCustomThresholds:HostAnomaliesV2NetworkNetworkTcpProblemsDetectionCustomThresholds": {
            "properties": {
                "eventThresholds": {
                    "$ref": "#/types/dynatrace:index/HostAnomaliesV2NetworkNetworkTcpProblemsDetectionCustomThresholdsEventThresholds:HostAnomaliesV2NetworkNetworkTcpProblemsDetectionCustomThresholdsEventThresholds"
                },
                "failedConnectionsNumberPerMinute": {
                    "type": "integer"
                },
                "newConnectionFailuresPercentage": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "eventThresholds",
                "failedConnectionsNumberPerMinute",
                "newConnectionFailuresPercentage"
            ]
        },
        "dynatrace:index/HostAnomaliesV2NetworkNetworkTcpProblemsDetectionCustomThresholdsEventThresholds:HostAnomaliesV2NetworkNetworkTcpProblemsDetectionCustomThresholdsEventThresholds": {
            "properties": {
                "dealertingEvaluationWindow": {
                    "type": "integer"
                },
                "dealertingSamples": {
                    "type": "integer"
                },
                "violatingEvaluationWindow": {
                    "type": "integer"
                },
                "violatingSamples": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "dealertingEvaluationWindow",
                "dealertingSamples",
                "violatingEvaluationWindow",
                "violatingSamples"
            ]
        },
        "dynatrace:index/HostNamingCondition:HostNamingCondition": {
            "properties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/HostNamingConditionCondition:HostNamingConditionCondition"
                    }
                }
            },
            "type": "object"
        },
        "dynatrace:index/HostNamingConditionCondition:HostNamingConditionCondition": {
            "properties": {
                "applicationTypeComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/HostNamingConditionConditionApplicationTypeComparison:HostNamingConditionConditionApplicationTypeComparison"
                    },
                    "deprecationMessage": "You should use 'application_type' instead of 'application_type_comparison'. This attribute still exists for backwards compatibility."
                },
                "applicationTypes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/HostNamingConditionConditionApplicationType:HostNamingConditionConditionApplicationType"
                    }
                },
                "azureComputeModeComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/HostNamingConditionConditionAzureComputeModeComparison:HostNamingConditionConditionAzureComputeModeComparison"
                    }
                },
                "azureComputeModes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/HostNamingConditionConditionAzureComputeMode:HostNamingConditionConditionAzureComputeMode"
                    },
                    "deprecationMessage": "You should use 'azure_compute_mode' instead of 'azure_compute_mode_comparison'. This attribute still exists for backwards compatibility."
                },
                "azureSkuComparisions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/HostNamingConditionConditionAzureSkuComparision:HostNamingConditionConditionAzureSkuComparision"
                    },
                    "deprecationMessage": "You should use 'azure_sku' instead of 'azure_sku_comparision'. This attribute still exists for backwards compatibility."
                },
                "azureSkus": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/HostNamingConditionConditionAzureSkus:HostNamingConditionConditionAzureSkus"
                    }
                },
                "baseComparisonBasics": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/HostNamingConditionConditionBaseComparisonBasic:HostNamingConditionConditionBaseComparisonBasic"
                    },
                    "deprecationMessage": "You should use 'comparison' instead of 'base_comparison_basic'. This attribute still exists for backwards compatibility."
                },
                "baseConditionKeys": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/HostNamingConditionConditionBaseConditionKey:HostNamingConditionConditionBaseConditionKey"
                    },
                    "deprecationMessage": "'base_condition_key' is deprecated. You should use 'key'"
                },
                "bitnessComparisions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/HostNamingConditionConditionBitnessComparision:HostNamingConditionConditionBitnessComparision"
                    },
                    "deprecationMessage": "You should use 'bitness' instead of 'bitness_comparision'. This attribute still exists for backwards compatibility."
                },
                "bitnesses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/HostNamingConditionConditionBitness:HostNamingConditionConditionBitness"
                    }
                },
                "cloudTypeComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/HostNamingConditionConditionCloudTypeComparison:HostNamingConditionConditionCloudTypeComparison"
                    },
                    "deprecationMessage": "You should use 'cloud_type' instead of 'cloud_type_comparison'. This attribute still exists for backwards compatibility."
                },
                "cloudTypes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/HostNamingConditionConditionCloudType:HostNamingConditionConditionCloudType"
                    }
                },
                "comparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/HostNamingConditionConditionComparison:HostNamingConditionConditionComparison"
                    }
                },
                "customApplicationTypeComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/HostNamingConditionConditionCustomApplicationTypeComparison:HostNamingConditionConditionCustomApplicationTypeComparison"
                    },
                    "deprecationMessage": "You should use 'custom_application_type' instead of 'custom_application_type_comparison'. This attribute still exists for backwards compatibility."
                },
                "customApplicationTypes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/HostNamingConditionConditionCustomApplicationType:HostNamingConditionConditionCustomApplicationType"
                    }
                },
                "customHostMetadataConditionKeys": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/HostNamingConditionConditionCustomHostMetadataConditionKey:HostNamingConditionConditionCustomHostMetadataConditionKey"
                    },
                    "deprecationMessage": "'custom_host_metadata_condition_key' is deprecated. You should use 'custom_host_metadata'"
                },
                "customHostMetadatas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/HostNamingConditionConditionCustomHostMetadata:HostNamingConditionConditionCustomHostMetadata"
                    }
                },
                "customProcessMetadataConditionKeys": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/HostNamingConditionConditionCustomProcessMetadataConditionKey:HostNamingConditionConditionCustomProcessMetadataConditionKey"
                    },
                    "deprecationMessage": "'custom_process_metadata_condition_key' is deprecated. You should use 'custom_process_metadata'"
                },
                "customProcessMetadatas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/HostNamingConditionConditionCustomProcessMetadata:HostNamingConditionConditionCustomProcessMetadata"
                    }
                },
                "databaseTopologies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/HostNamingConditionConditionDatabaseTopology:HostNamingConditionConditionDatabaseTopology"
                    }
                },
                "databaseTopologyComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/HostNamingConditionConditionDatabaseTopologyComparison:HostNamingConditionConditionDatabaseTopologyComparison"
                    },
                    "deprecationMessage": "You should use 'database_topology' instead of 'database_topology_comparison'. This attribute still exists for backwards compatibility."
                },
                "dcrumDecoderComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/HostNamingConditionConditionDcrumDecoderComparison:HostNamingConditionConditionDcrumDecoderComparison"
                    },
                    "deprecationMessage": "You should use 'dcrum_decoder' instead of 'dcrum_decoder_comparison'. This attribute still exists for backwards compatibility."
                },
                "dcrumDecoders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/HostNamingConditionConditionDcrumDecoder:HostNamingConditionConditionDcrumDecoder"
                    }
                },
                "entities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/HostNamingConditionConditionEntity:HostNamingConditionConditionEntity"
                    }
                },
                "entityIdComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/HostNamingConditionConditionEntityIdComparison:HostNamingConditionConditionEntityIdComparison"
                    },
                    "deprecationMessage": "You should use 'entity' instead of 'entity_id_comparison'. This attribute still exists for backwards compatibility."
                },
                "hostTeches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/HostNamingConditionConditionHostTech:HostNamingConditionConditionHostTech"
                    }
                },
                "hypervisorTypeComparisions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/HostNamingConditionConditionHypervisorTypeComparision:HostNamingConditionConditionHypervisorTypeComparision"
                    },
                    "deprecationMessage": "`hypervisor_type_comparision` is deprecated. Use `hypervisor` instead"
                },
                "hypervisors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/HostNamingConditionConditionHypervisor:HostNamingConditionConditionHypervisor"
                    }
                },
                "indexedNameComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/HostNamingConditionConditionIndexedNameComparison:HostNamingConditionConditionIndexedNameComparison"
                    },
                    "deprecationMessage": "You should use 'indexed_name' instead of 'indexed_name_comparison'. This attribute still exists for backwards compatibility."
                },
                "indexedNames": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/HostNamingConditionConditionIndexedName:HostNamingConditionConditionIndexedName"
                    }
                },
                "indexedStringComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/HostNamingConditionConditionIndexedStringComparison:HostNamingConditionConditionIndexedStringComparison"
                    },
                    "deprecationMessage": "You should use 'indexed_string' instead of 'indexed_string_comparison'. This attribute still exists for backwards compatibility."
                },
                "indexedStrings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/HostNamingConditionConditionIndexedString:HostNamingConditionConditionIndexedString"
                    }
                },
                "indexedTagComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/HostNamingConditionConditionIndexedTagComparison:HostNamingConditionConditionIndexedTagComparison"
                    },
                    "deprecationMessage": "You should use 'indexed_tag' instead of 'indexed_tag_comparison'. This attribute still exists for backwards compatibility."
                },
                "indexedTags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/HostNamingConditionConditionIndexedTag:HostNamingConditionConditionIndexedTag"
                    }
                },
                "integerComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/HostNamingConditionConditionIntegerComparison:HostNamingConditionConditionIntegerComparison"
                    },
                    "deprecationMessage": "You should use 'integer' instead of 'integer_comparison'. This attribute still exists for backwards compatibility."
                },
                "integers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/HostNamingConditionConditionInteger:HostNamingConditionConditionInteger"
                    }
                },
                "ipaddressComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/HostNamingConditionConditionIpaddressComparison:HostNamingConditionConditionIpaddressComparison"
                    },
                    "deprecationMessage": "You should use 'ipaddress' instead of 'ipaddress_comparison'. This attribute still exists for backwards compatibility."
                },
                "ipaddresses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/HostNamingConditionConditionIpaddress:HostNamingConditionConditionIpaddress"
                    }
                },
                "keys": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/HostNamingConditionConditionKey:HostNamingConditionConditionKey"
                    }
                },
                "mobilePlatformComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/HostNamingConditionConditionMobilePlatformComparison:HostNamingConditionConditionMobilePlatformComparison"
                    },
                    "deprecationMessage": "You should use 'mobile_platform' instead of 'mobile_platform_comparison'. This attribute still exists for backwards compatibility."
                },
                "mobilePlatforms": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/HostNamingConditionConditionMobilePlatform:HostNamingConditionConditionMobilePlatform"
                    }
                },
                "osArches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/HostNamingConditionConditionOsArch:HostNamingConditionConditionOsArch"
                    }
                },
                "osTypes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/HostNamingConditionConditionOsType:HostNamingConditionConditionOsType"
                    }
                },
                "osarchitectureComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/HostNamingConditionConditionOsarchitectureComparison:HostNamingConditionConditionOsarchitectureComparison"
                    },
                    "deprecationMessage": "You should use 'os_arch' instead of 'osarchitecture_comparison'. This attribute still exists for backwards compatibility."
                },
                "ostypeComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/HostNamingConditionConditionOstypeComparison:HostNamingConditionConditionOstypeComparison"
                    },
                    "deprecationMessage": "You should use 'os_type' instead of 'ostype_comparison'. This attribute still exists for backwards compatibility."
                },
                "paasTypeComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/HostNamingConditionConditionPaasTypeComparison:HostNamingConditionConditionPaasTypeComparison"
                    },
                    "deprecationMessage": "You should use 'paas_type' instead of 'paas_type_comparison'. This attribute still exists for backwards compatibility."
                },
                "paasTypes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/HostNamingConditionConditionPaasType:HostNamingConditionConditionPaasType"
                    }
                },
                "processMetadataConditionKeys": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/HostNamingConditionConditionProcessMetadataConditionKey:HostNamingConditionConditionProcessMetadataConditionKey"
                    },
                    "deprecationMessage": "'process_metadata_condition_key' is deprecated. You should use 'process_metadata'"
                },
                "processMetadatas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/HostNamingConditionConditionProcessMetadata:HostNamingConditionConditionProcessMetadata"
                    }
                },
                "serviceTopologies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/HostNamingConditionConditionServiceTopology:HostNamingConditionConditionServiceTopology"
                    }
                },
                "serviceTopologyComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/HostNamingConditionConditionServiceTopologyComparison:HostNamingConditionConditionServiceTopologyComparison"
                    },
                    "deprecationMessage": "You should use 'service_topology' instead of 'service_topology_comparison'. This attribute still exists for backwards compatibility."
                },
                "serviceTypeComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/HostNamingConditionConditionServiceTypeComparison:HostNamingConditionConditionServiceTypeComparison"
                    },
                    "deprecationMessage": "You should use 'service_type' instead of 'service_type_comparison'. This attribute still exists for backwards compatibility."
                },
                "serviceTypes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/HostNamingConditionConditionServiceType:HostNamingConditionConditionServiceType"
                    }
                },
                "simpleHostTechComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/HostNamingConditionConditionSimpleHostTechComparison:HostNamingConditionConditionSimpleHostTechComparison"
                    },
                    "deprecationMessage": "You should use 'host_tech' instead of 'simple_host_tech_comparison'. This attribute still exists for backwards compatibility."
                },
                "simpleTechComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/HostNamingConditionConditionSimpleTechComparison:HostNamingConditionConditionSimpleTechComparison"
                    },
                    "deprecationMessage": "You should use 'tech' instead of 'simple_tech_comparison'. This attribute still exists for backwards compatibility."
                },
                "stringComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/HostNamingConditionConditionStringComparison:HostNamingConditionConditionStringComparison"
                    },
                    "deprecationMessage": "You should use 'string' instead of 'string_comparison'. This attribute still exists for backwards compatibility."
                },
                "stringConditionKeys": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/HostNamingConditionConditionStringConditionKey:HostNamingConditionConditionStringConditionKey"
                    },
                    "deprecationMessage": "'string_condition_key' is deprecated. You should use 'string_key'"
                },
                "stringKeys": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/HostNamingConditionConditionStringKey:HostNamingConditionConditionStringKey"
                    }
                },
                "strings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/HostNamingConditionConditionString:HostNamingConditionConditionString"
                    }
                },
                "syntheticEngineTypeComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/HostNamingConditionConditionSyntheticEngineTypeComparison:HostNamingConditionConditionSyntheticEngineTypeComparison"
                    },
                    "deprecationMessage": "You should use 'synthetic_engine' instead of 'synthetic_engine_type_comparison'. This attribute still exists for backwards compatibility."
                },
                "syntheticEngines": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/HostNamingConditionConditionSyntheticEngine:HostNamingConditionConditionSyntheticEngine"
                    }
                },
                "tagComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/HostNamingConditionConditionTagComparison:HostNamingConditionConditionTagComparison"
                    },
                    "deprecationMessage": "You should use 'tag' instead of 'tag_comparison'. This attribute still exists for backwards compatibility."
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/HostNamingConditionConditionTag:HostNamingConditionConditionTag"
                    }
                },
                "teches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/HostNamingConditionConditionTech:HostNamingConditionConditionTech"
                    }
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "dynatrace:index/HostNamingConditionConditionApplicationType:HostNamingConditionConditionApplicationType": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/HostNamingConditionConditionApplicationTypeComparison:HostNamingConditionConditionApplicationTypeComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/HostNamingConditionConditionAzureComputeMode:HostNamingConditionConditionAzureComputeMode": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/HostNamingConditionConditionAzureComputeModeComparison:HostNamingConditionConditionAzureComputeModeComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/HostNamingConditionConditionAzureSkuComparision:HostNamingConditionConditionAzureSkuComparision": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/HostNamingConditionConditionAzureSkus:HostNamingConditionConditionAzureSkus": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/HostNamingConditionConditionBaseComparisonBasic:HostNamingConditionConditionBaseComparisonBasic": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "type": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "dynatrace:index/HostNamingConditionConditionBaseConditionKey:HostNamingConditionConditionBaseConditionKey": {
            "properties": {
                "attribute": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "attribute"
            ]
        },
        "dynatrace:index/HostNamingConditionConditionBitness:HostNamingConditionConditionBitness": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/HostNamingConditionConditionBitnessComparision:HostNamingConditionConditionBitnessComparision": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/HostNamingConditionConditionCloudType:HostNamingConditionConditionCloudType": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/HostNamingConditionConditionCloudTypeComparison:HostNamingConditionConditionCloudTypeComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/HostNamingConditionConditionComparison:HostNamingConditionConditionComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "type": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "dynatrace:index/HostNamingConditionConditionCustomApplicationType:HostNamingConditionConditionCustomApplicationType": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/HostNamingConditionConditionCustomApplicationTypeComparison:HostNamingConditionConditionCustomApplicationTypeComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/HostNamingConditionConditionCustomHostMetadata:HostNamingConditionConditionCustomHostMetadata": {
            "properties": {
                "attribute": {
                    "type": "string"
                },
                "dynamicKey": {
                    "$ref": "#/types/dynatrace:index/HostNamingConditionConditionCustomHostMetadataDynamicKey:HostNamingConditionConditionCustomHostMetadataDynamicKey"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "attribute",
                "dynamicKey"
            ]
        },
        "dynatrace:index/HostNamingConditionConditionCustomHostMetadataConditionKey:HostNamingConditionConditionCustomHostMetadataConditionKey": {
            "properties": {
                "attribute": {
                    "type": "string"
                },
                "dynamicKey": {
                    "$ref": "#/types/dynatrace:index/HostNamingConditionConditionCustomHostMetadataConditionKeyDynamicKey:HostNamingConditionConditionCustomHostMetadataConditionKeyDynamicKey"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "attribute",
                "dynamicKey"
            ]
        },
        "dynatrace:index/HostNamingConditionConditionCustomHostMetadataConditionKeyDynamicKey:HostNamingConditionConditionCustomHostMetadataConditionKeyDynamicKey": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "source": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "source"
            ]
        },
        "dynatrace:index/HostNamingConditionConditionCustomHostMetadataDynamicKey:HostNamingConditionConditionCustomHostMetadataDynamicKey": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "source": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "source"
            ]
        },
        "dynatrace:index/HostNamingConditionConditionCustomProcessMetadata:HostNamingConditionConditionCustomProcessMetadata": {
            "properties": {
                "attribute": {
                    "type": "string"
                },
                "dynamicKey": {
                    "$ref": "#/types/dynatrace:index/HostNamingConditionConditionCustomProcessMetadataDynamicKey:HostNamingConditionConditionCustomProcessMetadataDynamicKey"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "attribute",
                "dynamicKey"
            ]
        },
        "dynatrace:index/HostNamingConditionConditionCustomProcessMetadataConditionKey:HostNamingConditionConditionCustomProcessMetadataConditionKey": {
            "properties": {
                "attribute": {
                    "type": "string"
                },
                "dynamicKey": {
                    "$ref": "#/types/dynatrace:index/HostNamingConditionConditionCustomProcessMetadataConditionKeyDynamicKey:HostNamingConditionConditionCustomProcessMetadataConditionKeyDynamicKey"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "attribute",
                "dynamicKey"
            ]
        },
        "dynatrace:index/HostNamingConditionConditionCustomProcessMetadataConditionKeyDynamicKey:HostNamingConditionConditionCustomProcessMetadataConditionKeyDynamicKey": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "source": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "source"
            ]
        },
        "dynatrace:index/HostNamingConditionConditionCustomProcessMetadataDynamicKey:HostNamingConditionConditionCustomProcessMetadataDynamicKey": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "source": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "source"
            ]
        },
        "dynatrace:index/HostNamingConditionConditionDatabaseTopology:HostNamingConditionConditionDatabaseTopology": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/HostNamingConditionConditionDatabaseTopologyComparison:HostNamingConditionConditionDatabaseTopologyComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/HostNamingConditionConditionDcrumDecoder:HostNamingConditionConditionDcrumDecoder": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/HostNamingConditionConditionDcrumDecoderComparison:HostNamingConditionConditionDcrumDecoderComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/HostNamingConditionConditionEntity:HostNamingConditionConditionEntity": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/HostNamingConditionConditionEntityIdComparison:HostNamingConditionConditionEntityIdComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/HostNamingConditionConditionHostTech:HostNamingConditionConditionHostTech": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "$ref": "#/types/dynatrace:index/HostNamingConditionConditionHostTechValue:HostNamingConditionConditionHostTechValue"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/HostNamingConditionConditionHostTechValue:HostNamingConditionConditionHostTechValue": {
            "properties": {
                "type": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "verbatimType": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "dynatrace:index/HostNamingConditionConditionHypervisor:HostNamingConditionConditionHypervisor": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/HostNamingConditionConditionHypervisorTypeComparision:HostNamingConditionConditionHypervisorTypeComparision": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/HostNamingConditionConditionIndexedName:HostNamingConditionConditionIndexedName": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/HostNamingConditionConditionIndexedNameComparison:HostNamingConditionConditionIndexedNameComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/HostNamingConditionConditionIndexedString:HostNamingConditionConditionIndexedString": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/HostNamingConditionConditionIndexedStringComparison:HostNamingConditionConditionIndexedStringComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/HostNamingConditionConditionIndexedTag:HostNamingConditionConditionIndexedTag": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "$ref": "#/types/dynatrace:index/HostNamingConditionConditionIndexedTagValue:HostNamingConditionConditionIndexedTagValue"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/HostNamingConditionConditionIndexedTagComparison:HostNamingConditionConditionIndexedTagComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "$ref": "#/types/dynatrace:index/HostNamingConditionConditionIndexedTagComparisonValue:HostNamingConditionConditionIndexedTagComparisonValue"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/HostNamingConditionConditionIndexedTagComparisonValue:HostNamingConditionConditionIndexedTagComparisonValue": {
            "properties": {
                "context": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "context",
                "key"
            ]
        },
        "dynatrace:index/HostNamingConditionConditionIndexedTagValue:HostNamingConditionConditionIndexedTagValue": {
            "properties": {
                "context": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "context",
                "key"
            ]
        },
        "dynatrace:index/HostNamingConditionConditionInteger:HostNamingConditionConditionInteger": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/HostNamingConditionConditionIntegerComparison:HostNamingConditionConditionIntegerComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/HostNamingConditionConditionIpaddress:HostNamingConditionConditionIpaddress": {
            "properties": {
                "caseSensitive": {
                    "type": "boolean"
                },
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/HostNamingConditionConditionIpaddressComparison:HostNamingConditionConditionIpaddressComparison": {
            "properties": {
                "caseSensitive": {
                    "type": "boolean"
                },
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/HostNamingConditionConditionKey:HostNamingConditionConditionKey": {
            "properties": {
                "attribute": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "attribute"
            ]
        },
        "dynatrace:index/HostNamingConditionConditionMobilePlatform:HostNamingConditionConditionMobilePlatform": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/HostNamingConditionConditionMobilePlatformComparison:HostNamingConditionConditionMobilePlatformComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/HostNamingConditionConditionOsArch:HostNamingConditionConditionOsArch": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/HostNamingConditionConditionOsType:HostNamingConditionConditionOsType": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/HostNamingConditionConditionOsarchitectureComparison:HostNamingConditionConditionOsarchitectureComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/HostNamingConditionConditionOstypeComparison:HostNamingConditionConditionOstypeComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/HostNamingConditionConditionPaasType:HostNamingConditionConditionPaasType": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/HostNamingConditionConditionPaasTypeComparison:HostNamingConditionConditionPaasTypeComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/HostNamingConditionConditionProcessMetadata:HostNamingConditionConditionProcessMetadata": {
            "properties": {
                "attribute": {
                    "type": "string"
                },
                "dynamicKey": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "attribute",
                "dynamicKey"
            ]
        },
        "dynatrace:index/HostNamingConditionConditionProcessMetadataConditionKey:HostNamingConditionConditionProcessMetadataConditionKey": {
            "properties": {
                "attribute": {
                    "type": "string"
                },
                "dynamicKey": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "attribute",
                "dynamicKey"
            ]
        },
        "dynatrace:index/HostNamingConditionConditionServiceTopology:HostNamingConditionConditionServiceTopology": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/HostNamingConditionConditionServiceTopologyComparison:HostNamingConditionConditionServiceTopologyComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/HostNamingConditionConditionServiceType:HostNamingConditionConditionServiceType": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/HostNamingConditionConditionServiceTypeComparison:HostNamingConditionConditionServiceTypeComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/HostNamingConditionConditionSimpleHostTechComparison:HostNamingConditionConditionSimpleHostTechComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "$ref": "#/types/dynatrace:index/HostNamingConditionConditionSimpleHostTechComparisonValue:HostNamingConditionConditionSimpleHostTechComparisonValue"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/HostNamingConditionConditionSimpleHostTechComparisonValue:HostNamingConditionConditionSimpleHostTechComparisonValue": {
            "properties": {
                "type": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "verbatimType": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "dynatrace:index/HostNamingConditionConditionSimpleTechComparison:HostNamingConditionConditionSimpleTechComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "$ref": "#/types/dynatrace:index/HostNamingConditionConditionSimpleTechComparisonValue:HostNamingConditionConditionSimpleTechComparisonValue"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/HostNamingConditionConditionSimpleTechComparisonValue:HostNamingConditionConditionSimpleTechComparisonValue": {
            "properties": {
                "type": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "verbatimType": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "dynatrace:index/HostNamingConditionConditionString:HostNamingConditionConditionString": {
            "properties": {
                "caseSensitive": {
                    "type": "boolean"
                },
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/HostNamingConditionConditionStringComparison:HostNamingConditionConditionStringComparison": {
            "properties": {
                "caseSensitive": {
                    "type": "boolean"
                },
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/HostNamingConditionConditionStringConditionKey:HostNamingConditionConditionStringConditionKey": {
            "properties": {
                "attribute": {
                    "type": "string"
                },
                "dynamicKey": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "attribute",
                "dynamicKey"
            ]
        },
        "dynatrace:index/HostNamingConditionConditionStringKey:HostNamingConditionConditionStringKey": {
            "properties": {
                "attribute": {
                    "type": "string"
                },
                "dynamicKey": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "attribute",
                "dynamicKey"
            ]
        },
        "dynatrace:index/HostNamingConditionConditionSyntheticEngine:HostNamingConditionConditionSyntheticEngine": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/HostNamingConditionConditionSyntheticEngineTypeComparison:HostNamingConditionConditionSyntheticEngineTypeComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/HostNamingConditionConditionTag:HostNamingConditionConditionTag": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "$ref": "#/types/dynatrace:index/HostNamingConditionConditionTagValue:HostNamingConditionConditionTagValue"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/HostNamingConditionConditionTagComparison:HostNamingConditionConditionTagComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "$ref": "#/types/dynatrace:index/HostNamingConditionConditionTagComparisonValue:HostNamingConditionConditionTagComparisonValue"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/HostNamingConditionConditionTagComparisonValue:HostNamingConditionConditionTagComparisonValue": {
            "properties": {
                "context": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "context",
                "key"
            ]
        },
        "dynatrace:index/HostNamingConditionConditionTagValue:HostNamingConditionConditionTagValue": {
            "properties": {
                "context": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "context",
                "key"
            ]
        },
        "dynatrace:index/HostNamingConditionConditionTech:HostNamingConditionConditionTech": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "$ref": "#/types/dynatrace:index/HostNamingConditionConditionTechValue:HostNamingConditionConditionTechValue"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/HostNamingConditionConditionTechValue:HostNamingConditionConditionTechValue": {
            "properties": {
                "type": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "verbatimType": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "dynatrace:index/HttpMonitorAnomalyDetection:HttpMonitorAnomalyDetection": {
            "properties": {
                "loadingTimeThresholds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/HttpMonitorAnomalyDetectionLoadingTimeThreshold:HttpMonitorAnomalyDetectionLoadingTimeThreshold"
                    }
                },
                "outageHandlings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/HttpMonitorAnomalyDetectionOutageHandling:HttpMonitorAnomalyDetectionOutageHandling"
                    }
                }
            },
            "type": "object"
        },
        "dynatrace:index/HttpMonitorAnomalyDetectionLoadingTimeThreshold:HttpMonitorAnomalyDetectionLoadingTimeThreshold": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "thresholds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/HttpMonitorAnomalyDetectionLoadingTimeThresholdThreshold:HttpMonitorAnomalyDetectionLoadingTimeThresholdThreshold"
                    }
                }
            },
            "type": "object"
        },
        "dynatrace:index/HttpMonitorAnomalyDetectionLoadingTimeThresholdThreshold:HttpMonitorAnomalyDetectionLoadingTimeThresholdThreshold": {
            "properties": {
                "thresholds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/HttpMonitorAnomalyDetectionLoadingTimeThresholdThresholdThreshold:HttpMonitorAnomalyDetectionLoadingTimeThresholdThresholdThreshold"
                    }
                }
            },
            "type": "object",
            "required": [
                "thresholds"
            ]
        },
        "dynatrace:index/HttpMonitorAnomalyDetectionLoadingTimeThresholdThresholdThreshold:HttpMonitorAnomalyDetectionLoadingTimeThresholdThresholdThreshold": {
            "properties": {
                "eventIndex": {
                    "type": "integer"
                },
                "requestIndex": {
                    "type": "integer"
                },
                "type": {
                    "type": "string"
                },
                "valueMs": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "valueMs"
            ]
        },
        "dynatrace:index/HttpMonitorAnomalyDetectionOutageHandling:HttpMonitorAnomalyDetectionOutageHandling": {
            "properties": {
                "globalOutage": {
                    "type": "boolean"
                },
                "globalOutagePolicies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/HttpMonitorAnomalyDetectionOutageHandlingGlobalOutagePolicy:HttpMonitorAnomalyDetectionOutageHandlingGlobalOutagePolicy"
                    }
                },
                "localOutage": {
                    "type": "boolean"
                },
                "localOutagePolicies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/HttpMonitorAnomalyDetectionOutageHandlingLocalOutagePolicy:HttpMonitorAnomalyDetectionOutageHandlingLocalOutagePolicy"
                    }
                },
                "retryOnError": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "dynatrace:index/HttpMonitorAnomalyDetectionOutageHandlingGlobalOutagePolicy:HttpMonitorAnomalyDetectionOutageHandlingGlobalOutagePolicy": {
            "properties": {
                "consecutiveRuns": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "consecutiveRuns"
            ]
        },
        "dynatrace:index/HttpMonitorAnomalyDetectionOutageHandlingLocalOutagePolicy:HttpMonitorAnomalyDetectionOutageHandlingLocalOutagePolicy": {
            "properties": {
                "affectedLocations": {
                    "type": "integer"
                },
                "consecutiveRuns": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "affectedLocations",
                "consecutiveRuns"
            ]
        },
        "dynatrace:index/HttpMonitorCookiesCookies:HttpMonitorCookiesCookies": {
            "properties": {
                "cookies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/HttpMonitorCookiesCookiesCookie:HttpMonitorCookiesCookiesCookie"
                    }
                }
            },
            "type": "object",
            "required": [
                "cookies"
            ]
        },
        "dynatrace:index/HttpMonitorCookiesCookiesCookie:HttpMonitorCookiesCookiesCookie": {
            "properties": {
                "domain": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "path": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "domain",
                "name",
                "value"
            ]
        },
        "dynatrace:index/HttpMonitorPerformanceThresholds:HttpMonitorPerformanceThresholds": {
            "properties": {
                "thresholds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/HttpMonitorPerformanceThresholdsThreshold:HttpMonitorPerformanceThresholdsThreshold"
                    }
                }
            },
            "type": "object",
            "required": [
                "thresholds"
            ]
        },
        "dynatrace:index/HttpMonitorPerformanceThresholdsThreshold:HttpMonitorPerformanceThresholdsThreshold": {
            "properties": {
                "event": {
                    "type": "string"
                },
                "threshold": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "event",
                "threshold"
            ]
        },
        "dynatrace:index/HttpMonitorScript:HttpMonitorScript": {
            "properties": {
                "requests": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/HttpMonitorScriptRequest:HttpMonitorScriptRequest"
                    }
                }
            },
            "type": "object",
            "required": [
                "requests"
            ]
        },
        "dynatrace:index/HttpMonitorScriptRequest:HttpMonitorScriptRequest": {
            "properties": {
                "authentication": {
                    "$ref": "#/types/dynatrace:index/HttpMonitorScriptRequestAuthentication:HttpMonitorScriptRequestAuthentication"
                },
                "body": {
                    "type": "string"
                },
                "configuration": {
                    "$ref": "#/types/dynatrace:index/HttpMonitorScriptRequestConfiguration:HttpMonitorScriptRequestConfiguration"
                },
                "description": {
                    "type": "string"
                },
                "method": {
                    "type": "string"
                },
                "postProcessing": {
                    "type": "string"
                },
                "preProcessing": {
                    "type": "string"
                },
                "requestTimeout": {
                    "type": "integer"
                },
                "url": {
                    "type": "string"
                },
                "validation": {
                    "$ref": "#/types/dynatrace:index/HttpMonitorScriptRequestValidation:HttpMonitorScriptRequestValidation"
                }
            },
            "type": "object",
            "required": [
                "method",
                "url"
            ]
        },
        "dynatrace:index/HttpMonitorScriptRequestAuthentication:HttpMonitorScriptRequestAuthentication": {
            "properties": {
                "credentials": {
                    "type": "string"
                },
                "kdcIp": {
                    "type": "string"
                },
                "realmName": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "credentials",
                "type"
            ]
        },
        "dynatrace:index/HttpMonitorScriptRequestConfiguration:HttpMonitorScriptRequestConfiguration": {
            "properties": {
                "acceptAnyCertificate": {
                    "type": "boolean"
                },
                "clientCertificate": {
                    "type": "string",
                    "secret": true
                },
                "followRedirects": {
                    "type": "boolean"
                },
                "headers": {
                    "$ref": "#/types/dynatrace:index/HttpMonitorScriptRequestConfigurationHeaders:HttpMonitorScriptRequestConfigurationHeaders"
                },
                "sensitiveData": {
                    "type": "boolean"
                },
                "userAgent": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "dynatrace:index/HttpMonitorScriptRequestConfigurationHeaders:HttpMonitorScriptRequestConfigurationHeaders": {
            "properties": {
                "headers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/HttpMonitorScriptRequestConfigurationHeadersHeader:HttpMonitorScriptRequestConfigurationHeadersHeader"
                    }
                }
            },
            "type": "object",
            "required": [
                "headers"
            ]
        },
        "dynatrace:index/HttpMonitorScriptRequestConfigurationHeadersHeader:HttpMonitorScriptRequestConfigurationHeadersHeader": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ]
        },
        "dynatrace:index/HttpMonitorScriptRequestValidation:HttpMonitorScriptRequestValidation": {
            "properties": {
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/HttpMonitorScriptRequestValidationRule:HttpMonitorScriptRequestValidationRule"
                    }
                }
            },
            "type": "object",
            "required": [
                "rules"
            ]
        },
        "dynatrace:index/HttpMonitorScriptRequestValidationRule:HttpMonitorScriptRequestValidationRule": {
            "properties": {
                "passIfFound": {
                    "type": "boolean"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "type",
                "value"
            ]
        },
        "dynatrace:index/HttpMonitorScriptScript:HttpMonitorScriptScript": {
            "properties": {
                "requests": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/HttpMonitorScriptScriptRequest:HttpMonitorScriptScriptRequest"
                    }
                }
            },
            "type": "object",
            "required": [
                "requests"
            ]
        },
        "dynatrace:index/HttpMonitorScriptScriptRequest:HttpMonitorScriptScriptRequest": {
            "properties": {
                "authentication": {
                    "$ref": "#/types/dynatrace:index/HttpMonitorScriptScriptRequestAuthentication:HttpMonitorScriptScriptRequestAuthentication"
                },
                "body": {
                    "type": "string"
                },
                "configuration": {
                    "$ref": "#/types/dynatrace:index/HttpMonitorScriptScriptRequestConfiguration:HttpMonitorScriptScriptRequestConfiguration"
                },
                "description": {
                    "type": "string"
                },
                "method": {
                    "type": "string"
                },
                "postProcessing": {
                    "type": "string"
                },
                "preProcessing": {
                    "type": "string"
                },
                "requestTimeout": {
                    "type": "integer"
                },
                "url": {
                    "type": "string"
                },
                "validation": {
                    "$ref": "#/types/dynatrace:index/HttpMonitorScriptScriptRequestValidation:HttpMonitorScriptScriptRequestValidation"
                }
            },
            "type": "object",
            "required": [
                "method",
                "url"
            ]
        },
        "dynatrace:index/HttpMonitorScriptScriptRequestAuthentication:HttpMonitorScriptScriptRequestAuthentication": {
            "properties": {
                "credentials": {
                    "type": "string"
                },
                "kdcIp": {
                    "type": "string"
                },
                "realmName": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "credentials",
                "type"
            ]
        },
        "dynatrace:index/HttpMonitorScriptScriptRequestConfiguration:HttpMonitorScriptScriptRequestConfiguration": {
            "properties": {
                "acceptAnyCertificate": {
                    "type": "boolean"
                },
                "clientCertificate": {
                    "type": "string",
                    "secret": true
                },
                "followRedirects": {
                    "type": "boolean"
                },
                "headers": {
                    "$ref": "#/types/dynatrace:index/HttpMonitorScriptScriptRequestConfigurationHeaders:HttpMonitorScriptScriptRequestConfigurationHeaders"
                },
                "sensitiveData": {
                    "type": "boolean"
                },
                "userAgent": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "dynatrace:index/HttpMonitorScriptScriptRequestConfigurationHeaders:HttpMonitorScriptScriptRequestConfigurationHeaders": {
            "properties": {
                "headers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/HttpMonitorScriptScriptRequestConfigurationHeadersHeader:HttpMonitorScriptScriptRequestConfigurationHeadersHeader"
                    }
                }
            },
            "type": "object",
            "required": [
                "headers"
            ]
        },
        "dynatrace:index/HttpMonitorScriptScriptRequestConfigurationHeadersHeader:HttpMonitorScriptScriptRequestConfigurationHeadersHeader": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ]
        },
        "dynatrace:index/HttpMonitorScriptScriptRequestValidation:HttpMonitorScriptScriptRequestValidation": {
            "properties": {
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/HttpMonitorScriptScriptRequestValidationRule:HttpMonitorScriptScriptRequestValidationRule"
                    }
                }
            },
            "type": "object",
            "required": [
                "rules"
            ]
        },
        "dynatrace:index/HttpMonitorScriptScriptRequestValidationRule:HttpMonitorScriptScriptRequestValidationRule": {
            "properties": {
                "passIfFound": {
                    "type": "boolean"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "type",
                "value"
            ]
        },
        "dynatrace:index/HttpMonitorTag:HttpMonitorTag": {
            "properties": {
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/HttpMonitorTagTag:HttpMonitorTagTag"
                    }
                }
            },
            "type": "object"
        },
        "dynatrace:index/HttpMonitorTagTag:HttpMonitorTagTag": {
            "properties": {
                "context": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "source": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "context",
                "key"
            ]
        },
        "dynatrace:index/HubSubscriptionsTokenSubscriptions:HubSubscriptionsTokenSubscriptions": {
            "properties": {
                "tokenSubscriptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/HubSubscriptionsTokenSubscriptionsTokenSubscription:HubSubscriptionsTokenSubscriptionsTokenSubscription"
                    }
                }
            },
            "type": "object",
            "required": [
                "tokenSubscriptions"
            ]
        },
        "dynatrace:index/HubSubscriptionsTokenSubscriptionsTokenSubscription:HubSubscriptionsTokenSubscriptionsTokenSubscription": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "enabled",
                "name",
                "token"
            ]
        },
        "dynatrace:index/IamGroupPermissions:IamGroupPermissions": {
            "properties": {
                "permissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/IamGroupPermissionsPermission:IamGroupPermissionsPermission"
                    }
                }
            },
            "type": "object",
            "required": [
                "permissions"
            ]
        },
        "dynatrace:index/IamGroupPermissionsPermission:IamGroupPermissionsPermission": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "scope": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "name",
                "scope",
                "type"
            ]
        },
        "dynatrace:index/IamPolicyBindingsV2Policy:IamPolicyBindingsV2Policy": {
            "properties": {
                "id": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "parameters": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "dynatrace:index/ImsBridgesQueueManager:ImsBridgesQueueManager": {
            "properties": {
                "queueManagers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ImsBridgesQueueManagerQueueManager:ImsBridgesQueueManagerQueueManager"
                    }
                }
            },
            "type": "object"
        },
        "dynatrace:index/ImsBridgesQueueManagerQueueManager:ImsBridgesQueueManagerQueueManager": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "queueManagerQueues": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "dynatrace:index/K8sClusterAnomaliesCpuRequestsSaturation:K8sClusterAnomaliesCpuRequestsSaturation": {
            "properties": {
                "configuration": {
                    "$ref": "#/types/dynatrace:index/K8sClusterAnomaliesCpuRequestsSaturationConfiguration:K8sClusterAnomaliesCpuRequestsSaturationConfiguration"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/K8sClusterAnomaliesCpuRequestsSaturationConfiguration:K8sClusterAnomaliesCpuRequestsSaturationConfiguration": {
            "properties": {
                "observationPeriodInMinutes": {
                    "type": "integer"
                },
                "samplePeriodInMinutes": {
                    "type": "integer"
                },
                "threshold": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "observationPeriodInMinutes",
                "samplePeriodInMinutes",
                "threshold"
            ]
        },
        "dynatrace:index/K8sClusterAnomaliesMemoryRequestsSaturation:K8sClusterAnomaliesMemoryRequestsSaturation": {
            "properties": {
                "configuration": {
                    "$ref": "#/types/dynatrace:index/K8sClusterAnomaliesMemoryRequestsSaturationConfiguration:K8sClusterAnomaliesMemoryRequestsSaturationConfiguration"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/K8sClusterAnomaliesMemoryRequestsSaturationConfiguration:K8sClusterAnomaliesMemoryRequestsSaturationConfiguration": {
            "properties": {
                "observationPeriodInMinutes": {
                    "type": "integer"
                },
                "samplePeriodInMinutes": {
                    "type": "integer"
                },
                "threshold": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "observationPeriodInMinutes",
                "samplePeriodInMinutes",
                "threshold"
            ]
        },
        "dynatrace:index/K8sClusterAnomaliesMonitoringIssues:K8sClusterAnomaliesMonitoringIssues": {
            "properties": {
                "configuration": {
                    "$ref": "#/types/dynatrace:index/K8sClusterAnomaliesMonitoringIssuesConfiguration:K8sClusterAnomaliesMonitoringIssuesConfiguration"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/K8sClusterAnomaliesMonitoringIssuesConfiguration:K8sClusterAnomaliesMonitoringIssuesConfiguration": {
            "properties": {
                "observationPeriodInMinutes": {
                    "type": "integer"
                },
                "samplePeriodInMinutes": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "observationPeriodInMinutes",
                "samplePeriodInMinutes"
            ]
        },
        "dynatrace:index/K8sClusterAnomaliesPodsSaturation:K8sClusterAnomaliesPodsSaturation": {
            "properties": {
                "configuration": {
                    "$ref": "#/types/dynatrace:index/K8sClusterAnomaliesPodsSaturationConfiguration:K8sClusterAnomaliesPodsSaturationConfiguration"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/K8sClusterAnomaliesPodsSaturationConfiguration:K8sClusterAnomaliesPodsSaturationConfiguration": {
            "properties": {
                "observationPeriodInMinutes": {
                    "type": "integer"
                },
                "samplePeriodInMinutes": {
                    "type": "integer"
                },
                "threshold": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "observationPeriodInMinutes",
                "samplePeriodInMinutes",
                "threshold"
            ]
        },
        "dynatrace:index/K8sClusterAnomaliesReadinessIssues:K8sClusterAnomaliesReadinessIssues": {
            "properties": {
                "configuration": {
                    "$ref": "#/types/dynatrace:index/K8sClusterAnomaliesReadinessIssuesConfiguration:K8sClusterAnomaliesReadinessIssuesConfiguration"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/K8sClusterAnomaliesReadinessIssuesConfiguration:K8sClusterAnomaliesReadinessIssuesConfiguration": {
            "properties": {
                "observationPeriodInMinutes": {
                    "type": "integer"
                },
                "samplePeriodInMinutes": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "observationPeriodInMinutes",
                "samplePeriodInMinutes"
            ]
        },
        "dynatrace:index/K8sCredentialsEventsFieldSelector:K8sCredentialsEventsFieldSelector": {
            "properties": {
                "active": {
                    "type": "boolean"
                },
                "fieldSelector": {
                    "type": "string"
                },
                "label": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "active",
                "fieldSelector",
                "label"
            ]
        },
        "dynatrace:index/K8sMonitoringEventPatterns:K8sMonitoringEventPatterns": {
            "properties": {
                "eventPatterns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/K8sMonitoringEventPatternsEventPattern:K8sMonitoringEventPatternsEventPattern"
                    }
                }
            },
            "type": "object",
            "required": [
                "eventPatterns"
            ]
        },
        "dynatrace:index/K8sMonitoringEventPatternsEventPattern:K8sMonitoringEventPatternsEventPattern": {
            "properties": {
                "active": {
                    "type": "boolean"
                },
                "label": {
                    "type": "string"
                },
                "pattern": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "active",
                "label",
                "pattern"
            ]
        },
        "dynatrace:index/K8sNamespaceAnomaliesCpuLimitsQuotaSaturation:K8sNamespaceAnomaliesCpuLimitsQuotaSaturation": {
            "properties": {
                "configuration": {
                    "$ref": "#/types/dynatrace:index/K8sNamespaceAnomaliesCpuLimitsQuotaSaturationConfiguration:K8sNamespaceAnomaliesCpuLimitsQuotaSaturationConfiguration"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/K8sNamespaceAnomaliesCpuLimitsQuotaSaturationConfiguration:K8sNamespaceAnomaliesCpuLimitsQuotaSaturationConfiguration": {
            "properties": {
                "observationPeriodInMinutes": {
                    "type": "integer"
                },
                "samplePeriodInMinutes": {
                    "type": "integer"
                },
                "threshold": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "observationPeriodInMinutes",
                "samplePeriodInMinutes",
                "threshold"
            ]
        },
        "dynatrace:index/K8sNamespaceAnomaliesCpuRequestsQuotaSaturation:K8sNamespaceAnomaliesCpuRequestsQuotaSaturation": {
            "properties": {
                "configuration": {
                    "$ref": "#/types/dynatrace:index/K8sNamespaceAnomaliesCpuRequestsQuotaSaturationConfiguration:K8sNamespaceAnomaliesCpuRequestsQuotaSaturationConfiguration"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/K8sNamespaceAnomaliesCpuRequestsQuotaSaturationConfiguration:K8sNamespaceAnomaliesCpuRequestsQuotaSaturationConfiguration": {
            "properties": {
                "observationPeriodInMinutes": {
                    "type": "integer"
                },
                "samplePeriodInMinutes": {
                    "type": "integer"
                },
                "threshold": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "observationPeriodInMinutes",
                "samplePeriodInMinutes",
                "threshold"
            ]
        },
        "dynatrace:index/K8sNamespaceAnomaliesMemoryLimitsQuotaSaturation:K8sNamespaceAnomaliesMemoryLimitsQuotaSaturation": {
            "properties": {
                "configuration": {
                    "$ref": "#/types/dynatrace:index/K8sNamespaceAnomaliesMemoryLimitsQuotaSaturationConfiguration:K8sNamespaceAnomaliesMemoryLimitsQuotaSaturationConfiguration"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/K8sNamespaceAnomaliesMemoryLimitsQuotaSaturationConfiguration:K8sNamespaceAnomaliesMemoryLimitsQuotaSaturationConfiguration": {
            "properties": {
                "observationPeriodInMinutes": {
                    "type": "integer"
                },
                "samplePeriodInMinutes": {
                    "type": "integer"
                },
                "threshold": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "observationPeriodInMinutes",
                "samplePeriodInMinutes",
                "threshold"
            ]
        },
        "dynatrace:index/K8sNamespaceAnomaliesMemoryRequestsQuotaSaturation:K8sNamespaceAnomaliesMemoryRequestsQuotaSaturation": {
            "properties": {
                "configuration": {
                    "$ref": "#/types/dynatrace:index/K8sNamespaceAnomaliesMemoryRequestsQuotaSaturationConfiguration:K8sNamespaceAnomaliesMemoryRequestsQuotaSaturationConfiguration"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/K8sNamespaceAnomaliesMemoryRequestsQuotaSaturationConfiguration:K8sNamespaceAnomaliesMemoryRequestsQuotaSaturationConfiguration": {
            "properties": {
                "observationPeriodInMinutes": {
                    "type": "integer"
                },
                "samplePeriodInMinutes": {
                    "type": "integer"
                },
                "threshold": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "observationPeriodInMinutes",
                "samplePeriodInMinutes",
                "threshold"
            ]
        },
        "dynatrace:index/K8sNamespaceAnomaliesPodsQuotaSaturation:K8sNamespaceAnomaliesPodsQuotaSaturation": {
            "properties": {
                "configuration": {
                    "$ref": "#/types/dynatrace:index/K8sNamespaceAnomaliesPodsQuotaSaturationConfiguration:K8sNamespaceAnomaliesPodsQuotaSaturationConfiguration"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/K8sNamespaceAnomaliesPodsQuotaSaturationConfiguration:K8sNamespaceAnomaliesPodsQuotaSaturationConfiguration": {
            "properties": {
                "observationPeriodInMinutes": {
                    "type": "integer"
                },
                "samplePeriodInMinutes": {
                    "type": "integer"
                },
                "threshold": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "observationPeriodInMinutes",
                "samplePeriodInMinutes",
                "threshold"
            ]
        },
        "dynatrace:index/K8sNodeAnomaliesCpuRequestsSaturation:K8sNodeAnomaliesCpuRequestsSaturation": {
            "properties": {
                "configuration": {
                    "$ref": "#/types/dynatrace:index/K8sNodeAnomaliesCpuRequestsSaturationConfiguration:K8sNodeAnomaliesCpuRequestsSaturationConfiguration"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/K8sNodeAnomaliesCpuRequestsSaturationConfiguration:K8sNodeAnomaliesCpuRequestsSaturationConfiguration": {
            "properties": {
                "observationPeriodInMinutes": {
                    "type": "integer"
                },
                "samplePeriodInMinutes": {
                    "type": "integer"
                },
                "threshold": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "observationPeriodInMinutes",
                "samplePeriodInMinutes",
                "threshold"
            ]
        },
        "dynatrace:index/K8sNodeAnomaliesMemoryRequestsSaturation:K8sNodeAnomaliesMemoryRequestsSaturation": {
            "properties": {
                "configuration": {
                    "$ref": "#/types/dynatrace:index/K8sNodeAnomaliesMemoryRequestsSaturationConfiguration:K8sNodeAnomaliesMemoryRequestsSaturationConfiguration"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/K8sNodeAnomaliesMemoryRequestsSaturationConfiguration:K8sNodeAnomaliesMemoryRequestsSaturationConfiguration": {
            "properties": {
                "observationPeriodInMinutes": {
                    "type": "integer"
                },
                "samplePeriodInMinutes": {
                    "type": "integer"
                },
                "threshold": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "observationPeriodInMinutes",
                "samplePeriodInMinutes",
                "threshold"
            ]
        },
        "dynatrace:index/K8sNodeAnomaliesNodeProblematicCondition:K8sNodeAnomaliesNodeProblematicCondition": {
            "properties": {
                "configuration": {
                    "$ref": "#/types/dynatrace:index/K8sNodeAnomaliesNodeProblematicConditionConfiguration:K8sNodeAnomaliesNodeProblematicConditionConfiguration"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/K8sNodeAnomaliesNodeProblematicConditionConfiguration:K8sNodeAnomaliesNodeProblematicConditionConfiguration": {
            "properties": {
                "observationPeriodInMinutes": {
                    "type": "integer"
                },
                "samplePeriodInMinutes": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "observationPeriodInMinutes",
                "samplePeriodInMinutes"
            ]
        },
        "dynatrace:index/K8sNodeAnomaliesPodsSaturation:K8sNodeAnomaliesPodsSaturation": {
            "properties": {
                "configuration": {
                    "$ref": "#/types/dynatrace:index/K8sNodeAnomaliesPodsSaturationConfiguration:K8sNodeAnomaliesPodsSaturationConfiguration"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/K8sNodeAnomaliesPodsSaturationConfiguration:K8sNodeAnomaliesPodsSaturationConfiguration": {
            "properties": {
                "observationPeriodInMinutes": {
                    "type": "integer"
                },
                "samplePeriodInMinutes": {
                    "type": "integer"
                },
                "threshold": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "observationPeriodInMinutes",
                "samplePeriodInMinutes",
                "threshold"
            ]
        },
        "dynatrace:index/K8sNodeAnomaliesReadinessIssues:K8sNodeAnomaliesReadinessIssues": {
            "properties": {
                "configuration": {
                    "$ref": "#/types/dynatrace:index/K8sNodeAnomaliesReadinessIssuesConfiguration:K8sNodeAnomaliesReadinessIssuesConfiguration"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/K8sNodeAnomaliesReadinessIssuesConfiguration:K8sNodeAnomaliesReadinessIssuesConfiguration": {
            "properties": {
                "observationPeriodInMinutes": {
                    "type": "integer"
                },
                "samplePeriodInMinutes": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "observationPeriodInMinutes",
                "samplePeriodInMinutes"
            ]
        },
        "dynatrace:index/K8sPvcAnomaliesLowDiskSpaceCritical:K8sPvcAnomaliesLowDiskSpaceCritical": {
            "properties": {
                "configuration": {
                    "$ref": "#/types/dynatrace:index/K8sPvcAnomaliesLowDiskSpaceCriticalConfiguration:K8sPvcAnomaliesLowDiskSpaceCriticalConfiguration"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/K8sPvcAnomaliesLowDiskSpaceCriticalConfiguration:K8sPvcAnomaliesLowDiskSpaceCriticalConfiguration": {
            "properties": {
                "observationPeriodInMinutes": {
                    "type": "integer"
                },
                "samplePeriodInMinutes": {
                    "type": "integer"
                },
                "threshold": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "observationPeriodInMinutes",
                "samplePeriodInMinutes",
                "threshold"
            ]
        },
        "dynatrace:index/K8sPvcAnomaliesLowDiskSpaceCriticalPercentage:K8sPvcAnomaliesLowDiskSpaceCriticalPercentage": {
            "properties": {
                "configuration": {
                    "$ref": "#/types/dynatrace:index/K8sPvcAnomaliesLowDiskSpaceCriticalPercentageConfiguration:K8sPvcAnomaliesLowDiskSpaceCriticalPercentageConfiguration"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/K8sPvcAnomaliesLowDiskSpaceCriticalPercentageConfiguration:K8sPvcAnomaliesLowDiskSpaceCriticalPercentageConfiguration": {
            "properties": {
                "observationPeriodInMinutes": {
                    "type": "integer"
                },
                "samplePeriodInMinutes": {
                    "type": "integer"
                },
                "threshold": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "observationPeriodInMinutes",
                "samplePeriodInMinutes",
                "threshold"
            ]
        },
        "dynatrace:index/K8sWorkloadAnomaliesContainerRestarts:K8sWorkloadAnomaliesContainerRestarts": {
            "properties": {
                "configuration": {
                    "$ref": "#/types/dynatrace:index/K8sWorkloadAnomaliesContainerRestartsConfiguration:K8sWorkloadAnomaliesContainerRestartsConfiguration"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/K8sWorkloadAnomaliesContainerRestartsConfiguration:K8sWorkloadAnomaliesContainerRestartsConfiguration": {
            "properties": {
                "observationPeriodInMinutes": {
                    "type": "integer"
                },
                "samplePeriodInMinutes": {
                    "type": "integer"
                },
                "threshold": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "observationPeriodInMinutes",
                "samplePeriodInMinutes",
                "threshold"
            ]
        },
        "dynatrace:index/K8sWorkloadAnomaliesDeploymentStuck:K8sWorkloadAnomaliesDeploymentStuck": {
            "properties": {
                "configuration": {
                    "$ref": "#/types/dynatrace:index/K8sWorkloadAnomaliesDeploymentStuckConfiguration:K8sWorkloadAnomaliesDeploymentStuckConfiguration"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/K8sWorkloadAnomaliesDeploymentStuckConfiguration:K8sWorkloadAnomaliesDeploymentStuckConfiguration": {
            "properties": {
                "observationPeriodInMinutes": {
                    "type": "integer"
                },
                "samplePeriodInMinutes": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "observationPeriodInMinutes",
                "samplePeriodInMinutes"
            ]
        },
        "dynatrace:index/K8sWorkloadAnomaliesHighCpuThrottling:K8sWorkloadAnomaliesHighCpuThrottling": {
            "properties": {
                "configuration": {
                    "$ref": "#/types/dynatrace:index/K8sWorkloadAnomaliesHighCpuThrottlingConfiguration:K8sWorkloadAnomaliesHighCpuThrottlingConfiguration"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/K8sWorkloadAnomaliesHighCpuThrottlingConfiguration:K8sWorkloadAnomaliesHighCpuThrottlingConfiguration": {
            "properties": {
                "observationPeriodInMinutes": {
                    "type": "integer"
                },
                "samplePeriodInMinutes": {
                    "type": "integer"
                },
                "threshold": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "observationPeriodInMinutes",
                "samplePeriodInMinutes",
                "threshold"
            ]
        },
        "dynatrace:index/K8sWorkloadAnomaliesHighCpuUsage:K8sWorkloadAnomaliesHighCpuUsage": {
            "properties": {
                "configuration": {
                    "$ref": "#/types/dynatrace:index/K8sWorkloadAnomaliesHighCpuUsageConfiguration:K8sWorkloadAnomaliesHighCpuUsageConfiguration"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/K8sWorkloadAnomaliesHighCpuUsageConfiguration:K8sWorkloadAnomaliesHighCpuUsageConfiguration": {
            "properties": {
                "observationPeriodInMinutes": {
                    "type": "integer"
                },
                "samplePeriodInMinutes": {
                    "type": "integer"
                },
                "threshold": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "observationPeriodInMinutes",
                "samplePeriodInMinutes",
                "threshold"
            ]
        },
        "dynatrace:index/K8sWorkloadAnomaliesHighMemoryUsage:K8sWorkloadAnomaliesHighMemoryUsage": {
            "properties": {
                "configuration": {
                    "$ref": "#/types/dynatrace:index/K8sWorkloadAnomaliesHighMemoryUsageConfiguration:K8sWorkloadAnomaliesHighMemoryUsageConfiguration"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/K8sWorkloadAnomaliesHighMemoryUsageConfiguration:K8sWorkloadAnomaliesHighMemoryUsageConfiguration": {
            "properties": {
                "observationPeriodInMinutes": {
                    "type": "integer"
                },
                "samplePeriodInMinutes": {
                    "type": "integer"
                },
                "threshold": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "observationPeriodInMinutes",
                "samplePeriodInMinutes",
                "threshold"
            ]
        },
        "dynatrace:index/K8sWorkloadAnomaliesJobFailureEvents:K8sWorkloadAnomaliesJobFailureEvents": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/K8sWorkloadAnomaliesNotAllPodsReady:K8sWorkloadAnomaliesNotAllPodsReady": {
            "properties": {
                "configuration": {
                    "$ref": "#/types/dynatrace:index/K8sWorkloadAnomaliesNotAllPodsReadyConfiguration:K8sWorkloadAnomaliesNotAllPodsReadyConfiguration"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/K8sWorkloadAnomaliesNotAllPodsReadyConfiguration:K8sWorkloadAnomaliesNotAllPodsReadyConfiguration": {
            "properties": {
                "observationPeriodInMinutes": {
                    "type": "integer"
                },
                "samplePeriodInMinutes": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "observationPeriodInMinutes",
                "samplePeriodInMinutes"
            ]
        },
        "dynatrace:index/K8sWorkloadAnomaliesOomKills:K8sWorkloadAnomaliesOomKills": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/K8sWorkloadAnomaliesPendingPods:K8sWorkloadAnomaliesPendingPods": {
            "properties": {
                "configuration": {
                    "$ref": "#/types/dynatrace:index/K8sWorkloadAnomaliesPendingPodsConfiguration:K8sWorkloadAnomaliesPendingPodsConfiguration"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/K8sWorkloadAnomaliesPendingPodsConfiguration:K8sWorkloadAnomaliesPendingPodsConfiguration": {
            "properties": {
                "observationPeriodInMinutes": {
                    "type": "integer"
                },
                "samplePeriodInMinutes": {
                    "type": "integer"
                },
                "threshold": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "observationPeriodInMinutes",
                "samplePeriodInMinutes",
                "threshold"
            ]
        },
        "dynatrace:index/K8sWorkloadAnomaliesPodBackoffEvents:K8sWorkloadAnomaliesPodBackoffEvents": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/K8sWorkloadAnomaliesPodEvictionEvents:K8sWorkloadAnomaliesPodEvictionEvents": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/K8sWorkloadAnomaliesPodPreemptionEvents:K8sWorkloadAnomaliesPodPreemptionEvents": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/K8sWorkloadAnomaliesPodStuckInTerminating:K8sWorkloadAnomaliesPodStuckInTerminating": {
            "properties": {
                "configuration": {
                    "$ref": "#/types/dynatrace:index/K8sWorkloadAnomaliesPodStuckInTerminatingConfiguration:K8sWorkloadAnomaliesPodStuckInTerminatingConfiguration"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/K8sWorkloadAnomaliesPodStuckInTerminatingConfiguration:K8sWorkloadAnomaliesPodStuckInTerminatingConfiguration": {
            "properties": {
                "observationPeriodInMinutes": {
                    "type": "integer"
                },
                "samplePeriodInMinutes": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "observationPeriodInMinutes",
                "samplePeriodInMinutes"
            ]
        },
        "dynatrace:index/K8sWorkloadAnomaliesWorkloadWithoutReadyPods:K8sWorkloadAnomaliesWorkloadWithoutReadyPods": {
            "properties": {
                "configuration": {
                    "$ref": "#/types/dynatrace:index/K8sWorkloadAnomaliesWorkloadWithoutReadyPodsConfiguration:K8sWorkloadAnomaliesWorkloadWithoutReadyPodsConfiguration"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/K8sWorkloadAnomaliesWorkloadWithoutReadyPodsConfiguration:K8sWorkloadAnomaliesWorkloadWithoutReadyPodsConfiguration": {
            "properties": {
                "observationPeriodInMinutes": {
                    "type": "integer"
                },
                "samplePeriodInMinutes": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "observationPeriodInMinutes",
                "samplePeriodInMinutes"
            ]
        },
        "dynatrace:index/KubernetesAppKubernetesAppOptions:KubernetesAppKubernetesAppOptions": {
            "properties": {
                "enableKubernetesApp": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "enableKubernetesApp"
            ]
        },
        "dynatrace:index/KubernetesEventPatterns:KubernetesEventPatterns": {
            "properties": {
                "eventPatterns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/KubernetesEventPatternsEventPattern:KubernetesEventPatternsEventPattern"
                    }
                }
            },
            "type": "object",
            "required": [
                "eventPatterns"
            ]
        },
        "dynatrace:index/KubernetesEventPatternsEventPattern:KubernetesEventPatternsEventPattern": {
            "properties": {
                "active": {
                    "type": "boolean"
                },
                "label": {
                    "type": "string"
                },
                "pattern": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "active",
                "label",
                "pattern"
            ]
        },
        "dynatrace:index/LimitOutboundConnectionsAllowedOutboundConnections:LimitOutboundConnectionsAllowedOutboundConnections": {
            "properties": {
                "enforced": {
                    "type": "boolean"
                },
                "hostLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "enforced"
            ]
        },
        "dynatrace:index/LogCustomSourceContext:LogCustomSourceContext": {
            "properties": {
                "contexts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/LogCustomSourceContextContext:LogCustomSourceContextContext"
                    }
                }
            },
            "type": "object",
            "required": [
                "contexts"
            ]
        },
        "dynatrace:index/LogCustomSourceContextContext:LogCustomSourceContextContext": {
            "properties": {
                "attribute": {
                    "type": "string"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "attribute",
                "values"
            ]
        },
        "dynatrace:index/LogCustomSourceCustomLogSource:LogCustomSourceCustomLogSource": {
            "properties": {
                "acceptBinary": {
                    "type": "boolean"
                },
                "type": {
                    "type": "string"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "type",
                "values"
            ]
        },
        "dynatrace:index/LogEventsEventTemplate:LogEventsEventTemplate": {
            "properties": {
                "davisMerge": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "eventType": {
                    "type": "string"
                },
                "metadata": {
                    "$ref": "#/types/dynatrace:index/LogEventsEventTemplateMetadata:LogEventsEventTemplateMetadata"
                },
                "title": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "description",
                "eventType",
                "title"
            ]
        },
        "dynatrace:index/LogEventsEventTemplateMetadata:LogEventsEventTemplateMetadata": {
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/LogEventsEventTemplateMetadataItem:LogEventsEventTemplateMetadataItem"
                    }
                }
            },
            "type": "object",
            "required": [
                "items"
            ]
        },
        "dynatrace:index/LogEventsEventTemplateMetadataItem:LogEventsEventTemplateMetadataItem": {
            "properties": {
                "metadataKey": {
                    "type": "string"
                },
                "metadataValue": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "metadataKey",
                "metadataValue"
            ]
        },
        "dynatrace:index/LogProcessingProcessorDefinition:LogProcessingProcessorDefinition": {
            "properties": {
                "rule": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "rule"
            ]
        },
        "dynatrace:index/LogProcessingRuleTesting:LogProcessingRuleTesting": {
            "properties": {
                "sampleLog": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "sampleLog"
            ]
        },
        "dynatrace:index/LogSecurityContextSecurityContextRule:LogSecurityContextSecurityContextRule": {
            "properties": {
                "query": {
                    "type": "string"
                },
                "ruleName": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                },
                "valueSource": {
                    "type": "string"
                },
                "valueSourceField": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "query",
                "ruleName",
                "valueSource"
            ]
        },
        "dynatrace:index/LogSensitiveDataMaskingMasking:LogSensitiveDataMaskingMasking": {
            "properties": {
                "expression": {
                    "type": "string"
                },
                "replacement": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "expression",
                "type"
            ]
        },
        "dynatrace:index/LogSensitiveDataMaskingMatchers:LogSensitiveDataMaskingMatchers": {
            "properties": {
                "matchers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/LogSensitiveDataMaskingMatchersMatcher:LogSensitiveDataMaskingMatchersMatcher"
                    }
                }
            },
            "type": "object",
            "required": [
                "matchers"
            ]
        },
        "dynatrace:index/LogSensitiveDataMaskingMatchersMatcher:LogSensitiveDataMaskingMatchersMatcher": {
            "properties": {
                "attribute": {
                    "type": "string"
                },
                "operator": {
                    "type": "string"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "attribute",
                "operator",
                "values"
            ]
        },
        "dynatrace:index/LogStorageMatchers:LogStorageMatchers": {
            "properties": {
                "matchers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/LogStorageMatchersMatcher:LogStorageMatchersMatcher"
                    }
                }
            },
            "type": "object",
            "required": [
                "matchers"
            ]
        },
        "dynatrace:index/LogStorageMatchersMatcher:LogStorageMatchersMatcher": {
            "properties": {
                "attribute": {
                    "type": "string"
                },
                "operator": {
                    "type": "string"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "attribute",
                "operator",
                "values"
            ]
        },
        "dynatrace:index/LogTimestampMatchers:LogTimestampMatchers": {
            "properties": {
                "matchers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/LogTimestampMatchersMatcher:LogTimestampMatchersMatcher"
                    }
                }
            },
            "type": "object",
            "required": [
                "matchers"
            ]
        },
        "dynatrace:index/LogTimestampMatchersMatcher:LogTimestampMatchersMatcher": {
            "properties": {
                "attribute": {
                    "type": "string"
                },
                "operator": {
                    "type": "string"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "attribute",
                "operator",
                "values"
            ]
        },
        "dynatrace:index/MaintenanceFilters:MaintenanceFilters": {
            "properties": {
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/MaintenanceFiltersFilter:MaintenanceFiltersFilter"
                    }
                }
            },
            "type": "object",
            "required": [
                "filters"
            ]
        },
        "dynatrace:index/MaintenanceFiltersFilter:MaintenanceFiltersFilter": {
            "properties": {
                "entityId": {
                    "type": "string"
                },
                "entityTags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "entityType": {
                    "type": "string"
                },
                "managementZones": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object"
        },
        "dynatrace:index/MaintenanceGeneralProperties:MaintenanceGeneralProperties": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "disableSynthetic": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "suppression": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "disableSynthetic",
                "name",
                "suppression",
                "type"
            ]
        },
        "dynatrace:index/MaintenanceSchedule:MaintenanceSchedule": {
            "properties": {
                "dailyRecurrence": {
                    "$ref": "#/types/dynatrace:index/MaintenanceScheduleDailyRecurrence:MaintenanceScheduleDailyRecurrence"
                },
                "monthlyRecurrence": {
                    "$ref": "#/types/dynatrace:index/MaintenanceScheduleMonthlyRecurrence:MaintenanceScheduleMonthlyRecurrence"
                },
                "onceRecurrence": {
                    "$ref": "#/types/dynatrace:index/MaintenanceScheduleOnceRecurrence:MaintenanceScheduleOnceRecurrence"
                },
                "type": {
                    "type": "string"
                },
                "weeklyRecurrence": {
                    "$ref": "#/types/dynatrace:index/MaintenanceScheduleWeeklyRecurrence:MaintenanceScheduleWeeklyRecurrence"
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "dynatrace:index/MaintenanceScheduleDailyRecurrence:MaintenanceScheduleDailyRecurrence": {
            "properties": {
                "recurrenceRange": {
                    "$ref": "#/types/dynatrace:index/MaintenanceScheduleDailyRecurrenceRecurrenceRange:MaintenanceScheduleDailyRecurrenceRecurrenceRange"
                },
                "timeWindow": {
                    "$ref": "#/types/dynatrace:index/MaintenanceScheduleDailyRecurrenceTimeWindow:MaintenanceScheduleDailyRecurrenceTimeWindow"
                }
            },
            "type": "object",
            "required": [
                "recurrenceRange",
                "timeWindow"
            ]
        },
        "dynatrace:index/MaintenanceScheduleDailyRecurrenceRecurrenceRange:MaintenanceScheduleDailyRecurrenceRecurrenceRange": {
            "properties": {
                "endDate": {
                    "type": "string"
                },
                "startDate": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "endDate",
                "startDate"
            ]
        },
        "dynatrace:index/MaintenanceScheduleDailyRecurrenceTimeWindow:MaintenanceScheduleDailyRecurrenceTimeWindow": {
            "properties": {
                "endTime": {
                    "type": "string"
                },
                "startTime": {
                    "type": "string"
                },
                "timeZone": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "endTime",
                "startTime",
                "timeZone"
            ]
        },
        "dynatrace:index/MaintenanceScheduleMonthlyRecurrence:MaintenanceScheduleMonthlyRecurrence": {
            "properties": {
                "dayOfMonth": {
                    "type": "integer"
                },
                "recurrenceRange": {
                    "$ref": "#/types/dynatrace:index/MaintenanceScheduleMonthlyRecurrenceRecurrenceRange:MaintenanceScheduleMonthlyRecurrenceRecurrenceRange"
                },
                "timeWindow": {
                    "$ref": "#/types/dynatrace:index/MaintenanceScheduleMonthlyRecurrenceTimeWindow:MaintenanceScheduleMonthlyRecurrenceTimeWindow"
                }
            },
            "type": "object",
            "required": [
                "dayOfMonth",
                "recurrenceRange",
                "timeWindow"
            ]
        },
        "dynatrace:index/MaintenanceScheduleMonthlyRecurrenceRecurrenceRange:MaintenanceScheduleMonthlyRecurrenceRecurrenceRange": {
            "properties": {
                "endDate": {
                    "type": "string"
                },
                "startDate": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "endDate",
                "startDate"
            ]
        },
        "dynatrace:index/MaintenanceScheduleMonthlyRecurrenceTimeWindow:MaintenanceScheduleMonthlyRecurrenceTimeWindow": {
            "properties": {
                "endTime": {
                    "type": "string"
                },
                "startTime": {
                    "type": "string"
                },
                "timeZone": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "endTime",
                "startTime",
                "timeZone"
            ]
        },
        "dynatrace:index/MaintenanceScheduleOnceRecurrence:MaintenanceScheduleOnceRecurrence": {
            "properties": {
                "endTime": {
                    "type": "string"
                },
                "startTime": {
                    "type": "string"
                },
                "timeZone": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "endTime",
                "startTime",
                "timeZone"
            ]
        },
        "dynatrace:index/MaintenanceScheduleWeeklyRecurrence:MaintenanceScheduleWeeklyRecurrence": {
            "properties": {
                "dayOfWeek": {
                    "type": "string"
                },
                "recurrenceRange": {
                    "$ref": "#/types/dynatrace:index/MaintenanceScheduleWeeklyRecurrenceRecurrenceRange:MaintenanceScheduleWeeklyRecurrenceRecurrenceRange"
                },
                "timeWindow": {
                    "$ref": "#/types/dynatrace:index/MaintenanceScheduleWeeklyRecurrenceTimeWindow:MaintenanceScheduleWeeklyRecurrenceTimeWindow"
                }
            },
            "type": "object",
            "required": [
                "dayOfWeek",
                "recurrenceRange",
                "timeWindow"
            ]
        },
        "dynatrace:index/MaintenanceScheduleWeeklyRecurrenceRecurrenceRange:MaintenanceScheduleWeeklyRecurrenceRecurrenceRange": {
            "properties": {
                "endDate": {
                    "type": "string"
                },
                "startDate": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "endDate",
                "startDate"
            ]
        },
        "dynatrace:index/MaintenanceScheduleWeeklyRecurrenceTimeWindow:MaintenanceScheduleWeeklyRecurrenceTimeWindow": {
            "properties": {
                "endTime": {
                    "type": "string"
                },
                "startTime": {
                    "type": "string"
                },
                "timeZone": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "endTime",
                "startTime",
                "timeZone"
            ]
        },
        "dynatrace:index/MaintenanceWindowSchedule:MaintenanceWindowSchedule": {
            "properties": {
                "end": {
                    "type": "string"
                },
                "recurrence": {
                    "$ref": "#/types/dynatrace:index/MaintenanceWindowScheduleRecurrence:MaintenanceWindowScheduleRecurrence"
                },
                "recurrenceType": {
                    "type": "string"
                },
                "start": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "zoneId": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "end",
                "recurrenceType",
                "start",
                "zoneId"
            ]
        },
        "dynatrace:index/MaintenanceWindowScheduleRecurrence:MaintenanceWindowScheduleRecurrence": {
            "properties": {
                "dayOfMonth": {
                    "type": "integer"
                },
                "dayOfWeek": {
                    "type": "string"
                },
                "durationMinutes": {
                    "type": "integer"
                },
                "startTime": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "durationMinutes",
                "startTime"
            ]
        },
        "dynatrace:index/MaintenanceWindowScope:MaintenanceWindowScope": {
            "properties": {
                "entities": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "matches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/MaintenanceWindowScopeMatch:MaintenanceWindowScopeMatch"
                    }
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "dynatrace:index/MaintenanceWindowScopeMatch:MaintenanceWindowScopeMatch": {
            "properties": {
                "mzId": {
                    "type": "string"
                },
                "tagCombination": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/MaintenanceWindowScopeMatchTag:MaintenanceWindowScopeMatchTag"
                    }
                },
                "type": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "dynatrace:index/MaintenanceWindowScopeMatchTag:MaintenanceWindowScopeMatchTag": {
            "properties": {
                "context": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "context",
                "key"
            ]
        },
        "dynatrace:index/ManagementZoneDimensionalRule:ManagementZoneDimensionalRule": {
            "properties": {
                "appliesTo": {
                    "type": "string"
                },
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ManagementZoneDimensionalRuleCondition:ManagementZoneDimensionalRuleCondition"
                    }
                },
                "enabled": {
                    "type": "boolean"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "appliesTo"
            ]
        },
        "dynatrace:index/ManagementZoneDimensionalRuleCondition:ManagementZoneDimensionalRuleCondition": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "match": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "match",
                "type"
            ]
        },
        "dynatrace:index/ManagementZoneEntitySelectorBasedRule:ManagementZoneEntitySelectorBasedRule": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "selector": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "dynatrace:index/ManagementZoneRule:ManagementZoneRule": {
            "properties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ManagementZoneRuleCondition:ManagementZoneRuleCondition"
                    }
                },
                "enabled": {
                    "type": "boolean"
                },
                "propagationTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "type": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "dynatrace:index/ManagementZoneRuleCondition:ManagementZoneRuleCondition": {
            "properties": {
                "applicationTypeComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ManagementZoneRuleConditionApplicationTypeComparison:ManagementZoneRuleConditionApplicationTypeComparison"
                    },
                    "deprecationMessage": "You should use 'application_type' instead of 'application_type_comparison'. This attribute still exists for backwards compatibility."
                },
                "applicationTypes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ManagementZoneRuleConditionApplicationType:ManagementZoneRuleConditionApplicationType"
                    }
                },
                "azureComputeModeComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ManagementZoneRuleConditionAzureComputeModeComparison:ManagementZoneRuleConditionAzureComputeModeComparison"
                    }
                },
                "azureComputeModes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ManagementZoneRuleConditionAzureComputeMode:ManagementZoneRuleConditionAzureComputeMode"
                    },
                    "deprecationMessage": "You should use 'azure_compute_mode' instead of 'azure_compute_mode_comparison'. This attribute still exists for backwards compatibility."
                },
                "azureSkuComparisions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ManagementZoneRuleConditionAzureSkuComparision:ManagementZoneRuleConditionAzureSkuComparision"
                    },
                    "deprecationMessage": "You should use 'azure_sku' instead of 'azure_sku_comparision'. This attribute still exists for backwards compatibility."
                },
                "azureSkus": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ManagementZoneRuleConditionAzureSkus:ManagementZoneRuleConditionAzureSkus"
                    }
                },
                "baseComparisonBasics": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ManagementZoneRuleConditionBaseComparisonBasic:ManagementZoneRuleConditionBaseComparisonBasic"
                    },
                    "deprecationMessage": "You should use 'comparison' instead of 'base_comparison_basic'. This attribute still exists for backwards compatibility."
                },
                "baseConditionKeys": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ManagementZoneRuleConditionBaseConditionKey:ManagementZoneRuleConditionBaseConditionKey"
                    },
                    "deprecationMessage": "'base_condition_key' is deprecated. You should use 'key'"
                },
                "bitnessComparisions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ManagementZoneRuleConditionBitnessComparision:ManagementZoneRuleConditionBitnessComparision"
                    },
                    "deprecationMessage": "You should use 'bitness' instead of 'bitness_comparision'. This attribute still exists for backwards compatibility."
                },
                "bitnesses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ManagementZoneRuleConditionBitness:ManagementZoneRuleConditionBitness"
                    }
                },
                "cloudTypeComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ManagementZoneRuleConditionCloudTypeComparison:ManagementZoneRuleConditionCloudTypeComparison"
                    },
                    "deprecationMessage": "You should use 'cloud_type' instead of 'cloud_type_comparison'. This attribute still exists for backwards compatibility."
                },
                "cloudTypes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ManagementZoneRuleConditionCloudType:ManagementZoneRuleConditionCloudType"
                    }
                },
                "comparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ManagementZoneRuleConditionComparison:ManagementZoneRuleConditionComparison"
                    }
                },
                "customApplicationTypeComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ManagementZoneRuleConditionCustomApplicationTypeComparison:ManagementZoneRuleConditionCustomApplicationTypeComparison"
                    },
                    "deprecationMessage": "You should use 'custom_application_type' instead of 'custom_application_type_comparison'. This attribute still exists for backwards compatibility."
                },
                "customApplicationTypes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ManagementZoneRuleConditionCustomApplicationType:ManagementZoneRuleConditionCustomApplicationType"
                    }
                },
                "customHostMetadataConditionKeys": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ManagementZoneRuleConditionCustomHostMetadataConditionKey:ManagementZoneRuleConditionCustomHostMetadataConditionKey"
                    },
                    "deprecationMessage": "'custom_host_metadata_condition_key' is deprecated. You should use 'custom_host_metadata'"
                },
                "customHostMetadatas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ManagementZoneRuleConditionCustomHostMetadata:ManagementZoneRuleConditionCustomHostMetadata"
                    }
                },
                "customProcessMetadataConditionKeys": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ManagementZoneRuleConditionCustomProcessMetadataConditionKey:ManagementZoneRuleConditionCustomProcessMetadataConditionKey"
                    },
                    "deprecationMessage": "'custom_process_metadata_condition_key' is deprecated. You should use 'custom_process_metadata'"
                },
                "customProcessMetadatas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ManagementZoneRuleConditionCustomProcessMetadata:ManagementZoneRuleConditionCustomProcessMetadata"
                    }
                },
                "databaseTopologies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ManagementZoneRuleConditionDatabaseTopology:ManagementZoneRuleConditionDatabaseTopology"
                    }
                },
                "databaseTopologyComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ManagementZoneRuleConditionDatabaseTopologyComparison:ManagementZoneRuleConditionDatabaseTopologyComparison"
                    },
                    "deprecationMessage": "You should use 'database_topology' instead of 'database_topology_comparison'. This attribute still exists for backwards compatibility."
                },
                "dcrumDecoderComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ManagementZoneRuleConditionDcrumDecoderComparison:ManagementZoneRuleConditionDcrumDecoderComparison"
                    },
                    "deprecationMessage": "You should use 'dcrum_decoder' instead of 'dcrum_decoder_comparison'. This attribute still exists for backwards compatibility."
                },
                "dcrumDecoders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ManagementZoneRuleConditionDcrumDecoder:ManagementZoneRuleConditionDcrumDecoder"
                    }
                },
                "entities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ManagementZoneRuleConditionEntity:ManagementZoneRuleConditionEntity"
                    }
                },
                "entityIdComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ManagementZoneRuleConditionEntityIdComparison:ManagementZoneRuleConditionEntityIdComparison"
                    },
                    "deprecationMessage": "You should use 'entity' instead of 'entity_id_comparison'. This attribute still exists for backwards compatibility."
                },
                "hostTeches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ManagementZoneRuleConditionHostTech:ManagementZoneRuleConditionHostTech"
                    }
                },
                "hypervisorTypeComparisions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ManagementZoneRuleConditionHypervisorTypeComparision:ManagementZoneRuleConditionHypervisorTypeComparision"
                    },
                    "deprecationMessage": "`hypervisor_type_comparision` is deprecated. Use `hypervisor` instead"
                },
                "hypervisors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ManagementZoneRuleConditionHypervisor:ManagementZoneRuleConditionHypervisor"
                    }
                },
                "indexedNameComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ManagementZoneRuleConditionIndexedNameComparison:ManagementZoneRuleConditionIndexedNameComparison"
                    },
                    "deprecationMessage": "You should use 'indexed_name' instead of 'indexed_name_comparison'. This attribute still exists for backwards compatibility."
                },
                "indexedNames": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ManagementZoneRuleConditionIndexedName:ManagementZoneRuleConditionIndexedName"
                    }
                },
                "indexedStringComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ManagementZoneRuleConditionIndexedStringComparison:ManagementZoneRuleConditionIndexedStringComparison"
                    },
                    "deprecationMessage": "You should use 'indexed_string' instead of 'indexed_string_comparison'. This attribute still exists for backwards compatibility."
                },
                "indexedStrings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ManagementZoneRuleConditionIndexedString:ManagementZoneRuleConditionIndexedString"
                    }
                },
                "indexedTagComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ManagementZoneRuleConditionIndexedTagComparison:ManagementZoneRuleConditionIndexedTagComparison"
                    },
                    "deprecationMessage": "You should use 'indexed_tag' instead of 'indexed_tag_comparison'. This attribute still exists for backwards compatibility."
                },
                "indexedTags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ManagementZoneRuleConditionIndexedTag:ManagementZoneRuleConditionIndexedTag"
                    }
                },
                "integerComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ManagementZoneRuleConditionIntegerComparison:ManagementZoneRuleConditionIntegerComparison"
                    },
                    "deprecationMessage": "You should use 'integer' instead of 'integer_comparison'. This attribute still exists for backwards compatibility."
                },
                "integers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ManagementZoneRuleConditionInteger:ManagementZoneRuleConditionInteger"
                    }
                },
                "ipaddressComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ManagementZoneRuleConditionIpaddressComparison:ManagementZoneRuleConditionIpaddressComparison"
                    },
                    "deprecationMessage": "You should use 'ipaddress' instead of 'ipaddress_comparison'. This attribute still exists for backwards compatibility."
                },
                "ipaddresses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ManagementZoneRuleConditionIpaddress:ManagementZoneRuleConditionIpaddress"
                    }
                },
                "keys": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ManagementZoneRuleConditionKey:ManagementZoneRuleConditionKey"
                    }
                },
                "mobilePlatformComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ManagementZoneRuleConditionMobilePlatformComparison:ManagementZoneRuleConditionMobilePlatformComparison"
                    },
                    "deprecationMessage": "You should use 'mobile_platform' instead of 'mobile_platform_comparison'. This attribute still exists for backwards compatibility."
                },
                "mobilePlatforms": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ManagementZoneRuleConditionMobilePlatform:ManagementZoneRuleConditionMobilePlatform"
                    }
                },
                "osArches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ManagementZoneRuleConditionOsArch:ManagementZoneRuleConditionOsArch"
                    }
                },
                "osTypes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ManagementZoneRuleConditionOsType:ManagementZoneRuleConditionOsType"
                    }
                },
                "osarchitectureComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ManagementZoneRuleConditionOsarchitectureComparison:ManagementZoneRuleConditionOsarchitectureComparison"
                    },
                    "deprecationMessage": "You should use 'os_arch' instead of 'osarchitecture_comparison'. This attribute still exists for backwards compatibility."
                },
                "ostypeComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ManagementZoneRuleConditionOstypeComparison:ManagementZoneRuleConditionOstypeComparison"
                    },
                    "deprecationMessage": "You should use 'os_type' instead of 'ostype_comparison'. This attribute still exists for backwards compatibility."
                },
                "paasTypeComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ManagementZoneRuleConditionPaasTypeComparison:ManagementZoneRuleConditionPaasTypeComparison"
                    },
                    "deprecationMessage": "You should use 'paas_type' instead of 'paas_type_comparison'. This attribute still exists for backwards compatibility."
                },
                "paasTypes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ManagementZoneRuleConditionPaasType:ManagementZoneRuleConditionPaasType"
                    }
                },
                "processMetadataConditionKeys": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ManagementZoneRuleConditionProcessMetadataConditionKey:ManagementZoneRuleConditionProcessMetadataConditionKey"
                    },
                    "deprecationMessage": "'process_metadata_condition_key' is deprecated. You should use 'process_metadata'"
                },
                "processMetadatas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ManagementZoneRuleConditionProcessMetadata:ManagementZoneRuleConditionProcessMetadata"
                    }
                },
                "serviceTopologies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ManagementZoneRuleConditionServiceTopology:ManagementZoneRuleConditionServiceTopology"
                    }
                },
                "serviceTopologyComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ManagementZoneRuleConditionServiceTopologyComparison:ManagementZoneRuleConditionServiceTopologyComparison"
                    },
                    "deprecationMessage": "You should use 'service_topology' instead of 'service_topology_comparison'. This attribute still exists for backwards compatibility."
                },
                "serviceTypeComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ManagementZoneRuleConditionServiceTypeComparison:ManagementZoneRuleConditionServiceTypeComparison"
                    },
                    "deprecationMessage": "You should use 'service_type' instead of 'service_type_comparison'. This attribute still exists for backwards compatibility."
                },
                "serviceTypes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ManagementZoneRuleConditionServiceType:ManagementZoneRuleConditionServiceType"
                    }
                },
                "simpleHostTechComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ManagementZoneRuleConditionSimpleHostTechComparison:ManagementZoneRuleConditionSimpleHostTechComparison"
                    },
                    "deprecationMessage": "You should use 'host_tech' instead of 'simple_host_tech_comparison'. This attribute still exists for backwards compatibility."
                },
                "simpleTechComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ManagementZoneRuleConditionSimpleTechComparison:ManagementZoneRuleConditionSimpleTechComparison"
                    },
                    "deprecationMessage": "You should use 'tech' instead of 'simple_tech_comparison'. This attribute still exists for backwards compatibility."
                },
                "stringComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ManagementZoneRuleConditionStringComparison:ManagementZoneRuleConditionStringComparison"
                    },
                    "deprecationMessage": "You should use 'string' instead of 'string_comparison'. This attribute still exists for backwards compatibility."
                },
                "stringConditionKeys": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ManagementZoneRuleConditionStringConditionKey:ManagementZoneRuleConditionStringConditionKey"
                    },
                    "deprecationMessage": "'string_condition_key' is deprecated. You should use 'string_key'"
                },
                "stringKeys": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ManagementZoneRuleConditionStringKey:ManagementZoneRuleConditionStringKey"
                    }
                },
                "strings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ManagementZoneRuleConditionString:ManagementZoneRuleConditionString"
                    }
                },
                "syntheticEngineTypeComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ManagementZoneRuleConditionSyntheticEngineTypeComparison:ManagementZoneRuleConditionSyntheticEngineTypeComparison"
                    },
                    "deprecationMessage": "You should use 'synthetic_engine' instead of 'synthetic_engine_type_comparison'. This attribute still exists for backwards compatibility."
                },
                "syntheticEngines": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ManagementZoneRuleConditionSyntheticEngine:ManagementZoneRuleConditionSyntheticEngine"
                    }
                },
                "tagComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ManagementZoneRuleConditionTagComparison:ManagementZoneRuleConditionTagComparison"
                    },
                    "deprecationMessage": "You should use 'tag' instead of 'tag_comparison'. This attribute still exists for backwards compatibility."
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ManagementZoneRuleConditionTag:ManagementZoneRuleConditionTag"
                    }
                },
                "teches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ManagementZoneRuleConditionTech:ManagementZoneRuleConditionTech"
                    }
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "dynatrace:index/ManagementZoneRuleConditionApplicationType:ManagementZoneRuleConditionApplicationType": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ManagementZoneRuleConditionApplicationTypeComparison:ManagementZoneRuleConditionApplicationTypeComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ManagementZoneRuleConditionAzureComputeMode:ManagementZoneRuleConditionAzureComputeMode": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ManagementZoneRuleConditionAzureComputeModeComparison:ManagementZoneRuleConditionAzureComputeModeComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ManagementZoneRuleConditionAzureSkuComparision:ManagementZoneRuleConditionAzureSkuComparision": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ManagementZoneRuleConditionAzureSkus:ManagementZoneRuleConditionAzureSkus": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ManagementZoneRuleConditionBaseComparisonBasic:ManagementZoneRuleConditionBaseComparisonBasic": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "type": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "dynatrace:index/ManagementZoneRuleConditionBaseConditionKey:ManagementZoneRuleConditionBaseConditionKey": {
            "properties": {
                "attribute": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "attribute"
            ]
        },
        "dynatrace:index/ManagementZoneRuleConditionBitness:ManagementZoneRuleConditionBitness": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ManagementZoneRuleConditionBitnessComparision:ManagementZoneRuleConditionBitnessComparision": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ManagementZoneRuleConditionCloudType:ManagementZoneRuleConditionCloudType": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ManagementZoneRuleConditionCloudTypeComparison:ManagementZoneRuleConditionCloudTypeComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ManagementZoneRuleConditionComparison:ManagementZoneRuleConditionComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "type": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "dynatrace:index/ManagementZoneRuleConditionCustomApplicationType:ManagementZoneRuleConditionCustomApplicationType": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ManagementZoneRuleConditionCustomApplicationTypeComparison:ManagementZoneRuleConditionCustomApplicationTypeComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ManagementZoneRuleConditionCustomHostMetadata:ManagementZoneRuleConditionCustomHostMetadata": {
            "properties": {
                "attribute": {
                    "type": "string"
                },
                "dynamicKey": {
                    "$ref": "#/types/dynatrace:index/ManagementZoneRuleConditionCustomHostMetadataDynamicKey:ManagementZoneRuleConditionCustomHostMetadataDynamicKey"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "attribute",
                "dynamicKey"
            ]
        },
        "dynatrace:index/ManagementZoneRuleConditionCustomHostMetadataConditionKey:ManagementZoneRuleConditionCustomHostMetadataConditionKey": {
            "properties": {
                "attribute": {
                    "type": "string"
                },
                "dynamicKey": {
                    "$ref": "#/types/dynatrace:index/ManagementZoneRuleConditionCustomHostMetadataConditionKeyDynamicKey:ManagementZoneRuleConditionCustomHostMetadataConditionKeyDynamicKey"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "attribute",
                "dynamicKey"
            ]
        },
        "dynatrace:index/ManagementZoneRuleConditionCustomHostMetadataConditionKeyDynamicKey:ManagementZoneRuleConditionCustomHostMetadataConditionKeyDynamicKey": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "source": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "source"
            ]
        },
        "dynatrace:index/ManagementZoneRuleConditionCustomHostMetadataDynamicKey:ManagementZoneRuleConditionCustomHostMetadataDynamicKey": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "source": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "source"
            ]
        },
        "dynatrace:index/ManagementZoneRuleConditionCustomProcessMetadata:ManagementZoneRuleConditionCustomProcessMetadata": {
            "properties": {
                "attribute": {
                    "type": "string"
                },
                "dynamicKey": {
                    "$ref": "#/types/dynatrace:index/ManagementZoneRuleConditionCustomProcessMetadataDynamicKey:ManagementZoneRuleConditionCustomProcessMetadataDynamicKey"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "attribute",
                "dynamicKey"
            ]
        },
        "dynatrace:index/ManagementZoneRuleConditionCustomProcessMetadataConditionKey:ManagementZoneRuleConditionCustomProcessMetadataConditionKey": {
            "properties": {
                "attribute": {
                    "type": "string"
                },
                "dynamicKey": {
                    "$ref": "#/types/dynatrace:index/ManagementZoneRuleConditionCustomProcessMetadataConditionKeyDynamicKey:ManagementZoneRuleConditionCustomProcessMetadataConditionKeyDynamicKey"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "attribute",
                "dynamicKey"
            ]
        },
        "dynatrace:index/ManagementZoneRuleConditionCustomProcessMetadataConditionKeyDynamicKey:ManagementZoneRuleConditionCustomProcessMetadataConditionKeyDynamicKey": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "source": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "source"
            ]
        },
        "dynatrace:index/ManagementZoneRuleConditionCustomProcessMetadataDynamicKey:ManagementZoneRuleConditionCustomProcessMetadataDynamicKey": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "source": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "source"
            ]
        },
        "dynatrace:index/ManagementZoneRuleConditionDatabaseTopology:ManagementZoneRuleConditionDatabaseTopology": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ManagementZoneRuleConditionDatabaseTopologyComparison:ManagementZoneRuleConditionDatabaseTopologyComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ManagementZoneRuleConditionDcrumDecoder:ManagementZoneRuleConditionDcrumDecoder": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ManagementZoneRuleConditionDcrumDecoderComparison:ManagementZoneRuleConditionDcrumDecoderComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ManagementZoneRuleConditionEntity:ManagementZoneRuleConditionEntity": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ManagementZoneRuleConditionEntityIdComparison:ManagementZoneRuleConditionEntityIdComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ManagementZoneRuleConditionHostTech:ManagementZoneRuleConditionHostTech": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "$ref": "#/types/dynatrace:index/ManagementZoneRuleConditionHostTechValue:ManagementZoneRuleConditionHostTechValue"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ManagementZoneRuleConditionHostTechValue:ManagementZoneRuleConditionHostTechValue": {
            "properties": {
                "type": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "verbatimType": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "dynatrace:index/ManagementZoneRuleConditionHypervisor:ManagementZoneRuleConditionHypervisor": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ManagementZoneRuleConditionHypervisorTypeComparision:ManagementZoneRuleConditionHypervisorTypeComparision": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ManagementZoneRuleConditionIndexedName:ManagementZoneRuleConditionIndexedName": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ManagementZoneRuleConditionIndexedNameComparison:ManagementZoneRuleConditionIndexedNameComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ManagementZoneRuleConditionIndexedString:ManagementZoneRuleConditionIndexedString": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ManagementZoneRuleConditionIndexedStringComparison:ManagementZoneRuleConditionIndexedStringComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ManagementZoneRuleConditionIndexedTag:ManagementZoneRuleConditionIndexedTag": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "$ref": "#/types/dynatrace:index/ManagementZoneRuleConditionIndexedTagValue:ManagementZoneRuleConditionIndexedTagValue"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ManagementZoneRuleConditionIndexedTagComparison:ManagementZoneRuleConditionIndexedTagComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "$ref": "#/types/dynatrace:index/ManagementZoneRuleConditionIndexedTagComparisonValue:ManagementZoneRuleConditionIndexedTagComparisonValue"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ManagementZoneRuleConditionIndexedTagComparisonValue:ManagementZoneRuleConditionIndexedTagComparisonValue": {
            "properties": {
                "context": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "context",
                "key"
            ]
        },
        "dynatrace:index/ManagementZoneRuleConditionIndexedTagValue:ManagementZoneRuleConditionIndexedTagValue": {
            "properties": {
                "context": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "context",
                "key"
            ]
        },
        "dynatrace:index/ManagementZoneRuleConditionInteger:ManagementZoneRuleConditionInteger": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ManagementZoneRuleConditionIntegerComparison:ManagementZoneRuleConditionIntegerComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ManagementZoneRuleConditionIpaddress:ManagementZoneRuleConditionIpaddress": {
            "properties": {
                "caseSensitive": {
                    "type": "boolean"
                },
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ManagementZoneRuleConditionIpaddressComparison:ManagementZoneRuleConditionIpaddressComparison": {
            "properties": {
                "caseSensitive": {
                    "type": "boolean"
                },
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ManagementZoneRuleConditionKey:ManagementZoneRuleConditionKey": {
            "properties": {
                "attribute": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "attribute"
            ]
        },
        "dynatrace:index/ManagementZoneRuleConditionMobilePlatform:ManagementZoneRuleConditionMobilePlatform": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ManagementZoneRuleConditionMobilePlatformComparison:ManagementZoneRuleConditionMobilePlatformComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ManagementZoneRuleConditionOsArch:ManagementZoneRuleConditionOsArch": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ManagementZoneRuleConditionOsType:ManagementZoneRuleConditionOsType": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ManagementZoneRuleConditionOsarchitectureComparison:ManagementZoneRuleConditionOsarchitectureComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ManagementZoneRuleConditionOstypeComparison:ManagementZoneRuleConditionOstypeComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ManagementZoneRuleConditionPaasType:ManagementZoneRuleConditionPaasType": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ManagementZoneRuleConditionPaasTypeComparison:ManagementZoneRuleConditionPaasTypeComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ManagementZoneRuleConditionProcessMetadata:ManagementZoneRuleConditionProcessMetadata": {
            "properties": {
                "attribute": {
                    "type": "string"
                },
                "dynamicKey": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "attribute",
                "dynamicKey"
            ]
        },
        "dynatrace:index/ManagementZoneRuleConditionProcessMetadataConditionKey:ManagementZoneRuleConditionProcessMetadataConditionKey": {
            "properties": {
                "attribute": {
                    "type": "string"
                },
                "dynamicKey": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "attribute",
                "dynamicKey"
            ]
        },
        "dynatrace:index/ManagementZoneRuleConditionServiceTopology:ManagementZoneRuleConditionServiceTopology": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ManagementZoneRuleConditionServiceTopologyComparison:ManagementZoneRuleConditionServiceTopologyComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ManagementZoneRuleConditionServiceType:ManagementZoneRuleConditionServiceType": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ManagementZoneRuleConditionServiceTypeComparison:ManagementZoneRuleConditionServiceTypeComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ManagementZoneRuleConditionSimpleHostTechComparison:ManagementZoneRuleConditionSimpleHostTechComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "$ref": "#/types/dynatrace:index/ManagementZoneRuleConditionSimpleHostTechComparisonValue:ManagementZoneRuleConditionSimpleHostTechComparisonValue"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ManagementZoneRuleConditionSimpleHostTechComparisonValue:ManagementZoneRuleConditionSimpleHostTechComparisonValue": {
            "properties": {
                "type": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "verbatimType": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "dynatrace:index/ManagementZoneRuleConditionSimpleTechComparison:ManagementZoneRuleConditionSimpleTechComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "$ref": "#/types/dynatrace:index/ManagementZoneRuleConditionSimpleTechComparisonValue:ManagementZoneRuleConditionSimpleTechComparisonValue"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ManagementZoneRuleConditionSimpleTechComparisonValue:ManagementZoneRuleConditionSimpleTechComparisonValue": {
            "properties": {
                "type": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "verbatimType": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "dynatrace:index/ManagementZoneRuleConditionString:ManagementZoneRuleConditionString": {
            "properties": {
                "caseSensitive": {
                    "type": "boolean"
                },
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ManagementZoneRuleConditionStringComparison:ManagementZoneRuleConditionStringComparison": {
            "properties": {
                "caseSensitive": {
                    "type": "boolean"
                },
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ManagementZoneRuleConditionStringConditionKey:ManagementZoneRuleConditionStringConditionKey": {
            "properties": {
                "attribute": {
                    "type": "string"
                },
                "dynamicKey": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "attribute",
                "dynamicKey"
            ]
        },
        "dynatrace:index/ManagementZoneRuleConditionStringKey:ManagementZoneRuleConditionStringKey": {
            "properties": {
                "attribute": {
                    "type": "string"
                },
                "dynamicKey": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "attribute",
                "dynamicKey"
            ]
        },
        "dynatrace:index/ManagementZoneRuleConditionSyntheticEngine:ManagementZoneRuleConditionSyntheticEngine": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ManagementZoneRuleConditionSyntheticEngineTypeComparison:ManagementZoneRuleConditionSyntheticEngineTypeComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ManagementZoneRuleConditionTag:ManagementZoneRuleConditionTag": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "$ref": "#/types/dynatrace:index/ManagementZoneRuleConditionTagValue:ManagementZoneRuleConditionTagValue"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ManagementZoneRuleConditionTagComparison:ManagementZoneRuleConditionTagComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "$ref": "#/types/dynatrace:index/ManagementZoneRuleConditionTagComparisonValue:ManagementZoneRuleConditionTagComparisonValue"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ManagementZoneRuleConditionTagComparisonValue:ManagementZoneRuleConditionTagComparisonValue": {
            "properties": {
                "context": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "context",
                "key"
            ]
        },
        "dynatrace:index/ManagementZoneRuleConditionTagValue:ManagementZoneRuleConditionTagValue": {
            "properties": {
                "context": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "context",
                "key"
            ]
        },
        "dynatrace:index/ManagementZoneRuleConditionTech:ManagementZoneRuleConditionTech": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "$ref": "#/types/dynatrace:index/ManagementZoneRuleConditionTechValue:ManagementZoneRuleConditionTechValue"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ManagementZoneRuleConditionTechValue:ManagementZoneRuleConditionTechValue": {
            "properties": {
                "type": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "verbatimType": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "dynatrace:index/ManagementZoneV2Rules:ManagementZoneV2Rules": {
            "properties": {
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ManagementZoneV2RulesRule:ManagementZoneV2RulesRule"
                    }
                }
            },
            "type": "object",
            "required": [
                "rules"
            ]
        },
        "dynatrace:index/ManagementZoneV2RulesRule:ManagementZoneV2RulesRule": {
            "properties": {
                "attributeRule": {
                    "$ref": "#/types/dynatrace:index/ManagementZoneV2RulesRuleAttributeRule:ManagementZoneV2RulesRuleAttributeRule"
                },
                "dimensionRule": {
                    "$ref": "#/types/dynatrace:index/ManagementZoneV2RulesRuleDimensionRule:ManagementZoneV2RulesRuleDimensionRule"
                },
                "enabled": {
                    "type": "boolean"
                },
                "entitySelector": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "enabled",
                "type"
            ]
        },
        "dynatrace:index/ManagementZoneV2RulesRuleAttributeRule:ManagementZoneV2RulesRuleAttributeRule": {
            "properties": {
                "attributeConditions": {
                    "$ref": "#/types/dynatrace:index/ManagementZoneV2RulesRuleAttributeRuleAttributeConditions:ManagementZoneV2RulesRuleAttributeRuleAttributeConditions"
                },
                "azureToPgpropagation": {
                    "type": "boolean"
                },
                "azureToServicePropagation": {
                    "type": "boolean"
                },
                "customDeviceGroupToCustomDevicePropagation": {
                    "type": "boolean"
                },
                "entityType": {
                    "type": "string"
                },
                "hostToPgpropagation": {
                    "type": "boolean"
                },
                "pgToHostPropagation": {
                    "type": "boolean"
                },
                "pgToServicePropagation": {
                    "type": "boolean"
                },
                "serviceToHostPropagation": {
                    "type": "boolean"
                },
                "serviceToPgpropagation": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "attributeConditions",
                "entityType"
            ]
        },
        "dynatrace:index/ManagementZoneV2RulesRuleAttributeRuleAttributeConditions:ManagementZoneV2RulesRuleAttributeRuleAttributeConditions": {
            "properties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ManagementZoneV2RulesRuleAttributeRuleAttributeConditionsCondition:ManagementZoneV2RulesRuleAttributeRuleAttributeConditionsCondition"
                    }
                }
            },
            "type": "object",
            "required": [
                "conditions"
            ]
        },
        "dynatrace:index/ManagementZoneV2RulesRuleAttributeRuleAttributeConditionsCondition:ManagementZoneV2RulesRuleAttributeRuleAttributeConditionsCondition": {
            "properties": {
                "caseSensitive": {
                    "type": "boolean"
                },
                "dynamicKey": {
                    "type": "string"
                },
                "dynamicKeySource": {
                    "type": "string"
                },
                "entityId": {
                    "type": "string"
                },
                "enumValue": {
                    "type": "string"
                },
                "integerValue": {
                    "type": "integer"
                },
                "key": {
                    "type": "string"
                },
                "operator": {
                    "type": "string"
                },
                "stringValue": {
                    "type": "string"
                },
                "tag": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "operator"
            ]
        },
        "dynatrace:index/ManagementZoneV2RulesRuleDimensionRule:ManagementZoneV2RulesRuleDimensionRule": {
            "properties": {
                "appliesTo": {
                    "type": "string"
                },
                "dimensionConditions": {
                    "$ref": "#/types/dynatrace:index/ManagementZoneV2RulesRuleDimensionRuleDimensionConditions:ManagementZoneV2RulesRuleDimensionRuleDimensionConditions"
                }
            },
            "type": "object",
            "required": [
                "appliesTo"
            ]
        },
        "dynatrace:index/ManagementZoneV2RulesRuleDimensionRuleDimensionConditions:ManagementZoneV2RulesRuleDimensionRuleDimensionConditions": {
            "properties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ManagementZoneV2RulesRuleDimensionRuleDimensionConditionsCondition:ManagementZoneV2RulesRuleDimensionRuleDimensionConditionsCondition"
                    }
                }
            },
            "type": "object",
            "required": [
                "conditions"
            ]
        },
        "dynatrace:index/ManagementZoneV2RulesRuleDimensionRuleDimensionConditionsCondition:ManagementZoneV2RulesRuleDimensionRuleDimensionConditionsCondition": {
            "properties": {
                "conditionType": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "ruleMatcher": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "conditionType",
                "ruleMatcher",
                "value"
            ]
        },
        "dynatrace:index/MetricEventsEventTemplate:MetricEventsEventTemplate": {
            "properties": {
                "davisMerge": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "eventType": {
                    "type": "string"
                },
                "metadatas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/MetricEventsEventTemplateMetadata:MetricEventsEventTemplateMetadata"
                    }
                },
                "title": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "description",
                "eventType",
                "title"
            ]
        },
        "dynatrace:index/MetricEventsEventTemplateMetadata:MetricEventsEventTemplateMetadata": {
            "properties": {
                "metadataKey": {
                    "type": "string"
                },
                "metadataValue": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "metadataKey",
                "metadataValue"
            ]
        },
        "dynatrace:index/MetricEventsModelProperties:MetricEventsModelProperties": {
            "properties": {
                "alertCondition": {
                    "type": "string"
                },
                "alertOnNoData": {
                    "type": "boolean"
                },
                "dealertingSamples": {
                    "type": "integer"
                },
                "samples": {
                    "type": "integer"
                },
                "signalFluctuation": {
                    "type": "number"
                },
                "threshold": {
                    "type": "number"
                },
                "tolerance": {
                    "type": "number"
                },
                "type": {
                    "type": "string"
                },
                "violatingSamples": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "alertCondition",
                "alertOnNoData",
                "dealertingSamples",
                "samples",
                "type",
                "violatingSamples"
            ]
        },
        "dynatrace:index/MetricEventsQueryDefinition:MetricEventsQueryDefinition": {
            "properties": {
                "aggregation": {
                    "type": "string"
                },
                "dimensionFilter": {
                    "$ref": "#/types/dynatrace:index/MetricEventsQueryDefinitionDimensionFilter:MetricEventsQueryDefinitionDimensionFilter"
                },
                "entityFilter": {
                    "$ref": "#/types/dynatrace:index/MetricEventsQueryDefinitionEntityFilter:MetricEventsQueryDefinitionEntityFilter"
                },
                "managementZone": {
                    "type": "string"
                },
                "metricKey": {
                    "type": "string"
                },
                "metricSelector": {
                    "type": "string"
                },
                "queryOffset": {
                    "type": "integer"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "dynatrace:index/MetricEventsQueryDefinitionDimensionFilter:MetricEventsQueryDefinitionDimensionFilter": {
            "properties": {
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/MetricEventsQueryDefinitionDimensionFilterFilter:MetricEventsQueryDefinitionDimensionFilterFilter"
                    }
                }
            },
            "type": "object",
            "required": [
                "filters"
            ]
        },
        "dynatrace:index/MetricEventsQueryDefinitionDimensionFilterFilter:MetricEventsQueryDefinitionDimensionFilterFilter": {
            "properties": {
                "dimensionKey": {
                    "type": "string"
                },
                "dimensionValue": {
                    "type": "string"
                },
                "operator": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "dimensionKey",
                "dimensionValue"
            ]
        },
        "dynatrace:index/MetricEventsQueryDefinitionEntityFilter:MetricEventsQueryDefinitionEntityFilter": {
            "properties": {
                "conditions": {
                    "$ref": "#/types/dynatrace:index/MetricEventsQueryDefinitionEntityFilterConditions:MetricEventsQueryDefinitionEntityFilterConditions"
                },
                "dimensionKey": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "dynatrace:index/MetricEventsQueryDefinitionEntityFilterConditions:MetricEventsQueryDefinitionEntityFilterConditions": {
            "properties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/MetricEventsQueryDefinitionEntityFilterConditionsCondition:MetricEventsQueryDefinitionEntityFilterConditionsCondition"
                    }
                }
            },
            "type": "object",
            "required": [
                "conditions"
            ]
        },
        "dynatrace:index/MetricEventsQueryDefinitionEntityFilterConditionsCondition:MetricEventsQueryDefinitionEntityFilterConditionsCondition": {
            "properties": {
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator",
                "type",
                "value"
            ]
        },
        "dynatrace:index/MetricMetadataDimensions:MetricMetadataDimensions": {
            "properties": {
                "dimensions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/MetricMetadataDimensionsDimension:MetricMetadataDimensionsDimension"
                    }
                }
            },
            "type": "object",
            "required": [
                "dimensions"
            ]
        },
        "dynatrace:index/MetricMetadataDimensionsDimension:MetricMetadataDimensionsDimension": {
            "properties": {
                "displayName": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key"
            ]
        },
        "dynatrace:index/MetricMetadataMetricProperties:MetricMetadataMetricProperties": {
            "properties": {
                "impactRelevant": {
                    "type": "boolean"
                },
                "latency": {
                    "type": "integer"
                },
                "maxValue": {
                    "type": "number"
                },
                "minValue": {
                    "type": "number"
                },
                "rootCauseRelevant": {
                    "type": "boolean"
                },
                "valueType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "valueType"
            ]
        },
        "dynatrace:index/MobileAppAnomaliesErrorRateIncrease:MobileAppAnomaliesErrorRateIncrease": {
            "properties": {
                "detectionMode": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "errorRateIncreaseAuto": {
                    "$ref": "#/types/dynatrace:index/MobileAppAnomaliesErrorRateIncreaseErrorRateIncreaseAuto:MobileAppAnomaliesErrorRateIncreaseErrorRateIncreaseAuto"
                },
                "errorRateIncreaseFixed": {
                    "$ref": "#/types/dynatrace:index/MobileAppAnomaliesErrorRateIncreaseErrorRateIncreaseFixed:MobileAppAnomaliesErrorRateIncreaseErrorRateIncreaseFixed"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/MobileAppAnomaliesErrorRateIncreaseErrorRateIncreaseAuto:MobileAppAnomaliesErrorRateIncreaseErrorRateIncreaseAuto": {
            "properties": {
                "thresholdAbsolute": {
                    "type": "number"
                },
                "thresholdRelative": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "thresholdAbsolute",
                "thresholdRelative"
            ]
        },
        "dynatrace:index/MobileAppAnomaliesErrorRateIncreaseErrorRateIncreaseFixed:MobileAppAnomaliesErrorRateIncreaseErrorRateIncreaseFixed": {
            "properties": {
                "sensitivity": {
                    "type": "string"
                },
                "thresholdAbsolute": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "sensitivity",
                "thresholdAbsolute"
            ]
        },
        "dynatrace:index/MobileAppAnomaliesSlowUserActions:MobileAppAnomaliesSlowUserActions": {
            "properties": {
                "detectionMode": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "slowUserActionsAuto": {
                    "$ref": "#/types/dynatrace:index/MobileAppAnomaliesSlowUserActionsSlowUserActionsAuto:MobileAppAnomaliesSlowUserActionsSlowUserActionsAuto"
                },
                "slowUserActionsFixed": {
                    "$ref": "#/types/dynatrace:index/MobileAppAnomaliesSlowUserActionsSlowUserActionsFixed:MobileAppAnomaliesSlowUserActionsSlowUserActionsFixed"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/MobileAppAnomaliesSlowUserActionsSlowUserActionsAuto:MobileAppAnomaliesSlowUserActionsSlowUserActionsAuto": {
            "properties": {
                "durationAvoidOveralerting": {
                    "$ref": "#/types/dynatrace:index/MobileAppAnomaliesSlowUserActionsSlowUserActionsAutoDurationAvoidOveralerting:MobileAppAnomaliesSlowUserActionsSlowUserActionsAutoDurationAvoidOveralerting"
                },
                "durationThresholdAll": {
                    "$ref": "#/types/dynatrace:index/MobileAppAnomaliesSlowUserActionsSlowUserActionsAutoDurationThresholdAll:MobileAppAnomaliesSlowUserActionsSlowUserActionsAutoDurationThresholdAll"
                },
                "durationThresholdSlowest": {
                    "$ref": "#/types/dynatrace:index/MobileAppAnomaliesSlowUserActionsSlowUserActionsAutoDurationThresholdSlowest:MobileAppAnomaliesSlowUserActionsSlowUserActionsAutoDurationThresholdSlowest"
                }
            },
            "type": "object",
            "required": [
                "durationAvoidOveralerting",
                "durationThresholdAll",
                "durationThresholdSlowest"
            ]
        },
        "dynatrace:index/MobileAppAnomaliesSlowUserActionsSlowUserActionsAutoDurationAvoidOveralerting:MobileAppAnomaliesSlowUserActionsSlowUserActionsAutoDurationAvoidOveralerting": {
            "properties": {
                "minActionRate": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "minActionRate"
            ]
        },
        "dynatrace:index/MobileAppAnomaliesSlowUserActionsSlowUserActionsAutoDurationThresholdAll:MobileAppAnomaliesSlowUserActionsSlowUserActionsAutoDurationThresholdAll": {
            "properties": {
                "durationThreshold": {
                    "type": "number"
                },
                "slowdownPercentage": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "durationThreshold",
                "slowdownPercentage"
            ]
        },
        "dynatrace:index/MobileAppAnomaliesSlowUserActionsSlowUserActionsAutoDurationThresholdSlowest:MobileAppAnomaliesSlowUserActionsSlowUserActionsAutoDurationThresholdSlowest": {
            "properties": {
                "durationThreshold": {
                    "type": "number"
                },
                "slowdownPercentage": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "durationThreshold",
                "slowdownPercentage"
            ]
        },
        "dynatrace:index/MobileAppAnomaliesSlowUserActionsSlowUserActionsFixed:MobileAppAnomaliesSlowUserActionsSlowUserActionsFixed": {
            "properties": {
                "durationAvoidOveralerting": {
                    "$ref": "#/types/dynatrace:index/MobileAppAnomaliesSlowUserActionsSlowUserActionsFixedDurationAvoidOveralerting:MobileAppAnomaliesSlowUserActionsSlowUserActionsFixedDurationAvoidOveralerting"
                },
                "durationThresholdAllFixed": {
                    "$ref": "#/types/dynatrace:index/MobileAppAnomaliesSlowUserActionsSlowUserActionsFixedDurationThresholdAllFixed:MobileAppAnomaliesSlowUserActionsSlowUserActionsFixedDurationThresholdAllFixed"
                },
                "durationThresholdSlowest": {
                    "$ref": "#/types/dynatrace:index/MobileAppAnomaliesSlowUserActionsSlowUserActionsFixedDurationThresholdSlowest:MobileAppAnomaliesSlowUserActionsSlowUserActionsFixedDurationThresholdSlowest"
                },
                "sensitivity": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "durationAvoidOveralerting",
                "durationThresholdAllFixed",
                "durationThresholdSlowest",
                "sensitivity"
            ]
        },
        "dynatrace:index/MobileAppAnomaliesSlowUserActionsSlowUserActionsFixedDurationAvoidOveralerting:MobileAppAnomaliesSlowUserActionsSlowUserActionsFixedDurationAvoidOveralerting": {
            "properties": {
                "minActionRate": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "minActionRate"
            ]
        },
        "dynatrace:index/MobileAppAnomaliesSlowUserActionsSlowUserActionsFixedDurationThresholdAllFixed:MobileAppAnomaliesSlowUserActionsSlowUserActionsFixedDurationThresholdAllFixed": {
            "properties": {
                "durationThreshold": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "durationThreshold"
            ]
        },
        "dynatrace:index/MobileAppAnomaliesSlowUserActionsSlowUserActionsFixedDurationThresholdSlowest:MobileAppAnomaliesSlowUserActionsSlowUserActionsFixedDurationThresholdSlowest": {
            "properties": {
                "durationThreshold": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "durationThreshold"
            ]
        },
        "dynatrace:index/MobileAppAnomaliesUnexpectedHighLoad:MobileAppAnomaliesUnexpectedHighLoad": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "thresholdPercentage": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/MobileAppAnomaliesUnexpectedLowLoad:MobileAppAnomaliesUnexpectedLowLoad": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "thresholdPercentage": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/MobileAppCrashRateCrashRateIncrease:MobileAppCrashRateCrashRateIncrease": {
            "properties": {
                "crashRateIncreaseAuto": {
                    "$ref": "#/types/dynatrace:index/MobileAppCrashRateCrashRateIncreaseCrashRateIncreaseAuto:MobileAppCrashRateCrashRateIncreaseCrashRateIncreaseAuto"
                },
                "crashRateIncreaseFixed": {
                    "$ref": "#/types/dynatrace:index/MobileAppCrashRateCrashRateIncreaseCrashRateIncreaseFixed:MobileAppCrashRateCrashRateIncreaseCrashRateIncreaseFixed"
                },
                "detectionMode": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/MobileAppCrashRateCrashRateIncreaseCrashRateIncreaseAuto:MobileAppCrashRateCrashRateIncreaseCrashRateIncreaseAuto": {
            "properties": {
                "baselineViolationPercentage": {
                    "type": "number"
                },
                "concurrentUsers": {
                    "type": "number"
                },
                "sensitivity": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "baselineViolationPercentage",
                "concurrentUsers",
                "sensitivity"
            ]
        },
        "dynatrace:index/MobileAppCrashRateCrashRateIncreaseCrashRateIncreaseFixed:MobileAppCrashRateCrashRateIncreaseCrashRateIncreaseFixed": {
            "properties": {
                "absoluteCrashRate": {
                    "type": "number"
                },
                "concurrentUsers": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "absoluteCrashRate",
                "concurrentUsers"
            ]
        },
        "dynatrace:index/MobileAppEnablementRum:MobileAppEnablementRum": {
            "properties": {
                "costAndTrafficControl": {
                    "type": "integer"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "costAndTrafficControl",
                "enabled"
            ]
        },
        "dynatrace:index/MobileAppEnablementSessionReplay:MobileAppEnablementSessionReplay": {
            "properties": {
                "onCrash": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "onCrash"
            ]
        },
        "dynatrace:index/MobileAppKeyPerformanceThresholds:MobileAppKeyPerformanceThresholds": {
            "properties": {
                "frustratingThresholdSeconds": {
                    "type": "number"
                },
                "tolerableThresholdSeconds": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "frustratingThresholdSeconds",
                "tolerableThresholdSeconds"
            ]
        },
        "dynatrace:index/MobileAppRequestErrorsErrorRules:MobileAppRequestErrorsErrorRules": {
            "properties": {
                "errorRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/MobileAppRequestErrorsErrorRulesErrorRule:MobileAppRequestErrorsErrorRulesErrorRule"
                    }
                }
            },
            "type": "object",
            "required": [
                "errorRules"
            ]
        },
        "dynatrace:index/MobileAppRequestErrorsErrorRulesErrorRule:MobileAppRequestErrorsErrorRulesErrorRule": {
            "properties": {
                "errorCodes": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "errorCodes"
            ]
        },
        "dynatrace:index/MobileApplicationApdex:MobileApplicationApdex": {
            "properties": {
                "frustrated": {
                    "type": "integer"
                },
                "frustratedOnError": {
                    "type": "boolean"
                },
                "tolerable": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "frustrated",
                "tolerable"
            ]
        },
        "dynatrace:index/MobileApplicationProperties:MobileApplicationProperties": {
            "properties": {
                "apiValues": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/MobileApplicationPropertiesApiValue:MobileApplicationPropertiesApiValue"
                    }
                },
                "requestAttributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/MobileApplicationPropertiesRequestAttribute:MobileApplicationPropertiesRequestAttribute"
                    }
                }
            },
            "type": "object"
        },
        "dynatrace:index/MobileApplicationPropertiesApiValue:MobileApplicationPropertiesApiValue": {
            "properties": {
                "aggregation": {
                    "type": "string"
                },
                "cleanupRule": {
                    "type": "string"
                },
                "displayName": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "storeAsSessionProperty": {
                    "type": "boolean"
                },
                "storeAsUserActionProperty": {
                    "type": "boolean"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "type"
            ]
        },
        "dynatrace:index/MobileApplicationPropertiesRequestAttribute:MobileApplicationPropertiesRequestAttribute": {
            "properties": {
                "aggregation": {
                    "type": "string"
                },
                "cleanupRule": {
                    "type": "string"
                },
                "displayName": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "storeAsSessionProperty": {
                    "type": "boolean"
                },
                "storeAsUserActionProperty": {
                    "type": "boolean"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "key",
                "type"
            ]
        },
        "dynatrace:index/NetworkTrafficExcludeIp:NetworkTrafficExcludeIp": {
            "properties": {
                "ipAddressForms": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/NetworkTrafficExcludeIpIpAddressForm:NetworkTrafficExcludeIpIpAddressForm"
                    }
                }
            },
            "type": "object",
            "required": [
                "ipAddressForms"
            ]
        },
        "dynatrace:index/NetworkTrafficExcludeIpIpAddressForm:NetworkTrafficExcludeIpIpAddressForm": {
            "properties": {
                "ipAddress": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "ipAddress"
            ]
        },
        "dynatrace:index/NetworkTrafficExcludeNic:NetworkTrafficExcludeNic": {
            "properties": {
                "nicForms": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/NetworkTrafficExcludeNicNicForm:NetworkTrafficExcludeNicNicForm"
                    }
                }
            },
            "type": "object",
            "required": [
                "nicForms"
            ]
        },
        "dynatrace:index/NetworkTrafficExcludeNicNicForm:NetworkTrafficExcludeNicNicForm": {
            "properties": {
                "interface": {
                    "type": "string"
                },
                "os": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "interface",
                "os"
            ]
        },
        "dynatrace:index/NotificationAnsibleTower:NotificationAnsibleTower": {
            "properties": {
                "acceptAnyCertificate": {
                    "type": "boolean"
                },
                "active": {
                    "type": "boolean"
                },
                "alertingProfile": {
                    "type": "string"
                },
                "customMessage": {
                    "type": "string"
                },
                "jobTemplateId": {
                    "type": "integer"
                },
                "jobTemplateUrl": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "acceptAnyCertificate",
                "active",
                "alertingProfile",
                "customMessage",
                "jobTemplateId",
                "jobTemplateUrl",
                "name",
                "username"
            ]
        },
        "dynatrace:index/NotificationConfig:NotificationConfig": {
            "properties": {
                "active": {
                    "type": "boolean"
                },
                "alertingProfile": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "active",
                "alertingProfile",
                "name",
                "type"
            ]
        },
        "dynatrace:index/NotificationEmail:NotificationEmail": {
            "properties": {
                "active": {
                    "type": "boolean"
                },
                "alertingProfile": {
                    "type": "string"
                },
                "bccReceivers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "body": {
                    "type": "string"
                },
                "ccReceivers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                },
                "receivers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "subject": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "active",
                "alertingProfile",
                "body",
                "name",
                "subject"
            ]
        },
        "dynatrace:index/NotificationJira:NotificationJira": {
            "properties": {
                "active": {
                    "type": "boolean"
                },
                "alertingProfile": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "issueType": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "projectKey": {
                    "type": "string"
                },
                "summary": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "active",
                "alertingProfile",
                "description",
                "issueType",
                "name",
                "projectKey",
                "summary",
                "url",
                "username"
            ]
        },
        "dynatrace:index/NotificationOpsGenie:NotificationOpsGenie": {
            "properties": {
                "active": {
                    "type": "boolean"
                },
                "alertingProfile": {
                    "type": "string"
                },
                "apiKey": {
                    "type": "string"
                },
                "domain": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "active",
                "alertingProfile",
                "domain",
                "message",
                "name"
            ]
        },
        "dynatrace:index/NotificationPagerDuty:NotificationPagerDuty": {
            "properties": {
                "account": {
                    "type": "string"
                },
                "active": {
                    "type": "boolean"
                },
                "alertingProfile": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "serviceApiKey": {
                    "type": "string"
                },
                "serviceName": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "account",
                "active",
                "alertingProfile",
                "name",
                "serviceName"
            ]
        },
        "dynatrace:index/NotificationServiceNow:NotificationServiceNow": {
            "properties": {
                "active": {
                    "type": "boolean"
                },
                "alertingProfile": {
                    "type": "string"
                },
                "instanceName": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "sendEvents": {
                    "type": "boolean"
                },
                "sendIncidents": {
                    "type": "boolean"
                },
                "unknowns": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "active",
                "alertingProfile",
                "message",
                "name",
                "sendEvents",
                "sendIncidents",
                "username"
            ]
        },
        "dynatrace:index/NotificationSlack:NotificationSlack": {
            "properties": {
                "active": {
                    "type": "boolean"
                },
                "alertingProfile": {
                    "type": "string"
                },
                "channel": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "active",
                "alertingProfile",
                "channel",
                "name",
                "title"
            ]
        },
        "dynatrace:index/NotificationTrello:NotificationTrello": {
            "properties": {
                "active": {
                    "type": "boolean"
                },
                "alertingProfile": {
                    "type": "string"
                },
                "applicationKey": {
                    "type": "string"
                },
                "authorizationToken": {
                    "type": "string"
                },
                "boardId": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "listId": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "resolvedListId": {
                    "type": "string"
                },
                "text": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "active",
                "alertingProfile",
                "applicationKey",
                "boardId",
                "description",
                "listId",
                "name",
                "resolvedListId",
                "text"
            ]
        },
        "dynatrace:index/NotificationVictorOps:NotificationVictorOps": {
            "properties": {
                "active": {
                    "type": "boolean"
                },
                "alertingProfile": {
                    "type": "string"
                },
                "apiKey": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "routingKey": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "active",
                "alertingProfile",
                "message",
                "name",
                "routingKey"
            ]
        },
        "dynatrace:index/NotificationWebHook:NotificationWebHook": {
            "properties": {
                "acceptAnyCertificate": {
                    "type": "boolean"
                },
                "active": {
                    "type": "boolean"
                },
                "alertingProfile": {
                    "type": "string"
                },
                "headers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/NotificationWebHookHeader:NotificationWebHookHeader"
                    }
                },
                "name": {
                    "type": "string"
                },
                "notifyEventMerges": {
                    "type": "boolean"
                },
                "payload": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "acceptAnyCertificate",
                "active",
                "alertingProfile",
                "name",
                "payload",
                "url"
            ]
        },
        "dynatrace:index/NotificationWebHookHeader:NotificationWebHookHeader": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "dynatrace:index/NotificationXmatters:NotificationXmatters": {
            "properties": {
                "acceptAnyCertificate": {
                    "type": "boolean"
                },
                "active": {
                    "type": "boolean"
                },
                "alertingProfile": {
                    "type": "string"
                },
                "headers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/NotificationXmattersHeader:NotificationXmattersHeader"
                    }
                },
                "name": {
                    "type": "string"
                },
                "payload": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "acceptAnyCertificate",
                "active",
                "alertingProfile",
                "name",
                "payload",
                "url"
            ]
        },
        "dynatrace:index/NotificationXmattersHeader:NotificationXmattersHeader": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "dynatrace:index/OneagentUpdatesMaintenanceWindows:OneagentUpdatesMaintenanceWindows": {
            "properties": {
                "maintenanceWindows": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/OneagentUpdatesMaintenanceWindowsMaintenanceWindow:OneagentUpdatesMaintenanceWindowsMaintenanceWindow"
                    }
                }
            },
            "type": "object",
            "required": [
                "maintenanceWindows"
            ]
        },
        "dynatrace:index/OneagentUpdatesMaintenanceWindowsMaintenanceWindow:OneagentUpdatesMaintenanceWindowsMaintenanceWindow": {
            "properties": {
                "maintenanceWindow": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "maintenanceWindow"
            ]
        },
        "dynatrace:index/OpentelemetryMetricsAdditionalAttributes:OpentelemetryMetricsAdditionalAttributes": {
            "properties": {
                "additionalAttributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/OpentelemetryMetricsAdditionalAttributesAdditionalAttribute:OpentelemetryMetricsAdditionalAttributesAdditionalAttribute"
                    }
                }
            },
            "type": "object",
            "required": [
                "additionalAttributes"
            ]
        },
        "dynatrace:index/OpentelemetryMetricsAdditionalAttributesAdditionalAttribute:OpentelemetryMetricsAdditionalAttributesAdditionalAttribute": {
            "properties": {
                "attributeKey": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "attributeKey",
                "enabled"
            ]
        },
        "dynatrace:index/OpentelemetryMetricsToDropAttributes:OpentelemetryMetricsToDropAttributes": {
            "properties": {
                "toDropAttributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/OpentelemetryMetricsToDropAttributesToDropAttribute:OpentelemetryMetricsToDropAttributesToDropAttribute"
                    }
                }
            },
            "type": "object",
            "required": [
                "toDropAttributes"
            ]
        },
        "dynatrace:index/OpentelemetryMetricsToDropAttributesToDropAttribute:OpentelemetryMetricsToDropAttributesToDropAttribute": {
            "properties": {
                "attributeKey": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "attributeKey",
                "enabled"
            ]
        },
        "dynatrace:index/OsServicesDetectionConditionsLinux:OsServicesDetectionConditionsLinux": {
            "properties": {
                "linuxDetectionConditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/OsServicesDetectionConditionsLinuxLinuxDetectionCondition:OsServicesDetectionConditionsLinuxLinuxDetectionCondition"
                    }
                }
            },
            "type": "object",
            "required": [
                "linuxDetectionConditions"
            ]
        },
        "dynatrace:index/OsServicesDetectionConditionsLinuxLinuxDetectionCondition:OsServicesDetectionConditionsLinuxLinuxDetectionCondition": {
            "properties": {
                "condition": {
                    "type": "string"
                },
                "hostMetadataCondition": {
                    "$ref": "#/types/dynatrace:index/OsServicesDetectionConditionsLinuxLinuxDetectionConditionHostMetadataCondition:OsServicesDetectionConditionsLinuxLinuxDetectionConditionHostMetadataCondition"
                },
                "property": {
                    "type": "string"
                },
                "ruleType": {
                    "type": "string"
                },
                "startupCondition": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "dynatrace:index/OsServicesDetectionConditionsLinuxLinuxDetectionConditionHostMetadataCondition:OsServicesDetectionConditionsLinuxLinuxDetectionConditionHostMetadataCondition": {
            "properties": {
                "metadataCondition": {
                    "type": "string"
                },
                "metadataKey": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "metadataCondition",
                "metadataKey"
            ]
        },
        "dynatrace:index/OsServicesDetectionConditionsWindows:OsServicesDetectionConditionsWindows": {
            "properties": {
                "detectionConditionsWindows": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/OsServicesDetectionConditionsWindowsDetectionConditionsWindow:OsServicesDetectionConditionsWindowsDetectionConditionsWindow"
                    }
                }
            },
            "type": "object",
            "required": [
                "detectionConditionsWindows"
            ]
        },
        "dynatrace:index/OsServicesDetectionConditionsWindowsDetectionConditionsWindow:OsServicesDetectionConditionsWindowsDetectionConditionsWindow": {
            "properties": {
                "condition": {
                    "type": "string"
                },
                "hostMetadataCondition": {
                    "$ref": "#/types/dynatrace:index/OsServicesDetectionConditionsWindowsDetectionConditionsWindowHostMetadataCondition:OsServicesDetectionConditionsWindowsDetectionConditionsWindowHostMetadataCondition"
                },
                "property": {
                    "type": "string"
                },
                "ruleType": {
                    "type": "string"
                },
                "startupCondition": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "dynatrace:index/OsServicesDetectionConditionsWindowsDetectionConditionsWindowHostMetadataCondition:OsServicesDetectionConditionsWindowsDetectionConditionsWindowHostMetadataCondition": {
            "properties": {
                "metadataCondition": {
                    "type": "string"
                },
                "metadataKey": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "metadataCondition",
                "metadataKey"
            ]
        },
        "dynatrace:index/OsServicesMetadata:OsServicesMetadata": {
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/OsServicesMetadataItem:OsServicesMetadataItem"
                    }
                }
            },
            "type": "object",
            "required": [
                "items"
            ]
        },
        "dynatrace:index/OsServicesMetadataItem:OsServicesMetadataItem": {
            "properties": {
                "metadataKey": {
                    "type": "string"
                },
                "metadataValue": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "metadataKey",
                "metadataValue"
            ]
        },
        "dynatrace:index/OwnershipConfigOwnershipIdentifiers:OwnershipConfigOwnershipIdentifiers": {
            "properties": {
                "ownershipIdentifiers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/OwnershipConfigOwnershipIdentifiersOwnershipIdentifier:OwnershipConfigOwnershipIdentifiersOwnershipIdentifier"
                    }
                }
            },
            "type": "object",
            "required": [
                "ownershipIdentifiers"
            ]
        },
        "dynatrace:index/OwnershipConfigOwnershipIdentifiersOwnershipIdentifier:OwnershipConfigOwnershipIdentifiersOwnershipIdentifier": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "key": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "enabled",
                "key"
            ]
        },
        "dynatrace:index/OwnershipTeamsAdditionalInformation:OwnershipTeamsAdditionalInformation": {
            "properties": {
                "additionalInformations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/OwnershipTeamsAdditionalInformationAdditionalInformation:OwnershipTeamsAdditionalInformationAdditionalInformation"
                    }
                }
            },
            "type": "object",
            "required": [
                "additionalInformations"
            ]
        },
        "dynatrace:index/OwnershipTeamsAdditionalInformationAdditionalInformation:OwnershipTeamsAdditionalInformationAdditionalInformation": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "dynatrace:index/OwnershipTeamsContactDetails:OwnershipTeamsContactDetails": {
            "properties": {
                "contactDetails": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/OwnershipTeamsContactDetailsContactDetail:OwnershipTeamsContactDetailsContactDetail"
                    }
                }
            },
            "type": "object",
            "required": [
                "contactDetails"
            ]
        },
        "dynatrace:index/OwnershipTeamsContactDetailsContactDetail:OwnershipTeamsContactDetailsContactDetail": {
            "properties": {
                "email": {
                    "type": "string"
                },
                "integrationType": {
                    "type": "string"
                },
                "jira": {
                    "$ref": "#/types/dynatrace:index/OwnershipTeamsContactDetailsContactDetailJira:OwnershipTeamsContactDetailsContactDetailJira"
                },
                "msTeams": {
                    "type": "string"
                },
                "slackChannel": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "integrationType"
            ]
        },
        "dynatrace:index/OwnershipTeamsContactDetailsContactDetailJira:OwnershipTeamsContactDetailsContactDetailJira": {
            "properties": {
                "defaultAssignee": {
                    "type": "string"
                },
                "project": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "defaultAssignee",
                "project"
            ]
        },
        "dynatrace:index/OwnershipTeamsLinks:OwnershipTeamsLinks": {
            "properties": {
                "links": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/OwnershipTeamsLinksLink:OwnershipTeamsLinksLink"
                    }
                }
            },
            "type": "object",
            "required": [
                "links"
            ]
        },
        "dynatrace:index/OwnershipTeamsLinksLink:OwnershipTeamsLinksLink": {
            "properties": {
                "linkType": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "linkType",
                "url"
            ]
        },
        "dynatrace:index/OwnershipTeamsResponsibilities:OwnershipTeamsResponsibilities": {
            "properties": {
                "development": {
                    "type": "boolean"
                },
                "infrastructure": {
                    "type": "boolean"
                },
                "lineOfBusiness": {
                    "type": "boolean"
                },
                "operations": {
                    "type": "boolean"
                },
                "security": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "development",
                "infrastructure",
                "lineOfBusiness",
                "operations",
                "security"
            ]
        },
        "dynatrace:index/OwnershipTeamsSupplementaryIdentifiers:OwnershipTeamsSupplementaryIdentifiers": {
            "properties": {
                "supplementaryIdentifiers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/OwnershipTeamsSupplementaryIdentifiersSupplementaryIdentifier:OwnershipTeamsSupplementaryIdentifiersSupplementaryIdentifier"
                    }
                }
            },
            "type": "object",
            "required": [
                "supplementaryIdentifiers"
            ]
        },
        "dynatrace:index/OwnershipTeamsSupplementaryIdentifiersSupplementaryIdentifier:OwnershipTeamsSupplementaryIdentifiersSupplementaryIdentifier": {
            "properties": {
                "supplementaryIdentifier": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "supplementaryIdentifier"
            ]
        },
        "dynatrace:index/PgAnomaliesAvailability:PgAnomaliesAvailability": {
            "properties": {
                "method": {
                    "type": "string"
                },
                "minimumThreshold": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "method"
            ]
        },
        "dynatrace:index/ProcessAvailabilityMetadata:ProcessAvailabilityMetadata": {
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ProcessAvailabilityMetadataItem:ProcessAvailabilityMetadataItem"
                    }
                }
            },
            "type": "object",
            "required": [
                "items"
            ]
        },
        "dynatrace:index/ProcessAvailabilityMetadataItem:ProcessAvailabilityMetadataItem": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "dynatrace:index/ProcessAvailabilityRules:ProcessAvailabilityRules": {
            "properties": {
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ProcessAvailabilityRulesRule:ProcessAvailabilityRulesRule"
                    }
                }
            },
            "type": "object",
            "required": [
                "rules"
            ]
        },
        "dynatrace:index/ProcessAvailabilityRulesRule:ProcessAvailabilityRulesRule": {
            "properties": {
                "condition": {
                    "type": "string"
                },
                "hostMetadataCondition": {
                    "$ref": "#/types/dynatrace:index/ProcessAvailabilityRulesRuleHostMetadataCondition:ProcessAvailabilityRulesRuleHostMetadataCondition"
                },
                "property": {
                    "type": "string"
                },
                "ruleType": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "dynatrace:index/ProcessAvailabilityRulesRuleHostMetadataCondition:ProcessAvailabilityRulesRuleHostMetadataCondition": {
            "properties": {
                "metadataCondition": {
                    "type": "string"
                },
                "metadataKey": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "metadataCondition",
                "metadataKey"
            ]
        },
        "dynatrace:index/ProcessGroupDetectionGroupExtraction:ProcessGroupDetectionGroupExtraction": {
            "properties": {
                "delimiter": {
                    "$ref": "#/types/dynatrace:index/ProcessGroupDetectionGroupExtractionDelimiter:ProcessGroupDetectionGroupExtractionDelimiter"
                },
                "property": {
                    "type": "string"
                },
                "standaloneRule": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "delimiter",
                "property"
            ]
        },
        "dynatrace:index/ProcessGroupDetectionGroupExtractionDelimiter:ProcessGroupDetectionGroupExtractionDelimiter": {
            "properties": {
                "from": {
                    "type": "string"
                },
                "removeIds": {
                    "type": "boolean"
                },
                "to": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "removeIds"
            ]
        },
        "dynatrace:index/ProcessGroupDetectionInstanceExtraction:ProcessGroupDetectionInstanceExtraction": {
            "properties": {
                "delimiter": {
                    "$ref": "#/types/dynatrace:index/ProcessGroupDetectionInstanceExtractionDelimiter:ProcessGroupDetectionInstanceExtractionDelimiter"
                },
                "property": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "dynatrace:index/ProcessGroupDetectionInstanceExtractionDelimiter:ProcessGroupDetectionInstanceExtractionDelimiter": {
            "properties": {
                "from": {
                    "type": "string"
                },
                "removeIds": {
                    "type": "boolean"
                },
                "to": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "removeIds"
            ]
        },
        "dynatrace:index/ProcessGroupDetectionProcessDetection:ProcessGroupDetectionProcessDetection": {
            "properties": {
                "containedString": {
                    "type": "string"
                },
                "property": {
                    "type": "string"
                },
                "restrictToProcessType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "containedString",
                "property"
            ]
        },
        "dynatrace:index/ProcessMonitoringRuleCondition:ProcessMonitoringRuleCondition": {
            "properties": {
                "envVar": {
                    "type": "string"
                },
                "item": {
                    "type": "string"
                },
                "operator": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "item",
                "operator"
            ]
        },
        "dynatrace:index/ProcessgroupNamingCondition:ProcessgroupNamingCondition": {
            "properties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ProcessgroupNamingConditionCondition:ProcessgroupNamingConditionCondition"
                    }
                }
            },
            "type": "object"
        },
        "dynatrace:index/ProcessgroupNamingConditionCondition:ProcessgroupNamingConditionCondition": {
            "properties": {
                "applicationTypeComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ProcessgroupNamingConditionConditionApplicationTypeComparison:ProcessgroupNamingConditionConditionApplicationTypeComparison"
                    },
                    "deprecationMessage": "You should use 'application_type' instead of 'application_type_comparison'. This attribute still exists for backwards compatibility."
                },
                "applicationTypes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ProcessgroupNamingConditionConditionApplicationType:ProcessgroupNamingConditionConditionApplicationType"
                    }
                },
                "azureComputeModeComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ProcessgroupNamingConditionConditionAzureComputeModeComparison:ProcessgroupNamingConditionConditionAzureComputeModeComparison"
                    }
                },
                "azureComputeModes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ProcessgroupNamingConditionConditionAzureComputeMode:ProcessgroupNamingConditionConditionAzureComputeMode"
                    },
                    "deprecationMessage": "You should use 'azure_compute_mode' instead of 'azure_compute_mode_comparison'. This attribute still exists for backwards compatibility."
                },
                "azureSkuComparisions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ProcessgroupNamingConditionConditionAzureSkuComparision:ProcessgroupNamingConditionConditionAzureSkuComparision"
                    },
                    "deprecationMessage": "You should use 'azure_sku' instead of 'azure_sku_comparision'. This attribute still exists for backwards compatibility."
                },
                "azureSkus": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ProcessgroupNamingConditionConditionAzureSkus:ProcessgroupNamingConditionConditionAzureSkus"
                    }
                },
                "baseComparisonBasics": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ProcessgroupNamingConditionConditionBaseComparisonBasic:ProcessgroupNamingConditionConditionBaseComparisonBasic"
                    },
                    "deprecationMessage": "You should use 'comparison' instead of 'base_comparison_basic'. This attribute still exists for backwards compatibility."
                },
                "baseConditionKeys": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ProcessgroupNamingConditionConditionBaseConditionKey:ProcessgroupNamingConditionConditionBaseConditionKey"
                    },
                    "deprecationMessage": "'base_condition_key' is deprecated. You should use 'key'"
                },
                "bitnessComparisions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ProcessgroupNamingConditionConditionBitnessComparision:ProcessgroupNamingConditionConditionBitnessComparision"
                    },
                    "deprecationMessage": "You should use 'bitness' instead of 'bitness_comparision'. This attribute still exists for backwards compatibility."
                },
                "bitnesses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ProcessgroupNamingConditionConditionBitness:ProcessgroupNamingConditionConditionBitness"
                    }
                },
                "cloudTypeComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ProcessgroupNamingConditionConditionCloudTypeComparison:ProcessgroupNamingConditionConditionCloudTypeComparison"
                    },
                    "deprecationMessage": "You should use 'cloud_type' instead of 'cloud_type_comparison'. This attribute still exists for backwards compatibility."
                },
                "cloudTypes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ProcessgroupNamingConditionConditionCloudType:ProcessgroupNamingConditionConditionCloudType"
                    }
                },
                "comparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ProcessgroupNamingConditionConditionComparison:ProcessgroupNamingConditionConditionComparison"
                    }
                },
                "customApplicationTypeComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ProcessgroupNamingConditionConditionCustomApplicationTypeComparison:ProcessgroupNamingConditionConditionCustomApplicationTypeComparison"
                    },
                    "deprecationMessage": "You should use 'custom_application_type' instead of 'custom_application_type_comparison'. This attribute still exists for backwards compatibility."
                },
                "customApplicationTypes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ProcessgroupNamingConditionConditionCustomApplicationType:ProcessgroupNamingConditionConditionCustomApplicationType"
                    }
                },
                "customHostMetadataConditionKeys": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ProcessgroupNamingConditionConditionCustomHostMetadataConditionKey:ProcessgroupNamingConditionConditionCustomHostMetadataConditionKey"
                    },
                    "deprecationMessage": "'custom_host_metadata_condition_key' is deprecated. You should use 'custom_host_metadata'"
                },
                "customHostMetadatas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ProcessgroupNamingConditionConditionCustomHostMetadata:ProcessgroupNamingConditionConditionCustomHostMetadata"
                    }
                },
                "customProcessMetadataConditionKeys": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ProcessgroupNamingConditionConditionCustomProcessMetadataConditionKey:ProcessgroupNamingConditionConditionCustomProcessMetadataConditionKey"
                    },
                    "deprecationMessage": "'custom_process_metadata_condition_key' is deprecated. You should use 'custom_process_metadata'"
                },
                "customProcessMetadatas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ProcessgroupNamingConditionConditionCustomProcessMetadata:ProcessgroupNamingConditionConditionCustomProcessMetadata"
                    }
                },
                "databaseTopologies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ProcessgroupNamingConditionConditionDatabaseTopology:ProcessgroupNamingConditionConditionDatabaseTopology"
                    }
                },
                "databaseTopologyComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ProcessgroupNamingConditionConditionDatabaseTopologyComparison:ProcessgroupNamingConditionConditionDatabaseTopologyComparison"
                    },
                    "deprecationMessage": "You should use 'database_topology' instead of 'database_topology_comparison'. This attribute still exists for backwards compatibility."
                },
                "dcrumDecoderComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ProcessgroupNamingConditionConditionDcrumDecoderComparison:ProcessgroupNamingConditionConditionDcrumDecoderComparison"
                    },
                    "deprecationMessage": "You should use 'dcrum_decoder' instead of 'dcrum_decoder_comparison'. This attribute still exists for backwards compatibility."
                },
                "dcrumDecoders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ProcessgroupNamingConditionConditionDcrumDecoder:ProcessgroupNamingConditionConditionDcrumDecoder"
                    }
                },
                "entities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ProcessgroupNamingConditionConditionEntity:ProcessgroupNamingConditionConditionEntity"
                    }
                },
                "entityIdComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ProcessgroupNamingConditionConditionEntityIdComparison:ProcessgroupNamingConditionConditionEntityIdComparison"
                    },
                    "deprecationMessage": "You should use 'entity' instead of 'entity_id_comparison'. This attribute still exists for backwards compatibility."
                },
                "hostTeches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ProcessgroupNamingConditionConditionHostTech:ProcessgroupNamingConditionConditionHostTech"
                    }
                },
                "hypervisorTypeComparisions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ProcessgroupNamingConditionConditionHypervisorTypeComparision:ProcessgroupNamingConditionConditionHypervisorTypeComparision"
                    },
                    "deprecationMessage": "`hypervisor_type_comparision` is deprecated. Use `hypervisor` instead"
                },
                "hypervisors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ProcessgroupNamingConditionConditionHypervisor:ProcessgroupNamingConditionConditionHypervisor"
                    }
                },
                "indexedNameComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ProcessgroupNamingConditionConditionIndexedNameComparison:ProcessgroupNamingConditionConditionIndexedNameComparison"
                    },
                    "deprecationMessage": "You should use 'indexed_name' instead of 'indexed_name_comparison'. This attribute still exists for backwards compatibility."
                },
                "indexedNames": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ProcessgroupNamingConditionConditionIndexedName:ProcessgroupNamingConditionConditionIndexedName"
                    }
                },
                "indexedStringComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ProcessgroupNamingConditionConditionIndexedStringComparison:ProcessgroupNamingConditionConditionIndexedStringComparison"
                    },
                    "deprecationMessage": "You should use 'indexed_string' instead of 'indexed_string_comparison'. This attribute still exists for backwards compatibility."
                },
                "indexedStrings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ProcessgroupNamingConditionConditionIndexedString:ProcessgroupNamingConditionConditionIndexedString"
                    }
                },
                "indexedTagComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ProcessgroupNamingConditionConditionIndexedTagComparison:ProcessgroupNamingConditionConditionIndexedTagComparison"
                    },
                    "deprecationMessage": "You should use 'indexed_tag' instead of 'indexed_tag_comparison'. This attribute still exists for backwards compatibility."
                },
                "indexedTags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ProcessgroupNamingConditionConditionIndexedTag:ProcessgroupNamingConditionConditionIndexedTag"
                    }
                },
                "integerComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ProcessgroupNamingConditionConditionIntegerComparison:ProcessgroupNamingConditionConditionIntegerComparison"
                    },
                    "deprecationMessage": "You should use 'integer' instead of 'integer_comparison'. This attribute still exists for backwards compatibility."
                },
                "integers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ProcessgroupNamingConditionConditionInteger:ProcessgroupNamingConditionConditionInteger"
                    }
                },
                "ipaddressComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ProcessgroupNamingConditionConditionIpaddressComparison:ProcessgroupNamingConditionConditionIpaddressComparison"
                    },
                    "deprecationMessage": "You should use 'ipaddress' instead of 'ipaddress_comparison'. This attribute still exists for backwards compatibility."
                },
                "ipaddresses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ProcessgroupNamingConditionConditionIpaddress:ProcessgroupNamingConditionConditionIpaddress"
                    }
                },
                "keys": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ProcessgroupNamingConditionConditionKey:ProcessgroupNamingConditionConditionKey"
                    }
                },
                "mobilePlatformComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ProcessgroupNamingConditionConditionMobilePlatformComparison:ProcessgroupNamingConditionConditionMobilePlatformComparison"
                    },
                    "deprecationMessage": "You should use 'mobile_platform' instead of 'mobile_platform_comparison'. This attribute still exists for backwards compatibility."
                },
                "mobilePlatforms": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ProcessgroupNamingConditionConditionMobilePlatform:ProcessgroupNamingConditionConditionMobilePlatform"
                    }
                },
                "osArches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ProcessgroupNamingConditionConditionOsArch:ProcessgroupNamingConditionConditionOsArch"
                    }
                },
                "osTypes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ProcessgroupNamingConditionConditionOsType:ProcessgroupNamingConditionConditionOsType"
                    }
                },
                "osarchitectureComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ProcessgroupNamingConditionConditionOsarchitectureComparison:ProcessgroupNamingConditionConditionOsarchitectureComparison"
                    },
                    "deprecationMessage": "You should use 'os_arch' instead of 'osarchitecture_comparison'. This attribute still exists for backwards compatibility."
                },
                "ostypeComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ProcessgroupNamingConditionConditionOstypeComparison:ProcessgroupNamingConditionConditionOstypeComparison"
                    },
                    "deprecationMessage": "You should use 'os_type' instead of 'ostype_comparison'. This attribute still exists for backwards compatibility."
                },
                "paasTypeComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ProcessgroupNamingConditionConditionPaasTypeComparison:ProcessgroupNamingConditionConditionPaasTypeComparison"
                    },
                    "deprecationMessage": "You should use 'paas_type' instead of 'paas_type_comparison'. This attribute still exists for backwards compatibility."
                },
                "paasTypes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ProcessgroupNamingConditionConditionPaasType:ProcessgroupNamingConditionConditionPaasType"
                    }
                },
                "processMetadataConditionKeys": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ProcessgroupNamingConditionConditionProcessMetadataConditionKey:ProcessgroupNamingConditionConditionProcessMetadataConditionKey"
                    },
                    "deprecationMessage": "'process_metadata_condition_key' is deprecated. You should use 'process_metadata'"
                },
                "processMetadatas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ProcessgroupNamingConditionConditionProcessMetadata:ProcessgroupNamingConditionConditionProcessMetadata"
                    }
                },
                "serviceTopologies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ProcessgroupNamingConditionConditionServiceTopology:ProcessgroupNamingConditionConditionServiceTopology"
                    }
                },
                "serviceTopologyComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ProcessgroupNamingConditionConditionServiceTopologyComparison:ProcessgroupNamingConditionConditionServiceTopologyComparison"
                    },
                    "deprecationMessage": "You should use 'service_topology' instead of 'service_topology_comparison'. This attribute still exists for backwards compatibility."
                },
                "serviceTypeComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ProcessgroupNamingConditionConditionServiceTypeComparison:ProcessgroupNamingConditionConditionServiceTypeComparison"
                    },
                    "deprecationMessage": "You should use 'service_type' instead of 'service_type_comparison'. This attribute still exists for backwards compatibility."
                },
                "serviceTypes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ProcessgroupNamingConditionConditionServiceType:ProcessgroupNamingConditionConditionServiceType"
                    }
                },
                "simpleHostTechComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ProcessgroupNamingConditionConditionSimpleHostTechComparison:ProcessgroupNamingConditionConditionSimpleHostTechComparison"
                    },
                    "deprecationMessage": "You should use 'host_tech' instead of 'simple_host_tech_comparison'. This attribute still exists for backwards compatibility."
                },
                "simpleTechComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ProcessgroupNamingConditionConditionSimpleTechComparison:ProcessgroupNamingConditionConditionSimpleTechComparison"
                    },
                    "deprecationMessage": "You should use 'tech' instead of 'simple_tech_comparison'. This attribute still exists for backwards compatibility."
                },
                "stringComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ProcessgroupNamingConditionConditionStringComparison:ProcessgroupNamingConditionConditionStringComparison"
                    },
                    "deprecationMessage": "You should use 'string' instead of 'string_comparison'. This attribute still exists for backwards compatibility."
                },
                "stringConditionKeys": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ProcessgroupNamingConditionConditionStringConditionKey:ProcessgroupNamingConditionConditionStringConditionKey"
                    },
                    "deprecationMessage": "'string_condition_key' is deprecated. You should use 'string_key'"
                },
                "stringKeys": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ProcessgroupNamingConditionConditionStringKey:ProcessgroupNamingConditionConditionStringKey"
                    }
                },
                "strings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ProcessgroupNamingConditionConditionString:ProcessgroupNamingConditionConditionString"
                    }
                },
                "syntheticEngineTypeComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ProcessgroupNamingConditionConditionSyntheticEngineTypeComparison:ProcessgroupNamingConditionConditionSyntheticEngineTypeComparison"
                    },
                    "deprecationMessage": "You should use 'synthetic_engine' instead of 'synthetic_engine_type_comparison'. This attribute still exists for backwards compatibility."
                },
                "syntheticEngines": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ProcessgroupNamingConditionConditionSyntheticEngine:ProcessgroupNamingConditionConditionSyntheticEngine"
                    }
                },
                "tagComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ProcessgroupNamingConditionConditionTagComparison:ProcessgroupNamingConditionConditionTagComparison"
                    },
                    "deprecationMessage": "You should use 'tag' instead of 'tag_comparison'. This attribute still exists for backwards compatibility."
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ProcessgroupNamingConditionConditionTag:ProcessgroupNamingConditionConditionTag"
                    }
                },
                "teches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ProcessgroupNamingConditionConditionTech:ProcessgroupNamingConditionConditionTech"
                    }
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "dynatrace:index/ProcessgroupNamingConditionConditionApplicationType:ProcessgroupNamingConditionConditionApplicationType": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ProcessgroupNamingConditionConditionApplicationTypeComparison:ProcessgroupNamingConditionConditionApplicationTypeComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ProcessgroupNamingConditionConditionAzureComputeMode:ProcessgroupNamingConditionConditionAzureComputeMode": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ProcessgroupNamingConditionConditionAzureComputeModeComparison:ProcessgroupNamingConditionConditionAzureComputeModeComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ProcessgroupNamingConditionConditionAzureSkuComparision:ProcessgroupNamingConditionConditionAzureSkuComparision": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ProcessgroupNamingConditionConditionAzureSkus:ProcessgroupNamingConditionConditionAzureSkus": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ProcessgroupNamingConditionConditionBaseComparisonBasic:ProcessgroupNamingConditionConditionBaseComparisonBasic": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "type": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "dynatrace:index/ProcessgroupNamingConditionConditionBaseConditionKey:ProcessgroupNamingConditionConditionBaseConditionKey": {
            "properties": {
                "attribute": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "attribute"
            ]
        },
        "dynatrace:index/ProcessgroupNamingConditionConditionBitness:ProcessgroupNamingConditionConditionBitness": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ProcessgroupNamingConditionConditionBitnessComparision:ProcessgroupNamingConditionConditionBitnessComparision": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ProcessgroupNamingConditionConditionCloudType:ProcessgroupNamingConditionConditionCloudType": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ProcessgroupNamingConditionConditionCloudTypeComparison:ProcessgroupNamingConditionConditionCloudTypeComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ProcessgroupNamingConditionConditionComparison:ProcessgroupNamingConditionConditionComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "type": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "dynatrace:index/ProcessgroupNamingConditionConditionCustomApplicationType:ProcessgroupNamingConditionConditionCustomApplicationType": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ProcessgroupNamingConditionConditionCustomApplicationTypeComparison:ProcessgroupNamingConditionConditionCustomApplicationTypeComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ProcessgroupNamingConditionConditionCustomHostMetadata:ProcessgroupNamingConditionConditionCustomHostMetadata": {
            "properties": {
                "attribute": {
                    "type": "string"
                },
                "dynamicKey": {
                    "$ref": "#/types/dynatrace:index/ProcessgroupNamingConditionConditionCustomHostMetadataDynamicKey:ProcessgroupNamingConditionConditionCustomHostMetadataDynamicKey"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "attribute",
                "dynamicKey"
            ]
        },
        "dynatrace:index/ProcessgroupNamingConditionConditionCustomHostMetadataConditionKey:ProcessgroupNamingConditionConditionCustomHostMetadataConditionKey": {
            "properties": {
                "attribute": {
                    "type": "string"
                },
                "dynamicKey": {
                    "$ref": "#/types/dynatrace:index/ProcessgroupNamingConditionConditionCustomHostMetadataConditionKeyDynamicKey:ProcessgroupNamingConditionConditionCustomHostMetadataConditionKeyDynamicKey"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "attribute",
                "dynamicKey"
            ]
        },
        "dynatrace:index/ProcessgroupNamingConditionConditionCustomHostMetadataConditionKeyDynamicKey:ProcessgroupNamingConditionConditionCustomHostMetadataConditionKeyDynamicKey": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "source": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "source"
            ]
        },
        "dynatrace:index/ProcessgroupNamingConditionConditionCustomHostMetadataDynamicKey:ProcessgroupNamingConditionConditionCustomHostMetadataDynamicKey": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "source": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "source"
            ]
        },
        "dynatrace:index/ProcessgroupNamingConditionConditionCustomProcessMetadata:ProcessgroupNamingConditionConditionCustomProcessMetadata": {
            "properties": {
                "attribute": {
                    "type": "string"
                },
                "dynamicKey": {
                    "$ref": "#/types/dynatrace:index/ProcessgroupNamingConditionConditionCustomProcessMetadataDynamicKey:ProcessgroupNamingConditionConditionCustomProcessMetadataDynamicKey"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "attribute",
                "dynamicKey"
            ]
        },
        "dynatrace:index/ProcessgroupNamingConditionConditionCustomProcessMetadataConditionKey:ProcessgroupNamingConditionConditionCustomProcessMetadataConditionKey": {
            "properties": {
                "attribute": {
                    "type": "string"
                },
                "dynamicKey": {
                    "$ref": "#/types/dynatrace:index/ProcessgroupNamingConditionConditionCustomProcessMetadataConditionKeyDynamicKey:ProcessgroupNamingConditionConditionCustomProcessMetadataConditionKeyDynamicKey"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "attribute",
                "dynamicKey"
            ]
        },
        "dynatrace:index/ProcessgroupNamingConditionConditionCustomProcessMetadataConditionKeyDynamicKey:ProcessgroupNamingConditionConditionCustomProcessMetadataConditionKeyDynamicKey": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "source": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "source"
            ]
        },
        "dynatrace:index/ProcessgroupNamingConditionConditionCustomProcessMetadataDynamicKey:ProcessgroupNamingConditionConditionCustomProcessMetadataDynamicKey": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "source": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "source"
            ]
        },
        "dynatrace:index/ProcessgroupNamingConditionConditionDatabaseTopology:ProcessgroupNamingConditionConditionDatabaseTopology": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ProcessgroupNamingConditionConditionDatabaseTopologyComparison:ProcessgroupNamingConditionConditionDatabaseTopologyComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ProcessgroupNamingConditionConditionDcrumDecoder:ProcessgroupNamingConditionConditionDcrumDecoder": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ProcessgroupNamingConditionConditionDcrumDecoderComparison:ProcessgroupNamingConditionConditionDcrumDecoderComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ProcessgroupNamingConditionConditionEntity:ProcessgroupNamingConditionConditionEntity": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ProcessgroupNamingConditionConditionEntityIdComparison:ProcessgroupNamingConditionConditionEntityIdComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ProcessgroupNamingConditionConditionHostTech:ProcessgroupNamingConditionConditionHostTech": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "$ref": "#/types/dynatrace:index/ProcessgroupNamingConditionConditionHostTechValue:ProcessgroupNamingConditionConditionHostTechValue"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ProcessgroupNamingConditionConditionHostTechValue:ProcessgroupNamingConditionConditionHostTechValue": {
            "properties": {
                "type": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "verbatimType": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "dynatrace:index/ProcessgroupNamingConditionConditionHypervisor:ProcessgroupNamingConditionConditionHypervisor": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ProcessgroupNamingConditionConditionHypervisorTypeComparision:ProcessgroupNamingConditionConditionHypervisorTypeComparision": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ProcessgroupNamingConditionConditionIndexedName:ProcessgroupNamingConditionConditionIndexedName": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ProcessgroupNamingConditionConditionIndexedNameComparison:ProcessgroupNamingConditionConditionIndexedNameComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ProcessgroupNamingConditionConditionIndexedString:ProcessgroupNamingConditionConditionIndexedString": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ProcessgroupNamingConditionConditionIndexedStringComparison:ProcessgroupNamingConditionConditionIndexedStringComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ProcessgroupNamingConditionConditionIndexedTag:ProcessgroupNamingConditionConditionIndexedTag": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "$ref": "#/types/dynatrace:index/ProcessgroupNamingConditionConditionIndexedTagValue:ProcessgroupNamingConditionConditionIndexedTagValue"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ProcessgroupNamingConditionConditionIndexedTagComparison:ProcessgroupNamingConditionConditionIndexedTagComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "$ref": "#/types/dynatrace:index/ProcessgroupNamingConditionConditionIndexedTagComparisonValue:ProcessgroupNamingConditionConditionIndexedTagComparisonValue"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ProcessgroupNamingConditionConditionIndexedTagComparisonValue:ProcessgroupNamingConditionConditionIndexedTagComparisonValue": {
            "properties": {
                "context": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "context",
                "key"
            ]
        },
        "dynatrace:index/ProcessgroupNamingConditionConditionIndexedTagValue:ProcessgroupNamingConditionConditionIndexedTagValue": {
            "properties": {
                "context": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "context",
                "key"
            ]
        },
        "dynatrace:index/ProcessgroupNamingConditionConditionInteger:ProcessgroupNamingConditionConditionInteger": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ProcessgroupNamingConditionConditionIntegerComparison:ProcessgroupNamingConditionConditionIntegerComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ProcessgroupNamingConditionConditionIpaddress:ProcessgroupNamingConditionConditionIpaddress": {
            "properties": {
                "caseSensitive": {
                    "type": "boolean"
                },
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ProcessgroupNamingConditionConditionIpaddressComparison:ProcessgroupNamingConditionConditionIpaddressComparison": {
            "properties": {
                "caseSensitive": {
                    "type": "boolean"
                },
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ProcessgroupNamingConditionConditionKey:ProcessgroupNamingConditionConditionKey": {
            "properties": {
                "attribute": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "attribute"
            ]
        },
        "dynatrace:index/ProcessgroupNamingConditionConditionMobilePlatform:ProcessgroupNamingConditionConditionMobilePlatform": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ProcessgroupNamingConditionConditionMobilePlatformComparison:ProcessgroupNamingConditionConditionMobilePlatformComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ProcessgroupNamingConditionConditionOsArch:ProcessgroupNamingConditionConditionOsArch": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ProcessgroupNamingConditionConditionOsType:ProcessgroupNamingConditionConditionOsType": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ProcessgroupNamingConditionConditionOsarchitectureComparison:ProcessgroupNamingConditionConditionOsarchitectureComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ProcessgroupNamingConditionConditionOstypeComparison:ProcessgroupNamingConditionConditionOstypeComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ProcessgroupNamingConditionConditionPaasType:ProcessgroupNamingConditionConditionPaasType": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ProcessgroupNamingConditionConditionPaasTypeComparison:ProcessgroupNamingConditionConditionPaasTypeComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ProcessgroupNamingConditionConditionProcessMetadata:ProcessgroupNamingConditionConditionProcessMetadata": {
            "properties": {
                "attribute": {
                    "type": "string"
                },
                "dynamicKey": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "attribute",
                "dynamicKey"
            ]
        },
        "dynatrace:index/ProcessgroupNamingConditionConditionProcessMetadataConditionKey:ProcessgroupNamingConditionConditionProcessMetadataConditionKey": {
            "properties": {
                "attribute": {
                    "type": "string"
                },
                "dynamicKey": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "attribute",
                "dynamicKey"
            ]
        },
        "dynatrace:index/ProcessgroupNamingConditionConditionServiceTopology:ProcessgroupNamingConditionConditionServiceTopology": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ProcessgroupNamingConditionConditionServiceTopologyComparison:ProcessgroupNamingConditionConditionServiceTopologyComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ProcessgroupNamingConditionConditionServiceType:ProcessgroupNamingConditionConditionServiceType": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ProcessgroupNamingConditionConditionServiceTypeComparison:ProcessgroupNamingConditionConditionServiceTypeComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ProcessgroupNamingConditionConditionSimpleHostTechComparison:ProcessgroupNamingConditionConditionSimpleHostTechComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "$ref": "#/types/dynatrace:index/ProcessgroupNamingConditionConditionSimpleHostTechComparisonValue:ProcessgroupNamingConditionConditionSimpleHostTechComparisonValue"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ProcessgroupNamingConditionConditionSimpleHostTechComparisonValue:ProcessgroupNamingConditionConditionSimpleHostTechComparisonValue": {
            "properties": {
                "type": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "verbatimType": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "dynatrace:index/ProcessgroupNamingConditionConditionSimpleTechComparison:ProcessgroupNamingConditionConditionSimpleTechComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "$ref": "#/types/dynatrace:index/ProcessgroupNamingConditionConditionSimpleTechComparisonValue:ProcessgroupNamingConditionConditionSimpleTechComparisonValue"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ProcessgroupNamingConditionConditionSimpleTechComparisonValue:ProcessgroupNamingConditionConditionSimpleTechComparisonValue": {
            "properties": {
                "type": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "verbatimType": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "dynatrace:index/ProcessgroupNamingConditionConditionString:ProcessgroupNamingConditionConditionString": {
            "properties": {
                "caseSensitive": {
                    "type": "boolean"
                },
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ProcessgroupNamingConditionConditionStringComparison:ProcessgroupNamingConditionConditionStringComparison": {
            "properties": {
                "caseSensitive": {
                    "type": "boolean"
                },
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ProcessgroupNamingConditionConditionStringConditionKey:ProcessgroupNamingConditionConditionStringConditionKey": {
            "properties": {
                "attribute": {
                    "type": "string"
                },
                "dynamicKey": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "attribute",
                "dynamicKey"
            ]
        },
        "dynatrace:index/ProcessgroupNamingConditionConditionStringKey:ProcessgroupNamingConditionConditionStringKey": {
            "properties": {
                "attribute": {
                    "type": "string"
                },
                "dynamicKey": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "attribute",
                "dynamicKey"
            ]
        },
        "dynatrace:index/ProcessgroupNamingConditionConditionSyntheticEngine:ProcessgroupNamingConditionConditionSyntheticEngine": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ProcessgroupNamingConditionConditionSyntheticEngineTypeComparison:ProcessgroupNamingConditionConditionSyntheticEngineTypeComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ProcessgroupNamingConditionConditionTag:ProcessgroupNamingConditionConditionTag": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "$ref": "#/types/dynatrace:index/ProcessgroupNamingConditionConditionTagValue:ProcessgroupNamingConditionConditionTagValue"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ProcessgroupNamingConditionConditionTagComparison:ProcessgroupNamingConditionConditionTagComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "$ref": "#/types/dynatrace:index/ProcessgroupNamingConditionConditionTagComparisonValue:ProcessgroupNamingConditionConditionTagComparisonValue"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ProcessgroupNamingConditionConditionTagComparisonValue:ProcessgroupNamingConditionConditionTagComparisonValue": {
            "properties": {
                "context": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "context",
                "key"
            ]
        },
        "dynatrace:index/ProcessgroupNamingConditionConditionTagValue:ProcessgroupNamingConditionConditionTagValue": {
            "properties": {
                "context": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "context",
                "key"
            ]
        },
        "dynatrace:index/ProcessgroupNamingConditionConditionTech:ProcessgroupNamingConditionConditionTech": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "$ref": "#/types/dynatrace:index/ProcessgroupNamingConditionConditionTechValue:ProcessgroupNamingConditionConditionTechValue"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ProcessgroupNamingConditionConditionTechValue:ProcessgroupNamingConditionConditionTechValue": {
            "properties": {
                "type": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "verbatimType": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "dynatrace:index/QueueManagerAliasQueue:QueueManagerAliasQueue": {
            "properties": {
                "aliasQueues": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/QueueManagerAliasQueueAliasQueue:QueueManagerAliasQueueAliasQueue"
                    }
                }
            },
            "type": "object"
        },
        "dynatrace:index/QueueManagerAliasQueueAliasQueue:QueueManagerAliasQueueAliasQueue": {
            "properties": {
                "aliasQueueName": {
                    "type": "string"
                },
                "baseQueueName": {
                    "type": "string"
                },
                "clusterVisibilities": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "aliasQueueName",
                "baseQueueName"
            ]
        },
        "dynatrace:index/QueueManagerClusterQueue:QueueManagerClusterQueue": {
            "properties": {
                "clusterQueues": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/QueueManagerClusterQueueClusterQueue:QueueManagerClusterQueueClusterQueue"
                    }
                }
            },
            "type": "object"
        },
        "dynatrace:index/QueueManagerClusterQueueClusterQueue:QueueManagerClusterQueueClusterQueue": {
            "properties": {
                "clusterVisibilities": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "localQueueName": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "localQueueName"
            ]
        },
        "dynatrace:index/QueueManagerRemoteQueue:QueueManagerRemoteQueue": {
            "properties": {
                "remoteQueues": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/QueueManagerRemoteQueueRemoteQueue:QueueManagerRemoteQueueRemoteQueue"
                    }
                }
            },
            "type": "object"
        },
        "dynatrace:index/QueueManagerRemoteQueueRemoteQueue:QueueManagerRemoteQueueRemoteQueue": {
            "properties": {
                "clusterVisibilities": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "localQueueName": {
                    "type": "string"
                },
                "remoteQueueManager": {
                    "type": "string"
                },
                "remoteQueueName": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "localQueueName",
                "remoteQueueManager",
                "remoteQueueName"
            ]
        },
        "dynatrace:index/RequestAttributeDataSource:RequestAttributeDataSource": {
            "properties": {
                "capturingAndStorageLocation": {
                    "type": "string"
                },
                "cicsSdkMethodNodeCondition": {
                    "$ref": "#/types/dynatrace:index/RequestAttributeDataSourceCicsSdkMethodNodeCondition:RequestAttributeDataSourceCicsSdkMethodNodeCondition"
                },
                "enabled": {
                    "type": "boolean"
                },
                "iibLabelMethodNodeCondition": {
                    "$ref": "#/types/dynatrace:index/RequestAttributeDataSourceIibLabelMethodNodeCondition:RequestAttributeDataSourceIibLabelMethodNodeCondition"
                },
                "iibMethodNodeCondition": {
                    "$ref": "#/types/dynatrace:index/RequestAttributeDataSourceIibMethodNodeCondition:RequestAttributeDataSourceIibMethodNodeCondition"
                },
                "iibNodeType": {
                    "type": "string"
                },
                "methods": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/RequestAttributeDataSourceMethod:RequestAttributeDataSourceMethod"
                    }
                },
                "parameterName": {
                    "type": "string"
                },
                "scope": {
                    "$ref": "#/types/dynatrace:index/RequestAttributeDataSourceScope:RequestAttributeDataSourceScope"
                },
                "sessionAttributeTechnology": {
                    "type": "string"
                },
                "source": {
                    "type": "string"
                },
                "technology": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "valueProcessing": {
                    "$ref": "#/types/dynatrace:index/RequestAttributeDataSourceValueProcessing:RequestAttributeDataSourceValueProcessing"
                }
            },
            "type": "object",
            "required": [
                "enabled",
                "source"
            ]
        },
        "dynatrace:index/RequestAttributeDataSourceCicsSdkMethodNodeCondition:RequestAttributeDataSourceCicsSdkMethodNodeCondition": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator",
                "value"
            ]
        },
        "dynatrace:index/RequestAttributeDataSourceIibLabelMethodNodeCondition:RequestAttributeDataSourceIibLabelMethodNodeCondition": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator",
                "value"
            ]
        },
        "dynatrace:index/RequestAttributeDataSourceIibMethodNodeCondition:RequestAttributeDataSourceIibMethodNodeCondition": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator",
                "value"
            ]
        },
        "dynatrace:index/RequestAttributeDataSourceMethod:RequestAttributeDataSourceMethod": {
            "properties": {
                "argumentIndex": {
                    "type": "integer"
                },
                "capture": {
                    "type": "string"
                },
                "deepObjectAccess": {
                    "type": "string"
                },
                "method": {
                    "$ref": "#/types/dynatrace:index/RequestAttributeDataSourceMethodMethod:RequestAttributeDataSourceMethodMethod"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "capture"
            ]
        },
        "dynatrace:index/RequestAttributeDataSourceMethodMethod:RequestAttributeDataSourceMethodMethod": {
            "properties": {
                "argumentTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "className": {
                    "type": "string"
                },
                "fileName": {
                    "type": "string"
                },
                "fileNameMatcher": {
                    "type": "string"
                },
                "methodName": {
                    "type": "string"
                },
                "modifiers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "returnType": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "visibility": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "methodName",
                "returnType",
                "visibility"
            ]
        },
        "dynatrace:index/RequestAttributeDataSourceScope:RequestAttributeDataSourceScope": {
            "properties": {
                "hostGroup": {
                    "type": "string"
                },
                "processGroup": {
                    "type": "string"
                },
                "serviceTechnology": {
                    "type": "string"
                },
                "tagOfProcessGroup": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "dynatrace:index/RequestAttributeDataSourceValueProcessing:RequestAttributeDataSourceValueProcessing": {
            "properties": {
                "extractSubstring": {
                    "$ref": "#/types/dynatrace:index/RequestAttributeDataSourceValueProcessingExtractSubstring:RequestAttributeDataSourceValueProcessingExtractSubstring"
                },
                "splitAt": {
                    "type": "string"
                },
                "trim": {
                    "type": "boolean"
                },
                "unknowns": {
                    "type": "string"
                },
                "valueCondition": {
                    "$ref": "#/types/dynatrace:index/RequestAttributeDataSourceValueProcessingValueCondition:RequestAttributeDataSourceValueProcessingValueCondition"
                },
                "valueExtractorRegex": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "dynatrace:index/RequestAttributeDataSourceValueProcessingExtractSubstring:RequestAttributeDataSourceValueProcessingExtractSubstring": {
            "properties": {
                "delimiter": {
                    "type": "string"
                },
                "endDelimiter": {
                    "type": "string"
                },
                "position": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "delimiter",
                "position"
            ]
        },
        "dynatrace:index/RequestAttributeDataSourceValueProcessingValueCondition:RequestAttributeDataSourceValueProcessingValueCondition": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator",
                "value"
            ]
        },
        "dynatrace:index/RequestNamingConditions:RequestNamingConditions": {
            "properties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/RequestNamingConditionsCondition:RequestNamingConditionsCondition"
                    }
                }
            },
            "type": "object"
        },
        "dynatrace:index/RequestNamingConditionsCondition:RequestNamingConditionsCondition": {
            "properties": {
                "attribute": {
                    "type": "string"
                },
                "comparison": {
                    "$ref": "#/types/dynatrace:index/RequestNamingConditionsConditionComparison:RequestNamingConditionsConditionComparison"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "attribute",
                "comparison"
            ]
        },
        "dynatrace:index/RequestNamingConditionsConditionComparison:RequestNamingConditionsConditionComparison": {
            "properties": {
                "boolean": {
                    "$ref": "#/types/dynatrace:index/RequestNamingConditionsConditionComparisonBoolean:RequestNamingConditionsConditionComparisonBoolean"
                },
                "esbInputNodeType": {
                    "$ref": "#/types/dynatrace:index/RequestNamingConditionsConditionComparisonEsbInputNodeType:RequestNamingConditionsConditionComparisonEsbInputNodeType"
                },
                "failedState": {
                    "$ref": "#/types/dynatrace:index/RequestNamingConditionsConditionComparisonFailedState:RequestNamingConditionsConditionComparisonFailedState"
                },
                "failureReason": {
                    "$ref": "#/types/dynatrace:index/RequestNamingConditionsConditionComparisonFailureReason:RequestNamingConditionsConditionComparisonFailureReason"
                },
                "fastString": {
                    "$ref": "#/types/dynatrace:index/RequestNamingConditionsConditionComparisonFastString:RequestNamingConditionsConditionComparisonFastString"
                },
                "flawState": {
                    "$ref": "#/types/dynatrace:index/RequestNamingConditionsConditionComparisonFlawState:RequestNamingConditionsConditionComparisonFlawState"
                },
                "generic": {
                    "$ref": "#/types/dynatrace:index/RequestNamingConditionsConditionComparisonGeneric:RequestNamingConditionsConditionComparisonGeneric"
                },
                "httpMethod": {
                    "$ref": "#/types/dynatrace:index/RequestNamingConditionsConditionComparisonHttpMethod:RequestNamingConditionsConditionComparisonHttpMethod"
                },
                "httpStatusClass": {
                    "$ref": "#/types/dynatrace:index/RequestNamingConditionsConditionComparisonHttpStatusClass:RequestNamingConditionsConditionComparisonHttpStatusClass"
                },
                "iibInputNodeType": {
                    "$ref": "#/types/dynatrace:index/RequestNamingConditionsConditionComparisonIibInputNodeType:RequestNamingConditionsConditionComparisonIibInputNodeType"
                },
                "negate": {
                    "type": "boolean"
                },
                "number": {
                    "$ref": "#/types/dynatrace:index/RequestNamingConditionsConditionComparisonNumber:RequestNamingConditionsConditionComparisonNumber"
                },
                "numberRequestAttribute": {
                    "$ref": "#/types/dynatrace:index/RequestNamingConditionsConditionComparisonNumberRequestAttribute:RequestNamingConditionsConditionComparisonNumberRequestAttribute"
                },
                "serviceType": {
                    "$ref": "#/types/dynatrace:index/RequestNamingConditionsConditionComparisonServiceType:RequestNamingConditionsConditionComparisonServiceType"
                },
                "string": {
                    "$ref": "#/types/dynatrace:index/RequestNamingConditionsConditionComparisonString:RequestNamingConditionsConditionComparisonString"
                },
                "stringRequestAttribute": {
                    "$ref": "#/types/dynatrace:index/RequestNamingConditionsConditionComparisonStringRequestAttribute:RequestNamingConditionsConditionComparisonStringRequestAttribute"
                },
                "tag": {
                    "$ref": "#/types/dynatrace:index/RequestNamingConditionsConditionComparisonTag:RequestNamingConditionsConditionComparisonTag"
                },
                "zosCallType": {
                    "$ref": "#/types/dynatrace:index/RequestNamingConditionsConditionComparisonZosCallType:RequestNamingConditionsConditionComparisonZosCallType"
                }
            },
            "type": "object"
        },
        "dynatrace:index/RequestNamingConditionsConditionComparisonBoolean:RequestNamingConditionsConditionComparisonBoolean": {
            "properties": {
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "boolean"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "boolean"
                    }
                }
            },
            "type": "object",
            "required": [
                "value"
            ]
        },
        "dynatrace:index/RequestNamingConditionsConditionComparisonEsbInputNodeType:RequestNamingConditionsConditionComparisonEsbInputNodeType": {
            "properties": {
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object"
        },
        "dynatrace:index/RequestNamingConditionsConditionComparisonFailedState:RequestNamingConditionsConditionComparisonFailedState": {
            "properties": {
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object"
        },
        "dynatrace:index/RequestNamingConditionsConditionComparisonFailureReason:RequestNamingConditionsConditionComparisonFailureReason": {
            "properties": {
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object"
        },
        "dynatrace:index/RequestNamingConditionsConditionComparisonFastString:RequestNamingConditionsConditionComparisonFastString": {
            "properties": {
                "caseSensitive": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object"
        },
        "dynatrace:index/RequestNamingConditionsConditionComparisonFlawState:RequestNamingConditionsConditionComparisonFlawState": {
            "properties": {
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object"
        },
        "dynatrace:index/RequestNamingConditionsConditionComparisonGeneric:RequestNamingConditionsConditionComparisonGeneric": {
            "properties": {
                "type": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "dynatrace:index/RequestNamingConditionsConditionComparisonHttpMethod:RequestNamingConditionsConditionComparisonHttpMethod": {
            "properties": {
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object"
        },
        "dynatrace:index/RequestNamingConditionsConditionComparisonHttpStatusClass:RequestNamingConditionsConditionComparisonHttpStatusClass": {
            "properties": {
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object"
        },
        "dynatrace:index/RequestNamingConditionsConditionComparisonIibInputNodeType:RequestNamingConditionsConditionComparisonIibInputNodeType": {
            "properties": {
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object"
        },
        "dynatrace:index/RequestNamingConditionsConditionComparisonNumber:RequestNamingConditionsConditionComparisonNumber": {
            "properties": {
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "number"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                }
            },
            "type": "object"
        },
        "dynatrace:index/RequestNamingConditionsConditionComparisonNumberRequestAttribute:RequestNamingConditionsConditionComparisonNumberRequestAttribute": {
            "properties": {
                "matchOnChildCalls": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "requestAttribute": {
                    "type": "string"
                },
                "source": {
                    "$ref": "#/types/dynatrace:index/RequestNamingConditionsConditionComparisonNumberRequestAttributeSource:RequestNamingConditionsConditionComparisonNumberRequestAttributeSource"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "number"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                }
            },
            "type": "object",
            "required": [
                "requestAttribute"
            ]
        },
        "dynatrace:index/RequestNamingConditionsConditionComparisonNumberRequestAttributeSource:RequestNamingConditionsConditionComparisonNumberRequestAttributeSource": {
            "properties": {
                "managementZone": {
                    "type": "string"
                },
                "serviceTag": {
                    "$ref": "#/types/dynatrace:index/RequestNamingConditionsConditionComparisonNumberRequestAttributeSourceServiceTag:RequestNamingConditionsConditionComparisonNumberRequestAttributeSourceServiceTag"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "dynatrace:index/RequestNamingConditionsConditionComparisonNumberRequestAttributeSourceServiceTag:RequestNamingConditionsConditionComparisonNumberRequestAttributeSourceServiceTag": {
            "properties": {
                "context": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "tagKey": {
                    "$ref": "#/types/dynatrace:index/RequestNamingConditionsConditionComparisonNumberRequestAttributeSourceServiceTagTagKey:RequestNamingConditionsConditionComparisonNumberRequestAttributeSourceServiceTagTagKey"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key"
            ]
        },
        "dynatrace:index/RequestNamingConditionsConditionComparisonNumberRequestAttributeSourceServiceTagTagKey:RequestNamingConditionsConditionComparisonNumberRequestAttributeSourceServiceTagTagKey": {
            "properties": {
                "context": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "dynatrace:index/RequestNamingConditionsConditionComparisonServiceType:RequestNamingConditionsConditionComparisonServiceType": {
            "properties": {
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object"
        },
        "dynatrace:index/RequestNamingConditionsConditionComparisonString:RequestNamingConditionsConditionComparisonString": {
            "properties": {
                "caseSensitive": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object"
        },
        "dynatrace:index/RequestNamingConditionsConditionComparisonStringRequestAttribute:RequestNamingConditionsConditionComparisonStringRequestAttribute": {
            "properties": {
                "caseSensitive": {
                    "type": "boolean"
                },
                "matchOnChildCalls": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "requestAttribute": {
                    "type": "string"
                },
                "source": {
                    "$ref": "#/types/dynatrace:index/RequestNamingConditionsConditionComparisonStringRequestAttributeSource:RequestNamingConditionsConditionComparisonStringRequestAttributeSource"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "requestAttribute"
            ]
        },
        "dynatrace:index/RequestNamingConditionsConditionComparisonStringRequestAttributeSource:RequestNamingConditionsConditionComparisonStringRequestAttributeSource": {
            "properties": {
                "managementZone": {
                    "type": "string"
                },
                "serviceTag": {
                    "$ref": "#/types/dynatrace:index/RequestNamingConditionsConditionComparisonStringRequestAttributeSourceServiceTag:RequestNamingConditionsConditionComparisonStringRequestAttributeSourceServiceTag"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "dynatrace:index/RequestNamingConditionsConditionComparisonStringRequestAttributeSourceServiceTag:RequestNamingConditionsConditionComparisonStringRequestAttributeSourceServiceTag": {
            "properties": {
                "context": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "tagKey": {
                    "$ref": "#/types/dynatrace:index/RequestNamingConditionsConditionComparisonStringRequestAttributeSourceServiceTagTagKey:RequestNamingConditionsConditionComparisonStringRequestAttributeSourceServiceTagTagKey"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key"
            ]
        },
        "dynatrace:index/RequestNamingConditionsConditionComparisonStringRequestAttributeSourceServiceTagTagKey:RequestNamingConditionsConditionComparisonStringRequestAttributeSourceServiceTagTagKey": {
            "properties": {
                "context": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "dynatrace:index/RequestNamingConditionsConditionComparisonTag:RequestNamingConditionsConditionComparisonTag": {
            "properties": {
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "$ref": "#/types/dynatrace:index/RequestNamingConditionsConditionComparisonTagValue:RequestNamingConditionsConditionComparisonTagValue"
                },
                "values": {
                    "$ref": "#/types/dynatrace:index/RequestNamingConditionsConditionComparisonTagValues:RequestNamingConditionsConditionComparisonTagValues"
                }
            },
            "type": "object"
        },
        "dynatrace:index/RequestNamingConditionsConditionComparisonTagValue:RequestNamingConditionsConditionComparisonTagValue": {
            "properties": {
                "context": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "context",
                "key"
            ]
        },
        "dynatrace:index/RequestNamingConditionsConditionComparisonTagValues:RequestNamingConditionsConditionComparisonTagValues": {
            "properties": {
                "values": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/RequestNamingConditionsConditionComparisonTagValuesValue:RequestNamingConditionsConditionComparisonTagValuesValue"
                    }
                }
            },
            "type": "object"
        },
        "dynatrace:index/RequestNamingConditionsConditionComparisonTagValuesValue:RequestNamingConditionsConditionComparisonTagValuesValue": {
            "properties": {
                "context": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "context",
                "key"
            ]
        },
        "dynatrace:index/RequestNamingConditionsConditionComparisonZosCallType:RequestNamingConditionsConditionComparisonZosCallType": {
            "properties": {
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object"
        },
        "dynatrace:index/RequestNamingPlaceholders:RequestNamingPlaceholders": {
            "properties": {
                "placeholders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/RequestNamingPlaceholdersPlaceholder:RequestNamingPlaceholdersPlaceholder"
                    }
                }
            },
            "type": "object"
        },
        "dynatrace:index/RequestNamingPlaceholdersPlaceholder:RequestNamingPlaceholdersPlaceholder": {
            "properties": {
                "aggregation": {
                    "type": "string"
                },
                "attribute": {
                    "type": "string"
                },
                "delimiterOrRegex": {
                    "type": "string"
                },
                "endDelimiter": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "normalization": {
                    "type": "string"
                },
                "requestAttribute": {
                    "type": "string"
                },
                "source": {
                    "$ref": "#/types/dynatrace:index/RequestNamingPlaceholdersPlaceholderSource:RequestNamingPlaceholdersPlaceholderSource"
                },
                "unknowns": {
                    "type": "string"
                },
                "useFromChildCalls": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "attribute",
                "kind",
                "name"
            ]
        },
        "dynatrace:index/RequestNamingPlaceholdersPlaceholderSource:RequestNamingPlaceholdersPlaceholderSource": {
            "properties": {
                "managementZone": {
                    "type": "string"
                },
                "serviceTag": {
                    "$ref": "#/types/dynatrace:index/RequestNamingPlaceholdersPlaceholderSourceServiceTag:RequestNamingPlaceholdersPlaceholderSourceServiceTag"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "dynatrace:index/RequestNamingPlaceholdersPlaceholderSourceServiceTag:RequestNamingPlaceholdersPlaceholderSourceServiceTag": {
            "properties": {
                "context": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "tagKey": {
                    "$ref": "#/types/dynatrace:index/RequestNamingPlaceholdersPlaceholderSourceServiceTagTagKey:RequestNamingPlaceholdersPlaceholderSourceServiceTagTagKey"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key"
            ]
        },
        "dynatrace:index/RequestNamingPlaceholdersPlaceholderSourceServiceTagTagKey:RequestNamingPlaceholdersPlaceholderSourceServiceTagTagKey": {
            "properties": {
                "context": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "dynatrace:index/ResourceAttributesKeys:ResourceAttributesKeys": {
            "properties": {
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ResourceAttributesKeysRule:ResourceAttributesKeysRule"
                    }
                }
            },
            "type": "object",
            "required": [
                "rules"
            ]
        },
        "dynatrace:index/ResourceAttributesKeysRule:ResourceAttributesKeysRule": {
            "properties": {
                "attributeKey": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "masking": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "attributeKey",
                "enabled",
                "masking"
            ]
        },
        "dynatrace:index/RumProviderBreakdownDomainNamePatternList:RumProviderBreakdownDomainNamePatternList": {
            "properties": {
                "domainNamePatterns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/RumProviderBreakdownDomainNamePatternListDomainNamePattern:RumProviderBreakdownDomainNamePatternListDomainNamePattern"
                    }
                }
            },
            "type": "object",
            "required": [
                "domainNamePatterns"
            ]
        },
        "dynatrace:index/RumProviderBreakdownDomainNamePatternListDomainNamePattern:RumProviderBreakdownDomainNamePatternListDomainNamePattern": {
            "properties": {
                "pattern": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "pattern"
            ]
        },
        "dynatrace:index/ServiceAnomaliesFailureRates:ServiceAnomaliesFailureRates": {
            "properties": {
                "auto": {
                    "$ref": "#/types/dynatrace:index/ServiceAnomaliesFailureRatesAuto:ServiceAnomaliesFailureRatesAuto"
                },
                "thresholds": {
                    "$ref": "#/types/dynatrace:index/ServiceAnomaliesFailureRatesThresholds:ServiceAnomaliesFailureRatesThresholds"
                }
            },
            "type": "object"
        },
        "dynatrace:index/ServiceAnomaliesFailureRatesAuto:ServiceAnomaliesFailureRatesAuto": {
            "properties": {
                "absolute": {
                    "type": "integer"
                },
                "relative": {
                    "type": "integer"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "absolute",
                "relative"
            ]
        },
        "dynatrace:index/ServiceAnomaliesFailureRatesThresholds:ServiceAnomaliesFailureRatesThresholds": {
            "properties": {
                "sensitivity": {
                    "type": "string"
                },
                "threshold": {
                    "type": "integer"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "sensitivity",
                "threshold"
            ]
        },
        "dynatrace:index/ServiceAnomaliesLoad:ServiceAnomaliesLoad": {
            "properties": {
                "drops": {
                    "$ref": "#/types/dynatrace:index/ServiceAnomaliesLoadDrops:ServiceAnomaliesLoadDrops"
                },
                "spikes": {
                    "$ref": "#/types/dynatrace:index/ServiceAnomaliesLoadSpikes:ServiceAnomaliesLoadSpikes"
                }
            },
            "type": "object"
        },
        "dynatrace:index/ServiceAnomaliesLoadDrops:ServiceAnomaliesLoadDrops": {
            "properties": {
                "minutes": {
                    "type": "integer"
                },
                "percent": {
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "dynatrace:index/ServiceAnomaliesLoadSpikes:ServiceAnomaliesLoadSpikes": {
            "properties": {
                "minutes": {
                    "type": "integer"
                },
                "percent": {
                    "type": "integer"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "dynatrace:index/ServiceAnomaliesResponseTimes:ServiceAnomaliesResponseTimes": {
            "properties": {
                "auto": {
                    "$ref": "#/types/dynatrace:index/ServiceAnomaliesResponseTimesAuto:ServiceAnomaliesResponseTimesAuto"
                },
                "thresholds": {
                    "$ref": "#/types/dynatrace:index/ServiceAnomaliesResponseTimesThresholds:ServiceAnomaliesResponseTimesThresholds"
                }
            },
            "type": "object"
        },
        "dynatrace:index/ServiceAnomaliesResponseTimesAuto:ServiceAnomaliesResponseTimesAuto": {
            "properties": {
                "load": {
                    "type": "string"
                },
                "milliseconds": {
                    "type": "integer"
                },
                "percent": {
                    "type": "integer"
                },
                "slowestMilliseconds": {
                    "type": "integer"
                },
                "slowestPercent": {
                    "type": "integer"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "load",
                "milliseconds",
                "percent",
                "slowestMilliseconds",
                "slowestPercent"
            ]
        },
        "dynatrace:index/ServiceAnomaliesResponseTimesThresholds:ServiceAnomaliesResponseTimesThresholds": {
            "properties": {
                "load": {
                    "type": "string"
                },
                "milliseconds": {
                    "type": "integer"
                },
                "sensitivity": {
                    "type": "string"
                },
                "slowestMilliseconds": {
                    "type": "integer"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "load",
                "milliseconds",
                "sensitivity",
                "slowestMilliseconds"
            ]
        },
        "dynatrace:index/ServiceAnomaliesV2FailureRate:ServiceAnomaliesV2FailureRate": {
            "properties": {
                "autoDetection": {
                    "$ref": "#/types/dynatrace:index/ServiceAnomaliesV2FailureRateAutoDetection:ServiceAnomaliesV2FailureRateAutoDetection"
                },
                "detectionMode": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "fixedDetection": {
                    "$ref": "#/types/dynatrace:index/ServiceAnomaliesV2FailureRateFixedDetection:ServiceAnomaliesV2FailureRateFixedDetection"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/ServiceAnomaliesV2FailureRateAutoDetection:ServiceAnomaliesV2FailureRateAutoDetection": {
            "properties": {
                "absoluteIncrease": {
                    "type": "number"
                },
                "overAlertingProtection": {
                    "$ref": "#/types/dynatrace:index/ServiceAnomaliesV2FailureRateAutoDetectionOverAlertingProtection:ServiceAnomaliesV2FailureRateAutoDetectionOverAlertingProtection"
                },
                "relativeIncrease": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "absoluteIncrease",
                "overAlertingProtection",
                "relativeIncrease"
            ]
        },
        "dynatrace:index/ServiceAnomaliesV2FailureRateAutoDetectionOverAlertingProtection:ServiceAnomaliesV2FailureRateAutoDetectionOverAlertingProtection": {
            "properties": {
                "minutesAbnormalState": {
                    "type": "integer"
                },
                "requestsPerMinute": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "minutesAbnormalState",
                "requestsPerMinute"
            ]
        },
        "dynatrace:index/ServiceAnomaliesV2FailureRateFixedDetection:ServiceAnomaliesV2FailureRateFixedDetection": {
            "properties": {
                "overAlertingProtection": {
                    "$ref": "#/types/dynatrace:index/ServiceAnomaliesV2FailureRateFixedDetectionOverAlertingProtection:ServiceAnomaliesV2FailureRateFixedDetectionOverAlertingProtection"
                },
                "sensitivity": {
                    "type": "string"
                },
                "threshold": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "overAlertingProtection",
                "sensitivity",
                "threshold"
            ]
        },
        "dynatrace:index/ServiceAnomaliesV2FailureRateFixedDetectionOverAlertingProtection:ServiceAnomaliesV2FailureRateFixedDetectionOverAlertingProtection": {
            "properties": {
                "minutesAbnormalState": {
                    "type": "integer"
                },
                "requestsPerMinute": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "minutesAbnormalState",
                "requestsPerMinute"
            ]
        },
        "dynatrace:index/ServiceAnomaliesV2LoadDrops:ServiceAnomaliesV2LoadDrops": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "loadDropPercent": {
                    "type": "number"
                },
                "minutesAbnormalState": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/ServiceAnomaliesV2LoadSpikes:ServiceAnomaliesV2LoadSpikes": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "loadSpikePercent": {
                    "type": "number"
                },
                "minutesAbnormalState": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/ServiceAnomaliesV2ResponseTime:ServiceAnomaliesV2ResponseTime": {
            "properties": {
                "autoDetection": {
                    "$ref": "#/types/dynatrace:index/ServiceAnomaliesV2ResponseTimeAutoDetection:ServiceAnomaliesV2ResponseTimeAutoDetection"
                },
                "detectionMode": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "fixedDetection": {
                    "$ref": "#/types/dynatrace:index/ServiceAnomaliesV2ResponseTimeFixedDetection:ServiceAnomaliesV2ResponseTimeFixedDetection"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/ServiceAnomaliesV2ResponseTimeAutoDetection:ServiceAnomaliesV2ResponseTimeAutoDetection": {
            "properties": {
                "overAlertingProtection": {
                    "$ref": "#/types/dynatrace:index/ServiceAnomaliesV2ResponseTimeAutoDetectionOverAlertingProtection:ServiceAnomaliesV2ResponseTimeAutoDetectionOverAlertingProtection"
                },
                "responseTimeAll": {
                    "$ref": "#/types/dynatrace:index/ServiceAnomaliesV2ResponseTimeAutoDetectionResponseTimeAll:ServiceAnomaliesV2ResponseTimeAutoDetectionResponseTimeAll"
                },
                "responseTimeSlowest": {
                    "$ref": "#/types/dynatrace:index/ServiceAnomaliesV2ResponseTimeAutoDetectionResponseTimeSlowest:ServiceAnomaliesV2ResponseTimeAutoDetectionResponseTimeSlowest"
                }
            },
            "type": "object",
            "required": [
                "overAlertingProtection",
                "responseTimeAll",
                "responseTimeSlowest"
            ]
        },
        "dynatrace:index/ServiceAnomaliesV2ResponseTimeAutoDetectionOverAlertingProtection:ServiceAnomaliesV2ResponseTimeAutoDetectionOverAlertingProtection": {
            "properties": {
                "minutesAbnormalState": {
                    "type": "integer"
                },
                "requestsPerMinute": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "minutesAbnormalState",
                "requestsPerMinute"
            ]
        },
        "dynatrace:index/ServiceAnomaliesV2ResponseTimeAutoDetectionResponseTimeAll:ServiceAnomaliesV2ResponseTimeAutoDetectionResponseTimeAll": {
            "properties": {
                "degradationMilliseconds": {
                    "type": "number"
                },
                "degradationPercent": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "degradationMilliseconds",
                "degradationPercent"
            ]
        },
        "dynatrace:index/ServiceAnomaliesV2ResponseTimeAutoDetectionResponseTimeSlowest:ServiceAnomaliesV2ResponseTimeAutoDetectionResponseTimeSlowest": {
            "properties": {
                "slowestDegradationMilliseconds": {
                    "type": "number"
                },
                "slowestDegradationPercent": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "slowestDegradationMilliseconds",
                "slowestDegradationPercent"
            ]
        },
        "dynatrace:index/ServiceAnomaliesV2ResponseTimeFixedDetection:ServiceAnomaliesV2ResponseTimeFixedDetection": {
            "properties": {
                "overAlertingProtection": {
                    "$ref": "#/types/dynatrace:index/ServiceAnomaliesV2ResponseTimeFixedDetectionOverAlertingProtection:ServiceAnomaliesV2ResponseTimeFixedDetectionOverAlertingProtection"
                },
                "responseTimeAll": {
                    "$ref": "#/types/dynatrace:index/ServiceAnomaliesV2ResponseTimeFixedDetectionResponseTimeAll:ServiceAnomaliesV2ResponseTimeFixedDetectionResponseTimeAll"
                },
                "responseTimeSlowest": {
                    "$ref": "#/types/dynatrace:index/ServiceAnomaliesV2ResponseTimeFixedDetectionResponseTimeSlowest:ServiceAnomaliesV2ResponseTimeFixedDetectionResponseTimeSlowest"
                },
                "sensitivity": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "overAlertingProtection",
                "responseTimeAll",
                "responseTimeSlowest",
                "sensitivity"
            ]
        },
        "dynatrace:index/ServiceAnomaliesV2ResponseTimeFixedDetectionOverAlertingProtection:ServiceAnomaliesV2ResponseTimeFixedDetectionOverAlertingProtection": {
            "properties": {
                "minutesAbnormalState": {
                    "type": "integer"
                },
                "requestsPerMinute": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "minutesAbnormalState",
                "requestsPerMinute"
            ]
        },
        "dynatrace:index/ServiceAnomaliesV2ResponseTimeFixedDetectionResponseTimeAll:ServiceAnomaliesV2ResponseTimeFixedDetectionResponseTimeAll": {
            "properties": {
                "degradationMilliseconds": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "degradationMilliseconds"
            ]
        },
        "dynatrace:index/ServiceAnomaliesV2ResponseTimeFixedDetectionResponseTimeSlowest:ServiceAnomaliesV2ResponseTimeFixedDetectionResponseTimeSlowest": {
            "properties": {
                "slowestDegradationMilliseconds": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "slowestDegradationMilliseconds"
            ]
        },
        "dynatrace:index/ServiceExternalWebRequestConditions:ServiceExternalWebRequestConditions": {
            "properties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ServiceExternalWebRequestConditionsCondition:ServiceExternalWebRequestConditionsCondition"
                    }
                }
            },
            "type": "object",
            "required": [
                "conditions"
            ]
        },
        "dynatrace:index/ServiceExternalWebRequestConditionsCondition:ServiceExternalWebRequestConditionsCondition": {
            "properties": {
                "attribute": {
                    "type": "string"
                },
                "compareOperationType": {
                    "type": "string"
                },
                "frameworks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "ignoreCase": {
                    "type": "boolean"
                },
                "intValue": {
                    "type": "integer"
                },
                "intValues": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "ipRangeFrom": {
                    "type": "string"
                },
                "ipRangeTo": {
                    "type": "string"
                },
                "tagValues": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "textValues": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "attribute",
                "compareOperationType"
            ]
        },
        "dynatrace:index/ServiceExternalWebRequestIdContributors:ServiceExternalWebRequestIdContributors": {
            "properties": {
                "applicationId": {
                    "$ref": "#/types/dynatrace:index/ServiceExternalWebRequestIdContributorsApplicationId:ServiceExternalWebRequestIdContributorsApplicationId"
                },
                "contextRoot": {
                    "$ref": "#/types/dynatrace:index/ServiceExternalWebRequestIdContributorsContextRoot:ServiceExternalWebRequestIdContributorsContextRoot"
                },
                "portForServiceId": {
                    "type": "boolean"
                },
                "publicDomainName": {
                    "$ref": "#/types/dynatrace:index/ServiceExternalWebRequestIdContributorsPublicDomainName:ServiceExternalWebRequestIdContributorsPublicDomainName"
                }
            },
            "type": "object",
            "required": [
                "applicationId",
                "contextRoot",
                "portForServiceId",
                "publicDomainName"
            ]
        },
        "dynatrace:index/ServiceExternalWebRequestIdContributorsApplicationId:ServiceExternalWebRequestIdContributorsApplicationId": {
            "properties": {
                "enableIdContributor": {
                    "type": "boolean"
                },
                "serviceIdContributor": {
                    "$ref": "#/types/dynatrace:index/ServiceExternalWebRequestIdContributorsApplicationIdServiceIdContributor:ServiceExternalWebRequestIdContributorsApplicationIdServiceIdContributor"
                }
            },
            "type": "object",
            "required": [
                "enableIdContributor"
            ]
        },
        "dynatrace:index/ServiceExternalWebRequestIdContributorsApplicationIdServiceIdContributor:ServiceExternalWebRequestIdContributorsApplicationIdServiceIdContributor": {
            "properties": {
                "contributionType": {
                    "type": "string"
                },
                "transformations": {
                    "$ref": "#/types/dynatrace:index/ServiceExternalWebRequestIdContributorsApplicationIdServiceIdContributorTransformations:ServiceExternalWebRequestIdContributorsApplicationIdServiceIdContributorTransformations"
                },
                "valueOverride": {
                    "$ref": "#/types/dynatrace:index/ServiceExternalWebRequestIdContributorsApplicationIdServiceIdContributorValueOverride:ServiceExternalWebRequestIdContributorsApplicationIdServiceIdContributorValueOverride"
                }
            },
            "type": "object",
            "required": [
                "contributionType"
            ]
        },
        "dynatrace:index/ServiceExternalWebRequestIdContributorsApplicationIdServiceIdContributorTransformations:ServiceExternalWebRequestIdContributorsApplicationIdServiceIdContributorTransformations": {
            "properties": {
                "transformations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ServiceExternalWebRequestIdContributorsApplicationIdServiceIdContributorTransformationsTransformation:ServiceExternalWebRequestIdContributorsApplicationIdServiceIdContributorTransformationsTransformation"
                    }
                }
            },
            "type": "object",
            "required": [
                "transformations"
            ]
        },
        "dynatrace:index/ServiceExternalWebRequestIdContributorsApplicationIdServiceIdContributorTransformationsTransformation:ServiceExternalWebRequestIdContributorsApplicationIdServiceIdContributorTransformationsTransformation": {
            "properties": {
                "includeHexNumbers": {
                    "type": "boolean"
                },
                "minDigitCount": {
                    "type": "integer"
                },
                "prefix": {
                    "type": "string"
                },
                "replacementValue": {
                    "type": "string"
                },
                "segmentCount": {
                    "type": "integer"
                },
                "selectIndex": {
                    "type": "integer"
                },
                "splitDelimiter": {
                    "type": "string"
                },
                "suffix": {
                    "type": "string"
                },
                "takeFromEnd": {
                    "type": "boolean"
                },
                "transformationType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "transformationType"
            ]
        },
        "dynatrace:index/ServiceExternalWebRequestIdContributorsApplicationIdServiceIdContributorValueOverride:ServiceExternalWebRequestIdContributorsApplicationIdServiceIdContributorValueOverride": {
            "properties": {
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "value"
            ]
        },
        "dynatrace:index/ServiceExternalWebRequestIdContributorsContextRoot:ServiceExternalWebRequestIdContributorsContextRoot": {
            "properties": {
                "enableIdContributor": {
                    "type": "boolean"
                },
                "serviceIdContributor": {
                    "$ref": "#/types/dynatrace:index/ServiceExternalWebRequestIdContributorsContextRootServiceIdContributor:ServiceExternalWebRequestIdContributorsContextRootServiceIdContributor"
                }
            },
            "type": "object",
            "required": [
                "enableIdContributor"
            ]
        },
        "dynatrace:index/ServiceExternalWebRequestIdContributorsContextRootServiceIdContributor:ServiceExternalWebRequestIdContributorsContextRootServiceIdContributor": {
            "properties": {
                "contributionType": {
                    "type": "string"
                },
                "segmentCount": {
                    "type": "integer"
                },
                "transformations": {
                    "$ref": "#/types/dynatrace:index/ServiceExternalWebRequestIdContributorsContextRootServiceIdContributorTransformations:ServiceExternalWebRequestIdContributorsContextRootServiceIdContributorTransformations"
                },
                "valueOverride": {
                    "$ref": "#/types/dynatrace:index/ServiceExternalWebRequestIdContributorsContextRootServiceIdContributorValueOverride:ServiceExternalWebRequestIdContributorsContextRootServiceIdContributorValueOverride"
                }
            },
            "type": "object",
            "required": [
                "contributionType"
            ]
        },
        "dynatrace:index/ServiceExternalWebRequestIdContributorsContextRootServiceIdContributorTransformations:ServiceExternalWebRequestIdContributorsContextRootServiceIdContributorTransformations": {
            "properties": {
                "transformations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ServiceExternalWebRequestIdContributorsContextRootServiceIdContributorTransformationsTransformation:ServiceExternalWebRequestIdContributorsContextRootServiceIdContributorTransformationsTransformation"
                    }
                }
            },
            "type": "object",
            "required": [
                "transformations"
            ]
        },
        "dynatrace:index/ServiceExternalWebRequestIdContributorsContextRootServiceIdContributorTransformationsTransformation:ServiceExternalWebRequestIdContributorsContextRootServiceIdContributorTransformationsTransformation": {
            "properties": {
                "includeHexNumbers": {
                    "type": "boolean"
                },
                "minDigitCount": {
                    "type": "integer"
                },
                "prefix": {
                    "type": "string"
                },
                "replacementValue": {
                    "type": "string"
                },
                "suffix": {
                    "type": "string"
                },
                "transformationType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "transformationType"
            ]
        },
        "dynatrace:index/ServiceExternalWebRequestIdContributorsContextRootServiceIdContributorValueOverride:ServiceExternalWebRequestIdContributorsContextRootServiceIdContributorValueOverride": {
            "properties": {
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "value"
            ]
        },
        "dynatrace:index/ServiceExternalWebRequestIdContributorsPublicDomainName:ServiceExternalWebRequestIdContributorsPublicDomainName": {
            "properties": {
                "enableIdContributor": {
                    "type": "boolean"
                },
                "serviceIdContributor": {
                    "$ref": "#/types/dynatrace:index/ServiceExternalWebRequestIdContributorsPublicDomainNameServiceIdContributor:ServiceExternalWebRequestIdContributorsPublicDomainNameServiceIdContributor"
                }
            },
            "type": "object",
            "required": [
                "enableIdContributor"
            ]
        },
        "dynatrace:index/ServiceExternalWebRequestIdContributorsPublicDomainNameServiceIdContributor:ServiceExternalWebRequestIdContributorsPublicDomainNameServiceIdContributor": {
            "properties": {
                "contributionType": {
                    "type": "string"
                },
                "copyFromHostName": {
                    "type": "boolean"
                },
                "transformations": {
                    "$ref": "#/types/dynatrace:index/ServiceExternalWebRequestIdContributorsPublicDomainNameServiceIdContributorTransformations:ServiceExternalWebRequestIdContributorsPublicDomainNameServiceIdContributorTransformations"
                },
                "valueOverride": {
                    "$ref": "#/types/dynatrace:index/ServiceExternalWebRequestIdContributorsPublicDomainNameServiceIdContributorValueOverride:ServiceExternalWebRequestIdContributorsPublicDomainNameServiceIdContributorValueOverride"
                }
            },
            "type": "object",
            "required": [
                "contributionType"
            ]
        },
        "dynatrace:index/ServiceExternalWebRequestIdContributorsPublicDomainNameServiceIdContributorTransformations:ServiceExternalWebRequestIdContributorsPublicDomainNameServiceIdContributorTransformations": {
            "properties": {
                "transformations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ServiceExternalWebRequestIdContributorsPublicDomainNameServiceIdContributorTransformationsTransformation:ServiceExternalWebRequestIdContributorsPublicDomainNameServiceIdContributorTransformationsTransformation"
                    }
                }
            },
            "type": "object",
            "required": [
                "transformations"
            ]
        },
        "dynatrace:index/ServiceExternalWebRequestIdContributorsPublicDomainNameServiceIdContributorTransformationsTransformation:ServiceExternalWebRequestIdContributorsPublicDomainNameServiceIdContributorTransformationsTransformation": {
            "properties": {
                "includeHexNumbers": {
                    "type": "boolean"
                },
                "minDigitCount": {
                    "type": "integer"
                },
                "prefix": {
                    "type": "string"
                },
                "replacementValue": {
                    "type": "string"
                },
                "segmentCount": {
                    "type": "integer"
                },
                "selectIndex": {
                    "type": "integer"
                },
                "splitDelimiter": {
                    "type": "string"
                },
                "suffix": {
                    "type": "string"
                },
                "takeFromEnd": {
                    "type": "boolean"
                },
                "transformationType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "transformationType"
            ]
        },
        "dynatrace:index/ServiceExternalWebRequestIdContributorsPublicDomainNameServiceIdContributorValueOverride:ServiceExternalWebRequestIdContributorsPublicDomainNameServiceIdContributorValueOverride": {
            "properties": {
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "value"
            ]
        },
        "dynatrace:index/ServiceExternalWebServiceConditions:ServiceExternalWebServiceConditions": {
            "properties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ServiceExternalWebServiceConditionsCondition:ServiceExternalWebServiceConditionsCondition"
                    }
                }
            },
            "type": "object",
            "required": [
                "conditions"
            ]
        },
        "dynatrace:index/ServiceExternalWebServiceConditionsCondition:ServiceExternalWebServiceConditionsCondition": {
            "properties": {
                "attribute": {
                    "type": "string"
                },
                "compareOperationType": {
                    "type": "string"
                },
                "frameworks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "ignoreCase": {
                    "type": "boolean"
                },
                "intValue": {
                    "type": "integer"
                },
                "intValues": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "ipRangeFrom": {
                    "type": "string"
                },
                "ipRangeTo": {
                    "type": "string"
                },
                "tagValues": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "textValues": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "attribute",
                "compareOperationType"
            ]
        },
        "dynatrace:index/ServiceExternalWebServiceIdContributors:ServiceExternalWebServiceIdContributors": {
            "properties": {
                "detectAsWebRequestService": {
                    "type": "boolean"
                },
                "portForServiceId": {
                    "type": "boolean"
                },
                "urlPath": {
                    "$ref": "#/types/dynatrace:index/ServiceExternalWebServiceIdContributorsUrlPath:ServiceExternalWebServiceIdContributorsUrlPath"
                }
            },
            "type": "object",
            "required": [
                "detectAsWebRequestService"
            ]
        },
        "dynatrace:index/ServiceExternalWebServiceIdContributorsUrlPath:ServiceExternalWebServiceIdContributorsUrlPath": {
            "properties": {
                "enableIdContributor": {
                    "type": "boolean"
                },
                "serviceIdContributor": {
                    "$ref": "#/types/dynatrace:index/ServiceExternalWebServiceIdContributorsUrlPathServiceIdContributor:ServiceExternalWebServiceIdContributorsUrlPathServiceIdContributor"
                }
            },
            "type": "object",
            "required": [
                "enableIdContributor"
            ]
        },
        "dynatrace:index/ServiceExternalWebServiceIdContributorsUrlPathServiceIdContributor:ServiceExternalWebServiceIdContributorsUrlPathServiceIdContributor": {
            "properties": {
                "contributionType": {
                    "type": "string"
                },
                "transformations": {
                    "$ref": "#/types/dynatrace:index/ServiceExternalWebServiceIdContributorsUrlPathServiceIdContributorTransformations:ServiceExternalWebServiceIdContributorsUrlPathServiceIdContributorTransformations"
                },
                "valueOverride": {
                    "$ref": "#/types/dynatrace:index/ServiceExternalWebServiceIdContributorsUrlPathServiceIdContributorValueOverride:ServiceExternalWebServiceIdContributorsUrlPathServiceIdContributorValueOverride"
                }
            },
            "type": "object",
            "required": [
                "contributionType"
            ]
        },
        "dynatrace:index/ServiceExternalWebServiceIdContributorsUrlPathServiceIdContributorTransformations:ServiceExternalWebServiceIdContributorsUrlPathServiceIdContributorTransformations": {
            "properties": {
                "transformations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ServiceExternalWebServiceIdContributorsUrlPathServiceIdContributorTransformationsTransformation:ServiceExternalWebServiceIdContributorsUrlPathServiceIdContributorTransformationsTransformation"
                    }
                }
            },
            "type": "object",
            "required": [
                "transformations"
            ]
        },
        "dynatrace:index/ServiceExternalWebServiceIdContributorsUrlPathServiceIdContributorTransformationsTransformation:ServiceExternalWebServiceIdContributorsUrlPathServiceIdContributorTransformationsTransformation": {
            "properties": {
                "includeHexNumbers": {
                    "type": "boolean"
                },
                "minDigitCount": {
                    "type": "integer"
                },
                "prefix": {
                    "type": "string"
                },
                "replacementValue": {
                    "type": "string"
                },
                "segmentCount": {
                    "type": "integer"
                },
                "selectIndex": {
                    "type": "integer"
                },
                "splitDelimiter": {
                    "type": "string"
                },
                "suffix": {
                    "type": "string"
                },
                "takeFromEnd": {
                    "type": "boolean"
                },
                "transformationType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "transformationType"
            ]
        },
        "dynatrace:index/ServiceExternalWebServiceIdContributorsUrlPathServiceIdContributorValueOverride:ServiceExternalWebServiceIdContributorsUrlPathServiceIdContributorValueOverride": {
            "properties": {
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "value"
            ]
        },
        "dynatrace:index/ServiceFailureExceptionRules:ServiceFailureExceptionRules": {
            "properties": {
                "customErrorRules": {
                    "$ref": "#/types/dynatrace:index/ServiceFailureExceptionRulesCustomErrorRules:ServiceFailureExceptionRulesCustomErrorRules"
                },
                "customHandledExceptions": {
                    "$ref": "#/types/dynatrace:index/ServiceFailureExceptionRulesCustomHandledExceptions:ServiceFailureExceptionRulesCustomHandledExceptions"
                },
                "ignoreAllExceptions": {
                    "type": "boolean"
                },
                "ignoreSpanFailureDetection": {
                    "type": "boolean"
                },
                "ignoredExceptions": {
                    "$ref": "#/types/dynatrace:index/ServiceFailureExceptionRulesIgnoredExceptions:ServiceFailureExceptionRulesIgnoredExceptions"
                },
                "successForcingExceptions": {
                    "$ref": "#/types/dynatrace:index/ServiceFailureExceptionRulesSuccessForcingExceptions:ServiceFailureExceptionRulesSuccessForcingExceptions"
                }
            },
            "type": "object",
            "required": [
                "ignoreAllExceptions",
                "ignoreSpanFailureDetection"
            ]
        },
        "dynatrace:index/ServiceFailureExceptionRulesCustomErrorRules:ServiceFailureExceptionRulesCustomErrorRules": {
            "properties": {
                "customErrorRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ServiceFailureExceptionRulesCustomErrorRulesCustomErrorRule:ServiceFailureExceptionRulesCustomErrorRulesCustomErrorRule"
                    }
                }
            },
            "type": "object",
            "required": [
                "customErrorRules"
            ]
        },
        "dynatrace:index/ServiceFailureExceptionRulesCustomErrorRulesCustomErrorRule:ServiceFailureExceptionRulesCustomErrorRulesCustomErrorRule": {
            "properties": {
                "condition": {
                    "$ref": "#/types/dynatrace:index/ServiceFailureExceptionRulesCustomErrorRulesCustomErrorRuleCondition:ServiceFailureExceptionRulesCustomErrorRulesCustomErrorRuleCondition"
                },
                "requestAttribute": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "condition",
                "requestAttribute"
            ]
        },
        "dynatrace:index/ServiceFailureExceptionRulesCustomErrorRulesCustomErrorRuleCondition:ServiceFailureExceptionRulesCustomErrorRulesCustomErrorRuleCondition": {
            "properties": {
                "caseSensitive": {
                    "type": "boolean"
                },
                "compareOperationType": {
                    "type": "string"
                },
                "doubleValue": {
                    "type": "number"
                },
                "intValue": {
                    "type": "integer"
                },
                "textValue": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "compareOperationType"
            ]
        },
        "dynatrace:index/ServiceFailureExceptionRulesCustomHandledExceptions:ServiceFailureExceptionRulesCustomHandledExceptions": {
            "properties": {
                "customHandledExceptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ServiceFailureExceptionRulesCustomHandledExceptionsCustomHandledException:ServiceFailureExceptionRulesCustomHandledExceptionsCustomHandledException"
                    }
                }
            },
            "type": "object",
            "required": [
                "customHandledExceptions"
            ]
        },
        "dynatrace:index/ServiceFailureExceptionRulesCustomHandledExceptionsCustomHandledException:ServiceFailureExceptionRulesCustomHandledExceptionsCustomHandledException": {
            "properties": {
                "classPattern": {
                    "type": "string"
                },
                "messagePattern": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "dynatrace:index/ServiceFailureExceptionRulesIgnoredExceptions:ServiceFailureExceptionRulesIgnoredExceptions": {
            "properties": {
                "customHandledExceptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ServiceFailureExceptionRulesIgnoredExceptionsCustomHandledException:ServiceFailureExceptionRulesIgnoredExceptionsCustomHandledException"
                    }
                }
            },
            "type": "object",
            "required": [
                "customHandledExceptions"
            ]
        },
        "dynatrace:index/ServiceFailureExceptionRulesIgnoredExceptionsCustomHandledException:ServiceFailureExceptionRulesIgnoredExceptionsCustomHandledException": {
            "properties": {
                "classPattern": {
                    "type": "string"
                },
                "messagePattern": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "dynatrace:index/ServiceFailureExceptionRulesSuccessForcingExceptions:ServiceFailureExceptionRulesSuccessForcingExceptions": {
            "properties": {
                "customHandledExceptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ServiceFailureExceptionRulesSuccessForcingExceptionsCustomHandledException:ServiceFailureExceptionRulesSuccessForcingExceptionsCustomHandledException"
                    }
                }
            },
            "type": "object",
            "required": [
                "customHandledExceptions"
            ]
        },
        "dynatrace:index/ServiceFailureExceptionRulesSuccessForcingExceptionsCustomHandledException:ServiceFailureExceptionRulesSuccessForcingExceptionsCustomHandledException": {
            "properties": {
                "classPattern": {
                    "type": "string"
                },
                "messagePattern": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "dynatrace:index/ServiceFullWebRequestConditions:ServiceFullWebRequestConditions": {
            "properties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ServiceFullWebRequestConditionsCondition:ServiceFullWebRequestConditionsCondition"
                    }
                }
            },
            "type": "object",
            "required": [
                "conditions"
            ]
        },
        "dynatrace:index/ServiceFullWebRequestConditionsCondition:ServiceFullWebRequestConditionsCondition": {
            "properties": {
                "attribute": {
                    "type": "string"
                },
                "compareOperationType": {
                    "type": "string"
                },
                "frameworks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "ignoreCase": {
                    "type": "boolean"
                },
                "intValue": {
                    "type": "integer"
                },
                "intValues": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "ipRangeFrom": {
                    "type": "string"
                },
                "ipRangeTo": {
                    "type": "string"
                },
                "tagValues": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "textValues": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "attribute",
                "compareOperationType"
            ]
        },
        "dynatrace:index/ServiceFullWebRequestIdContributors:ServiceFullWebRequestIdContributors": {
            "properties": {
                "applicationId": {
                    "$ref": "#/types/dynatrace:index/ServiceFullWebRequestIdContributorsApplicationId:ServiceFullWebRequestIdContributorsApplicationId"
                },
                "contextRoot": {
                    "$ref": "#/types/dynatrace:index/ServiceFullWebRequestIdContributorsContextRoot:ServiceFullWebRequestIdContributorsContextRoot"
                },
                "serverName": {
                    "$ref": "#/types/dynatrace:index/ServiceFullWebRequestIdContributorsServerName:ServiceFullWebRequestIdContributorsServerName"
                }
            },
            "type": "object",
            "required": [
                "applicationId",
                "contextRoot",
                "serverName"
            ]
        },
        "dynatrace:index/ServiceFullWebRequestIdContributorsApplicationId:ServiceFullWebRequestIdContributorsApplicationId": {
            "properties": {
                "enableIdContributor": {
                    "type": "boolean"
                },
                "serviceIdContributor": {
                    "$ref": "#/types/dynatrace:index/ServiceFullWebRequestIdContributorsApplicationIdServiceIdContributor:ServiceFullWebRequestIdContributorsApplicationIdServiceIdContributor"
                }
            },
            "type": "object",
            "required": [
                "enableIdContributor"
            ]
        },
        "dynatrace:index/ServiceFullWebRequestIdContributorsApplicationIdServiceIdContributor:ServiceFullWebRequestIdContributorsApplicationIdServiceIdContributor": {
            "properties": {
                "contributionType": {
                    "type": "string"
                },
                "transformations": {
                    "$ref": "#/types/dynatrace:index/ServiceFullWebRequestIdContributorsApplicationIdServiceIdContributorTransformations:ServiceFullWebRequestIdContributorsApplicationIdServiceIdContributorTransformations"
                },
                "valueOverride": {
                    "$ref": "#/types/dynatrace:index/ServiceFullWebRequestIdContributorsApplicationIdServiceIdContributorValueOverride:ServiceFullWebRequestIdContributorsApplicationIdServiceIdContributorValueOverride"
                }
            },
            "type": "object",
            "required": [
                "contributionType"
            ]
        },
        "dynatrace:index/ServiceFullWebRequestIdContributorsApplicationIdServiceIdContributorTransformations:ServiceFullWebRequestIdContributorsApplicationIdServiceIdContributorTransformations": {
            "properties": {
                "transformations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ServiceFullWebRequestIdContributorsApplicationIdServiceIdContributorTransformationsTransformation:ServiceFullWebRequestIdContributorsApplicationIdServiceIdContributorTransformationsTransformation"
                    }
                }
            },
            "type": "object",
            "required": [
                "transformations"
            ]
        },
        "dynatrace:index/ServiceFullWebRequestIdContributorsApplicationIdServiceIdContributorTransformationsTransformation:ServiceFullWebRequestIdContributorsApplicationIdServiceIdContributorTransformationsTransformation": {
            "properties": {
                "includeHexNumbers": {
                    "type": "boolean"
                },
                "minDigitCount": {
                    "type": "integer"
                },
                "prefix": {
                    "type": "string"
                },
                "replacementValue": {
                    "type": "string"
                },
                "segmentCount": {
                    "type": "integer"
                },
                "selectIndex": {
                    "type": "integer"
                },
                "splitDelimiter": {
                    "type": "string"
                },
                "suffix": {
                    "type": "string"
                },
                "takeFromEnd": {
                    "type": "boolean"
                },
                "transformationType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "transformationType"
            ]
        },
        "dynatrace:index/ServiceFullWebRequestIdContributorsApplicationIdServiceIdContributorValueOverride:ServiceFullWebRequestIdContributorsApplicationIdServiceIdContributorValueOverride": {
            "properties": {
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "value"
            ]
        },
        "dynatrace:index/ServiceFullWebRequestIdContributorsContextRoot:ServiceFullWebRequestIdContributorsContextRoot": {
            "properties": {
                "enableIdContributor": {
                    "type": "boolean"
                },
                "serviceIdContributor": {
                    "$ref": "#/types/dynatrace:index/ServiceFullWebRequestIdContributorsContextRootServiceIdContributor:ServiceFullWebRequestIdContributorsContextRootServiceIdContributor"
                }
            },
            "type": "object",
            "required": [
                "enableIdContributor"
            ]
        },
        "dynatrace:index/ServiceFullWebRequestIdContributorsContextRootServiceIdContributor:ServiceFullWebRequestIdContributorsContextRootServiceIdContributor": {
            "properties": {
                "contributionType": {
                    "type": "string"
                },
                "segmentCount": {
                    "type": "integer"
                },
                "transformations": {
                    "$ref": "#/types/dynatrace:index/ServiceFullWebRequestIdContributorsContextRootServiceIdContributorTransformations:ServiceFullWebRequestIdContributorsContextRootServiceIdContributorTransformations"
                },
                "valueOverride": {
                    "$ref": "#/types/dynatrace:index/ServiceFullWebRequestIdContributorsContextRootServiceIdContributorValueOverride:ServiceFullWebRequestIdContributorsContextRootServiceIdContributorValueOverride"
                }
            },
            "type": "object",
            "required": [
                "contributionType"
            ]
        },
        "dynatrace:index/ServiceFullWebRequestIdContributorsContextRootServiceIdContributorTransformations:ServiceFullWebRequestIdContributorsContextRootServiceIdContributorTransformations": {
            "properties": {
                "transformations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ServiceFullWebRequestIdContributorsContextRootServiceIdContributorTransformationsTransformation:ServiceFullWebRequestIdContributorsContextRootServiceIdContributorTransformationsTransformation"
                    }
                }
            },
            "type": "object",
            "required": [
                "transformations"
            ]
        },
        "dynatrace:index/ServiceFullWebRequestIdContributorsContextRootServiceIdContributorTransformationsTransformation:ServiceFullWebRequestIdContributorsContextRootServiceIdContributorTransformationsTransformation": {
            "properties": {
                "includeHexNumbers": {
                    "type": "boolean"
                },
                "minDigitCount": {
                    "type": "integer"
                },
                "prefix": {
                    "type": "string"
                },
                "replacementValue": {
                    "type": "string"
                },
                "suffix": {
                    "type": "string"
                },
                "transformationType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "transformationType"
            ]
        },
        "dynatrace:index/ServiceFullWebRequestIdContributorsContextRootServiceIdContributorValueOverride:ServiceFullWebRequestIdContributorsContextRootServiceIdContributorValueOverride": {
            "properties": {
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "value"
            ]
        },
        "dynatrace:index/ServiceFullWebRequestIdContributorsServerName:ServiceFullWebRequestIdContributorsServerName": {
            "properties": {
                "enableIdContributor": {
                    "type": "boolean"
                },
                "serviceIdContributor": {
                    "$ref": "#/types/dynatrace:index/ServiceFullWebRequestIdContributorsServerNameServiceIdContributor:ServiceFullWebRequestIdContributorsServerNameServiceIdContributor"
                }
            },
            "type": "object",
            "required": [
                "enableIdContributor"
            ]
        },
        "dynatrace:index/ServiceFullWebRequestIdContributorsServerNameServiceIdContributor:ServiceFullWebRequestIdContributorsServerNameServiceIdContributor": {
            "properties": {
                "contributionType": {
                    "type": "string"
                },
                "transformations": {
                    "$ref": "#/types/dynatrace:index/ServiceFullWebRequestIdContributorsServerNameServiceIdContributorTransformations:ServiceFullWebRequestIdContributorsServerNameServiceIdContributorTransformations"
                },
                "valueOverride": {
                    "$ref": "#/types/dynatrace:index/ServiceFullWebRequestIdContributorsServerNameServiceIdContributorValueOverride:ServiceFullWebRequestIdContributorsServerNameServiceIdContributorValueOverride"
                }
            },
            "type": "object",
            "required": [
                "contributionType"
            ]
        },
        "dynatrace:index/ServiceFullWebRequestIdContributorsServerNameServiceIdContributorTransformations:ServiceFullWebRequestIdContributorsServerNameServiceIdContributorTransformations": {
            "properties": {
                "transformations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ServiceFullWebRequestIdContributorsServerNameServiceIdContributorTransformationsTransformation:ServiceFullWebRequestIdContributorsServerNameServiceIdContributorTransformationsTransformation"
                    }
                }
            },
            "type": "object",
            "required": [
                "transformations"
            ]
        },
        "dynatrace:index/ServiceFullWebRequestIdContributorsServerNameServiceIdContributorTransformationsTransformation:ServiceFullWebRequestIdContributorsServerNameServiceIdContributorTransformationsTransformation": {
            "properties": {
                "includeHexNumbers": {
                    "type": "boolean"
                },
                "minDigitCount": {
                    "type": "integer"
                },
                "prefix": {
                    "type": "string"
                },
                "replacementValue": {
                    "type": "string"
                },
                "segmentCount": {
                    "type": "integer"
                },
                "selectIndex": {
                    "type": "integer"
                },
                "splitDelimiter": {
                    "type": "string"
                },
                "suffix": {
                    "type": "string"
                },
                "takeFromEnd": {
                    "type": "boolean"
                },
                "transformationType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "transformationType"
            ]
        },
        "dynatrace:index/ServiceFullWebRequestIdContributorsServerNameServiceIdContributorValueOverride:ServiceFullWebRequestIdContributorsServerNameServiceIdContributorValueOverride": {
            "properties": {
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "value"
            ]
        },
        "dynatrace:index/ServiceFullWebServiceConditions:ServiceFullWebServiceConditions": {
            "properties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ServiceFullWebServiceConditionsCondition:ServiceFullWebServiceConditionsCondition"
                    }
                }
            },
            "type": "object",
            "required": [
                "conditions"
            ]
        },
        "dynatrace:index/ServiceFullWebServiceConditionsCondition:ServiceFullWebServiceConditionsCondition": {
            "properties": {
                "attribute": {
                    "type": "string"
                },
                "compareOperationType": {
                    "type": "string"
                },
                "frameworks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "ignoreCase": {
                    "type": "boolean"
                },
                "intValue": {
                    "type": "integer"
                },
                "intValues": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "ipRangeFrom": {
                    "type": "string"
                },
                "ipRangeTo": {
                    "type": "string"
                },
                "tagValues": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "textValues": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "attribute",
                "compareOperationType"
            ]
        },
        "dynatrace:index/ServiceFullWebServiceIdContributors:ServiceFullWebServiceIdContributors": {
            "properties": {
                "applicationId": {
                    "$ref": "#/types/dynatrace:index/ServiceFullWebServiceIdContributorsApplicationId:ServiceFullWebServiceIdContributorsApplicationId"
                },
                "contextRoot": {
                    "$ref": "#/types/dynatrace:index/ServiceFullWebServiceIdContributorsContextRoot:ServiceFullWebServiceIdContributorsContextRoot"
                },
                "detectAsWebRequestService": {
                    "type": "boolean"
                },
                "serverName": {
                    "$ref": "#/types/dynatrace:index/ServiceFullWebServiceIdContributorsServerName:ServiceFullWebServiceIdContributorsServerName"
                },
                "webServiceName": {
                    "$ref": "#/types/dynatrace:index/ServiceFullWebServiceIdContributorsWebServiceName:ServiceFullWebServiceIdContributorsWebServiceName"
                },
                "webServiceNamespace": {
                    "$ref": "#/types/dynatrace:index/ServiceFullWebServiceIdContributorsWebServiceNamespace:ServiceFullWebServiceIdContributorsWebServiceNamespace"
                }
            },
            "type": "object",
            "required": [
                "detectAsWebRequestService"
            ]
        },
        "dynatrace:index/ServiceFullWebServiceIdContributorsApplicationId:ServiceFullWebServiceIdContributorsApplicationId": {
            "properties": {
                "enableIdContributor": {
                    "type": "boolean"
                },
                "serviceIdContributor": {
                    "$ref": "#/types/dynatrace:index/ServiceFullWebServiceIdContributorsApplicationIdServiceIdContributor:ServiceFullWebServiceIdContributorsApplicationIdServiceIdContributor"
                }
            },
            "type": "object",
            "required": [
                "enableIdContributor"
            ]
        },
        "dynatrace:index/ServiceFullWebServiceIdContributorsApplicationIdServiceIdContributor:ServiceFullWebServiceIdContributorsApplicationIdServiceIdContributor": {
            "properties": {
                "contributionType": {
                    "type": "string"
                },
                "transformations": {
                    "$ref": "#/types/dynatrace:index/ServiceFullWebServiceIdContributorsApplicationIdServiceIdContributorTransformations:ServiceFullWebServiceIdContributorsApplicationIdServiceIdContributorTransformations"
                },
                "valueOverride": {
                    "$ref": "#/types/dynatrace:index/ServiceFullWebServiceIdContributorsApplicationIdServiceIdContributorValueOverride:ServiceFullWebServiceIdContributorsApplicationIdServiceIdContributorValueOverride"
                }
            },
            "type": "object",
            "required": [
                "contributionType"
            ]
        },
        "dynatrace:index/ServiceFullWebServiceIdContributorsApplicationIdServiceIdContributorTransformations:ServiceFullWebServiceIdContributorsApplicationIdServiceIdContributorTransformations": {
            "properties": {
                "transformations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ServiceFullWebServiceIdContributorsApplicationIdServiceIdContributorTransformationsTransformation:ServiceFullWebServiceIdContributorsApplicationIdServiceIdContributorTransformationsTransformation"
                    }
                }
            },
            "type": "object",
            "required": [
                "transformations"
            ]
        },
        "dynatrace:index/ServiceFullWebServiceIdContributorsApplicationIdServiceIdContributorTransformationsTransformation:ServiceFullWebServiceIdContributorsApplicationIdServiceIdContributorTransformationsTransformation": {
            "properties": {
                "includeHexNumbers": {
                    "type": "boolean"
                },
                "minDigitCount": {
                    "type": "integer"
                },
                "prefix": {
                    "type": "string"
                },
                "replacementValue": {
                    "type": "string"
                },
                "segmentCount": {
                    "type": "integer"
                },
                "selectIndex": {
                    "type": "integer"
                },
                "splitDelimiter": {
                    "type": "string"
                },
                "suffix": {
                    "type": "string"
                },
                "takeFromEnd": {
                    "type": "boolean"
                },
                "transformationType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "transformationType"
            ]
        },
        "dynatrace:index/ServiceFullWebServiceIdContributorsApplicationIdServiceIdContributorValueOverride:ServiceFullWebServiceIdContributorsApplicationIdServiceIdContributorValueOverride": {
            "properties": {
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "value"
            ]
        },
        "dynatrace:index/ServiceFullWebServiceIdContributorsContextRoot:ServiceFullWebServiceIdContributorsContextRoot": {
            "properties": {
                "enableIdContributor": {
                    "type": "boolean"
                },
                "serviceIdContributor": {
                    "$ref": "#/types/dynatrace:index/ServiceFullWebServiceIdContributorsContextRootServiceIdContributor:ServiceFullWebServiceIdContributorsContextRootServiceIdContributor"
                }
            },
            "type": "object",
            "required": [
                "enableIdContributor"
            ]
        },
        "dynatrace:index/ServiceFullWebServiceIdContributorsContextRootServiceIdContributor:ServiceFullWebServiceIdContributorsContextRootServiceIdContributor": {
            "properties": {
                "contributionType": {
                    "type": "string"
                },
                "segmentCount": {
                    "type": "integer"
                },
                "transformations": {
                    "$ref": "#/types/dynatrace:index/ServiceFullWebServiceIdContributorsContextRootServiceIdContributorTransformations:ServiceFullWebServiceIdContributorsContextRootServiceIdContributorTransformations"
                },
                "valueOverride": {
                    "$ref": "#/types/dynatrace:index/ServiceFullWebServiceIdContributorsContextRootServiceIdContributorValueOverride:ServiceFullWebServiceIdContributorsContextRootServiceIdContributorValueOverride"
                }
            },
            "type": "object",
            "required": [
                "contributionType"
            ]
        },
        "dynatrace:index/ServiceFullWebServiceIdContributorsContextRootServiceIdContributorTransformations:ServiceFullWebServiceIdContributorsContextRootServiceIdContributorTransformations": {
            "properties": {
                "transformations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ServiceFullWebServiceIdContributorsContextRootServiceIdContributorTransformationsTransformation:ServiceFullWebServiceIdContributorsContextRootServiceIdContributorTransformationsTransformation"
                    }
                }
            },
            "type": "object",
            "required": [
                "transformations"
            ]
        },
        "dynatrace:index/ServiceFullWebServiceIdContributorsContextRootServiceIdContributorTransformationsTransformation:ServiceFullWebServiceIdContributorsContextRootServiceIdContributorTransformationsTransformation": {
            "properties": {
                "includeHexNumbers": {
                    "type": "boolean"
                },
                "minDigitCount": {
                    "type": "integer"
                },
                "prefix": {
                    "type": "string"
                },
                "replacementValue": {
                    "type": "string"
                },
                "suffix": {
                    "type": "string"
                },
                "transformationType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "transformationType"
            ]
        },
        "dynatrace:index/ServiceFullWebServiceIdContributorsContextRootServiceIdContributorValueOverride:ServiceFullWebServiceIdContributorsContextRootServiceIdContributorValueOverride": {
            "properties": {
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "value"
            ]
        },
        "dynatrace:index/ServiceFullWebServiceIdContributorsServerName:ServiceFullWebServiceIdContributorsServerName": {
            "properties": {
                "enableIdContributor": {
                    "type": "boolean"
                },
                "serviceIdContributor": {
                    "$ref": "#/types/dynatrace:index/ServiceFullWebServiceIdContributorsServerNameServiceIdContributor:ServiceFullWebServiceIdContributorsServerNameServiceIdContributor"
                }
            },
            "type": "object",
            "required": [
                "enableIdContributor"
            ]
        },
        "dynatrace:index/ServiceFullWebServiceIdContributorsServerNameServiceIdContributor:ServiceFullWebServiceIdContributorsServerNameServiceIdContributor": {
            "properties": {
                "contributionType": {
                    "type": "string"
                },
                "transformations": {
                    "$ref": "#/types/dynatrace:index/ServiceFullWebServiceIdContributorsServerNameServiceIdContributorTransformations:ServiceFullWebServiceIdContributorsServerNameServiceIdContributorTransformations"
                },
                "valueOverride": {
                    "$ref": "#/types/dynatrace:index/ServiceFullWebServiceIdContributorsServerNameServiceIdContributorValueOverride:ServiceFullWebServiceIdContributorsServerNameServiceIdContributorValueOverride"
                }
            },
            "type": "object",
            "required": [
                "contributionType"
            ]
        },
        "dynatrace:index/ServiceFullWebServiceIdContributorsServerNameServiceIdContributorTransformations:ServiceFullWebServiceIdContributorsServerNameServiceIdContributorTransformations": {
            "properties": {
                "transformations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ServiceFullWebServiceIdContributorsServerNameServiceIdContributorTransformationsTransformation:ServiceFullWebServiceIdContributorsServerNameServiceIdContributorTransformationsTransformation"
                    }
                }
            },
            "type": "object",
            "required": [
                "transformations"
            ]
        },
        "dynatrace:index/ServiceFullWebServiceIdContributorsServerNameServiceIdContributorTransformationsTransformation:ServiceFullWebServiceIdContributorsServerNameServiceIdContributorTransformationsTransformation": {
            "properties": {
                "includeHexNumbers": {
                    "type": "boolean"
                },
                "minDigitCount": {
                    "type": "integer"
                },
                "prefix": {
                    "type": "string"
                },
                "replacementValue": {
                    "type": "string"
                },
                "segmentCount": {
                    "type": "integer"
                },
                "selectIndex": {
                    "type": "integer"
                },
                "splitDelimiter": {
                    "type": "string"
                },
                "suffix": {
                    "type": "string"
                },
                "takeFromEnd": {
                    "type": "boolean"
                },
                "transformationType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "transformationType"
            ]
        },
        "dynatrace:index/ServiceFullWebServiceIdContributorsServerNameServiceIdContributorValueOverride:ServiceFullWebServiceIdContributorsServerNameServiceIdContributorValueOverride": {
            "properties": {
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "value"
            ]
        },
        "dynatrace:index/ServiceFullWebServiceIdContributorsWebServiceName:ServiceFullWebServiceIdContributorsWebServiceName": {
            "properties": {
                "enableIdContributor": {
                    "type": "boolean"
                },
                "serviceIdContributor": {
                    "$ref": "#/types/dynatrace:index/ServiceFullWebServiceIdContributorsWebServiceNameServiceIdContributor:ServiceFullWebServiceIdContributorsWebServiceNameServiceIdContributor"
                }
            },
            "type": "object",
            "required": [
                "enableIdContributor"
            ]
        },
        "dynatrace:index/ServiceFullWebServiceIdContributorsWebServiceNameServiceIdContributor:ServiceFullWebServiceIdContributorsWebServiceNameServiceIdContributor": {
            "properties": {
                "contributionType": {
                    "type": "string"
                },
                "transformations": {
                    "$ref": "#/types/dynatrace:index/ServiceFullWebServiceIdContributorsWebServiceNameServiceIdContributorTransformations:ServiceFullWebServiceIdContributorsWebServiceNameServiceIdContributorTransformations"
                },
                "valueOverride": {
                    "$ref": "#/types/dynatrace:index/ServiceFullWebServiceIdContributorsWebServiceNameServiceIdContributorValueOverride:ServiceFullWebServiceIdContributorsWebServiceNameServiceIdContributorValueOverride"
                }
            },
            "type": "object",
            "required": [
                "contributionType"
            ]
        },
        "dynatrace:index/ServiceFullWebServiceIdContributorsWebServiceNameServiceIdContributorTransformations:ServiceFullWebServiceIdContributorsWebServiceNameServiceIdContributorTransformations": {
            "properties": {
                "transformations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ServiceFullWebServiceIdContributorsWebServiceNameServiceIdContributorTransformationsTransformation:ServiceFullWebServiceIdContributorsWebServiceNameServiceIdContributorTransformationsTransformation"
                    }
                }
            },
            "type": "object",
            "required": [
                "transformations"
            ]
        },
        "dynatrace:index/ServiceFullWebServiceIdContributorsWebServiceNameServiceIdContributorTransformationsTransformation:ServiceFullWebServiceIdContributorsWebServiceNameServiceIdContributorTransformationsTransformation": {
            "properties": {
                "includeHexNumbers": {
                    "type": "boolean"
                },
                "minDigitCount": {
                    "type": "integer"
                },
                "prefix": {
                    "type": "string"
                },
                "replacementValue": {
                    "type": "string"
                },
                "segmentCount": {
                    "type": "integer"
                },
                "selectIndex": {
                    "type": "integer"
                },
                "splitDelimiter": {
                    "type": "string"
                },
                "suffix": {
                    "type": "string"
                },
                "takeFromEnd": {
                    "type": "boolean"
                },
                "transformationType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "transformationType"
            ]
        },
        "dynatrace:index/ServiceFullWebServiceIdContributorsWebServiceNameServiceIdContributorValueOverride:ServiceFullWebServiceIdContributorsWebServiceNameServiceIdContributorValueOverride": {
            "properties": {
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "value"
            ]
        },
        "dynatrace:index/ServiceFullWebServiceIdContributorsWebServiceNamespace:ServiceFullWebServiceIdContributorsWebServiceNamespace": {
            "properties": {
                "enableIdContributor": {
                    "type": "boolean"
                },
                "serviceIdContributor": {
                    "$ref": "#/types/dynatrace:index/ServiceFullWebServiceIdContributorsWebServiceNamespaceServiceIdContributor:ServiceFullWebServiceIdContributorsWebServiceNamespaceServiceIdContributor"
                }
            },
            "type": "object",
            "required": [
                "enableIdContributor"
            ]
        },
        "dynatrace:index/ServiceFullWebServiceIdContributorsWebServiceNamespaceServiceIdContributor:ServiceFullWebServiceIdContributorsWebServiceNamespaceServiceIdContributor": {
            "properties": {
                "contributionType": {
                    "type": "string"
                },
                "transformations": {
                    "$ref": "#/types/dynatrace:index/ServiceFullWebServiceIdContributorsWebServiceNamespaceServiceIdContributorTransformations:ServiceFullWebServiceIdContributorsWebServiceNamespaceServiceIdContributorTransformations"
                },
                "valueOverride": {
                    "$ref": "#/types/dynatrace:index/ServiceFullWebServiceIdContributorsWebServiceNamespaceServiceIdContributorValueOverride:ServiceFullWebServiceIdContributorsWebServiceNamespaceServiceIdContributorValueOverride"
                }
            },
            "type": "object",
            "required": [
                "contributionType"
            ]
        },
        "dynatrace:index/ServiceFullWebServiceIdContributorsWebServiceNamespaceServiceIdContributorTransformations:ServiceFullWebServiceIdContributorsWebServiceNamespaceServiceIdContributorTransformations": {
            "properties": {
                "transformations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ServiceFullWebServiceIdContributorsWebServiceNamespaceServiceIdContributorTransformationsTransformation:ServiceFullWebServiceIdContributorsWebServiceNamespaceServiceIdContributorTransformationsTransformation"
                    }
                }
            },
            "type": "object",
            "required": [
                "transformations"
            ]
        },
        "dynatrace:index/ServiceFullWebServiceIdContributorsWebServiceNamespaceServiceIdContributorTransformationsTransformation:ServiceFullWebServiceIdContributorsWebServiceNamespaceServiceIdContributorTransformationsTransformation": {
            "properties": {
                "includeHexNumbers": {
                    "type": "boolean"
                },
                "minDigitCount": {
                    "type": "integer"
                },
                "prefix": {
                    "type": "string"
                },
                "replacementValue": {
                    "type": "string"
                },
                "segmentCount": {
                    "type": "integer"
                },
                "selectIndex": {
                    "type": "integer"
                },
                "splitDelimiter": {
                    "type": "string"
                },
                "suffix": {
                    "type": "string"
                },
                "takeFromEnd": {
                    "type": "boolean"
                },
                "transformationType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "transformationType"
            ]
        },
        "dynatrace:index/ServiceFullWebServiceIdContributorsWebServiceNamespaceServiceIdContributorValueOverride:ServiceFullWebServiceIdContributorsWebServiceNamespaceServiceIdContributorValueOverride": {
            "properties": {
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "value"
            ]
        },
        "dynatrace:index/ServiceHttpFailureBrokenLinks:ServiceHttpFailureBrokenLinks": {
            "properties": {
                "brokenLinkDomains": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "http404NotFoundFailures": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "http404NotFoundFailures"
            ]
        },
        "dynatrace:index/ServiceHttpFailureHttpResponseCodes:ServiceHttpFailureHttpResponseCodes": {
            "properties": {
                "clientSideErrors": {
                    "type": "string"
                },
                "failOnMissingResponseCodeClientSide": {
                    "type": "boolean"
                },
                "failOnMissingResponseCodeServerSide": {
                    "type": "boolean"
                },
                "serverSideErrors": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "clientSideErrors",
                "failOnMissingResponseCodeClientSide",
                "failOnMissingResponseCodeServerSide",
                "serverSideErrors"
            ]
        },
        "dynatrace:index/ServiceNamingCondition:ServiceNamingCondition": {
            "properties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ServiceNamingConditionCondition:ServiceNamingConditionCondition"
                    }
                }
            },
            "type": "object"
        },
        "dynatrace:index/ServiceNamingConditionCondition:ServiceNamingConditionCondition": {
            "properties": {
                "applicationTypeComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ServiceNamingConditionConditionApplicationTypeComparison:ServiceNamingConditionConditionApplicationTypeComparison"
                    },
                    "deprecationMessage": "You should use 'application_type' instead of 'application_type_comparison'. This attribute still exists for backwards compatibility."
                },
                "applicationTypes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ServiceNamingConditionConditionApplicationType:ServiceNamingConditionConditionApplicationType"
                    }
                },
                "azureComputeModeComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ServiceNamingConditionConditionAzureComputeModeComparison:ServiceNamingConditionConditionAzureComputeModeComparison"
                    }
                },
                "azureComputeModes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ServiceNamingConditionConditionAzureComputeMode:ServiceNamingConditionConditionAzureComputeMode"
                    },
                    "deprecationMessage": "You should use 'azure_compute_mode' instead of 'azure_compute_mode_comparison'. This attribute still exists for backwards compatibility."
                },
                "azureSkuComparisions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ServiceNamingConditionConditionAzureSkuComparision:ServiceNamingConditionConditionAzureSkuComparision"
                    },
                    "deprecationMessage": "You should use 'azure_sku' instead of 'azure_sku_comparision'. This attribute still exists for backwards compatibility."
                },
                "azureSkus": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ServiceNamingConditionConditionAzureSkus:ServiceNamingConditionConditionAzureSkus"
                    }
                },
                "baseComparisonBasics": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ServiceNamingConditionConditionBaseComparisonBasic:ServiceNamingConditionConditionBaseComparisonBasic"
                    },
                    "deprecationMessage": "You should use 'comparison' instead of 'base_comparison_basic'. This attribute still exists for backwards compatibility."
                },
                "baseConditionKeys": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ServiceNamingConditionConditionBaseConditionKey:ServiceNamingConditionConditionBaseConditionKey"
                    },
                    "deprecationMessage": "'base_condition_key' is deprecated. You should use 'key'"
                },
                "bitnessComparisions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ServiceNamingConditionConditionBitnessComparision:ServiceNamingConditionConditionBitnessComparision"
                    },
                    "deprecationMessage": "You should use 'bitness' instead of 'bitness_comparision'. This attribute still exists for backwards compatibility."
                },
                "bitnesses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ServiceNamingConditionConditionBitness:ServiceNamingConditionConditionBitness"
                    }
                },
                "cloudTypeComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ServiceNamingConditionConditionCloudTypeComparison:ServiceNamingConditionConditionCloudTypeComparison"
                    },
                    "deprecationMessage": "You should use 'cloud_type' instead of 'cloud_type_comparison'. This attribute still exists for backwards compatibility."
                },
                "cloudTypes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ServiceNamingConditionConditionCloudType:ServiceNamingConditionConditionCloudType"
                    }
                },
                "comparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ServiceNamingConditionConditionComparison:ServiceNamingConditionConditionComparison"
                    }
                },
                "customApplicationTypeComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ServiceNamingConditionConditionCustomApplicationTypeComparison:ServiceNamingConditionConditionCustomApplicationTypeComparison"
                    },
                    "deprecationMessage": "You should use 'custom_application_type' instead of 'custom_application_type_comparison'. This attribute still exists for backwards compatibility."
                },
                "customApplicationTypes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ServiceNamingConditionConditionCustomApplicationType:ServiceNamingConditionConditionCustomApplicationType"
                    }
                },
                "customHostMetadataConditionKeys": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ServiceNamingConditionConditionCustomHostMetadataConditionKey:ServiceNamingConditionConditionCustomHostMetadataConditionKey"
                    },
                    "deprecationMessage": "'custom_host_metadata_condition_key' is deprecated. You should use 'custom_host_metadata'"
                },
                "customHostMetadatas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ServiceNamingConditionConditionCustomHostMetadata:ServiceNamingConditionConditionCustomHostMetadata"
                    }
                },
                "customProcessMetadataConditionKeys": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ServiceNamingConditionConditionCustomProcessMetadataConditionKey:ServiceNamingConditionConditionCustomProcessMetadataConditionKey"
                    },
                    "deprecationMessage": "'custom_process_metadata_condition_key' is deprecated. You should use 'custom_process_metadata'"
                },
                "customProcessMetadatas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ServiceNamingConditionConditionCustomProcessMetadata:ServiceNamingConditionConditionCustomProcessMetadata"
                    }
                },
                "databaseTopologies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ServiceNamingConditionConditionDatabaseTopology:ServiceNamingConditionConditionDatabaseTopology"
                    }
                },
                "databaseTopologyComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ServiceNamingConditionConditionDatabaseTopologyComparison:ServiceNamingConditionConditionDatabaseTopologyComparison"
                    },
                    "deprecationMessage": "You should use 'database_topology' instead of 'database_topology_comparison'. This attribute still exists for backwards compatibility."
                },
                "dcrumDecoderComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ServiceNamingConditionConditionDcrumDecoderComparison:ServiceNamingConditionConditionDcrumDecoderComparison"
                    },
                    "deprecationMessage": "You should use 'dcrum_decoder' instead of 'dcrum_decoder_comparison'. This attribute still exists for backwards compatibility."
                },
                "dcrumDecoders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ServiceNamingConditionConditionDcrumDecoder:ServiceNamingConditionConditionDcrumDecoder"
                    }
                },
                "entities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ServiceNamingConditionConditionEntity:ServiceNamingConditionConditionEntity"
                    }
                },
                "entityIdComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ServiceNamingConditionConditionEntityIdComparison:ServiceNamingConditionConditionEntityIdComparison"
                    },
                    "deprecationMessage": "You should use 'entity' instead of 'entity_id_comparison'. This attribute still exists for backwards compatibility."
                },
                "hostTeches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ServiceNamingConditionConditionHostTech:ServiceNamingConditionConditionHostTech"
                    }
                },
                "hypervisorTypeComparisions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ServiceNamingConditionConditionHypervisorTypeComparision:ServiceNamingConditionConditionHypervisorTypeComparision"
                    },
                    "deprecationMessage": "`hypervisor_type_comparision` is deprecated. Use `hypervisor` instead"
                },
                "hypervisors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ServiceNamingConditionConditionHypervisor:ServiceNamingConditionConditionHypervisor"
                    }
                },
                "indexedNameComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ServiceNamingConditionConditionIndexedNameComparison:ServiceNamingConditionConditionIndexedNameComparison"
                    },
                    "deprecationMessage": "You should use 'indexed_name' instead of 'indexed_name_comparison'. This attribute still exists for backwards compatibility."
                },
                "indexedNames": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ServiceNamingConditionConditionIndexedName:ServiceNamingConditionConditionIndexedName"
                    }
                },
                "indexedStringComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ServiceNamingConditionConditionIndexedStringComparison:ServiceNamingConditionConditionIndexedStringComparison"
                    },
                    "deprecationMessage": "You should use 'indexed_string' instead of 'indexed_string_comparison'. This attribute still exists for backwards compatibility."
                },
                "indexedStrings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ServiceNamingConditionConditionIndexedString:ServiceNamingConditionConditionIndexedString"
                    }
                },
                "indexedTagComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ServiceNamingConditionConditionIndexedTagComparison:ServiceNamingConditionConditionIndexedTagComparison"
                    },
                    "deprecationMessage": "You should use 'indexed_tag' instead of 'indexed_tag_comparison'. This attribute still exists for backwards compatibility."
                },
                "indexedTags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ServiceNamingConditionConditionIndexedTag:ServiceNamingConditionConditionIndexedTag"
                    }
                },
                "integerComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ServiceNamingConditionConditionIntegerComparison:ServiceNamingConditionConditionIntegerComparison"
                    },
                    "deprecationMessage": "You should use 'integer' instead of 'integer_comparison'. This attribute still exists for backwards compatibility."
                },
                "integers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ServiceNamingConditionConditionInteger:ServiceNamingConditionConditionInteger"
                    }
                },
                "ipaddressComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ServiceNamingConditionConditionIpaddressComparison:ServiceNamingConditionConditionIpaddressComparison"
                    },
                    "deprecationMessage": "You should use 'ipaddress' instead of 'ipaddress_comparison'. This attribute still exists for backwards compatibility."
                },
                "ipaddresses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ServiceNamingConditionConditionIpaddress:ServiceNamingConditionConditionIpaddress"
                    }
                },
                "keys": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ServiceNamingConditionConditionKey:ServiceNamingConditionConditionKey"
                    }
                },
                "mobilePlatformComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ServiceNamingConditionConditionMobilePlatformComparison:ServiceNamingConditionConditionMobilePlatformComparison"
                    },
                    "deprecationMessage": "You should use 'mobile_platform' instead of 'mobile_platform_comparison'. This attribute still exists for backwards compatibility."
                },
                "mobilePlatforms": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ServiceNamingConditionConditionMobilePlatform:ServiceNamingConditionConditionMobilePlatform"
                    }
                },
                "osArches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ServiceNamingConditionConditionOsArch:ServiceNamingConditionConditionOsArch"
                    }
                },
                "osTypes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ServiceNamingConditionConditionOsType:ServiceNamingConditionConditionOsType"
                    }
                },
                "osarchitectureComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ServiceNamingConditionConditionOsarchitectureComparison:ServiceNamingConditionConditionOsarchitectureComparison"
                    },
                    "deprecationMessage": "You should use 'os_arch' instead of 'osarchitecture_comparison'. This attribute still exists for backwards compatibility."
                },
                "ostypeComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ServiceNamingConditionConditionOstypeComparison:ServiceNamingConditionConditionOstypeComparison"
                    },
                    "deprecationMessage": "You should use 'os_type' instead of 'ostype_comparison'. This attribute still exists for backwards compatibility."
                },
                "paasTypeComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ServiceNamingConditionConditionPaasTypeComparison:ServiceNamingConditionConditionPaasTypeComparison"
                    },
                    "deprecationMessage": "You should use 'paas_type' instead of 'paas_type_comparison'. This attribute still exists for backwards compatibility."
                },
                "paasTypes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ServiceNamingConditionConditionPaasType:ServiceNamingConditionConditionPaasType"
                    }
                },
                "processMetadataConditionKeys": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ServiceNamingConditionConditionProcessMetadataConditionKey:ServiceNamingConditionConditionProcessMetadataConditionKey"
                    },
                    "deprecationMessage": "'process_metadata_condition_key' is deprecated. You should use 'process_metadata'"
                },
                "processMetadatas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ServiceNamingConditionConditionProcessMetadata:ServiceNamingConditionConditionProcessMetadata"
                    }
                },
                "serviceTopologies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ServiceNamingConditionConditionServiceTopology:ServiceNamingConditionConditionServiceTopology"
                    }
                },
                "serviceTopologyComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ServiceNamingConditionConditionServiceTopologyComparison:ServiceNamingConditionConditionServiceTopologyComparison"
                    },
                    "deprecationMessage": "You should use 'service_topology' instead of 'service_topology_comparison'. This attribute still exists for backwards compatibility."
                },
                "serviceTypeComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ServiceNamingConditionConditionServiceTypeComparison:ServiceNamingConditionConditionServiceTypeComparison"
                    },
                    "deprecationMessage": "You should use 'service_type' instead of 'service_type_comparison'. This attribute still exists for backwards compatibility."
                },
                "serviceTypes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ServiceNamingConditionConditionServiceType:ServiceNamingConditionConditionServiceType"
                    }
                },
                "simpleHostTechComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ServiceNamingConditionConditionSimpleHostTechComparison:ServiceNamingConditionConditionSimpleHostTechComparison"
                    },
                    "deprecationMessage": "You should use 'host_tech' instead of 'simple_host_tech_comparison'. This attribute still exists for backwards compatibility."
                },
                "simpleTechComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ServiceNamingConditionConditionSimpleTechComparison:ServiceNamingConditionConditionSimpleTechComparison"
                    },
                    "deprecationMessage": "You should use 'tech' instead of 'simple_tech_comparison'. This attribute still exists for backwards compatibility."
                },
                "stringComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ServiceNamingConditionConditionStringComparison:ServiceNamingConditionConditionStringComparison"
                    },
                    "deprecationMessage": "You should use 'string' instead of 'string_comparison'. This attribute still exists for backwards compatibility."
                },
                "stringConditionKeys": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ServiceNamingConditionConditionStringConditionKey:ServiceNamingConditionConditionStringConditionKey"
                    },
                    "deprecationMessage": "'string_condition_key' is deprecated. You should use 'string_key'"
                },
                "stringKeys": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ServiceNamingConditionConditionStringKey:ServiceNamingConditionConditionStringKey"
                    }
                },
                "strings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ServiceNamingConditionConditionString:ServiceNamingConditionConditionString"
                    }
                },
                "syntheticEngineTypeComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ServiceNamingConditionConditionSyntheticEngineTypeComparison:ServiceNamingConditionConditionSyntheticEngineTypeComparison"
                    },
                    "deprecationMessage": "You should use 'synthetic_engine' instead of 'synthetic_engine_type_comparison'. This attribute still exists for backwards compatibility."
                },
                "syntheticEngines": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ServiceNamingConditionConditionSyntheticEngine:ServiceNamingConditionConditionSyntheticEngine"
                    }
                },
                "tagComparisons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ServiceNamingConditionConditionTagComparison:ServiceNamingConditionConditionTagComparison"
                    },
                    "deprecationMessage": "You should use 'tag' instead of 'tag_comparison'. This attribute still exists for backwards compatibility."
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ServiceNamingConditionConditionTag:ServiceNamingConditionConditionTag"
                    }
                },
                "teches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ServiceNamingConditionConditionTech:ServiceNamingConditionConditionTech"
                    }
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "dynatrace:index/ServiceNamingConditionConditionApplicationType:ServiceNamingConditionConditionApplicationType": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ServiceNamingConditionConditionApplicationTypeComparison:ServiceNamingConditionConditionApplicationTypeComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ServiceNamingConditionConditionAzureComputeMode:ServiceNamingConditionConditionAzureComputeMode": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ServiceNamingConditionConditionAzureComputeModeComparison:ServiceNamingConditionConditionAzureComputeModeComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ServiceNamingConditionConditionAzureSkuComparision:ServiceNamingConditionConditionAzureSkuComparision": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ServiceNamingConditionConditionAzureSkus:ServiceNamingConditionConditionAzureSkus": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ServiceNamingConditionConditionBaseComparisonBasic:ServiceNamingConditionConditionBaseComparisonBasic": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "type": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "dynatrace:index/ServiceNamingConditionConditionBaseConditionKey:ServiceNamingConditionConditionBaseConditionKey": {
            "properties": {
                "attribute": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "attribute"
            ]
        },
        "dynatrace:index/ServiceNamingConditionConditionBitness:ServiceNamingConditionConditionBitness": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ServiceNamingConditionConditionBitnessComparision:ServiceNamingConditionConditionBitnessComparision": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ServiceNamingConditionConditionCloudType:ServiceNamingConditionConditionCloudType": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ServiceNamingConditionConditionCloudTypeComparison:ServiceNamingConditionConditionCloudTypeComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ServiceNamingConditionConditionComparison:ServiceNamingConditionConditionComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "type": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "dynatrace:index/ServiceNamingConditionConditionCustomApplicationType:ServiceNamingConditionConditionCustomApplicationType": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ServiceNamingConditionConditionCustomApplicationTypeComparison:ServiceNamingConditionConditionCustomApplicationTypeComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ServiceNamingConditionConditionCustomHostMetadata:ServiceNamingConditionConditionCustomHostMetadata": {
            "properties": {
                "attribute": {
                    "type": "string"
                },
                "dynamicKey": {
                    "$ref": "#/types/dynatrace:index/ServiceNamingConditionConditionCustomHostMetadataDynamicKey:ServiceNamingConditionConditionCustomHostMetadataDynamicKey"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "attribute",
                "dynamicKey"
            ]
        },
        "dynatrace:index/ServiceNamingConditionConditionCustomHostMetadataConditionKey:ServiceNamingConditionConditionCustomHostMetadataConditionKey": {
            "properties": {
                "attribute": {
                    "type": "string"
                },
                "dynamicKey": {
                    "$ref": "#/types/dynatrace:index/ServiceNamingConditionConditionCustomHostMetadataConditionKeyDynamicKey:ServiceNamingConditionConditionCustomHostMetadataConditionKeyDynamicKey"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "attribute",
                "dynamicKey"
            ]
        },
        "dynatrace:index/ServiceNamingConditionConditionCustomHostMetadataConditionKeyDynamicKey:ServiceNamingConditionConditionCustomHostMetadataConditionKeyDynamicKey": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "source": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "source"
            ]
        },
        "dynatrace:index/ServiceNamingConditionConditionCustomHostMetadataDynamicKey:ServiceNamingConditionConditionCustomHostMetadataDynamicKey": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "source": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "source"
            ]
        },
        "dynatrace:index/ServiceNamingConditionConditionCustomProcessMetadata:ServiceNamingConditionConditionCustomProcessMetadata": {
            "properties": {
                "attribute": {
                    "type": "string"
                },
                "dynamicKey": {
                    "$ref": "#/types/dynatrace:index/ServiceNamingConditionConditionCustomProcessMetadataDynamicKey:ServiceNamingConditionConditionCustomProcessMetadataDynamicKey"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "attribute",
                "dynamicKey"
            ]
        },
        "dynatrace:index/ServiceNamingConditionConditionCustomProcessMetadataConditionKey:ServiceNamingConditionConditionCustomProcessMetadataConditionKey": {
            "properties": {
                "attribute": {
                    "type": "string"
                },
                "dynamicKey": {
                    "$ref": "#/types/dynatrace:index/ServiceNamingConditionConditionCustomProcessMetadataConditionKeyDynamicKey:ServiceNamingConditionConditionCustomProcessMetadataConditionKeyDynamicKey"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "attribute",
                "dynamicKey"
            ]
        },
        "dynatrace:index/ServiceNamingConditionConditionCustomProcessMetadataConditionKeyDynamicKey:ServiceNamingConditionConditionCustomProcessMetadataConditionKeyDynamicKey": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "source": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "source"
            ]
        },
        "dynatrace:index/ServiceNamingConditionConditionCustomProcessMetadataDynamicKey:ServiceNamingConditionConditionCustomProcessMetadataDynamicKey": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "source": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "source"
            ]
        },
        "dynatrace:index/ServiceNamingConditionConditionDatabaseTopology:ServiceNamingConditionConditionDatabaseTopology": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ServiceNamingConditionConditionDatabaseTopologyComparison:ServiceNamingConditionConditionDatabaseTopologyComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ServiceNamingConditionConditionDcrumDecoder:ServiceNamingConditionConditionDcrumDecoder": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ServiceNamingConditionConditionDcrumDecoderComparison:ServiceNamingConditionConditionDcrumDecoderComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ServiceNamingConditionConditionEntity:ServiceNamingConditionConditionEntity": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ServiceNamingConditionConditionEntityIdComparison:ServiceNamingConditionConditionEntityIdComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ServiceNamingConditionConditionHostTech:ServiceNamingConditionConditionHostTech": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "$ref": "#/types/dynatrace:index/ServiceNamingConditionConditionHostTechValue:ServiceNamingConditionConditionHostTechValue"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ServiceNamingConditionConditionHostTechValue:ServiceNamingConditionConditionHostTechValue": {
            "properties": {
                "type": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "verbatimType": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "dynatrace:index/ServiceNamingConditionConditionHypervisor:ServiceNamingConditionConditionHypervisor": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ServiceNamingConditionConditionHypervisorTypeComparision:ServiceNamingConditionConditionHypervisorTypeComparision": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ServiceNamingConditionConditionIndexedName:ServiceNamingConditionConditionIndexedName": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ServiceNamingConditionConditionIndexedNameComparison:ServiceNamingConditionConditionIndexedNameComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ServiceNamingConditionConditionIndexedString:ServiceNamingConditionConditionIndexedString": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ServiceNamingConditionConditionIndexedStringComparison:ServiceNamingConditionConditionIndexedStringComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ServiceNamingConditionConditionIndexedTag:ServiceNamingConditionConditionIndexedTag": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "$ref": "#/types/dynatrace:index/ServiceNamingConditionConditionIndexedTagValue:ServiceNamingConditionConditionIndexedTagValue"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ServiceNamingConditionConditionIndexedTagComparison:ServiceNamingConditionConditionIndexedTagComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "$ref": "#/types/dynatrace:index/ServiceNamingConditionConditionIndexedTagComparisonValue:ServiceNamingConditionConditionIndexedTagComparisonValue"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ServiceNamingConditionConditionIndexedTagComparisonValue:ServiceNamingConditionConditionIndexedTagComparisonValue": {
            "properties": {
                "context": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "context",
                "key"
            ]
        },
        "dynatrace:index/ServiceNamingConditionConditionIndexedTagValue:ServiceNamingConditionConditionIndexedTagValue": {
            "properties": {
                "context": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "context",
                "key"
            ]
        },
        "dynatrace:index/ServiceNamingConditionConditionInteger:ServiceNamingConditionConditionInteger": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ServiceNamingConditionConditionIntegerComparison:ServiceNamingConditionConditionIntegerComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ServiceNamingConditionConditionIpaddress:ServiceNamingConditionConditionIpaddress": {
            "properties": {
                "caseSensitive": {
                    "type": "boolean"
                },
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ServiceNamingConditionConditionIpaddressComparison:ServiceNamingConditionConditionIpaddressComparison": {
            "properties": {
                "caseSensitive": {
                    "type": "boolean"
                },
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ServiceNamingConditionConditionKey:ServiceNamingConditionConditionKey": {
            "properties": {
                "attribute": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "attribute"
            ]
        },
        "dynatrace:index/ServiceNamingConditionConditionMobilePlatform:ServiceNamingConditionConditionMobilePlatform": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ServiceNamingConditionConditionMobilePlatformComparison:ServiceNamingConditionConditionMobilePlatformComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ServiceNamingConditionConditionOsArch:ServiceNamingConditionConditionOsArch": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ServiceNamingConditionConditionOsType:ServiceNamingConditionConditionOsType": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ServiceNamingConditionConditionOsarchitectureComparison:ServiceNamingConditionConditionOsarchitectureComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ServiceNamingConditionConditionOstypeComparison:ServiceNamingConditionConditionOstypeComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ServiceNamingConditionConditionPaasType:ServiceNamingConditionConditionPaasType": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ServiceNamingConditionConditionPaasTypeComparison:ServiceNamingConditionConditionPaasTypeComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ServiceNamingConditionConditionProcessMetadata:ServiceNamingConditionConditionProcessMetadata": {
            "properties": {
                "attribute": {
                    "type": "string"
                },
                "dynamicKey": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "attribute",
                "dynamicKey"
            ]
        },
        "dynatrace:index/ServiceNamingConditionConditionProcessMetadataConditionKey:ServiceNamingConditionConditionProcessMetadataConditionKey": {
            "properties": {
                "attribute": {
                    "type": "string"
                },
                "dynamicKey": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "attribute",
                "dynamicKey"
            ]
        },
        "dynatrace:index/ServiceNamingConditionConditionServiceTopology:ServiceNamingConditionConditionServiceTopology": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ServiceNamingConditionConditionServiceTopologyComparison:ServiceNamingConditionConditionServiceTopologyComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ServiceNamingConditionConditionServiceType:ServiceNamingConditionConditionServiceType": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ServiceNamingConditionConditionServiceTypeComparison:ServiceNamingConditionConditionServiceTypeComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ServiceNamingConditionConditionSimpleHostTechComparison:ServiceNamingConditionConditionSimpleHostTechComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "$ref": "#/types/dynatrace:index/ServiceNamingConditionConditionSimpleHostTechComparisonValue:ServiceNamingConditionConditionSimpleHostTechComparisonValue"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ServiceNamingConditionConditionSimpleHostTechComparisonValue:ServiceNamingConditionConditionSimpleHostTechComparisonValue": {
            "properties": {
                "type": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "verbatimType": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "dynatrace:index/ServiceNamingConditionConditionSimpleTechComparison:ServiceNamingConditionConditionSimpleTechComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "$ref": "#/types/dynatrace:index/ServiceNamingConditionConditionSimpleTechComparisonValue:ServiceNamingConditionConditionSimpleTechComparisonValue"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ServiceNamingConditionConditionSimpleTechComparisonValue:ServiceNamingConditionConditionSimpleTechComparisonValue": {
            "properties": {
                "type": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "verbatimType": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "dynatrace:index/ServiceNamingConditionConditionString:ServiceNamingConditionConditionString": {
            "properties": {
                "caseSensitive": {
                    "type": "boolean"
                },
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ServiceNamingConditionConditionStringComparison:ServiceNamingConditionConditionStringComparison": {
            "properties": {
                "caseSensitive": {
                    "type": "boolean"
                },
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ServiceNamingConditionConditionStringConditionKey:ServiceNamingConditionConditionStringConditionKey": {
            "properties": {
                "attribute": {
                    "type": "string"
                },
                "dynamicKey": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "attribute",
                "dynamicKey"
            ]
        },
        "dynatrace:index/ServiceNamingConditionConditionStringKey:ServiceNamingConditionConditionStringKey": {
            "properties": {
                "attribute": {
                    "type": "string"
                },
                "dynamicKey": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "attribute",
                "dynamicKey"
            ]
        },
        "dynatrace:index/ServiceNamingConditionConditionSyntheticEngine:ServiceNamingConditionConditionSyntheticEngine": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ServiceNamingConditionConditionSyntheticEngineTypeComparison:ServiceNamingConditionConditionSyntheticEngineTypeComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ServiceNamingConditionConditionTag:ServiceNamingConditionConditionTag": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "$ref": "#/types/dynatrace:index/ServiceNamingConditionConditionTagValue:ServiceNamingConditionConditionTagValue"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ServiceNamingConditionConditionTagComparison:ServiceNamingConditionConditionTagComparison": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "The value of the attribute type is implicit, therefore shouldn't get specified"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "$ref": "#/types/dynatrace:index/ServiceNamingConditionConditionTagComparisonValue:ServiceNamingConditionConditionTagComparisonValue"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ServiceNamingConditionConditionTagComparisonValue:ServiceNamingConditionConditionTagComparisonValue": {
            "properties": {
                "context": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "context",
                "key"
            ]
        },
        "dynatrace:index/ServiceNamingConditionConditionTagValue:ServiceNamingConditionConditionTagValue": {
            "properties": {
                "context": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "context",
                "key"
            ]
        },
        "dynatrace:index/ServiceNamingConditionConditionTech:ServiceNamingConditionConditionTech": {
            "properties": {
                "negate": {
                    "type": "boolean"
                },
                "operator": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "value": {
                    "$ref": "#/types/dynatrace:index/ServiceNamingConditionConditionTechValue:ServiceNamingConditionConditionTechValue"
                }
            },
            "type": "object",
            "required": [
                "operator"
            ]
        },
        "dynatrace:index/ServiceNamingConditionConditionTechValue:ServiceNamingConditionConditionTechValue": {
            "properties": {
                "type": {
                    "type": "string"
                },
                "unknowns": {
                    "type": "string"
                },
                "verbatimType": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "dynatrace:index/SessionReplayWebPrivacyMaskingPresets:SessionReplayWebPrivacyMaskingPresets": {
            "properties": {
                "playbackMaskingAllowListRules": {
                    "$ref": "#/types/dynatrace:index/SessionReplayWebPrivacyMaskingPresetsPlaybackMaskingAllowListRules:SessionReplayWebPrivacyMaskingPresetsPlaybackMaskingAllowListRules"
                },
                "playbackMaskingBlockListRules": {
                    "$ref": "#/types/dynatrace:index/SessionReplayWebPrivacyMaskingPresetsPlaybackMaskingBlockListRules:SessionReplayWebPrivacyMaskingPresetsPlaybackMaskingBlockListRules"
                },
                "playbackMaskingPreset": {
                    "type": "string"
                },
                "recordingMaskingAllowListRules": {
                    "$ref": "#/types/dynatrace:index/SessionReplayWebPrivacyMaskingPresetsRecordingMaskingAllowListRules:SessionReplayWebPrivacyMaskingPresetsRecordingMaskingAllowListRules"
                },
                "recordingMaskingBlockListRules": {
                    "$ref": "#/types/dynatrace:index/SessionReplayWebPrivacyMaskingPresetsRecordingMaskingBlockListRules:SessionReplayWebPrivacyMaskingPresetsRecordingMaskingBlockListRules"
                },
                "recordingMaskingPreset": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "playbackMaskingPreset",
                "recordingMaskingPreset"
            ]
        },
        "dynatrace:index/SessionReplayWebPrivacyMaskingPresetsPlaybackMaskingAllowListRules:SessionReplayWebPrivacyMaskingPresetsPlaybackMaskingAllowListRules": {
            "properties": {
                "allowListRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/SessionReplayWebPrivacyMaskingPresetsPlaybackMaskingAllowListRulesAllowListRule:SessionReplayWebPrivacyMaskingPresetsPlaybackMaskingAllowListRulesAllowListRule"
                    }
                }
            },
            "type": "object",
            "required": [
                "allowListRules"
            ]
        },
        "dynatrace:index/SessionReplayWebPrivacyMaskingPresetsPlaybackMaskingAllowListRulesAllowListRule:SessionReplayWebPrivacyMaskingPresetsPlaybackMaskingAllowListRulesAllowListRule": {
            "properties": {
                "attributeExpression": {
                    "type": "string"
                },
                "cssExpression": {
                    "type": "string"
                },
                "target": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "target"
            ]
        },
        "dynatrace:index/SessionReplayWebPrivacyMaskingPresetsPlaybackMaskingBlockListRules:SessionReplayWebPrivacyMaskingPresetsPlaybackMaskingBlockListRules": {
            "properties": {
                "blockListRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/SessionReplayWebPrivacyMaskingPresetsPlaybackMaskingBlockListRulesBlockListRule:SessionReplayWebPrivacyMaskingPresetsPlaybackMaskingBlockListRulesBlockListRule"
                    }
                }
            },
            "type": "object",
            "required": [
                "blockListRules"
            ]
        },
        "dynatrace:index/SessionReplayWebPrivacyMaskingPresetsPlaybackMaskingBlockListRulesBlockListRule:SessionReplayWebPrivacyMaskingPresetsPlaybackMaskingBlockListRulesBlockListRule": {
            "properties": {
                "attributeExpression": {
                    "type": "string"
                },
                "cssExpression": {
                    "type": "string"
                },
                "hideUserInteraction": {
                    "type": "boolean"
                },
                "target": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "target"
            ]
        },
        "dynatrace:index/SessionReplayWebPrivacyMaskingPresetsRecordingMaskingAllowListRules:SessionReplayWebPrivacyMaskingPresetsRecordingMaskingAllowListRules": {
            "properties": {
                "allowListRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/SessionReplayWebPrivacyMaskingPresetsRecordingMaskingAllowListRulesAllowListRule:SessionReplayWebPrivacyMaskingPresetsRecordingMaskingAllowListRulesAllowListRule"
                    }
                }
            },
            "type": "object",
            "required": [
                "allowListRules"
            ]
        },
        "dynatrace:index/SessionReplayWebPrivacyMaskingPresetsRecordingMaskingAllowListRulesAllowListRule:SessionReplayWebPrivacyMaskingPresetsRecordingMaskingAllowListRulesAllowListRule": {
            "properties": {
                "attributeExpression": {
                    "type": "string"
                },
                "cssExpression": {
                    "type": "string"
                },
                "target": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "target"
            ]
        },
        "dynatrace:index/SessionReplayWebPrivacyMaskingPresetsRecordingMaskingBlockListRules:SessionReplayWebPrivacyMaskingPresetsRecordingMaskingBlockListRules": {
            "properties": {
                "blockListRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/SessionReplayWebPrivacyMaskingPresetsRecordingMaskingBlockListRulesBlockListRule:SessionReplayWebPrivacyMaskingPresetsRecordingMaskingBlockListRulesBlockListRule"
                    }
                }
            },
            "type": "object",
            "required": [
                "blockListRules"
            ]
        },
        "dynatrace:index/SessionReplayWebPrivacyMaskingPresetsRecordingMaskingBlockListRulesBlockListRule:SessionReplayWebPrivacyMaskingPresetsRecordingMaskingBlockListRulesBlockListRule": {
            "properties": {
                "attributeExpression": {
                    "type": "string"
                },
                "cssExpression": {
                    "type": "string"
                },
                "hideUserInteraction": {
                    "type": "boolean"
                },
                "target": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "target"
            ]
        },
        "dynatrace:index/SiteReliabilityGuardianObjectives:SiteReliabilityGuardianObjectives": {
            "properties": {
                "objectives": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/SiteReliabilityGuardianObjectivesObjective:SiteReliabilityGuardianObjectivesObjective"
                    }
                }
            },
            "type": "object",
            "required": [
                "objectives"
            ]
        },
        "dynatrace:index/SiteReliabilityGuardianObjectivesObjective:SiteReliabilityGuardianObjectivesObjective": {
            "properties": {
                "comparisonOperator": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "dqlQuery": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "objectiveType": {
                    "type": "string"
                },
                "referenceSlo": {
                    "type": "string"
                },
                "target": {
                    "type": "number"
                },
                "warning": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "comparisonOperator",
                "name",
                "objectiveType"
            ]
        },
        "dynatrace:index/SiteReliabilityGuardianVariables:SiteReliabilityGuardianVariables": {
            "properties": {
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/SiteReliabilityGuardianVariablesVariable:SiteReliabilityGuardianVariablesVariable"
                    }
                }
            },
            "type": "object",
            "required": [
                "variables"
            ]
        },
        "dynatrace:index/SiteReliabilityGuardianVariablesVariable:SiteReliabilityGuardianVariablesVariable": {
            "properties": {
                "definition": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "definition",
                "name"
            ]
        },
        "dynatrace:index/SloErrorBudgetBurnRate:SloErrorBudgetBurnRate": {
            "properties": {
                "burnRateVisualizationEnabled": {
                    "type": "boolean"
                },
                "fastBurnThreshold": {
                    "type": "number"
                }
            },
            "type": "object"
        },
        "dynatrace:index/SloV2ErrorBudgetBurnRate:SloV2ErrorBudgetBurnRate": {
            "properties": {
                "burnRateVisualizationEnabled": {
                    "type": "boolean"
                },
                "fastBurnThreshold": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "burnRateVisualizationEnabled"
            ]
        },
        "dynatrace:index/SpanCaptureRuleMatches:SpanCaptureRuleMatches": {
            "properties": {
                "matches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/SpanCaptureRuleMatchesMatch:SpanCaptureRuleMatchesMatch"
                    }
                }
            },
            "type": "object",
            "required": [
                "matches"
            ]
        },
        "dynatrace:index/SpanCaptureRuleMatchesMatch:SpanCaptureRuleMatchesMatch": {
            "properties": {
                "caseSensitive": {
                    "type": "boolean"
                },
                "comparison": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "source": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "comparison",
                "source"
            ]
        },
        "dynatrace:index/SpanContextPropagationMatches:SpanContextPropagationMatches": {
            "properties": {
                "matches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/SpanContextPropagationMatchesMatch:SpanContextPropagationMatchesMatch"
                    }
                }
            },
            "type": "object",
            "required": [
                "matches"
            ]
        },
        "dynatrace:index/SpanContextPropagationMatchesMatch:SpanContextPropagationMatchesMatch": {
            "properties": {
                "caseSensitive": {
                    "type": "boolean"
                },
                "comparison": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "source": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "comparison",
                "source"
            ]
        },
        "dynatrace:index/SpanEntryPointMatches:SpanEntryPointMatches": {
            "properties": {
                "matches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/SpanEntryPointMatchesMatch:SpanEntryPointMatchesMatch"
                    }
                }
            },
            "type": "object",
            "required": [
                "matches"
            ]
        },
        "dynatrace:index/SpanEntryPointMatchesMatch:SpanEntryPointMatchesMatch": {
            "properties": {
                "caseSensitive": {
                    "type": "boolean"
                },
                "comparison": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "source": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "comparison",
                "source"
            ]
        },
        "dynatrace:index/UpdateWindowsDailyRecurrence:UpdateWindowsDailyRecurrence": {
            "properties": {
                "every": {
                    "type": "integer"
                },
                "recurrenceRange": {
                    "$ref": "#/types/dynatrace:index/UpdateWindowsDailyRecurrenceRecurrenceRange:UpdateWindowsDailyRecurrenceRecurrenceRange"
                },
                "updateTime": {
                    "$ref": "#/types/dynatrace:index/UpdateWindowsDailyRecurrenceUpdateTime:UpdateWindowsDailyRecurrenceUpdateTime"
                }
            },
            "type": "object",
            "required": [
                "every",
                "recurrenceRange",
                "updateTime"
            ]
        },
        "dynatrace:index/UpdateWindowsDailyRecurrenceRecurrenceRange:UpdateWindowsDailyRecurrenceRecurrenceRange": {
            "properties": {
                "end": {
                    "type": "string"
                },
                "start": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "end",
                "start"
            ]
        },
        "dynatrace:index/UpdateWindowsDailyRecurrenceUpdateTime:UpdateWindowsDailyRecurrenceUpdateTime": {
            "properties": {
                "duration": {
                    "type": "integer"
                },
                "startTime": {
                    "type": "string"
                },
                "timeZone": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "duration",
                "startTime",
                "timeZone"
            ]
        },
        "dynatrace:index/UpdateWindowsMonthlyRecurrence:UpdateWindowsMonthlyRecurrence": {
            "properties": {
                "every": {
                    "type": "integer"
                },
                "recurrenceRange": {
                    "$ref": "#/types/dynatrace:index/UpdateWindowsMonthlyRecurrenceRecurrenceRange:UpdateWindowsMonthlyRecurrenceRecurrenceRange"
                },
                "selectedMonthDay": {
                    "type": "integer"
                },
                "updateTime": {
                    "$ref": "#/types/dynatrace:index/UpdateWindowsMonthlyRecurrenceUpdateTime:UpdateWindowsMonthlyRecurrenceUpdateTime"
                }
            },
            "type": "object",
            "required": [
                "every",
                "recurrenceRange",
                "selectedMonthDay",
                "updateTime"
            ]
        },
        "dynatrace:index/UpdateWindowsMonthlyRecurrenceRecurrenceRange:UpdateWindowsMonthlyRecurrenceRecurrenceRange": {
            "properties": {
                "end": {
                    "type": "string"
                },
                "start": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "end",
                "start"
            ]
        },
        "dynatrace:index/UpdateWindowsMonthlyRecurrenceUpdateTime:UpdateWindowsMonthlyRecurrenceUpdateTime": {
            "properties": {
                "duration": {
                    "type": "integer"
                },
                "startTime": {
                    "type": "string"
                },
                "timeZone": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "duration",
                "startTime",
                "timeZone"
            ]
        },
        "dynatrace:index/UpdateWindowsOnceRecurrence:UpdateWindowsOnceRecurrence": {
            "properties": {
                "recurrenceRange": {
                    "$ref": "#/types/dynatrace:index/UpdateWindowsOnceRecurrenceRecurrenceRange:UpdateWindowsOnceRecurrenceRecurrenceRange"
                }
            },
            "type": "object",
            "required": [
                "recurrenceRange"
            ]
        },
        "dynatrace:index/UpdateWindowsOnceRecurrenceRecurrenceRange:UpdateWindowsOnceRecurrenceRecurrenceRange": {
            "properties": {
                "end": {
                    "type": "string"
                },
                "start": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "end",
                "start"
            ]
        },
        "dynatrace:index/UpdateWindowsWeeklyRecurrence:UpdateWindowsWeeklyRecurrence": {
            "properties": {
                "every": {
                    "type": "integer"
                },
                "recurrenceRange": {
                    "$ref": "#/types/dynatrace:index/UpdateWindowsWeeklyRecurrenceRecurrenceRange:UpdateWindowsWeeklyRecurrenceRecurrenceRange"
                },
                "selectedWeekDays": {
                    "$ref": "#/types/dynatrace:index/UpdateWindowsWeeklyRecurrenceSelectedWeekDays:UpdateWindowsWeeklyRecurrenceSelectedWeekDays"
                },
                "updateTime": {
                    "$ref": "#/types/dynatrace:index/UpdateWindowsWeeklyRecurrenceUpdateTime:UpdateWindowsWeeklyRecurrenceUpdateTime"
                }
            },
            "type": "object",
            "required": [
                "every",
                "recurrenceRange",
                "selectedWeekDays",
                "updateTime"
            ]
        },
        "dynatrace:index/UpdateWindowsWeeklyRecurrenceRecurrenceRange:UpdateWindowsWeeklyRecurrenceRecurrenceRange": {
            "properties": {
                "end": {
                    "type": "string"
                },
                "start": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "end",
                "start"
            ]
        },
        "dynatrace:index/UpdateWindowsWeeklyRecurrenceSelectedWeekDays:UpdateWindowsWeeklyRecurrenceSelectedWeekDays": {
            "properties": {
                "friday": {
                    "type": "boolean"
                },
                "monday": {
                    "type": "boolean"
                },
                "saturday": {
                    "type": "boolean"
                },
                "sunday": {
                    "type": "boolean"
                },
                "thursday": {
                    "type": "boolean"
                },
                "tuesday": {
                    "type": "boolean"
                },
                "wednesday": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "friday",
                "monday",
                "saturday",
                "sunday",
                "thursday",
                "tuesday",
                "wednesday"
            ]
        },
        "dynatrace:index/UpdateWindowsWeeklyRecurrenceUpdateTime:UpdateWindowsWeeklyRecurrenceUpdateTime": {
            "properties": {
                "duration": {
                    "type": "integer"
                },
                "startTime": {
                    "type": "string"
                },
                "timeZone": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "duration",
                "startTime",
                "timeZone"
            ]
        },
        "dynatrace:index/UrlBasedSamplingQueryParameters:UrlBasedSamplingQueryParameters": {
            "properties": {
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/UrlBasedSamplingQueryParametersParameter:UrlBasedSamplingQueryParametersParameter"
                    }
                }
            },
            "type": "object",
            "required": [
                "parameters"
            ]
        },
        "dynatrace:index/UrlBasedSamplingQueryParametersParameter:UrlBasedSamplingQueryParametersParameter": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                },
                "valueIsUndefined": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "dynatrace:index/UserActionMetricsFilters:UserActionMetricsFilters": {
            "properties": {
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/UserActionMetricsFiltersFilter:UserActionMetricsFiltersFilter"
                    }
                }
            },
            "type": "object",
            "required": [
                "filters"
            ]
        },
        "dynatrace:index/UserActionMetricsFiltersFilter:UserActionMetricsFiltersFilter": {
            "properties": {
                "fieldName": {
                    "type": "string"
                },
                "operator": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                },
                "valueIns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "fieldName",
                "operator"
            ]
        },
        "dynatrace:index/UserActionMetricsValue:UserActionMetricsValue": {
            "properties": {
                "fieldName": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "dynatrace:index/UserGroupPermissions:UserGroupPermissions": {
            "properties": {
                "grants": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/UserGroupPermissionsGrant:UserGroupPermissionsGrant"
                    }
                }
            },
            "type": "object",
            "required": [
                "grants"
            ]
        },
        "dynatrace:index/UserGroupPermissionsGrant:UserGroupPermissionsGrant": {
            "properties": {
                "environments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "permission": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "permission"
            ]
        },
        "dynatrace:index/UserSessionMetricsFilters:UserSessionMetricsFilters": {
            "properties": {
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/UserSessionMetricsFiltersFilter:UserSessionMetricsFiltersFilter"
                    }
                }
            },
            "type": "object",
            "required": [
                "filters"
            ]
        },
        "dynatrace:index/UserSessionMetricsFiltersFilter:UserSessionMetricsFiltersFilter": {
            "properties": {
                "fieldName": {
                    "type": "string"
                },
                "operator": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                },
                "valueIns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "fieldName",
                "operator"
            ]
        },
        "dynatrace:index/UserSessionMetricsValue:UserSessionMetricsValue": {
            "properties": {
                "fieldName": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "dynatrace:index/VmwareAnomaliesDroppedPacketsDetection:VmwareAnomaliesDroppedPacketsDetection": {
            "properties": {
                "customThresholds": {
                    "$ref": "#/types/dynatrace:index/VmwareAnomaliesDroppedPacketsDetectionCustomThresholds:VmwareAnomaliesDroppedPacketsDetectionCustomThresholds"
                },
                "detectionMode": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/VmwareAnomaliesDroppedPacketsDetectionCustomThresholds:VmwareAnomaliesDroppedPacketsDetectionCustomThresholds": {
            "properties": {
                "droppedPacketsPerSecond": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "droppedPacketsPerSecond"
            ]
        },
        "dynatrace:index/VmwareAnomaliesEsxiHighCpuDetection:VmwareAnomaliesEsxiHighCpuDetection": {
            "properties": {
                "customThresholds": {
                    "$ref": "#/types/dynatrace:index/VmwareAnomaliesEsxiHighCpuDetectionCustomThresholds:VmwareAnomaliesEsxiHighCpuDetectionCustomThresholds"
                },
                "detectionMode": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/VmwareAnomaliesEsxiHighCpuDetectionCustomThresholds:VmwareAnomaliesEsxiHighCpuDetectionCustomThresholds": {
            "properties": {
                "cpuPeakPercentage": {
                    "type": "integer"
                },
                "cpuUsagePercentage": {
                    "type": "integer"
                },
                "vmCpuReadyPercentage": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "cpuPeakPercentage",
                "cpuUsagePercentage",
                "vmCpuReadyPercentage"
            ]
        },
        "dynatrace:index/VmwareAnomaliesEsxiHighMemoryDetection:VmwareAnomaliesEsxiHighMemoryDetection": {
            "properties": {
                "customThresholds": {
                    "$ref": "#/types/dynatrace:index/VmwareAnomaliesEsxiHighMemoryDetectionCustomThresholds:VmwareAnomaliesEsxiHighMemoryDetectionCustomThresholds"
                },
                "detectionMode": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/VmwareAnomaliesEsxiHighMemoryDetectionCustomThresholds:VmwareAnomaliesEsxiHighMemoryDetectionCustomThresholds": {
            "properties": {
                "compressionDecompressionRate": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "compressionDecompressionRate"
            ]
        },
        "dynatrace:index/VmwareAnomaliesGuestCpuLimitDetection:VmwareAnomaliesGuestCpuLimitDetection": {
            "properties": {
                "customThresholds": {
                    "$ref": "#/types/dynatrace:index/VmwareAnomaliesGuestCpuLimitDetectionCustomThresholds:VmwareAnomaliesGuestCpuLimitDetectionCustomThresholds"
                },
                "detectionMode": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/VmwareAnomaliesGuestCpuLimitDetectionCustomThresholds:VmwareAnomaliesGuestCpuLimitDetectionCustomThresholds": {
            "properties": {
                "hostCpuUsagePercentage": {
                    "type": "integer"
                },
                "vmCpuReadyPercentage": {
                    "type": "integer"
                },
                "vmCpuUsagePercentage": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "hostCpuUsagePercentage",
                "vmCpuReadyPercentage",
                "vmCpuUsagePercentage"
            ]
        },
        "dynatrace:index/VmwareAnomaliesLowDatastoreSpaceDetection:VmwareAnomaliesLowDatastoreSpaceDetection": {
            "properties": {
                "customThresholds": {
                    "$ref": "#/types/dynatrace:index/VmwareAnomaliesLowDatastoreSpaceDetectionCustomThresholds:VmwareAnomaliesLowDatastoreSpaceDetectionCustomThresholds"
                },
                "detectionMode": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/VmwareAnomaliesLowDatastoreSpaceDetectionCustomThresholds:VmwareAnomaliesLowDatastoreSpaceDetectionCustomThresholds": {
            "properties": {
                "freeSpacePercentage": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "freeSpacePercentage"
            ]
        },
        "dynatrace:index/VmwareAnomaliesOverloadedStorageDetection:VmwareAnomaliesOverloadedStorageDetection": {
            "properties": {
                "customThresholds": {
                    "$ref": "#/types/dynatrace:index/VmwareAnomaliesOverloadedStorageDetectionCustomThresholds:VmwareAnomaliesOverloadedStorageDetectionCustomThresholds"
                },
                "detectionMode": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/VmwareAnomaliesOverloadedStorageDetectionCustomThresholds:VmwareAnomaliesOverloadedStorageDetectionCustomThresholds": {
            "properties": {
                "commandAbortsNumber": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "commandAbortsNumber"
            ]
        },
        "dynatrace:index/VmwareAnomaliesSlowPhysicalStorageDetection:VmwareAnomaliesSlowPhysicalStorageDetection": {
            "properties": {
                "customThresholds": {
                    "$ref": "#/types/dynatrace:index/VmwareAnomaliesSlowPhysicalStorageDetectionCustomThresholds:VmwareAnomaliesSlowPhysicalStorageDetectionCustomThresholds"
                },
                "detectionMode": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/VmwareAnomaliesSlowPhysicalStorageDetectionCustomThresholds:VmwareAnomaliesSlowPhysicalStorageDetectionCustomThresholds": {
            "properties": {
                "avgReadWriteLatency": {
                    "type": "integer"
                },
                "peakReadWriteLatency": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "avgReadWriteLatency",
                "peakReadWriteLatency"
            ]
        },
        "dynatrace:index/VmwareAnomaliesUndersizedStorageDetection:VmwareAnomaliesUndersizedStorageDetection": {
            "properties": {
                "customThresholds": {
                    "$ref": "#/types/dynatrace:index/VmwareAnomaliesUndersizedStorageDetectionCustomThresholds:VmwareAnomaliesUndersizedStorageDetectionCustomThresholds"
                },
                "detectionMode": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/VmwareAnomaliesUndersizedStorageDetectionCustomThresholds:VmwareAnomaliesUndersizedStorageDetectionCustomThresholds": {
            "properties": {
                "averageQueueCommandLatency": {
                    "type": "integer"
                },
                "peakQueueCommandLatency": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "averageQueueCommandLatency",
                "peakQueueCommandLatency"
            ]
        },
        "dynatrace:index/VulnerabilityCodeCriteria:VulnerabilityCodeCriteria": {
            "properties": {
                "processGroup": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "dynatrace:index/VulnerabilityCodeMetadata:VulnerabilityCodeMetadata": {
            "properties": {
                "comment": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "comment"
            ]
        },
        "dynatrace:index/VulnerabilityCodeVulnerabilityDetectionControl:VulnerabilityCodeVulnerabilityDetectionControl": {
            "properties": {
                "monitoringMode": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "monitoringMode"
            ]
        },
        "dynatrace:index/VulnerabilitySettingsTechnologies:VulnerabilitySettingsTechnologies": {
            "properties": {
                "enableDotNet": {
                    "type": "boolean"
                },
                "enableDotNetRuntime": {
                    "type": "boolean"
                },
                "enableGo": {
                    "type": "boolean"
                },
                "enableJava": {
                    "type": "boolean"
                },
                "enableJavaRuntime": {
                    "type": "boolean"
                },
                "enableKubernetes": {
                    "type": "boolean"
                },
                "enableNodeJs": {
                    "type": "boolean"
                },
                "enableNodeJsRuntime": {
                    "type": "boolean"
                },
                "enablePhp": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "enableDotNet",
                "enableGo",
                "enableJava",
                "enableKubernetes",
                "enableNodeJs",
                "enablePhp"
            ]
        },
        "dynatrace:index/WebAppAnomaliesErrorRate:WebAppAnomaliesErrorRate": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "errorRateAuto": {
                    "$ref": "#/types/dynatrace:index/WebAppAnomaliesErrorRateErrorRateAuto:WebAppAnomaliesErrorRateErrorRateAuto"
                },
                "errorRateDetectionMode": {
                    "type": "string"
                },
                "errorRateFixed": {
                    "$ref": "#/types/dynatrace:index/WebAppAnomaliesErrorRateErrorRateFixed:WebAppAnomaliesErrorRateErrorRateFixed"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/WebAppAnomaliesErrorRateErrorRateAuto:WebAppAnomaliesErrorRateErrorRateAuto": {
            "properties": {
                "absoluteIncrease": {
                    "type": "number"
                },
                "overAlertingProtection": {
                    "$ref": "#/types/dynatrace:index/WebAppAnomaliesErrorRateErrorRateAutoOverAlertingProtection:WebAppAnomaliesErrorRateErrorRateAutoOverAlertingProtection"
                },
                "relativeIncrease": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "absoluteIncrease",
                "overAlertingProtection",
                "relativeIncrease"
            ]
        },
        "dynatrace:index/WebAppAnomaliesErrorRateErrorRateAutoOverAlertingProtection:WebAppAnomaliesErrorRateErrorRateAutoOverAlertingProtection": {
            "properties": {
                "actionsPerMinute": {
                    "type": "number"
                },
                "minutesAbnormalState": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "actionsPerMinute",
                "minutesAbnormalState"
            ]
        },
        "dynatrace:index/WebAppAnomaliesErrorRateErrorRateFixed:WebAppAnomaliesErrorRateErrorRateFixed": {
            "properties": {
                "errorRateReqPerMin": {
                    "type": "number"
                },
                "errorRateSensitivity": {
                    "type": "string"
                },
                "maxFailureRateIncrease": {
                    "type": "number"
                },
                "minutesAbnormalState": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "errorRateReqPerMin",
                "errorRateSensitivity",
                "maxFailureRateIncrease",
                "minutesAbnormalState"
            ]
        },
        "dynatrace:index/WebAppAnomaliesResponseTime:WebAppAnomaliesResponseTime": {
            "properties": {
                "detectionMode": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "responseTimeAuto": {
                    "$ref": "#/types/dynatrace:index/WebAppAnomaliesResponseTimeResponseTimeAuto:WebAppAnomaliesResponseTimeResponseTimeAuto"
                },
                "responseTimeFixed": {
                    "$ref": "#/types/dynatrace:index/WebAppAnomaliesResponseTimeResponseTimeFixed:WebAppAnomaliesResponseTimeResponseTimeFixed"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/WebAppAnomaliesResponseTimeResponseTimeAuto:WebAppAnomaliesResponseTimeResponseTimeAuto": {
            "properties": {
                "overAlertingProtection": {
                    "$ref": "#/types/dynatrace:index/WebAppAnomaliesResponseTimeResponseTimeAutoOverAlertingProtection:WebAppAnomaliesResponseTimeResponseTimeAutoOverAlertingProtection"
                },
                "responseTimeAll": {
                    "$ref": "#/types/dynatrace:index/WebAppAnomaliesResponseTimeResponseTimeAutoResponseTimeAll:WebAppAnomaliesResponseTimeResponseTimeAutoResponseTimeAll"
                },
                "responseTimeSlowest": {
                    "$ref": "#/types/dynatrace:index/WebAppAnomaliesResponseTimeResponseTimeAutoResponseTimeSlowest:WebAppAnomaliesResponseTimeResponseTimeAutoResponseTimeSlowest"
                }
            },
            "type": "object",
            "required": [
                "overAlertingProtection",
                "responseTimeAll",
                "responseTimeSlowest"
            ]
        },
        "dynatrace:index/WebAppAnomaliesResponseTimeResponseTimeAutoOverAlertingProtection:WebAppAnomaliesResponseTimeResponseTimeAutoOverAlertingProtection": {
            "properties": {
                "actionsPerMinute": {
                    "type": "number"
                },
                "minutesAbnormalState": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "actionsPerMinute",
                "minutesAbnormalState"
            ]
        },
        "dynatrace:index/WebAppAnomaliesResponseTimeResponseTimeAutoResponseTimeAll:WebAppAnomaliesResponseTimeResponseTimeAutoResponseTimeAll": {
            "properties": {
                "degradationMilliseconds": {
                    "type": "number"
                },
                "degradationPercent": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "degradationMilliseconds",
                "degradationPercent"
            ]
        },
        "dynatrace:index/WebAppAnomaliesResponseTimeResponseTimeAutoResponseTimeSlowest:WebAppAnomaliesResponseTimeResponseTimeAutoResponseTimeSlowest": {
            "properties": {
                "slowestDegradationMilliseconds": {
                    "type": "number"
                },
                "slowestDegradationPercent": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "slowestDegradationMilliseconds",
                "slowestDegradationPercent"
            ]
        },
        "dynatrace:index/WebAppAnomaliesResponseTimeResponseTimeFixed:WebAppAnomaliesResponseTimeResponseTimeFixed": {
            "properties": {
                "overAlertingProtection": {
                    "$ref": "#/types/dynatrace:index/WebAppAnomaliesResponseTimeResponseTimeFixedOverAlertingProtection:WebAppAnomaliesResponseTimeResponseTimeFixedOverAlertingProtection"
                },
                "responseTimeAll": {
                    "$ref": "#/types/dynatrace:index/WebAppAnomaliesResponseTimeResponseTimeFixedResponseTimeAll:WebAppAnomaliesResponseTimeResponseTimeFixedResponseTimeAll"
                },
                "responseTimeSlowest": {
                    "$ref": "#/types/dynatrace:index/WebAppAnomaliesResponseTimeResponseTimeFixedResponseTimeSlowest:WebAppAnomaliesResponseTimeResponseTimeFixedResponseTimeSlowest"
                },
                "sensitivity": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "overAlertingProtection",
                "responseTimeAll",
                "responseTimeSlowest",
                "sensitivity"
            ]
        },
        "dynatrace:index/WebAppAnomaliesResponseTimeResponseTimeFixedOverAlertingProtection:WebAppAnomaliesResponseTimeResponseTimeFixedOverAlertingProtection": {
            "properties": {
                "actionsPerMinute": {
                    "type": "number"
                },
                "minutesAbnormalState": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "actionsPerMinute",
                "minutesAbnormalState"
            ]
        },
        "dynatrace:index/WebAppAnomaliesResponseTimeResponseTimeFixedResponseTimeAll:WebAppAnomaliesResponseTimeResponseTimeFixedResponseTimeAll": {
            "properties": {
                "degradationMilliseconds": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "degradationMilliseconds"
            ]
        },
        "dynatrace:index/WebAppAnomaliesResponseTimeResponseTimeFixedResponseTimeSlowest:WebAppAnomaliesResponseTimeResponseTimeFixedResponseTimeSlowest": {
            "properties": {
                "slowestDegradationMilliseconds": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "slowestDegradationMilliseconds"
            ]
        },
        "dynatrace:index/WebAppAnomaliesTrafficDrops:WebAppAnomaliesTrafficDrops": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "trafficDrops": {
                    "$ref": "#/types/dynatrace:index/WebAppAnomaliesTrafficDropsTrafficDrops:WebAppAnomaliesTrafficDropsTrafficDrops"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/WebAppAnomaliesTrafficDropsTrafficDrops:WebAppAnomaliesTrafficDropsTrafficDrops": {
            "properties": {
                "abnormalStateAbnormalState": {
                    "type": "number"
                },
                "trafficDropPercentage": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "abnormalStateAbnormalState",
                "trafficDropPercentage"
            ]
        },
        "dynatrace:index/WebAppAnomaliesTrafficSpikes:WebAppAnomaliesTrafficSpikes": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "trafficSpikes": {
                    "$ref": "#/types/dynatrace:index/WebAppAnomaliesTrafficSpikesTrafficSpikes:WebAppAnomaliesTrafficSpikesTrafficSpikes"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "dynatrace:index/WebAppAnomaliesTrafficSpikesTrafficSpikes:WebAppAnomaliesTrafficSpikesTrafficSpikes": {
            "properties": {
                "minutesAbnormalState": {
                    "type": "number"
                },
                "trafficSpikePercentage": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "minutesAbnormalState",
                "trafficSpikePercentage"
            ]
        },
        "dynatrace:index/WebAppCustomErrorsErrorRules:WebAppCustomErrorsErrorRules": {
            "properties": {
                "errorRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/WebAppCustomErrorsErrorRulesErrorRule:WebAppCustomErrorsErrorRulesErrorRule"
                    }
                }
            },
            "type": "object",
            "required": [
                "errorRules"
            ]
        },
        "dynatrace:index/WebAppCustomErrorsErrorRulesErrorRule:WebAppCustomErrorsErrorRulesErrorRule": {
            "properties": {
                "captureSettings": {
                    "$ref": "#/types/dynatrace:index/WebAppCustomErrorsErrorRulesErrorRuleCaptureSettings:WebAppCustomErrorsErrorRulesErrorRuleCaptureSettings"
                },
                "keyMatcher": {
                    "type": "string"
                },
                "keyPattern": {
                    "type": "string"
                },
                "valueMatcher": {
                    "type": "string"
                },
                "valuePattern": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "captureSettings",
                "keyMatcher",
                "valueMatcher"
            ]
        },
        "dynatrace:index/WebAppCustomErrorsErrorRulesErrorRuleCaptureSettings:WebAppCustomErrorsErrorRulesErrorRuleCaptureSettings": {
            "properties": {
                "capture": {
                    "type": "boolean"
                },
                "considerForAi": {
                    "type": "boolean"
                },
                "impactApdex": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "capture"
            ]
        },
        "dynatrace:index/WebAppEnablementRum:WebAppEnablementRum": {
            "properties": {
                "costAndTrafficControl": {
                    "type": "integer"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "costAndTrafficControl",
                "enabled"
            ]
        },
        "dynatrace:index/WebAppEnablementSessionReplay:WebAppEnablementSessionReplay": {
            "properties": {
                "costAndTrafficControl": {
                    "type": "integer"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "costAndTrafficControl",
                "enabled"
            ]
        },
        "dynatrace:index/WebAppKeyPerformanceCustomThresholds:WebAppKeyPerformanceCustomThresholds": {
            "properties": {
                "frustratingThresholdSeconds": {
                    "type": "number"
                },
                "toleratedThresholdSeconds": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "frustratingThresholdSeconds",
                "toleratedThresholdSeconds"
            ]
        },
        "dynatrace:index/WebAppKeyPerformanceLoadFallbackThresholds:WebAppKeyPerformanceLoadFallbackThresholds": {
            "properties": {
                "frustratingFallbackThresholdSeconds": {
                    "type": "number"
                },
                "toleratedFallbackThresholdSeconds": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "frustratingFallbackThresholdSeconds",
                "toleratedFallbackThresholdSeconds"
            ]
        },
        "dynatrace:index/WebAppKeyPerformanceLoadThresholds:WebAppKeyPerformanceLoadThresholds": {
            "properties": {
                "frustratingThresholdSeconds": {
                    "type": "number"
                },
                "toleratedThresholdSeconds": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "frustratingThresholdSeconds",
                "toleratedThresholdSeconds"
            ]
        },
        "dynatrace:index/WebAppKeyPerformanceXhrFallbackThresholds:WebAppKeyPerformanceXhrFallbackThresholds": {
            "properties": {
                "frustratingFallbackThresholdSeconds": {
                    "type": "number"
                },
                "toleratedFallbackThresholdSeconds": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "frustratingFallbackThresholdSeconds",
                "toleratedFallbackThresholdSeconds"
            ]
        },
        "dynatrace:index/WebAppKeyPerformanceXhrThresholds:WebAppKeyPerformanceXhrThresholds": {
            "properties": {
                "frustratingThresholdSeconds": {
                    "type": "number"
                },
                "toleratedThresholdSeconds": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "frustratingThresholdSeconds",
                "toleratedThresholdSeconds"
            ]
        },
        "dynatrace:index/WebAppRequestErrorsErrorRules:WebAppRequestErrorsErrorRules": {
            "properties": {
                "errorRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/WebAppRequestErrorsErrorRulesErrorRule:WebAppRequestErrorsErrorRulesErrorRule"
                    }
                }
            },
            "type": "object",
            "required": [
                "errorRules"
            ]
        },
        "dynatrace:index/WebAppRequestErrorsErrorRulesErrorRule:WebAppRequestErrorsErrorRulesErrorRule": {
            "properties": {
                "captureSettings": {
                    "$ref": "#/types/dynatrace:index/WebAppRequestErrorsErrorRulesErrorRuleCaptureSettings:WebAppRequestErrorsErrorRulesErrorRuleCaptureSettings"
                },
                "considerCspViolations": {
                    "type": "boolean"
                },
                "considerFailedImages": {
                    "type": "boolean"
                },
                "errorCodes": {
                    "type": "string"
                },
                "filterSettings": {
                    "$ref": "#/types/dynatrace:index/WebAppRequestErrorsErrorRulesErrorRuleFilterSettings:WebAppRequestErrorsErrorRulesErrorRuleFilterSettings"
                }
            },
            "type": "object",
            "required": [
                "captureSettings",
                "considerCspViolations",
                "considerFailedImages",
                "filterSettings"
            ]
        },
        "dynatrace:index/WebAppRequestErrorsErrorRulesErrorRuleCaptureSettings:WebAppRequestErrorsErrorRulesErrorRuleCaptureSettings": {
            "properties": {
                "capture": {
                    "type": "boolean"
                },
                "considerForAi": {
                    "type": "boolean"
                },
                "impactApdex": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "capture"
            ]
        },
        "dynatrace:index/WebAppRequestErrorsErrorRulesErrorRuleFilterSettings:WebAppRequestErrorsErrorRulesErrorRuleFilterSettings": {
            "properties": {
                "filter": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "dynatrace:index/WebApplicationConversionGoals:WebApplicationConversionGoals": {
            "properties": {
                "goals": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/WebApplicationConversionGoalsGoal:WebApplicationConversionGoalsGoal"
                    }
                }
            },
            "type": "object",
            "required": [
                "goals"
            ]
        },
        "dynatrace:index/WebApplicationConversionGoalsGoal:WebApplicationConversionGoalsGoal": {
            "properties": {
                "destination": {
                    "$ref": "#/types/dynatrace:index/WebApplicationConversionGoalsGoalDestination:WebApplicationConversionGoalsGoalDestination"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "userAction": {
                    "$ref": "#/types/dynatrace:index/WebApplicationConversionGoalsGoalUserAction:WebApplicationConversionGoalsGoalUserAction"
                },
                "visitDuration": {
                    "$ref": "#/types/dynatrace:index/WebApplicationConversionGoalsGoalVisitDuration:WebApplicationConversionGoalsGoalVisitDuration"
                },
                "visitNumAction": {
                    "$ref": "#/types/dynatrace:index/WebApplicationConversionGoalsGoalVisitNumAction:WebApplicationConversionGoalsGoalVisitNumAction"
                }
            },
            "type": "object",
            "required": [
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "name"
                    ]
                }
            }
        },
        "dynatrace:index/WebApplicationConversionGoalsGoalDestination:WebApplicationConversionGoalsGoalDestination": {
            "properties": {
                "caseSensitive": {
                    "type": "boolean"
                },
                "matchType": {
                    "type": "string"
                },
                "urlOrPath": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "urlOrPath"
            ]
        },
        "dynatrace:index/WebApplicationConversionGoalsGoalUserAction:WebApplicationConversionGoalsGoalUserAction": {
            "properties": {
                "actionType": {
                    "type": "string"
                },
                "caseSensitive": {
                    "type": "boolean"
                },
                "matchEntity": {
                    "type": "string"
                },
                "matchType": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "dynatrace:index/WebApplicationConversionGoalsGoalVisitDuration:WebApplicationConversionGoalsGoalVisitDuration": {
            "properties": {
                "duration": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "duration"
            ]
        },
        "dynatrace:index/WebApplicationConversionGoalsGoalVisitNumAction:WebApplicationConversionGoalsGoalVisitNumAction": {
            "properties": {
                "numUserActions": {
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "dynatrace:index/WebApplicationCustomActionApdexSettings:WebApplicationCustomActionApdexSettings": {
            "properties": {
                "frustratingFallbackThreshold": {
                    "type": "integer"
                },
                "frustratingThreshold": {
                    "type": "integer"
                },
                "threshold": {
                    "type": "integer"
                },
                "toleratedFallbackThreshold": {
                    "type": "integer"
                },
                "toleratedThreshold": {
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "dynatrace:index/WebApplicationKeyUserAction:WebApplicationKeyUserAction": {
            "properties": {
                "actions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/WebApplicationKeyUserActionAction:WebApplicationKeyUserActionAction"
                    }
                }
            },
            "type": "object",
            "required": [
                "actions"
            ]
        },
        "dynatrace:index/WebApplicationKeyUserActionAction:WebApplicationKeyUserActionAction": {
            "properties": {
                "domain": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "name",
                "type"
            ]
        },
        "dynatrace:index/WebApplicationLoadActionApdexSettings:WebApplicationLoadActionApdexSettings": {
            "properties": {
                "frustratingFallbackThreshold": {
                    "type": "integer"
                },
                "frustratingThreshold": {
                    "type": "integer"
                },
                "threshold": {
                    "type": "integer"
                },
                "toleratedFallbackThreshold": {
                    "type": "integer"
                },
                "toleratedThreshold": {
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "dynatrace:index/WebApplicationMetaDataCaptureSettings:WebApplicationMetaDataCaptureSettings": {
            "properties": {
                "captures": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/WebApplicationMetaDataCaptureSettingsCapture:WebApplicationMetaDataCaptureSettingsCapture"
                    }
                }
            },
            "type": "object"
        },
        "dynatrace:index/WebApplicationMetaDataCaptureSettingsCapture:WebApplicationMetaDataCaptureSettingsCapture": {
            "properties": {
                "capturingName": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "publicMetadata": {
                    "type": "boolean"
                },
                "type": {
                    "type": "string"
                },
                "uniqueId": {
                    "type": "integer"
                },
                "useLastValue": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "capturingName",
                "name",
                "type"
            ]
        },
        "dynatrace:index/WebApplicationMonitoringSettings:WebApplicationMonitoringSettings": {
            "properties": {
                "addCrossOriginAnonymousAttribute": {
                    "type": "boolean"
                },
                "advancedJavascriptTagSettings": {
                    "$ref": "#/types/dynatrace:index/WebApplicationMonitoringSettingsAdvancedJavascriptTagSettings:WebApplicationMonitoringSettingsAdvancedJavascriptTagSettings"
                },
                "angularPackageName": {
                    "type": "string"
                },
                "browserRestrictionSettings": {
                    "$ref": "#/types/dynatrace:index/WebApplicationMonitoringSettingsBrowserRestrictionSettings:WebApplicationMonitoringSettingsBrowserRestrictionSettings"
                },
                "cacheControlHeaderOptimizations": {
                    "type": "boolean"
                },
                "contentCapture": {
                    "$ref": "#/types/dynatrace:index/WebApplicationMonitoringSettingsContentCapture:WebApplicationMonitoringSettingsContentCapture"
                },
                "cookiePlacementDomain": {
                    "type": "string"
                },
                "correlationHeaderInclusionRegex": {
                    "type": "string"
                },
                "customConfigurationProperties": {
                    "type": "string"
                },
                "excludeXhrRegex": {
                    "type": "string"
                },
                "fetchRequests": {
                    "type": "boolean"
                },
                "injectionMode": {
                    "type": "string"
                },
                "instrumentedWebServer": {
                    "type": "boolean"
                },
                "ipAddressRestrictionSettings": {
                    "$ref": "#/types/dynatrace:index/WebApplicationMonitoringSettingsIpAddressRestrictionSettings:WebApplicationMonitoringSettingsIpAddressRestrictionSettings"
                },
                "javascriptFrameworkSupport": {
                    "$ref": "#/types/dynatrace:index/WebApplicationMonitoringSettingsJavascriptFrameworkSupport:WebApplicationMonitoringSettingsJavascriptFrameworkSupport"
                },
                "javascriptInjectionRules": {
                    "$ref": "#/types/dynatrace:index/WebApplicationMonitoringSettingsJavascriptInjectionRules:WebApplicationMonitoringSettingsJavascriptInjectionRules"
                },
                "libraryFileLocation": {
                    "type": "string"
                },
                "monitoringDataPath": {
                    "type": "string"
                },
                "sameSiteCookieAttribute": {
                    "type": "string"
                },
                "scriptTagCacheDurationInHours": {
                    "type": "integer"
                },
                "secureCookieAttribute": {
                    "type": "boolean"
                },
                "serverRequestPathId": {
                    "type": "string"
                },
                "useCors": {
                    "type": "boolean"
                },
                "xmlHttpRequest": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "contentCapture",
                "injectionMode"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "addCrossOriginAnonymousAttribute",
                        "contentCapture",
                        "injectionMode",
                        "scriptTagCacheDurationInHours"
                    ]
                }
            }
        },
        "dynatrace:index/WebApplicationMonitoringSettingsAdvancedJavascriptTagSettings:WebApplicationMonitoringSettingsAdvancedJavascriptTagSettings": {
            "properties": {
                "additionalEventHandlers": {
                    "$ref": "#/types/dynatrace:index/WebApplicationMonitoringSettingsAdvancedJavascriptTagSettingsAdditionalEventHandlers:WebApplicationMonitoringSettingsAdvancedJavascriptTagSettingsAdditionalEventHandlers"
                },
                "eventWrapperSettings": {
                    "$ref": "#/types/dynatrace:index/WebApplicationMonitoringSettingsAdvancedJavascriptTagSettingsEventWrapperSettings:WebApplicationMonitoringSettingsAdvancedJavascriptTagSettingsEventWrapperSettings"
                },
                "globalEventCaptureSettings": {
                    "$ref": "#/types/dynatrace:index/WebApplicationMonitoringSettingsAdvancedJavascriptTagSettingsGlobalEventCaptureSettings:WebApplicationMonitoringSettingsAdvancedJavascriptTagSettingsGlobalEventCaptureSettings"
                },
                "instrumentUnsupportedAjaxFrameworks": {
                    "type": "boolean"
                },
                "maxActionNameLength": {
                    "type": "integer"
                },
                "maxErrorsToCapture": {
                    "type": "integer"
                },
                "specialCharactersToEscape": {
                    "type": "string"
                },
                "syncBeaconFirefox": {
                    "type": "boolean"
                },
                "syncBeaconInternetExplorer": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "maxActionNameLength",
                "maxErrorsToCapture"
            ]
        },
        "dynatrace:index/WebApplicationMonitoringSettingsAdvancedJavascriptTagSettingsAdditionalEventHandlers:WebApplicationMonitoringSettingsAdvancedJavascriptTagSettingsAdditionalEventHandlers": {
            "properties": {
                "blur": {
                    "type": "boolean"
                },
                "change": {
                    "type": "boolean"
                },
                "click": {
                    "type": "boolean"
                },
                "maxDomNodes": {
                    "type": "integer"
                },
                "mouseup": {
                    "type": "boolean"
                },
                "toStringMethod": {
                    "type": "boolean"
                },
                "useMouseUpEventForClicks": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "maxDomNodes"
            ]
        },
        "dynatrace:index/WebApplicationMonitoringSettingsAdvancedJavascriptTagSettingsEventWrapperSettings:WebApplicationMonitoringSettingsAdvancedJavascriptTagSettingsEventWrapperSettings": {
            "properties": {
                "blur": {
                    "type": "boolean"
                },
                "change": {
                    "type": "boolean"
                },
                "click": {
                    "type": "boolean"
                },
                "mouseup": {
                    "type": "boolean"
                },
                "touchEnd": {
                    "type": "boolean"
                },
                "touchStart": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "dynatrace:index/WebApplicationMonitoringSettingsAdvancedJavascriptTagSettingsGlobalEventCaptureSettings:WebApplicationMonitoringSettingsAdvancedJavascriptTagSettingsGlobalEventCaptureSettings": {
            "properties": {
                "additionalEventCapturedAsUserInput": {
                    "type": "string"
                },
                "change": {
                    "type": "boolean"
                },
                "click": {
                    "type": "boolean"
                },
                "doubleclick": {
                    "type": "boolean"
                },
                "keydown": {
                    "type": "boolean"
                },
                "keyup": {
                    "type": "boolean"
                },
                "mousedown": {
                    "type": "boolean"
                },
                "mouseup": {
                    "type": "boolean"
                },
                "scroll": {
                    "type": "boolean"
                },
                "touchEnd": {
                    "type": "boolean"
                },
                "touchStart": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "dynatrace:index/WebApplicationMonitoringSettingsBrowserRestrictionSettings:WebApplicationMonitoringSettingsBrowserRestrictionSettings": {
            "properties": {
                "mode": {
                    "type": "string"
                },
                "restrictions": {
                    "$ref": "#/types/dynatrace:index/WebApplicationMonitoringSettingsBrowserRestrictionSettingsRestrictions:WebApplicationMonitoringSettingsBrowserRestrictionSettingsRestrictions"
                }
            },
            "type": "object",
            "required": [
                "mode"
            ]
        },
        "dynatrace:index/WebApplicationMonitoringSettingsBrowserRestrictionSettingsRestrictions:WebApplicationMonitoringSettingsBrowserRestrictionSettingsRestrictions": {
            "properties": {
                "restrictions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/WebApplicationMonitoringSettingsBrowserRestrictionSettingsRestrictionsRestriction:WebApplicationMonitoringSettingsBrowserRestrictionSettingsRestrictionsRestriction"
                    }
                }
            },
            "type": "object",
            "required": [
                "restrictions"
            ]
        },
        "dynatrace:index/WebApplicationMonitoringSettingsBrowserRestrictionSettingsRestrictionsRestriction:WebApplicationMonitoringSettingsBrowserRestrictionSettingsRestrictionsRestriction": {
            "properties": {
                "browserType": {
                    "type": "string"
                },
                "browserVersion": {
                    "type": "string"
                },
                "comparator": {
                    "type": "string"
                },
                "platform": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "browserType"
            ]
        },
        "dynatrace:index/WebApplicationMonitoringSettingsContentCapture:WebApplicationMonitoringSettingsContentCapture": {
            "properties": {
                "javascriptErrors": {
                    "type": "boolean"
                },
                "resourceTimingSettings": {
                    "$ref": "#/types/dynatrace:index/WebApplicationMonitoringSettingsContentCaptureResourceTimingSettings:WebApplicationMonitoringSettingsContentCaptureResourceTimingSettings"
                },
                "timeoutSettings": {
                    "$ref": "#/types/dynatrace:index/WebApplicationMonitoringSettingsContentCaptureTimeoutSettings:WebApplicationMonitoringSettingsContentCaptureTimeoutSettings"
                },
                "visuallyCompleteAndSpeedIndex": {
                    "type": "boolean"
                },
                "visuallyCompleteSettings": {
                    "$ref": "#/types/dynatrace:index/WebApplicationMonitoringSettingsContentCaptureVisuallyCompleteSettings:WebApplicationMonitoringSettingsContentCaptureVisuallyCompleteSettings"
                }
            },
            "type": "object"
        },
        "dynatrace:index/WebApplicationMonitoringSettingsContentCaptureResourceTimingSettings:WebApplicationMonitoringSettingsContentCaptureResourceTimingSettings": {
            "properties": {
                "instrumentationDelay": {
                    "type": "integer"
                },
                "nonW3cResourceTimings": {
                    "type": "boolean"
                },
                "resourceTimingCaptureType": {
                    "type": "string"
                },
                "resourceTimingsDomainLimit": {
                    "type": "integer"
                },
                "w3cResourceTimings": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "instrumentationDelay"
            ]
        },
        "dynatrace:index/WebApplicationMonitoringSettingsContentCaptureTimeoutSettings:WebApplicationMonitoringSettingsContentCaptureTimeoutSettings": {
            "properties": {
                "temporaryActionLimit": {
                    "type": "integer"
                },
                "temporaryActionTotalTimeout": {
                    "type": "integer"
                },
                "timedActionSupport": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "temporaryActionLimit",
                "temporaryActionTotalTimeout"
            ]
        },
        "dynatrace:index/WebApplicationMonitoringSettingsContentCaptureVisuallyCompleteSettings:WebApplicationMonitoringSettingsContentCaptureVisuallyCompleteSettings": {
            "properties": {
                "excludeUrlRegex": {
                    "type": "string"
                },
                "ignoredMutationsList": {
                    "type": "string"
                },
                "inactivityTimeout": {
                    "type": "integer"
                },
                "mutationTimeout": {
                    "type": "integer"
                },
                "threshold": {
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "dynatrace:index/WebApplicationMonitoringSettingsIpAddressRestrictionSettings:WebApplicationMonitoringSettingsIpAddressRestrictionSettings": {
            "properties": {
                "mode": {
                    "type": "string"
                },
                "restrictions": {
                    "$ref": "#/types/dynatrace:index/WebApplicationMonitoringSettingsIpAddressRestrictionSettingsRestrictions:WebApplicationMonitoringSettingsIpAddressRestrictionSettingsRestrictions"
                }
            },
            "type": "object",
            "required": [
                "mode"
            ]
        },
        "dynatrace:index/WebApplicationMonitoringSettingsIpAddressRestrictionSettingsRestrictions:WebApplicationMonitoringSettingsIpAddressRestrictionSettingsRestrictions": {
            "properties": {
                "ranges": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/WebApplicationMonitoringSettingsIpAddressRestrictionSettingsRestrictionsRange:WebApplicationMonitoringSettingsIpAddressRestrictionSettingsRestrictionsRange"
                    }
                }
            },
            "type": "object",
            "required": [
                "ranges"
            ]
        },
        "dynatrace:index/WebApplicationMonitoringSettingsIpAddressRestrictionSettingsRestrictionsRange:WebApplicationMonitoringSettingsIpAddressRestrictionSettingsRestrictionsRange": {
            "properties": {
                "address": {
                    "type": "string"
                },
                "addressTo": {
                    "type": "string"
                },
                "subnetMask": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "address"
            ]
        },
        "dynatrace:index/WebApplicationMonitoringSettingsJavascriptFrameworkSupport:WebApplicationMonitoringSettingsJavascriptFrameworkSupport": {
            "properties": {
                "activeXObject": {
                    "type": "boolean"
                },
                "angular": {
                    "type": "boolean"
                },
                "dojo": {
                    "type": "boolean"
                },
                "extjs": {
                    "type": "boolean"
                },
                "icefaces": {
                    "type": "boolean"
                },
                "jquery": {
                    "type": "boolean"
                },
                "mooTools": {
                    "type": "boolean"
                },
                "prototype": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "dynatrace:index/WebApplicationMonitoringSettingsJavascriptInjectionRules:WebApplicationMonitoringSettingsJavascriptInjectionRules": {
            "properties": {
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/WebApplicationMonitoringSettingsJavascriptInjectionRulesRule:WebApplicationMonitoringSettingsJavascriptInjectionRulesRule"
                    }
                }
            },
            "type": "object",
            "required": [
                "rules"
            ]
        },
        "dynatrace:index/WebApplicationMonitoringSettingsJavascriptInjectionRulesRule:WebApplicationMonitoringSettingsJavascriptInjectionRulesRule": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "htmlPattern": {
                    "type": "string"
                },
                "rule": {
                    "type": "string"
                },
                "target": {
                    "type": "string"
                },
                "urlOperator": {
                    "type": "string"
                },
                "urlPattern": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "rule",
                "urlOperator"
            ]
        },
        "dynatrace:index/WebApplicationSessionReplayConfig:WebApplicationSessionReplayConfig": {
            "properties": {
                "costControlPercentage": {
                    "type": "integer"
                },
                "cssResourceCapturingExclusionRules": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "enableCssResourceCapturing": {
                    "type": "boolean"
                },
                "enabled": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "costControlPercentage"
            ]
        },
        "dynatrace:index/WebApplicationUserActionAndSessionProperties:WebApplicationUserActionAndSessionProperties": {
            "properties": {
                "properties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/WebApplicationUserActionAndSessionPropertiesProperty:WebApplicationUserActionAndSessionPropertiesProperty"
                    }
                }
            },
            "type": "object"
        },
        "dynatrace:index/WebApplicationUserActionAndSessionPropertiesProperty:WebApplicationUserActionAndSessionPropertiesProperty": {
            "properties": {
                "aggregation": {
                    "type": "string"
                },
                "cleanupRule": {
                    "type": "string"
                },
                "displayName": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "ignoreCase": {
                    "type": "boolean"
                },
                "key": {
                    "type": "string"
                },
                "longStringLength": {
                    "type": "integer"
                },
                "metadataId": {
                    "type": "integer"
                },
                "origin": {
                    "type": "string"
                },
                "serverSideRequestAttribute": {
                    "type": "string"
                },
                "storeAsSessionProperty": {
                    "type": "boolean"
                },
                "storeAsUserActionProperty": {
                    "type": "boolean"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "key",
                "origin",
                "type"
            ]
        },
        "dynatrace:index/WebApplicationUserActionNamingSettings:WebApplicationUserActionNamingSettings": {
            "properties": {
                "customActionNamingRules": {
                    "$ref": "#/types/dynatrace:index/WebApplicationUserActionNamingSettingsCustomActionNamingRules:WebApplicationUserActionNamingSettingsCustomActionNamingRules"
                },
                "ignoreCase": {
                    "type": "boolean"
                },
                "loadActionNamingRules": {
                    "$ref": "#/types/dynatrace:index/WebApplicationUserActionNamingSettingsLoadActionNamingRules:WebApplicationUserActionNamingSettingsLoadActionNamingRules"
                },
                "placeholders": {
                    "$ref": "#/types/dynatrace:index/WebApplicationUserActionNamingSettingsPlaceholders:WebApplicationUserActionNamingSettingsPlaceholders"
                },
                "queryParameterCleanups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "splitUserActionsByDomain": {
                    "type": "boolean"
                },
                "useFirstDetectedLoadAction": {
                    "type": "boolean"
                },
                "xhrActionNamingRules": {
                    "$ref": "#/types/dynatrace:index/WebApplicationUserActionNamingSettingsXhrActionNamingRules:WebApplicationUserActionNamingSettingsXhrActionNamingRules"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "queryParameterCleanups"
                    ]
                }
            }
        },
        "dynatrace:index/WebApplicationUserActionNamingSettingsCustomActionNamingRules:WebApplicationUserActionNamingSettingsCustomActionNamingRules": {
            "properties": {
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/WebApplicationUserActionNamingSettingsCustomActionNamingRulesRule:WebApplicationUserActionNamingSettingsCustomActionNamingRulesRule"
                    }
                }
            },
            "type": "object",
            "required": [
                "rules"
            ]
        },
        "dynatrace:index/WebApplicationUserActionNamingSettingsCustomActionNamingRulesRule:WebApplicationUserActionNamingSettingsCustomActionNamingRulesRule": {
            "properties": {
                "conditions": {
                    "$ref": "#/types/dynatrace:index/WebApplicationUserActionNamingSettingsCustomActionNamingRulesRuleConditions:WebApplicationUserActionNamingSettingsCustomActionNamingRulesRuleConditions"
                },
                "template": {
                    "type": "string"
                },
                "useOrConditions": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "template"
            ]
        },
        "dynatrace:index/WebApplicationUserActionNamingSettingsCustomActionNamingRulesRuleConditions:WebApplicationUserActionNamingSettingsCustomActionNamingRulesRuleConditions": {
            "properties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/WebApplicationUserActionNamingSettingsCustomActionNamingRulesRuleConditionsCondition:WebApplicationUserActionNamingSettingsCustomActionNamingRulesRuleConditionsCondition"
                    }
                }
            },
            "type": "object",
            "required": [
                "conditions"
            ]
        },
        "dynatrace:index/WebApplicationUserActionNamingSettingsCustomActionNamingRulesRuleConditionsCondition:WebApplicationUserActionNamingSettingsCustomActionNamingRulesRuleConditionsCondition": {
            "properties": {
                "operand1": {
                    "type": "string"
                },
                "operand2": {
                    "type": "string"
                },
                "operator": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operand1",
                "operator"
            ]
        },
        "dynatrace:index/WebApplicationUserActionNamingSettingsLoadActionNamingRules:WebApplicationUserActionNamingSettingsLoadActionNamingRules": {
            "properties": {
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/WebApplicationUserActionNamingSettingsLoadActionNamingRulesRule:WebApplicationUserActionNamingSettingsLoadActionNamingRulesRule"
                    }
                }
            },
            "type": "object",
            "required": [
                "rules"
            ]
        },
        "dynatrace:index/WebApplicationUserActionNamingSettingsLoadActionNamingRulesRule:WebApplicationUserActionNamingSettingsLoadActionNamingRulesRule": {
            "properties": {
                "conditions": {
                    "$ref": "#/types/dynatrace:index/WebApplicationUserActionNamingSettingsLoadActionNamingRulesRuleConditions:WebApplicationUserActionNamingSettingsLoadActionNamingRulesRuleConditions"
                },
                "template": {
                    "type": "string"
                },
                "useOrConditions": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "template"
            ]
        },
        "dynatrace:index/WebApplicationUserActionNamingSettingsLoadActionNamingRulesRuleConditions:WebApplicationUserActionNamingSettingsLoadActionNamingRulesRuleConditions": {
            "properties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/WebApplicationUserActionNamingSettingsLoadActionNamingRulesRuleConditionsCondition:WebApplicationUserActionNamingSettingsLoadActionNamingRulesRuleConditionsCondition"
                    }
                }
            },
            "type": "object",
            "required": [
                "conditions"
            ]
        },
        "dynatrace:index/WebApplicationUserActionNamingSettingsLoadActionNamingRulesRuleConditionsCondition:WebApplicationUserActionNamingSettingsLoadActionNamingRulesRuleConditionsCondition": {
            "properties": {
                "operand1": {
                    "type": "string"
                },
                "operand2": {
                    "type": "string"
                },
                "operator": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operand1",
                "operator"
            ]
        },
        "dynatrace:index/WebApplicationUserActionNamingSettingsPlaceholders:WebApplicationUserActionNamingSettingsPlaceholders": {
            "properties": {
                "placeholders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/WebApplicationUserActionNamingSettingsPlaceholdersPlaceholder:WebApplicationUserActionNamingSettingsPlaceholdersPlaceholder"
                    }
                }
            },
            "type": "object",
            "required": [
                "placeholders"
            ]
        },
        "dynatrace:index/WebApplicationUserActionNamingSettingsPlaceholdersPlaceholder:WebApplicationUserActionNamingSettingsPlaceholdersPlaceholder": {
            "properties": {
                "input": {
                    "type": "string"
                },
                "metadataId": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "processingPart": {
                    "type": "string"
                },
                "processingSteps": {
                    "$ref": "#/types/dynatrace:index/WebApplicationUserActionNamingSettingsPlaceholdersPlaceholderProcessingSteps:WebApplicationUserActionNamingSettingsPlaceholdersPlaceholderProcessingSteps"
                },
                "useGuessedElementIdentifier": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "input",
                "name",
                "processingPart"
            ]
        },
        "dynatrace:index/WebApplicationUserActionNamingSettingsPlaceholdersPlaceholderProcessingSteps:WebApplicationUserActionNamingSettingsPlaceholdersPlaceholderProcessingSteps": {
            "properties": {
                "steps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/WebApplicationUserActionNamingSettingsPlaceholdersPlaceholderProcessingStepsStep:WebApplicationUserActionNamingSettingsPlaceholdersPlaceholderProcessingStepsStep"
                    }
                }
            },
            "type": "object",
            "required": [
                "steps"
            ]
        },
        "dynatrace:index/WebApplicationUserActionNamingSettingsPlaceholdersPlaceholderProcessingStepsStep:WebApplicationUserActionNamingSettingsPlaceholdersPlaceholderProcessingStepsStep": {
            "properties": {
                "fallbackToInput": {
                    "type": "boolean"
                },
                "patternAfter": {
                    "type": "string"
                },
                "patternAfterSearchType": {
                    "type": "string"
                },
                "patternBefore": {
                    "type": "string"
                },
                "patternBeforeSearchType": {
                    "type": "string"
                },
                "patternToReplace": {
                    "type": "string"
                },
                "regularExpression": {
                    "type": "string"
                },
                "replacement": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "dynatrace:index/WebApplicationUserActionNamingSettingsXhrActionNamingRules:WebApplicationUserActionNamingSettingsXhrActionNamingRules": {
            "properties": {
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/WebApplicationUserActionNamingSettingsXhrActionNamingRulesRule:WebApplicationUserActionNamingSettingsXhrActionNamingRulesRule"
                    }
                }
            },
            "type": "object",
            "required": [
                "rules"
            ]
        },
        "dynatrace:index/WebApplicationUserActionNamingSettingsXhrActionNamingRulesRule:WebApplicationUserActionNamingSettingsXhrActionNamingRulesRule": {
            "properties": {
                "conditions": {
                    "$ref": "#/types/dynatrace:index/WebApplicationUserActionNamingSettingsXhrActionNamingRulesRuleConditions:WebApplicationUserActionNamingSettingsXhrActionNamingRulesRuleConditions"
                },
                "template": {
                    "type": "string"
                },
                "useOrConditions": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "template"
            ]
        },
        "dynatrace:index/WebApplicationUserActionNamingSettingsXhrActionNamingRulesRuleConditions:WebApplicationUserActionNamingSettingsXhrActionNamingRulesRuleConditions": {
            "properties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/WebApplicationUserActionNamingSettingsXhrActionNamingRulesRuleConditionsCondition:WebApplicationUserActionNamingSettingsXhrActionNamingRulesRuleConditionsCondition"
                    }
                }
            },
            "type": "object",
            "required": [
                "conditions"
            ]
        },
        "dynatrace:index/WebApplicationUserActionNamingSettingsXhrActionNamingRulesRuleConditionsCondition:WebApplicationUserActionNamingSettingsXhrActionNamingRulesRuleConditionsCondition": {
            "properties": {
                "operand1": {
                    "type": "string"
                },
                "operand2": {
                    "type": "string"
                },
                "operator": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operand1",
                "operator"
            ]
        },
        "dynatrace:index/WebApplicationUserTags:WebApplicationUserTags": {
            "properties": {
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/WebApplicationUserTagsTag:WebApplicationUserTagsTag"
                    }
                }
            },
            "type": "object",
            "required": [
                "tags"
            ]
        },
        "dynatrace:index/WebApplicationUserTagsTag:WebApplicationUserTagsTag": {
            "properties": {
                "cleanupRule": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "ignoreCase": {
                    "type": "boolean"
                },
                "metadataId": {
                    "type": "integer"
                },
                "serverSideRequestAttribute": {
                    "type": "string"
                },
                "uniqueId": {
                    "type": "integer"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "uniqueId"
                    ]
                }
            }
        },
        "dynatrace:index/WebApplicationWaterfallSettings:WebApplicationWaterfallSettings": {
            "properties": {
                "resourceBrowserCachingThreshold": {
                    "type": "integer"
                },
                "resourcesThreshold": {
                    "type": "integer"
                },
                "slowCndResourcesThreshold": {
                    "type": "integer"
                },
                "slowFirstPartyResourcesThreshold": {
                    "type": "integer"
                },
                "slowThirdPartyResourcesThreshold": {
                    "type": "integer"
                },
                "speedIndexVisuallyCompleteRatioThreshold": {
                    "type": "integer"
                },
                "uncompressedResourcesThreshold": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "resourceBrowserCachingThreshold",
                "resourcesThreshold",
                "slowCndResourcesThreshold",
                "slowFirstPartyResourcesThreshold",
                "slowThirdPartyResourcesThreshold",
                "speedIndexVisuallyCompleteRatioThreshold",
                "uncompressedResourcesThreshold"
            ]
        },
        "dynatrace:index/WebApplicationXhrActionApdexSettings:WebApplicationXhrActionApdexSettings": {
            "properties": {
                "frustratingFallbackThreshold": {
                    "type": "integer"
                },
                "frustratingThreshold": {
                    "type": "integer"
                },
                "threshold": {
                    "type": "integer"
                },
                "toleratedFallbackThreshold": {
                    "type": "integer"
                },
                "toleratedThreshold": {
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "dynatrace:index/WebhookNotificationHeaders:WebhookNotificationHeaders": {
            "properties": {
                "headers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/WebhookNotificationHeadersHeader:WebhookNotificationHeadersHeader"
                    }
                }
            },
            "type": "object",
            "required": [
                "headers"
            ]
        },
        "dynatrace:index/WebhookNotificationHeadersHeader:WebhookNotificationHeadersHeader": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "secretValue": {
                    "type": "string",
                    "secret": true
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "dynatrace:index/WebhookNotificationOauth2Credentials:WebhookNotificationOauth2Credentials": {
            "properties": {
                "accessTokenUrl": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string",
                    "secret": true
                },
                "scope": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "accessTokenUrl",
                "clientId",
                "clientSecret"
            ]
        },
        "dynatrace:index/XmattersNotificationHeaders:XmattersNotificationHeaders": {
            "properties": {
                "headers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/XmattersNotificationHeadersHeader:XmattersNotificationHeadersHeader"
                    }
                }
            },
            "type": "object",
            "required": [
                "headers"
            ]
        },
        "dynatrace:index/XmattersNotificationHeadersHeader:XmattersNotificationHeadersHeader": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "secretValue": {
                    "type": "string",
                    "secret": true
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "dynatrace:index/getAlertingProfilesValue:getAlertingProfilesValue": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "legacyId": {
                    "type": "string"
                },
                "managementZoneId": {
                    "type": "string"
                },
                "managementZoneLegacyId": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "legacyId",
                "managementZoneId",
                "managementZoneLegacyId",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "dynatrace:index/getDocumentsValue:getDocumentsValue": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name",
                "owner",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "dynatrace:index/getEntitiesEntity:getEntitiesEntity": {
            "properties": {
                "displayName": {
                    "type": "string"
                },
                "entityId": {
                    "type": "string"
                },
                "lastSeenTms": {
                    "type": "integer"
                },
                "properties": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/getEntitiesEntityTag:getEntitiesEntityTag"
                    }
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "properties"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "dynatrace:index/getEntitiesEntityTag:getEntitiesEntityTag": {
            "properties": {
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/getEntitiesEntityTagTag:getEntitiesEntityTagTag"
                    }
                }
            },
            "type": "object"
        },
        "dynatrace:index/getEntitiesEntityTagTag:getEntitiesEntityTagTag": {
            "properties": {
                "context": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "stringRepresentation": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "context",
                "key"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "dynatrace:index/getHubItemsItem:getHubItemsItem": {
            "properties": {
                "activationLink": {
                    "type": "string"
                },
                "artifactId": {
                    "type": "string"
                },
                "authorLogo": {
                    "type": "string"
                },
                "authorName": {
                    "type": "string"
                },
                "clusterCompatible": {
                    "type": "boolean"
                },
                "comingSoon": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "documentationLink": {
                    "type": "string"
                },
                "hasDescriptionBlocks": {
                    "type": "boolean"
                },
                "itemId": {
                    "type": "string"
                },
                "logo": {
                    "type": "string"
                },
                "marketingLink": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "notCompatibleReason": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "activationLink",
                "artifactId",
                "authorLogo",
                "authorName",
                "clusterCompatible",
                "comingSoon",
                "description",
                "documentationLink",
                "hasDescriptionBlocks",
                "itemId",
                "logo",
                "marketingLink",
                "name",
                "notCompatibleReason",
                "tags",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "dynatrace:index/getManagementZonesValue:getManagementZonesValue": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "legacyId": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "description",
                "id",
                "legacyId",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "dynatrace:index/getRemoteEnvironmentsRemoteEnvironment:getRemoteEnvironmentsRemoteEnvironment": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "networkScope": {
                    "type": "string"
                },
                "token": {
                    "type": "string",
                    "secret": true
                },
                "uri": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "name",
                "networkScope",
                "token",
                "uri"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "dynatrace:index/getSyntheticLocationsLocations:getSyntheticLocationsLocations": {
            "properties": {
                "cloudPlatform": {
                    "type": "string"
                },
                "entityId": {
                    "type": "string"
                },
                "ips": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                },
                "stage": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "cloudPlatform",
                "ips",
                "stage",
                "status"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "dynatrace:index/getSyntheticNodesNode:getSyntheticNodesNode": {
            "properties": {
                "activeGateVersion": {
                    "type": "string"
                },
                "autoUpdate": {
                    "type": "boolean"
                },
                "browserMonitors": {
                    "type": "boolean"
                },
                "healthCheckStatus": {
                    "type": "string"
                },
                "hostname": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "ips": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "oneAgentRouting": {
                    "type": "boolean"
                },
                "operatingSystem": {
                    "type": "string"
                },
                "playerVersion": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "activeGateVersion",
                "autoUpdate",
                "browserMonitors",
                "healthCheckStatus",
                "hostname",
                "id",
                "ips",
                "oneAgentRouting",
                "operatingSystem",
                "playerVersion",
                "status",
                "version"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the dynatrace package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "accountId": {
                "type": "string",
                "secret": true
            },
            "automationClientId": {
                "type": "string",
                "secret": true
            },
            "automationClientSecret": {
                "type": "string",
                "secret": true
            },
            "automationEnvUrl": {
                "type": "string",
                "description": "The URL of the Dynatrace Environment with Platform capabilities turned on (`https://#####.apps.dynatrace.com)`. This is\noptional configuration when `dt_env_url` already specifies a SaaS Environment like `https://#####.live.dynatrace.com` or\n`https://#####.apps.dynatrace.com`\n"
            },
            "automationTokenUrl": {
                "type": "string",
                "description": "The URL that provides the Bearer tokens when accessing the Automation REST API. This is optional configuration when\n`dt_env_url` already specifies a SaaS Environment like `https://#####.live.dynatrace.com` or\n`https://#####.apps.dynatrace.com`\n"
            },
            "clientId": {
                "type": "string",
                "secret": true
            },
            "clientSecret": {
                "type": "string",
                "secret": true
            },
            "dtApiToken": {
                "type": "string",
                "secret": true
            },
            "dtClusterApiToken": {
                "type": "string",
                "secret": true
            },
            "dtClusterUrl": {
                "type": "string",
                "secret": true
            },
            "dtEnvUrl": {
                "type": "string"
            },
            "iamAccountId": {
                "type": "string",
                "secret": true
            },
            "iamClientId": {
                "type": "string",
                "secret": true
            },
            "iamClientSecret": {
                "type": "string",
                "secret": true
            }
        },
        "inputProperties": {
            "accountId": {
                "type": "string",
                "secret": true
            },
            "automationClientId": {
                "type": "string",
                "secret": true
            },
            "automationClientSecret": {
                "type": "string",
                "secret": true
            },
            "automationEnvUrl": {
                "type": "string",
                "description": "The URL of the Dynatrace Environment with Platform capabilities turned on (`https://#####.apps.dynatrace.com)`. This is\noptional configuration when `dt_env_url` already specifies a SaaS Environment like `https://#####.live.dynatrace.com` or\n`https://#####.apps.dynatrace.com`\n"
            },
            "automationTokenUrl": {
                "type": "string",
                "description": "The URL that provides the Bearer tokens when accessing the Automation REST API. This is optional configuration when\n`dt_env_url` already specifies a SaaS Environment like `https://#####.live.dynatrace.com` or\n`https://#####.apps.dynatrace.com`\n"
            },
            "clientId": {
                "type": "string",
                "secret": true
            },
            "clientSecret": {
                "type": "string",
                "secret": true
            },
            "dtApiToken": {
                "type": "string",
                "secret": true
            },
            "dtClusterApiToken": {
                "type": "string",
                "secret": true
            },
            "dtClusterUrl": {
                "type": "string",
                "secret": true
            },
            "dtEnvUrl": {
                "type": "string"
            },
            "iamAccountId": {
                "type": "string",
                "secret": true
            },
            "iamClientId": {
                "type": "string",
                "secret": true
            },
            "iamClientSecret": {
                "type": "string",
                "secret": true
            }
        }
    },
    "resources": {
        "dynatrace:index/activegateToken:ActivegateToken": {
            "properties": {
                "authTokenEnforcementManuallyEnabled": {
                    "type": "boolean",
                    "description": "Manually enforce ActiveGate token authentication\n"
                },
                "expiringTokenNotificationsEnabled": {
                    "type": "boolean",
                    "description": "Note: ActiveGate tokens notifications are sent only when you deployed ActiveGate tokens with expiration dates in your\nenvironment and notifications are defined ([see notification settings](/ui/settings/builtin:problem.notifications))\n"
                }
            },
            "required": [
                "authTokenEnforcementManuallyEnabled",
                "expiringTokenNotificationsEnabled"
            ],
            "inputProperties": {
                "authTokenEnforcementManuallyEnabled": {
                    "type": "boolean",
                    "description": "Manually enforce ActiveGate token authentication\n"
                },
                "expiringTokenNotificationsEnabled": {
                    "type": "boolean",
                    "description": "Note: ActiveGate tokens notifications are sent only when you deployed ActiveGate tokens with expiration dates in your\nenvironment and notifications are defined ([see notification settings](/ui/settings/builtin:problem.notifications))\n"
                }
            },
            "requiredInputs": [
                "authTokenEnforcementManuallyEnabled",
                "expiringTokenNotificationsEnabled"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ActivegateToken resources.\n",
                "properties": {
                    "authTokenEnforcementManuallyEnabled": {
                        "type": "boolean",
                        "description": "Manually enforce ActiveGate token authentication\n"
                    },
                    "expiringTokenNotificationsEnabled": {
                        "type": "boolean",
                        "description": "Note: ActiveGate tokens notifications are sent only when you deployed ActiveGate tokens with expiration dates in your\nenvironment and notifications are defined ([see notification settings](/ui/settings/builtin:problem.notifications))\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/activegateUpdates:ActivegateUpdates": {
            "properties": {
                "autoUpdate": {
                    "type": "boolean",
                    "description": "Automatic updates at earliest convenience\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of this setting (ENVIRONMENT_ACTIVE_GATE). Omit this property if you want to cover the whole environment.\n"
                }
            },
            "required": [
                "autoUpdate"
            ],
            "inputProperties": {
                "autoUpdate": {
                    "type": "boolean",
                    "description": "Automatic updates at earliest convenience\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of this setting (ENVIRONMENT_ACTIVE_GATE). Omit this property if you want to cover the whole environment.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "autoUpdate"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ActivegateUpdates resources.\n",
                "properties": {
                    "autoUpdate": {
                        "type": "boolean",
                        "description": "Automatic updates at earliest convenience\n"
                    },
                    "scope": {
                        "type": "string",
                        "description": "The scope of this setting (ENVIRONMENT_ACTIVE_GATE). Omit this property if you want to cover the whole environment.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/agToken:AgToken": {
            "properties": {
                "expirationDate": {
                    "type": "string",
                    "description": "The expiration date of the token. You can use one of the following formats: * Timestamp in UTC milliseconds. *\nHuman-readable format of 2021-01-25T05:57:01.123+01:00. If no time zone is specified, UTC is used. You can use a space\ncharacter instead of the T. Seconds and fractions of a second are optional. * Relative timeframe, back from now. The\nformat is now-NU/A, where N is the amount of time, U is the unit of time, and A is an alignment. The alignment rounds\nall the smaller values to the nearest zero in the past. For example, now-1y/w is one year back, aligned by a week. You\ncan also specify relative timeframe without an alignment: now-NU. Supported time units for the relative timeframe are: -\nm: minutes - h: hours - d: days - w: weeks - M: months - y: years\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the token.\n"
                },
                "seed": {
                    "type": "boolean",
                    "description": "The token is a seed token (true) or an individual token (false). We recommend the individual token option (false)\n"
                },
                "tenantToken": {
                    "type": "string",
                    "description": "The tenant token. This information isn't directly related to the Active Gate Token. It's included for convenience. You\nrequire the permission `InstallerDownload` for that attribute to get populated\n",
                    "secret": true
                },
                "token": {
                    "type": "string",
                    "description": "The secret of the token.\n",
                    "secret": true
                },
                "type": {
                    "type": "string",
                    "description": "The type of the ActiveGate for which the token is valid. Possible values are `ENVIRONMENT` or `CLUSTER`\n"
                }
            },
            "required": [
                "name",
                "tenantToken",
                "token",
                "type"
            ],
            "inputProperties": {
                "expirationDate": {
                    "type": "string",
                    "description": "The expiration date of the token. You can use one of the following formats: * Timestamp in UTC milliseconds. *\nHuman-readable format of 2021-01-25T05:57:01.123+01:00. If no time zone is specified, UTC is used. You can use a space\ncharacter instead of the T. Seconds and fractions of a second are optional. * Relative timeframe, back from now. The\nformat is now-NU/A, where N is the amount of time, U is the unit of time, and A is an alignment. The alignment rounds\nall the smaller values to the nearest zero in the past. For example, now-1y/w is one year back, aligned by a week. You\ncan also specify relative timeframe without an alignment: now-NU. Supported time units for the relative timeframe are: -\nm: minutes - h: hours - d: days - w: weeks - M: months - y: years\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the token.\n"
                },
                "seed": {
                    "type": "boolean",
                    "description": "The token is a seed token (true) or an individual token (false). We recommend the individual token option (false)\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the ActiveGate for which the token is valid. Possible values are `ENVIRONMENT` or `CLUSTER`\n"
                }
            },
            "requiredInputs": [
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AgToken resources.\n",
                "properties": {
                    "expirationDate": {
                        "type": "string",
                        "description": "The expiration date of the token. You can use one of the following formats: * Timestamp in UTC milliseconds. *\nHuman-readable format of 2021-01-25T05:57:01.123+01:00. If no time zone is specified, UTC is used. You can use a space\ncharacter instead of the T. Seconds and fractions of a second are optional. * Relative timeframe, back from now. The\nformat is now-NU/A, where N is the amount of time, U is the unit of time, and A is an alignment. The alignment rounds\nall the smaller values to the nearest zero in the past. For example, now-1y/w is one year back, aligned by a week. You\ncan also specify relative timeframe without an alignment: now-NU. Supported time units for the relative timeframe are: -\nm: minutes - h: hours - d: days - w: weeks - M: months - y: years\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the token.\n"
                    },
                    "seed": {
                        "type": "boolean",
                        "description": "The token is a seed token (true) or an individual token (false). We recommend the individual token option (false)\n"
                    },
                    "tenantToken": {
                        "type": "string",
                        "description": "The tenant token. This information isn't directly related to the Active Gate Token. It's included for convenience. You\nrequire the permission `InstallerDownload` for that attribute to get populated\n",
                        "secret": true
                    },
                    "token": {
                        "type": "string",
                        "description": "The secret of the token.\n",
                        "secret": true
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the ActiveGate for which the token is valid. Possible values are `ENVIRONMENT` or `CLUSTER`\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/aixExtension:AixExtension": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "hostId": {
                    "type": "string",
                    "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.\n"
                },
                "useGlobalSettings": {
                    "type": "boolean",
                    "description": "Use global settings\n"
                }
            },
            "required": [
                "hostId",
                "useGlobalSettings"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "hostId": {
                    "type": "string",
                    "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.\n",
                    "willReplaceOnChanges": true
                },
                "useGlobalSettings": {
                    "type": "boolean",
                    "description": "Use global settings\n"
                }
            },
            "requiredInputs": [
                "hostId",
                "useGlobalSettings"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AixExtension resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                    },
                    "hostId": {
                        "type": "string",
                        "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.\n",
                        "willReplaceOnChanges": true
                    },
                    "useGlobalSettings": {
                        "type": "boolean",
                        "description": "Use global settings\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/alerting:Alerting": {
            "properties": {
                "filters": {
                    "$ref": "#/types/dynatrace:index/AlertingFilters:AlertingFilters",
                    "description": "The list of event filters. For all filters that are *negated* inside of these event filters, that is all `Predefined` as\nwell as `Custom` (Title and/or Description) ones the AND logic applies. For all *non-negated* ones the OR logic applies.\nBetween these two groups, negated and non-negated, the AND logic applies. If you specify both severity rule and event\nfilter, the AND logic applies\n"
                },
                "legacyId": {
                    "type": "string",
                    "description": "The ID of this setting when referred to by the Config REST API V1\n"
                },
                "managementZone": {
                    "type": "string",
                    "description": "Entities which are part of the configured management zones will match this alerting profile. It is recommended to use\nmanual tags instead.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the alerting profile, displayed in the UI\n"
                },
                "rules": {
                    "$ref": "#/types/dynatrace:index/AlertingRules:AlertingRules",
                    "description": "A list of rules for management zone usage. Each rule is evaluated independently of all other rules\n"
                }
            },
            "required": [
                "legacyId",
                "name"
            ],
            "inputProperties": {
                "filters": {
                    "$ref": "#/types/dynatrace:index/AlertingFilters:AlertingFilters",
                    "description": "The list of event filters. For all filters that are *negated* inside of these event filters, that is all `Predefined` as\nwell as `Custom` (Title and/or Description) ones the AND logic applies. For all *non-negated* ones the OR logic applies.\nBetween these two groups, negated and non-negated, the AND logic applies. If you specify both severity rule and event\nfilter, the AND logic applies\n"
                },
                "legacyId": {
                    "type": "string",
                    "description": "The ID of this setting when referred to by the Config REST API V1\n"
                },
                "managementZone": {
                    "type": "string",
                    "description": "Entities which are part of the configured management zones will match this alerting profile. It is recommended to use\nmanual tags instead.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the alerting profile, displayed in the UI\n"
                },
                "rules": {
                    "$ref": "#/types/dynatrace:index/AlertingRules:AlertingRules",
                    "description": "A list of rules for management zone usage. Each rule is evaluated independently of all other rules\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Alerting resources.\n",
                "properties": {
                    "filters": {
                        "$ref": "#/types/dynatrace:index/AlertingFilters:AlertingFilters",
                        "description": "The list of event filters. For all filters that are *negated* inside of these event filters, that is all `Predefined` as\nwell as `Custom` (Title and/or Description) ones the AND logic applies. For all *non-negated* ones the OR logic applies.\nBetween these two groups, negated and non-negated, the AND logic applies. If you specify both severity rule and event\nfilter, the AND logic applies\n"
                    },
                    "legacyId": {
                        "type": "string",
                        "description": "The ID of this setting when referred to by the Config REST API V1\n"
                    },
                    "managementZone": {
                        "type": "string",
                        "description": "Entities which are part of the configured management zones will match this alerting profile. It is recommended to use\nmanual tags instead.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the alerting profile, displayed in the UI\n"
                    },
                    "rules": {
                        "$ref": "#/types/dynatrace:index/AlertingRules:AlertingRules",
                        "description": "A list of rules for management zone usage. Each rule is evaluated independently of all other rules\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/alertingProfile:AlertingProfile": {
            "properties": {
                "displayName": {
                    "type": "string",
                    "description": "The name of the alerting profile, displayed in the UI\n"
                },
                "eventTypeFilters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/AlertingProfileEventTypeFilter:AlertingProfileEventTypeFilter"
                    },
                    "description": "The list of event filters. For all filters that are *negated* inside of these event filters, that is all `Predefined` as\nwell as `Custom` (Title and/or Description) ones the AND logic applies. For all *non-negated* ones the OR logic applies.\nBetween these two groups, negated and non-negated, the AND logic applies. If you specify both severity rule and event\nfilter, the AND logic applies\n"
                },
                "metadata": {
                    "$ref": "#/types/dynatrace:index/AlertingProfileMetadata:AlertingProfileMetadata",
                    "description": "`metadata` exists for backwards compatibility but shouldn't get specified anymore\n",
                    "deprecationMessage": "`metadata` exists for backwards compatibility but shouldn't get specified anymore"
                },
                "mzId": {
                    "type": "string",
                    "description": "The ID of the management zone to which the alerting profile applies\n"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/AlertingProfileRule:AlertingProfileRule"
                    },
                    "description": "A list of rules for management zone usage. Each rule is evaluated independently of all other rules\n"
                },
                "unknowns": {
                    "type": "string",
                    "description": "allows for configuring properties that are not explicitly supported by the current version of this provider\n"
                }
            },
            "required": [
                "displayName"
            ],
            "inputProperties": {
                "displayName": {
                    "type": "string",
                    "description": "The name of the alerting profile, displayed in the UI\n"
                },
                "eventTypeFilters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/AlertingProfileEventTypeFilter:AlertingProfileEventTypeFilter"
                    },
                    "description": "The list of event filters. For all filters that are *negated* inside of these event filters, that is all `Predefined` as\nwell as `Custom` (Title and/or Description) ones the AND logic applies. For all *non-negated* ones the OR logic applies.\nBetween these two groups, negated and non-negated, the AND logic applies. If you specify both severity rule and event\nfilter, the AND logic applies\n"
                },
                "metadata": {
                    "$ref": "#/types/dynatrace:index/AlertingProfileMetadata:AlertingProfileMetadata",
                    "description": "`metadata` exists for backwards compatibility but shouldn't get specified anymore\n",
                    "deprecationMessage": "`metadata` exists for backwards compatibility but shouldn't get specified anymore"
                },
                "mzId": {
                    "type": "string",
                    "description": "The ID of the management zone to which the alerting profile applies\n"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/AlertingProfileRule:AlertingProfileRule"
                    },
                    "description": "A list of rules for management zone usage. Each rule is evaluated independently of all other rules\n"
                },
                "unknowns": {
                    "type": "string",
                    "description": "allows for configuring properties that are not explicitly supported by the current version of this provider\n"
                }
            },
            "requiredInputs": [
                "displayName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AlertingProfile resources.\n",
                "properties": {
                    "displayName": {
                        "type": "string",
                        "description": "The name of the alerting profile, displayed in the UI\n"
                    },
                    "eventTypeFilters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/dynatrace:index/AlertingProfileEventTypeFilter:AlertingProfileEventTypeFilter"
                        },
                        "description": "The list of event filters. For all filters that are *negated* inside of these event filters, that is all `Predefined` as\nwell as `Custom` (Title and/or Description) ones the AND logic applies. For all *non-negated* ones the OR logic applies.\nBetween these two groups, negated and non-negated, the AND logic applies. If you specify both severity rule and event\nfilter, the AND logic applies\n"
                    },
                    "metadata": {
                        "$ref": "#/types/dynatrace:index/AlertingProfileMetadata:AlertingProfileMetadata",
                        "description": "`metadata` exists for backwards compatibility but shouldn't get specified anymore\n",
                        "deprecationMessage": "`metadata` exists for backwards compatibility but shouldn't get specified anymore"
                    },
                    "mzId": {
                        "type": "string",
                        "description": "The ID of the management zone to which the alerting profile applies\n"
                    },
                    "rules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/dynatrace:index/AlertingProfileRule:AlertingProfileRule"
                        },
                        "description": "A list of rules for management zone usage. Each rule is evaluated independently of all other rules\n"
                    },
                    "unknowns": {
                        "type": "string",
                        "description": "allows for configuring properties that are not explicitly supported by the current version of this provider\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/ansibleTowerNotification:AnsibleTowerNotification": {
            "properties": {
                "active": {
                    "type": "boolean",
                    "description": "The notification is active (`true`) or inactive (`false`). Default is `false`.\n"
                },
                "customMessage": {
                    "type": "string",
                    "description": "The custom message of the notification. This message will be displayed in the extra variables **Message** field of your\njob template. You can use the following placeholders: * `{ImpactedEntities}`: Details about the entities impacted by the\nproblem in form of a JSON array. * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities. *\n`{PID}`: The ID of the reported problem. * `{ProblemDetailsText}`: All problem event details, including root cause, as a\ntext-formatted string. * `{ProblemID}`: The display number of the reported problem. * `{ProblemImpact}`: The [impact\nlevel](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are\n`APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`. * `{ProblemSeverity}`: The [severity\nlevel](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`,\n`ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`. * `{ProblemTitle}`: A short description of the\nproblem. * `{ProblemURL}`: The URL of the problem within Dynatrace. * `{State}`: The state of the problem. Possible\nvalues are `OPEN` and `RESOLVED`. * `{Tags}`: The list of tags that are defined for all impacted entities, separated by\ncommas\n"
                },
                "insecure": {
                    "type": "boolean",
                    "description": "Accept any, including self-signed and invalid, SSL certificate (`true`) or only trusted (`false`) certificates. Default\nis `false`.\n"
                },
                "jobTemplateUrl": {
                    "type": "string",
                    "description": "The URL of the target Ansible Tower job template\n"
                },
                "legacyId": {
                    "type": "string",
                    "description": "The ID of these settings when referred to from resources requiring the REST API V1 keys\n"
                },
                "name": {
                    "type": "string",
                    "description": "The display name within the Dynatrace WebUI.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password for the Ansible Tower account\n",
                    "secret": true
                },
                "profile": {
                    "type": "string",
                    "description": "The ID of the associated alerting profile.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username of the Ansible Tower account\n"
                }
            },
            "required": [
                "customMessage",
                "jobTemplateUrl",
                "legacyId",
                "name",
                "profile",
                "username"
            ],
            "inputProperties": {
                "active": {
                    "type": "boolean",
                    "description": "The notification is active (`true`) or inactive (`false`). Default is `false`.\n"
                },
                "customMessage": {
                    "type": "string",
                    "description": "The custom message of the notification. This message will be displayed in the extra variables **Message** field of your\njob template. You can use the following placeholders: * `{ImpactedEntities}`: Details about the entities impacted by the\nproblem in form of a JSON array. * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities. *\n`{PID}`: The ID of the reported problem. * `{ProblemDetailsText}`: All problem event details, including root cause, as a\ntext-formatted string. * `{ProblemID}`: The display number of the reported problem. * `{ProblemImpact}`: The [impact\nlevel](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are\n`APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`. * `{ProblemSeverity}`: The [severity\nlevel](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`,\n`ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`. * `{ProblemTitle}`: A short description of the\nproblem. * `{ProblemURL}`: The URL of the problem within Dynatrace. * `{State}`: The state of the problem. Possible\nvalues are `OPEN` and `RESOLVED`. * `{Tags}`: The list of tags that are defined for all impacted entities, separated by\ncommas\n"
                },
                "insecure": {
                    "type": "boolean",
                    "description": "Accept any, including self-signed and invalid, SSL certificate (`true`) or only trusted (`false`) certificates. Default\nis `false`.\n"
                },
                "jobTemplateUrl": {
                    "type": "string",
                    "description": "The URL of the target Ansible Tower job template\n"
                },
                "legacyId": {
                    "type": "string",
                    "description": "The ID of these settings when referred to from resources requiring the REST API V1 keys\n"
                },
                "name": {
                    "type": "string",
                    "description": "The display name within the Dynatrace WebUI.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password for the Ansible Tower account\n",
                    "secret": true
                },
                "profile": {
                    "type": "string",
                    "description": "The ID of the associated alerting profile.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username of the Ansible Tower account\n"
                }
            },
            "requiredInputs": [
                "customMessage",
                "jobTemplateUrl",
                "profile",
                "username"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AnsibleTowerNotification resources.\n",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "description": "The notification is active (`true`) or inactive (`false`). Default is `false`.\n"
                    },
                    "customMessage": {
                        "type": "string",
                        "description": "The custom message of the notification. This message will be displayed in the extra variables **Message** field of your\njob template. You can use the following placeholders: * `{ImpactedEntities}`: Details about the entities impacted by the\nproblem in form of a JSON array. * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities. *\n`{PID}`: The ID of the reported problem. * `{ProblemDetailsText}`: All problem event details, including root cause, as a\ntext-formatted string. * `{ProblemID}`: The display number of the reported problem. * `{ProblemImpact}`: The [impact\nlevel](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are\n`APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`. * `{ProblemSeverity}`: The [severity\nlevel](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`,\n`ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`. * `{ProblemTitle}`: A short description of the\nproblem. * `{ProblemURL}`: The URL of the problem within Dynatrace. * `{State}`: The state of the problem. Possible\nvalues are `OPEN` and `RESOLVED`. * `{Tags}`: The list of tags that are defined for all impacted entities, separated by\ncommas\n"
                    },
                    "insecure": {
                        "type": "boolean",
                        "description": "Accept any, including self-signed and invalid, SSL certificate (`true`) or only trusted (`false`) certificates. Default\nis `false`.\n"
                    },
                    "jobTemplateUrl": {
                        "type": "string",
                        "description": "The URL of the target Ansible Tower job template\n"
                    },
                    "legacyId": {
                        "type": "string",
                        "description": "The ID of these settings when referred to from resources requiring the REST API V1 keys\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The display name within the Dynatrace WebUI.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "The password for the Ansible Tower account\n",
                        "secret": true
                    },
                    "profile": {
                        "type": "string",
                        "description": "The ID of the associated alerting profile.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "The username of the Ansible Tower account\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/apiDetection:ApiDetection": {
            "properties": {
                "apiColor": {
                    "type": "string",
                    "description": "This color will be used to highlight APIs when viewing code level data, such as distributed traces or method hotspots.\n"
                },
                "apiName": {
                    "type": "string",
                    "description": "API name\n"
                },
                "conditions": {
                    "$ref": "#/types/dynatrace:index/ApiDetectionConditions:ApiDetectionConditions",
                    "description": "List of conditions\n"
                },
                "insertAfter": {
                    "type": "string",
                    "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                },
                "technology": {
                    "type": "string",
                    "description": "Restrict this rule to a specific technology.\n"
                },
                "thirdPartyApi": {
                    "type": "boolean",
                    "description": "This API defines a third party library\n"
                }
            },
            "required": [
                "apiColor",
                "apiName",
                "insertAfter",
                "thirdPartyApi"
            ],
            "inputProperties": {
                "apiColor": {
                    "type": "string",
                    "description": "This color will be used to highlight APIs when viewing code level data, such as distributed traces or method hotspots.\n"
                },
                "apiName": {
                    "type": "string",
                    "description": "API name\n"
                },
                "conditions": {
                    "$ref": "#/types/dynatrace:index/ApiDetectionConditions:ApiDetectionConditions",
                    "description": "List of conditions\n"
                },
                "insertAfter": {
                    "type": "string",
                    "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                },
                "technology": {
                    "type": "string",
                    "description": "Restrict this rule to a specific technology.\n"
                },
                "thirdPartyApi": {
                    "type": "boolean",
                    "description": "This API defines a third party library\n"
                }
            },
            "requiredInputs": [
                "apiColor",
                "apiName",
                "thirdPartyApi"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ApiDetection resources.\n",
                "properties": {
                    "apiColor": {
                        "type": "string",
                        "description": "This color will be used to highlight APIs when viewing code level data, such as distributed traces or method hotspots.\n"
                    },
                    "apiName": {
                        "type": "string",
                        "description": "API name\n"
                    },
                    "conditions": {
                        "$ref": "#/types/dynatrace:index/ApiDetectionConditions:ApiDetectionConditions",
                        "description": "List of conditions\n"
                    },
                    "insertAfter": {
                        "type": "string",
                        "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                    },
                    "technology": {
                        "type": "string",
                        "description": "Restrict this rule to a specific technology.\n"
                    },
                    "thirdPartyApi": {
                        "type": "boolean",
                        "description": "This API defines a third party library\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/apiToken:ApiToken": {
            "properties": {
                "creationDate": {
                    "type": "string",
                    "description": "Token creation date in ISO 8601 format (yyyy-MM-dd'T'HH:mm:ss.SSS'Z')\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "The token is enabled (true) or disabled (false), default disabled (false).\n"
                },
                "expirationDate": {
                    "type": "string",
                    "description": "The expiration date of the token.\n"
                },
                "lastUsedDate": {
                    "type": "string",
                    "description": "Token last used date in ISO 8601 format (yyyy-MM-dd'T'HH:mm:ss.SSS'Z')\n"
                },
                "lastUsedIpAddress": {
                    "type": "string",
                    "description": "Token last used IP address.\n"
                },
                "modifiedDate": {
                    "type": "string",
                    "description": "Token last modified date in ISO 8601 format (yyyy-MM-dd'T'HH:mm:ss.SSS'Z').\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the token.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "The owner of the token\n"
                },
                "personalAccessToken": {
                    "type": "boolean",
                    "description": "The token is a personal access token (true) or an API token (false).\n"
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of the scopes to be assigned to the token.\n"
                },
                "token": {
                    "type": "string",
                    "description": "The secret of the token.\n",
                    "secret": true
                }
            },
            "required": [
                "creationDate",
                "lastUsedDate",
                "lastUsedIpAddress",
                "modifiedDate",
                "name",
                "owner",
                "scopes",
                "token"
            ],
            "inputProperties": {
                "creationDate": {
                    "type": "string",
                    "description": "Token creation date in ISO 8601 format (yyyy-MM-dd'T'HH:mm:ss.SSS'Z')\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "The token is enabled (true) or disabled (false), default disabled (false).\n"
                },
                "expirationDate": {
                    "type": "string",
                    "description": "The expiration date of the token.\n"
                },
                "lastUsedDate": {
                    "type": "string",
                    "description": "Token last used date in ISO 8601 format (yyyy-MM-dd'T'HH:mm:ss.SSS'Z')\n"
                },
                "lastUsedIpAddress": {
                    "type": "string",
                    "description": "Token last used IP address.\n"
                },
                "modifiedDate": {
                    "type": "string",
                    "description": "Token last modified date in ISO 8601 format (yyyy-MM-dd'T'HH:mm:ss.SSS'Z').\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the token.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "The owner of the token\n"
                },
                "personalAccessToken": {
                    "type": "boolean",
                    "description": "The token is a personal access token (true) or an API token (false).\n"
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of the scopes to be assigned to the token.\n"
                }
            },
            "requiredInputs": [
                "scopes"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ApiToken resources.\n",
                "properties": {
                    "creationDate": {
                        "type": "string",
                        "description": "Token creation date in ISO 8601 format (yyyy-MM-dd'T'HH:mm:ss.SSS'Z')\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "The token is enabled (true) or disabled (false), default disabled (false).\n"
                    },
                    "expirationDate": {
                        "type": "string",
                        "description": "The expiration date of the token.\n"
                    },
                    "lastUsedDate": {
                        "type": "string",
                        "description": "Token last used date in ISO 8601 format (yyyy-MM-dd'T'HH:mm:ss.SSS'Z')\n"
                    },
                    "lastUsedIpAddress": {
                        "type": "string",
                        "description": "Token last used IP address.\n"
                    },
                    "modifiedDate": {
                        "type": "string",
                        "description": "Token last modified date in ISO 8601 format (yyyy-MM-dd'T'HH:mm:ss.SSS'Z').\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the token.\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "The owner of the token\n"
                    },
                    "personalAccessToken": {
                        "type": "boolean",
                        "description": "The token is a personal access token (true) or an API token (false).\n"
                    },
                    "scopes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of the scopes to be assigned to the token.\n"
                    },
                    "token": {
                        "type": "string",
                        "description": "The secret of the token.\n",
                        "secret": true
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/appMonitoring:AppMonitoring": {
            "properties": {
                "defaultLogLevel": {
                    "type": "string",
                    "description": "Possible Values: `All`, `Off`\n"
                }
            },
            "required": [
                "defaultLogLevel"
            ],
            "inputProperties": {
                "defaultLogLevel": {
                    "type": "string",
                    "description": "Possible Values: `All`, `Off`\n"
                }
            },
            "requiredInputs": [
                "defaultLogLevel"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AppMonitoring resources.\n",
                "properties": {
                    "defaultLogLevel": {
                        "type": "string",
                        "description": "Possible Values: `All`, `Off`\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/applicationAnomalies:ApplicationAnomalies": {
            "properties": {
                "failureRate": {
                    "$ref": "#/types/dynatrace:index/ApplicationAnomaliesFailureRate:ApplicationAnomaliesFailureRate",
                    "description": "Configuration of failure rate increase detection\n"
                },
                "responseTime": {
                    "$ref": "#/types/dynatrace:index/ApplicationAnomaliesResponseTime:ApplicationAnomaliesResponseTime",
                    "description": "Configuration of response time degradation detection\n"
                },
                "traffic": {
                    "$ref": "#/types/dynatrace:index/ApplicationAnomaliesTraffic:ApplicationAnomaliesTraffic",
                    "description": "Configuration for anomalies regarding traffic\n"
                }
            },
            "inputProperties": {
                "failureRate": {
                    "$ref": "#/types/dynatrace:index/ApplicationAnomaliesFailureRate:ApplicationAnomaliesFailureRate",
                    "description": "Configuration of failure rate increase detection\n"
                },
                "responseTime": {
                    "$ref": "#/types/dynatrace:index/ApplicationAnomaliesResponseTime:ApplicationAnomaliesResponseTime",
                    "description": "Configuration of response time degradation detection\n"
                },
                "traffic": {
                    "$ref": "#/types/dynatrace:index/ApplicationAnomaliesTraffic:ApplicationAnomaliesTraffic",
                    "description": "Configuration for anomalies regarding traffic\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ApplicationAnomalies resources.\n",
                "properties": {
                    "failureRate": {
                        "$ref": "#/types/dynatrace:index/ApplicationAnomaliesFailureRate:ApplicationAnomaliesFailureRate",
                        "description": "Configuration of failure rate increase detection\n"
                    },
                    "responseTime": {
                        "$ref": "#/types/dynatrace:index/ApplicationAnomaliesResponseTime:ApplicationAnomaliesResponseTime",
                        "description": "Configuration of response time degradation detection\n"
                    },
                    "traffic": {
                        "$ref": "#/types/dynatrace:index/ApplicationAnomaliesTraffic:ApplicationAnomaliesTraffic",
                        "description": "Configuration for anomalies regarding traffic\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/applicationDataPrivacy:ApplicationDataPrivacy": {
            "properties": {
                "dataCaptureOptIn": {
                    "type": "boolean",
                    "description": "(Field has overlap with `dynatrace_data_privacy`) Set to `true` to disable data capture and cookies until JavaScriptAPI\n`dtrum.enable()` is called\n"
                },
                "doNotTrackBehaviour": {
                    "type": "string",
                    "description": "(Field has overlap with `dynatrace_data_privacy`) How to handle the \"Do Not Track\" header: * `IGNORE_DO_NOT_TRACK`:\nignore the header and capture the data. * `CAPTURE_ANONYMIZED`: capture the data but do not tie it to the user. *\n`DO_NOT_CAPTURE`: respect the header and do not capture.\n"
                },
                "persistentCookieForUserTracking": {
                    "type": "boolean",
                    "description": "(Field has overlap with `dynatrace_data_privacy`) Set to `true` to set persistent cookie in order to recognize returning\ndevices\n"
                },
                "sessionReplayDataPrivacy": {
                    "$ref": "#/types/dynatrace:index/ApplicationDataPrivacySessionReplayDataPrivacy:ApplicationDataPrivacySessionReplayDataPrivacy",
                    "description": "(Field has overlap with `dynatrace_session_replay_web_privacy`) Data privacy settings for Session Replay\n"
                },
                "webApplicationId": {
                    "type": "string",
                    "description": "Dynatrace entity ID of the web application\n"
                }
            },
            "required": [
                "doNotTrackBehaviour",
                "sessionReplayDataPrivacy",
                "webApplicationId"
            ],
            "inputProperties": {
                "dataCaptureOptIn": {
                    "type": "boolean",
                    "description": "(Field has overlap with `dynatrace_data_privacy`) Set to `true` to disable data capture and cookies until JavaScriptAPI\n`dtrum.enable()` is called\n"
                },
                "doNotTrackBehaviour": {
                    "type": "string",
                    "description": "(Field has overlap with `dynatrace_data_privacy`) How to handle the \"Do Not Track\" header: * `IGNORE_DO_NOT_TRACK`:\nignore the header and capture the data. * `CAPTURE_ANONYMIZED`: capture the data but do not tie it to the user. *\n`DO_NOT_CAPTURE`: respect the header and do not capture.\n"
                },
                "persistentCookieForUserTracking": {
                    "type": "boolean",
                    "description": "(Field has overlap with `dynatrace_data_privacy`) Set to `true` to set persistent cookie in order to recognize returning\ndevices\n"
                },
                "sessionReplayDataPrivacy": {
                    "$ref": "#/types/dynatrace:index/ApplicationDataPrivacySessionReplayDataPrivacy:ApplicationDataPrivacySessionReplayDataPrivacy",
                    "description": "(Field has overlap with `dynatrace_session_replay_web_privacy`) Data privacy settings for Session Replay\n"
                },
                "webApplicationId": {
                    "type": "string",
                    "description": "Dynatrace entity ID of the web application\n"
                }
            },
            "requiredInputs": [
                "doNotTrackBehaviour",
                "sessionReplayDataPrivacy",
                "webApplicationId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ApplicationDataPrivacy resources.\n",
                "properties": {
                    "dataCaptureOptIn": {
                        "type": "boolean",
                        "description": "(Field has overlap with `dynatrace_data_privacy`) Set to `true` to disable data capture and cookies until JavaScriptAPI\n`dtrum.enable()` is called\n"
                    },
                    "doNotTrackBehaviour": {
                        "type": "string",
                        "description": "(Field has overlap with `dynatrace_data_privacy`) How to handle the \"Do Not Track\" header: * `IGNORE_DO_NOT_TRACK`:\nignore the header and capture the data. * `CAPTURE_ANONYMIZED`: capture the data but do not tie it to the user. *\n`DO_NOT_CAPTURE`: respect the header and do not capture.\n"
                    },
                    "persistentCookieForUserTracking": {
                        "type": "boolean",
                        "description": "(Field has overlap with `dynatrace_data_privacy`) Set to `true` to set persistent cookie in order to recognize returning\ndevices\n"
                    },
                    "sessionReplayDataPrivacy": {
                        "$ref": "#/types/dynatrace:index/ApplicationDataPrivacySessionReplayDataPrivacy:ApplicationDataPrivacySessionReplayDataPrivacy",
                        "description": "(Field has overlap with `dynatrace_session_replay_web_privacy`) Data privacy settings for Session Replay\n"
                    },
                    "webApplicationId": {
                        "type": "string",
                        "description": "Dynatrace entity ID of the web application\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/applicationDetectionRule:ApplicationDetectionRule": {
            "properties": {
                "applicationIdentifier": {
                    "type": "string",
                    "description": "The Dynatrace entity ID of the application, for example APPLICATION-4A3B43\n"
                },
                "filterConfig": {
                    "$ref": "#/types/dynatrace:index/ApplicationDetectionRuleFilterConfig:ApplicationDetectionRuleFilterConfig",
                    "description": "The condition of an application detection rule\n"
                },
                "name": {
                    "type": "string",
                    "description": "The unique name of the Application detection rule\n",
                    "deprecationMessage": "Dynatrace computes that value automatically. Any attempts to specify that value will are getting ignored."
                },
                "order": {
                    "type": "string",
                    "description": "The order of the rule in the rules list\n"
                }
            },
            "required": [
                "applicationIdentifier",
                "filterConfig",
                "name"
            ],
            "inputProperties": {
                "applicationIdentifier": {
                    "type": "string",
                    "description": "The Dynatrace entity ID of the application, for example APPLICATION-4A3B43\n"
                },
                "filterConfig": {
                    "$ref": "#/types/dynatrace:index/ApplicationDetectionRuleFilterConfig:ApplicationDetectionRuleFilterConfig",
                    "description": "The condition of an application detection rule\n"
                },
                "name": {
                    "type": "string",
                    "description": "The unique name of the Application detection rule\n",
                    "deprecationMessage": "Dynatrace computes that value automatically. Any attempts to specify that value will are getting ignored."
                },
                "order": {
                    "type": "string",
                    "description": "The order of the rule in the rules list\n"
                }
            },
            "requiredInputs": [
                "applicationIdentifier",
                "filterConfig"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ApplicationDetectionRule resources.\n",
                "properties": {
                    "applicationIdentifier": {
                        "type": "string",
                        "description": "The Dynatrace entity ID of the application, for example APPLICATION-4A3B43\n"
                    },
                    "filterConfig": {
                        "$ref": "#/types/dynatrace:index/ApplicationDetectionRuleFilterConfig:ApplicationDetectionRuleFilterConfig",
                        "description": "The condition of an application detection rule\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The unique name of the Application detection rule\n",
                        "deprecationMessage": "Dynatrace computes that value automatically. Any attempts to specify that value will are getting ignored."
                    },
                    "order": {
                        "type": "string",
                        "description": "The order of the rule in the rules list\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/applicationDetectionRuleV2:ApplicationDetectionRuleV2": {
            "properties": {
                "applicationId": {
                    "type": "string",
                    "description": "Select an existing application or create a new one.\n"
                },
                "description": {
                    "type": "string",
                    "description": "(v1.274) Add a description for your rule\n"
                },
                "insertAfter": {
                    "type": "string",
                    "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                },
                "matcher": {
                    "type": "string",
                    "description": "Possible Values: `DOMAIN_CONTAINS`, `DOMAIN_ENDS_WITH`, `DOMAIN_EQUALS`, `DOMAIN_MATCHES`, `DOMAIN_STARTS_WITH`,\n`URL_CONTAINS`, `URL_ENDS_WITH`, `URL_EQUALS`, `URL_STARTS_WITH`\n"
                },
                "pattern": {
                    "type": "string",
                    "description": "Pattern\n"
                }
            },
            "required": [
                "applicationId",
                "insertAfter",
                "matcher",
                "pattern"
            ],
            "inputProperties": {
                "applicationId": {
                    "type": "string",
                    "description": "Select an existing application or create a new one.\n"
                },
                "description": {
                    "type": "string",
                    "description": "(v1.274) Add a description for your rule\n"
                },
                "insertAfter": {
                    "type": "string",
                    "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                },
                "matcher": {
                    "type": "string",
                    "description": "Possible Values: `DOMAIN_CONTAINS`, `DOMAIN_ENDS_WITH`, `DOMAIN_EQUALS`, `DOMAIN_MATCHES`, `DOMAIN_STARTS_WITH`,\n`URL_CONTAINS`, `URL_ENDS_WITH`, `URL_EQUALS`, `URL_STARTS_WITH`\n"
                },
                "pattern": {
                    "type": "string",
                    "description": "Pattern\n"
                }
            },
            "requiredInputs": [
                "applicationId",
                "matcher",
                "pattern"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ApplicationDetectionRuleV2 resources.\n",
                "properties": {
                    "applicationId": {
                        "type": "string",
                        "description": "Select an existing application or create a new one.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "(v1.274) Add a description for your rule\n"
                    },
                    "insertAfter": {
                        "type": "string",
                        "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                    },
                    "matcher": {
                        "type": "string",
                        "description": "Possible Values: `DOMAIN_CONTAINS`, `DOMAIN_ENDS_WITH`, `DOMAIN_EQUALS`, `DOMAIN_MATCHES`, `DOMAIN_STARTS_WITH`,\n`URL_CONTAINS`, `URL_ENDS_WITH`, `URL_EQUALS`, `URL_STARTS_WITH`\n"
                    },
                    "pattern": {
                        "type": "string",
                        "description": "Pattern\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/applicationErrorRules:ApplicationErrorRules": {
            "properties": {
                "customErrors": {
                    "$ref": "#/types/dynatrace:index/ApplicationErrorRulesCustomErrors:ApplicationErrorRulesCustomErrors",
                    "description": "(Field has overlap with `dynatrace_web_app_custom_errors`) An ordered list of HTTP errors. Rules are evaluated from top\nto bottom; the first matching rule applies\n"
                },
                "httpErrors": {
                    "$ref": "#/types/dynatrace:index/ApplicationErrorRulesHttpErrors:ApplicationErrorRulesHttpErrors",
                    "description": "(Field has overlap with `dynatrace_web_app_request_errors`) An ordered list of HTTP errors. Rules are evaluated from top\nto bottom; the first matching rule applies\n"
                },
                "ignoreCustomErrorsApdex": {
                    "type": "boolean",
                    "description": "(Field has overlap with `dynatrace_web_app_custom_errors`) Exclude (`true`) or include (`false`) custom errors listed in\n**customErrorRules** in Apdex calculation\n"
                },
                "ignoreHttpErrorsApdex": {
                    "type": "boolean",
                    "description": "(Field has overlap with `dynatrace_web_app_request_errors`) Exclude (`true`) or include (`false`) HTTP errors listed in\n**httpErrorRules** in Apdex calculation\n"
                },
                "ignoreJsErrorsApdex": {
                    "type": "boolean",
                    "description": "Exclude (`true`) or include (`false`) JavaScript errors in Apdex calculation\n"
                },
                "webApplicationId": {
                    "type": "string",
                    "description": "The EntityID of the the WebApplication\n"
                }
            },
            "inputProperties": {
                "customErrors": {
                    "$ref": "#/types/dynatrace:index/ApplicationErrorRulesCustomErrors:ApplicationErrorRulesCustomErrors",
                    "description": "(Field has overlap with `dynatrace_web_app_custom_errors`) An ordered list of HTTP errors. Rules are evaluated from top\nto bottom; the first matching rule applies\n"
                },
                "httpErrors": {
                    "$ref": "#/types/dynatrace:index/ApplicationErrorRulesHttpErrors:ApplicationErrorRulesHttpErrors",
                    "description": "(Field has overlap with `dynatrace_web_app_request_errors`) An ordered list of HTTP errors. Rules are evaluated from top\nto bottom; the first matching rule applies\n"
                },
                "ignoreCustomErrorsApdex": {
                    "type": "boolean",
                    "description": "(Field has overlap with `dynatrace_web_app_custom_errors`) Exclude (`true`) or include (`false`) custom errors listed in\n**customErrorRules** in Apdex calculation\n"
                },
                "ignoreHttpErrorsApdex": {
                    "type": "boolean",
                    "description": "(Field has overlap with `dynatrace_web_app_request_errors`) Exclude (`true`) or include (`false`) HTTP errors listed in\n**httpErrorRules** in Apdex calculation\n"
                },
                "ignoreJsErrorsApdex": {
                    "type": "boolean",
                    "description": "Exclude (`true`) or include (`false`) JavaScript errors in Apdex calculation\n"
                },
                "webApplicationId": {
                    "type": "string",
                    "description": "The EntityID of the the WebApplication\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ApplicationErrorRules resources.\n",
                "properties": {
                    "customErrors": {
                        "$ref": "#/types/dynatrace:index/ApplicationErrorRulesCustomErrors:ApplicationErrorRulesCustomErrors",
                        "description": "(Field has overlap with `dynatrace_web_app_custom_errors`) An ordered list of HTTP errors. Rules are evaluated from top\nto bottom; the first matching rule applies\n"
                    },
                    "httpErrors": {
                        "$ref": "#/types/dynatrace:index/ApplicationErrorRulesHttpErrors:ApplicationErrorRulesHttpErrors",
                        "description": "(Field has overlap with `dynatrace_web_app_request_errors`) An ordered list of HTTP errors. Rules are evaluated from top\nto bottom; the first matching rule applies\n"
                    },
                    "ignoreCustomErrorsApdex": {
                        "type": "boolean",
                        "description": "(Field has overlap with `dynatrace_web_app_custom_errors`) Exclude (`true`) or include (`false`) custom errors listed in\n**customErrorRules** in Apdex calculation\n"
                    },
                    "ignoreHttpErrorsApdex": {
                        "type": "boolean",
                        "description": "(Field has overlap with `dynatrace_web_app_request_errors`) Exclude (`true`) or include (`false`) HTTP errors listed in\n**httpErrorRules** in Apdex calculation\n"
                    },
                    "ignoreJsErrorsApdex": {
                        "type": "boolean",
                        "description": "Exclude (`true`) or include (`false`) JavaScript errors in Apdex calculation\n"
                    },
                    "webApplicationId": {
                        "type": "string",
                        "description": "The EntityID of the the WebApplication\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/appsecNotification:AppsecNotification": {
            "properties": {
                "attackCandidateBasedAlertingProfile": {
                    "type": "string",
                    "description": "For attack candidate alerts, select an [alerting\nprofile](/ui/settings/builtin:appsec.notification-attack-alerting-profile) to control the delivery of security\nnotifications related to this integration.\n"
                },
                "attackCandidateBasedEmailPayload": {
                    "$ref": "#/types/dynatrace:index/AppsecNotificationAttackCandidateBasedEmailPayload:AppsecNotificationAttackCandidateBasedEmailPayload",
                    "description": "Attack candidate based email payload, required when `trigger` equals `ATTACK_CANDIDATE` and `type` equals `EMAIL`\n"
                },
                "attackCandidateBasedJiraPayload": {
                    "$ref": "#/types/dynatrace:index/AppsecNotificationAttackCandidateBasedJiraPayload:AppsecNotificationAttackCandidateBasedJiraPayload",
                    "description": "Attack candidate based Jira payload, required when `trigger` equals `ATTACK_CANDIDATE` and `type` equals `JIRA`\n"
                },
                "attackCandidateBasedWebhookPayload": {
                    "$ref": "#/types/dynatrace:index/AppsecNotificationAttackCandidateBasedWebhookPayload:AppsecNotificationAttackCandidateBasedWebhookPayload",
                    "description": "Attack candidate based webhook payload, required when `trigger` equals `ATTACK_CANDIDATE` and `type` equals `WEBHOOK`\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the security notification\n"
                },
                "emailConfiguration": {
                    "$ref": "#/types/dynatrace:index/AppsecNotificationEmailConfiguration:AppsecNotificationEmailConfiguration",
                    "description": "Email configuration, required when `type` equals `EMAIL`\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/Disable the security notification, enabled (`true`) or disabled (`false`)\n"
                },
                "jiraConfiguration": {
                    "$ref": "#/types/dynatrace:index/AppsecNotificationJiraConfiguration:AppsecNotificationJiraConfiguration",
                    "description": "Jira configuration, required when `type` equals `JIRA`\n"
                },
                "securityProblemBasedAlertingProfile": {
                    "type": "string",
                    "description": "For security problem alerts, select an [alerting profile](/ui/settings/builtin:appsec.notification-alerting-profile) to\ncontrol the delivery of security notifications related to this integration.\n"
                },
                "securityProblemBasedEmailPayload": {
                    "$ref": "#/types/dynatrace:index/AppsecNotificationSecurityProblemBasedEmailPayload:AppsecNotificationSecurityProblemBasedEmailPayload",
                    "description": "Security problem based email payload, required when `trigger` equals `SECURITY_PROBLEM` and `type` equals `EMAIL`\n"
                },
                "securityProblemBasedJiraPayload": {
                    "$ref": "#/types/dynatrace:index/AppsecNotificationSecurityProblemBasedJiraPayload:AppsecNotificationSecurityProblemBasedJiraPayload",
                    "description": "Security problem based Jira payload, required when `trigger` equals `SECURITY_PROBLEM` and `type` equals `JIRA`\n"
                },
                "securityProblemBasedWebhookPayload": {
                    "$ref": "#/types/dynatrace:index/AppsecNotificationSecurityProblemBasedWebhookPayload:AppsecNotificationSecurityProblemBasedWebhookPayload",
                    "description": "Security problem based webhook payload, required when `trigger` equals `SECURITY_PROBLEM` and `type` equals `WEBHOOK`\n"
                },
                "trigger": {
                    "type": "string",
                    "description": "Security alert type, possible Values: `ATTACK_CANDIDATE`, `SECURITY_PROBLEM`\n"
                },
                "type": {
                    "type": "string",
                    "description": "Notification type, possible Values: `EMAIL`, `JIRA`, `WEBHOOK`\n"
                },
                "webhookConfiguration": {
                    "$ref": "#/types/dynatrace:index/AppsecNotificationWebhookConfiguration:AppsecNotificationWebhookConfiguration",
                    "description": "Webhook configuration, required when `type` equals `WEBHOOK`\n"
                }
            },
            "required": [
                "displayName",
                "enabled",
                "trigger",
                "type"
            ],
            "inputProperties": {
                "attackCandidateBasedAlertingProfile": {
                    "type": "string",
                    "description": "For attack candidate alerts, select an [alerting\nprofile](/ui/settings/builtin:appsec.notification-attack-alerting-profile) to control the delivery of security\nnotifications related to this integration.\n"
                },
                "attackCandidateBasedEmailPayload": {
                    "$ref": "#/types/dynatrace:index/AppsecNotificationAttackCandidateBasedEmailPayload:AppsecNotificationAttackCandidateBasedEmailPayload",
                    "description": "Attack candidate based email payload, required when `trigger` equals `ATTACK_CANDIDATE` and `type` equals `EMAIL`\n"
                },
                "attackCandidateBasedJiraPayload": {
                    "$ref": "#/types/dynatrace:index/AppsecNotificationAttackCandidateBasedJiraPayload:AppsecNotificationAttackCandidateBasedJiraPayload",
                    "description": "Attack candidate based Jira payload, required when `trigger` equals `ATTACK_CANDIDATE` and `type` equals `JIRA`\n"
                },
                "attackCandidateBasedWebhookPayload": {
                    "$ref": "#/types/dynatrace:index/AppsecNotificationAttackCandidateBasedWebhookPayload:AppsecNotificationAttackCandidateBasedWebhookPayload",
                    "description": "Attack candidate based webhook payload, required when `trigger` equals `ATTACK_CANDIDATE` and `type` equals `WEBHOOK`\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the security notification\n"
                },
                "emailConfiguration": {
                    "$ref": "#/types/dynatrace:index/AppsecNotificationEmailConfiguration:AppsecNotificationEmailConfiguration",
                    "description": "Email configuration, required when `type` equals `EMAIL`\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/Disable the security notification, enabled (`true`) or disabled (`false`)\n"
                },
                "jiraConfiguration": {
                    "$ref": "#/types/dynatrace:index/AppsecNotificationJiraConfiguration:AppsecNotificationJiraConfiguration",
                    "description": "Jira configuration, required when `type` equals `JIRA`\n"
                },
                "securityProblemBasedAlertingProfile": {
                    "type": "string",
                    "description": "For security problem alerts, select an [alerting profile](/ui/settings/builtin:appsec.notification-alerting-profile) to\ncontrol the delivery of security notifications related to this integration.\n"
                },
                "securityProblemBasedEmailPayload": {
                    "$ref": "#/types/dynatrace:index/AppsecNotificationSecurityProblemBasedEmailPayload:AppsecNotificationSecurityProblemBasedEmailPayload",
                    "description": "Security problem based email payload, required when `trigger` equals `SECURITY_PROBLEM` and `type` equals `EMAIL`\n"
                },
                "securityProblemBasedJiraPayload": {
                    "$ref": "#/types/dynatrace:index/AppsecNotificationSecurityProblemBasedJiraPayload:AppsecNotificationSecurityProblemBasedJiraPayload",
                    "description": "Security problem based Jira payload, required when `trigger` equals `SECURITY_PROBLEM` and `type` equals `JIRA`\n"
                },
                "securityProblemBasedWebhookPayload": {
                    "$ref": "#/types/dynatrace:index/AppsecNotificationSecurityProblemBasedWebhookPayload:AppsecNotificationSecurityProblemBasedWebhookPayload",
                    "description": "Security problem based webhook payload, required when `trigger` equals `SECURITY_PROBLEM` and `type` equals `WEBHOOK`\n"
                },
                "trigger": {
                    "type": "string",
                    "description": "Security alert type, possible Values: `ATTACK_CANDIDATE`, `SECURITY_PROBLEM`\n"
                },
                "type": {
                    "type": "string",
                    "description": "Notification type, possible Values: `EMAIL`, `JIRA`, `WEBHOOK`\n"
                },
                "webhookConfiguration": {
                    "$ref": "#/types/dynatrace:index/AppsecNotificationWebhookConfiguration:AppsecNotificationWebhookConfiguration",
                    "description": "Webhook configuration, required when `type` equals `WEBHOOK`\n"
                }
            },
            "requiredInputs": [
                "displayName",
                "enabled",
                "trigger",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AppsecNotification resources.\n",
                "properties": {
                    "attackCandidateBasedAlertingProfile": {
                        "type": "string",
                        "description": "For attack candidate alerts, select an [alerting\nprofile](/ui/settings/builtin:appsec.notification-attack-alerting-profile) to control the delivery of security\nnotifications related to this integration.\n"
                    },
                    "attackCandidateBasedEmailPayload": {
                        "$ref": "#/types/dynatrace:index/AppsecNotificationAttackCandidateBasedEmailPayload:AppsecNotificationAttackCandidateBasedEmailPayload",
                        "description": "Attack candidate based email payload, required when `trigger` equals `ATTACK_CANDIDATE` and `type` equals `EMAIL`\n"
                    },
                    "attackCandidateBasedJiraPayload": {
                        "$ref": "#/types/dynatrace:index/AppsecNotificationAttackCandidateBasedJiraPayload:AppsecNotificationAttackCandidateBasedJiraPayload",
                        "description": "Attack candidate based Jira payload, required when `trigger` equals `ATTACK_CANDIDATE` and `type` equals `JIRA`\n"
                    },
                    "attackCandidateBasedWebhookPayload": {
                        "$ref": "#/types/dynatrace:index/AppsecNotificationAttackCandidateBasedWebhookPayload:AppsecNotificationAttackCandidateBasedWebhookPayload",
                        "description": "Attack candidate based webhook payload, required when `trigger` equals `ATTACK_CANDIDATE` and `type` equals `WEBHOOK`\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Display name of the security notification\n"
                    },
                    "emailConfiguration": {
                        "$ref": "#/types/dynatrace:index/AppsecNotificationEmailConfiguration:AppsecNotificationEmailConfiguration",
                        "description": "Email configuration, required when `type` equals `EMAIL`\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/Disable the security notification, enabled (`true`) or disabled (`false`)\n"
                    },
                    "jiraConfiguration": {
                        "$ref": "#/types/dynatrace:index/AppsecNotificationJiraConfiguration:AppsecNotificationJiraConfiguration",
                        "description": "Jira configuration, required when `type` equals `JIRA`\n"
                    },
                    "securityProblemBasedAlertingProfile": {
                        "type": "string",
                        "description": "For security problem alerts, select an [alerting profile](/ui/settings/builtin:appsec.notification-alerting-profile) to\ncontrol the delivery of security notifications related to this integration.\n"
                    },
                    "securityProblemBasedEmailPayload": {
                        "$ref": "#/types/dynatrace:index/AppsecNotificationSecurityProblemBasedEmailPayload:AppsecNotificationSecurityProblemBasedEmailPayload",
                        "description": "Security problem based email payload, required when `trigger` equals `SECURITY_PROBLEM` and `type` equals `EMAIL`\n"
                    },
                    "securityProblemBasedJiraPayload": {
                        "$ref": "#/types/dynatrace:index/AppsecNotificationSecurityProblemBasedJiraPayload:AppsecNotificationSecurityProblemBasedJiraPayload",
                        "description": "Security problem based Jira payload, required when `trigger` equals `SECURITY_PROBLEM` and `type` equals `JIRA`\n"
                    },
                    "securityProblemBasedWebhookPayload": {
                        "$ref": "#/types/dynatrace:index/AppsecNotificationSecurityProblemBasedWebhookPayload:AppsecNotificationSecurityProblemBasedWebhookPayload",
                        "description": "Security problem based webhook payload, required when `trigger` equals `SECURITY_PROBLEM` and `type` equals `WEBHOOK`\n"
                    },
                    "trigger": {
                        "type": "string",
                        "description": "Security alert type, possible Values: `ATTACK_CANDIDATE`, `SECURITY_PROBLEM`\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Notification type, possible Values: `EMAIL`, `JIRA`, `WEBHOOK`\n"
                    },
                    "webhookConfiguration": {
                        "$ref": "#/types/dynatrace:index/AppsecNotificationWebhookConfiguration:AppsecNotificationWebhookConfiguration",
                        "description": "Webhook configuration, required when `type` equals `WEBHOOK`\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/attackAlerting:AttackAlerting": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "enabledAttackMitigations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Attack State\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name\n"
                }
            },
            "required": [
                "enabled",
                "name"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "enabledAttackMitigations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Attack State\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name\n"
                }
            },
            "requiredInputs": [
                "enabled"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AttackAlerting resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                    },
                    "enabledAttackMitigations": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Attack State\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/attackAllowlist:AttackAllowlist": {
            "properties": {
                "attackHandling": {
                    "$ref": "#/types/dynatrace:index/AttackAllowlistAttackHandling:AttackAllowlistAttackHandling",
                    "description": "Step 2: Define attack control for chosen criteria\n"
                },
                "criteria": {
                    "$ref": "#/types/dynatrace:index/AttackAllowlistCriteria:AttackAllowlistCriteria",
                    "description": "Step 1: Define criteria. Please specify at least one of source IP or attack pattern.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "insertAfter": {
                    "type": "string",
                    "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                },
                "metadata": {
                    "$ref": "#/types/dynatrace:index/AttackAllowlistMetadata:AttackAllowlistMetadata",
                    "description": "Step 3: Leave comment\n"
                }
            },
            "required": [
                "attackHandling",
                "criteria",
                "enabled",
                "insertAfter",
                "metadata"
            ],
            "inputProperties": {
                "attackHandling": {
                    "$ref": "#/types/dynatrace:index/AttackAllowlistAttackHandling:AttackAllowlistAttackHandling",
                    "description": "Step 2: Define attack control for chosen criteria\n"
                },
                "criteria": {
                    "$ref": "#/types/dynatrace:index/AttackAllowlistCriteria:AttackAllowlistCriteria",
                    "description": "Step 1: Define criteria. Please specify at least one of source IP or attack pattern.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "insertAfter": {
                    "type": "string",
                    "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                },
                "metadata": {
                    "$ref": "#/types/dynatrace:index/AttackAllowlistMetadata:AttackAllowlistMetadata",
                    "description": "Step 3: Leave comment\n"
                }
            },
            "requiredInputs": [
                "attackHandling",
                "criteria",
                "enabled",
                "metadata"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AttackAllowlist resources.\n",
                "properties": {
                    "attackHandling": {
                        "$ref": "#/types/dynatrace:index/AttackAllowlistAttackHandling:AttackAllowlistAttackHandling",
                        "description": "Step 2: Define attack control for chosen criteria\n"
                    },
                    "criteria": {
                        "$ref": "#/types/dynatrace:index/AttackAllowlistCriteria:AttackAllowlistCriteria",
                        "description": "Step 1: Define criteria. Please specify at least one of source IP or attack pattern.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                    },
                    "insertAfter": {
                        "type": "string",
                        "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                    },
                    "metadata": {
                        "$ref": "#/types/dynatrace:index/AttackAllowlistMetadata:AttackAllowlistMetadata",
                        "description": "Step 3: Leave comment\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/attackRules:AttackRules": {
            "properties": {
                "attackHandling": {
                    "$ref": "#/types/dynatrace:index/AttackRulesAttackHandling:AttackRulesAttackHandling",
                    "description": "Step 2: Define attack control for chosen criteria\n"
                },
                "criteria": {
                    "$ref": "#/types/dynatrace:index/AttackRulesCriteria:AttackRulesCriteria",
                    "description": "Step 1: Define criteria\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "insertAfter": {
                    "type": "string",
                    "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                },
                "metadata": {
                    "$ref": "#/types/dynatrace:index/AttackRulesMetadata:AttackRulesMetadata",
                    "description": "Step 3: Leave comment\n"
                }
            },
            "required": [
                "attackHandling",
                "criteria",
                "enabled",
                "insertAfter",
                "metadata"
            ],
            "inputProperties": {
                "attackHandling": {
                    "$ref": "#/types/dynatrace:index/AttackRulesAttackHandling:AttackRulesAttackHandling",
                    "description": "Step 2: Define attack control for chosen criteria\n"
                },
                "criteria": {
                    "$ref": "#/types/dynatrace:index/AttackRulesCriteria:AttackRulesCriteria",
                    "description": "Step 1: Define criteria\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "insertAfter": {
                    "type": "string",
                    "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                },
                "metadata": {
                    "$ref": "#/types/dynatrace:index/AttackRulesMetadata:AttackRulesMetadata",
                    "description": "Step 3: Leave comment\n"
                }
            },
            "requiredInputs": [
                "attackHandling",
                "criteria",
                "enabled",
                "metadata"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AttackRules resources.\n",
                "properties": {
                    "attackHandling": {
                        "$ref": "#/types/dynatrace:index/AttackRulesAttackHandling:AttackRulesAttackHandling",
                        "description": "Step 2: Define attack control for chosen criteria\n"
                    },
                    "criteria": {
                        "$ref": "#/types/dynatrace:index/AttackRulesCriteria:AttackRulesCriteria",
                        "description": "Step 1: Define criteria\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                    },
                    "insertAfter": {
                        "type": "string",
                        "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                    },
                    "metadata": {
                        "$ref": "#/types/dynatrace:index/AttackRulesMetadata:AttackRulesMetadata",
                        "description": "Step 3: Leave comment\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/attackSettings:AttackSettings": {
            "properties": {
                "defaultAttackHandling": {
                    "$ref": "#/types/dynatrace:index/AttackSettingsDefaultAttackHandling:AttackSettingsDefaultAttackHandling",
                    "description": "Define global incoming attack control\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                }
            },
            "required": [
                "defaultAttackHandling",
                "enabled"
            ],
            "inputProperties": {
                "defaultAttackHandling": {
                    "$ref": "#/types/dynatrace:index/AttackSettingsDefaultAttackHandling:AttackSettingsDefaultAttackHandling",
                    "description": "Define global incoming attack control\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                }
            },
            "requiredInputs": [
                "defaultAttackHandling",
                "enabled"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AttackSettings resources.\n",
                "properties": {
                    "defaultAttackHandling": {
                        "$ref": "#/types/dynatrace:index/AttackSettingsDefaultAttackHandling:AttackSettingsDefaultAttackHandling",
                        "description": "Define global incoming attack control\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/attributeAllowList:AttributeAllowList": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "key": {
                    "type": "string",
                    "description": "Key of the attribute to persist\n"
                }
            },
            "required": [
                "enabled",
                "key"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "key": {
                    "type": "string",
                    "description": "Key of the attribute to persist\n"
                }
            },
            "requiredInputs": [
                "enabled",
                "key"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AttributeAllowList resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                    },
                    "key": {
                        "type": "string",
                        "description": "Key of the attribute to persist\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/attributeBlockList:AttributeBlockList": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "key": {
                    "type": "string",
                    "description": "Key of the attribute that should not be persisted\n"
                }
            },
            "required": [
                "enabled",
                "key"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "key": {
                    "type": "string",
                    "description": "Key of the attribute that should not be persisted\n"
                }
            },
            "requiredInputs": [
                "enabled",
                "key"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AttributeBlockList resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                    },
                    "key": {
                        "type": "string",
                        "description": "Key of the attribute that should not be persisted\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/attributeMasking:AttributeMasking": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "key": {
                    "type": "string",
                    "description": "Key of the attribute\n"
                },
                "masking": {
                    "type": "string",
                    "description": "Possible Values: `MASK_ENTIRE_VALUE`, `MASK_ONLY_CONFIDENTIAL_DATA`\n"
                }
            },
            "required": [
                "enabled",
                "key",
                "masking"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "key": {
                    "type": "string",
                    "description": "Key of the attribute\n"
                },
                "masking": {
                    "type": "string",
                    "description": "Possible Values: `MASK_ENTIRE_VALUE`, `MASK_ONLY_CONFIDENTIAL_DATA`\n"
                }
            },
            "requiredInputs": [
                "enabled",
                "key",
                "masking"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AttributeMasking resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                    },
                    "key": {
                        "type": "string",
                        "description": "Key of the attribute\n"
                    },
                    "masking": {
                        "type": "string",
                        "description": "Possible Values: `MASK_ENTIRE_VALUE`, `MASK_ONLY_CONFIDENTIAL_DATA`\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/attributesPreferences:AttributesPreferences": {
            "properties": {
                "persistenceMode": {
                    "type": "string",
                    "description": "Possible Values: `ALLOW_ALL_ATTRIBUTES`, `BLOCK_ALL_ATTRIBUTES`\n"
                }
            },
            "required": [
                "persistenceMode"
            ],
            "inputProperties": {
                "persistenceMode": {
                    "type": "string",
                    "description": "Possible Values: `ALLOW_ALL_ATTRIBUTES`, `BLOCK_ALL_ATTRIBUTES`\n"
                }
            },
            "requiredInputs": [
                "persistenceMode"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AttributesPreferences resources.\n",
                "properties": {
                    "persistenceMode": {
                        "type": "string",
                        "description": "Possible Values: `ALLOW_ALL_ATTRIBUTES`, `BLOCK_ALL_ATTRIBUTES`\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/auditLog:AuditLog": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                }
            },
            "required": [
                "enabled"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                }
            },
            "requiredInputs": [
                "enabled"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AuditLog resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/automationBusinessCalendar:AutomationBusinessCalendar": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "An optional description for the Business Calendar\n"
                },
                "holidays": {
                    "$ref": "#/types/dynatrace:index/AutomationBusinessCalendarHolidays:AutomationBusinessCalendarHolidays",
                    "description": "A list of holidays valid in this calendar\n"
                },
                "title": {
                    "type": "string",
                    "description": "The title / name of the Business Calendar\n"
                },
                "validFrom": {
                    "type": "string",
                    "description": "The date from when on this calendar is valid from. Example: `2023-07-04` for July 4th 2023\n"
                },
                "validTo": {
                    "type": "string",
                    "description": "The date until when on this calendar is valid to. Example: `2023-07-04` for July 4th 2023\n"
                },
                "weekDays": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "The days to be considered week days in this calendar. `1' = `Monday`, `2` = `Tuesday`, `3` = `Wednesday`, `4` =\n`Thursday`, `5` = `Friday`, `6` = `Saturday`, `7` = `Sunday`\n"
                },
                "weekStart": {
                    "type": "integer",
                    "description": "Specifies the day of the week that's considered to be the first day in the week. `1` for Monday, `7` for Sunday\n"
                }
            },
            "required": [
                "title"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "An optional description for the Business Calendar\n"
                },
                "holidays": {
                    "$ref": "#/types/dynatrace:index/AutomationBusinessCalendarHolidays:AutomationBusinessCalendarHolidays",
                    "description": "A list of holidays valid in this calendar\n"
                },
                "title": {
                    "type": "string",
                    "description": "The title / name of the Business Calendar\n"
                },
                "validFrom": {
                    "type": "string",
                    "description": "The date from when on this calendar is valid from. Example: `2023-07-04` for July 4th 2023\n"
                },
                "validTo": {
                    "type": "string",
                    "description": "The date until when on this calendar is valid to. Example: `2023-07-04` for July 4th 2023\n"
                },
                "weekDays": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "The days to be considered week days in this calendar. `1' = `Monday`, `2` = `Tuesday`, `3` = `Wednesday`, `4` =\n`Thursday`, `5` = `Friday`, `6` = `Saturday`, `7` = `Sunday`\n"
                },
                "weekStart": {
                    "type": "integer",
                    "description": "Specifies the day of the week that's considered to be the first day in the week. `1` for Monday, `7` for Sunday\n"
                }
            },
            "requiredInputs": [
                "title"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AutomationBusinessCalendar resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "An optional description for the Business Calendar\n"
                    },
                    "holidays": {
                        "$ref": "#/types/dynatrace:index/AutomationBusinessCalendarHolidays:AutomationBusinessCalendarHolidays",
                        "description": "A list of holidays valid in this calendar\n"
                    },
                    "title": {
                        "type": "string",
                        "description": "The title / name of the Business Calendar\n"
                    },
                    "validFrom": {
                        "type": "string",
                        "description": "The date from when on this calendar is valid from. Example: `2023-07-04` for July 4th 2023\n"
                    },
                    "validTo": {
                        "type": "string",
                        "description": "The date until when on this calendar is valid to. Example: `2023-07-04` for July 4th 2023\n"
                    },
                    "weekDays": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "The days to be considered week days in this calendar. `1' = `Monday`, `2` = `Tuesday`, `3` = `Wednesday`, `4` =\n`Thursday`, `5` = `Friday`, `6` = `Saturday`, `7` = `Sunday`\n"
                    },
                    "weekStart": {
                        "type": "integer",
                        "description": "Specifies the day of the week that's considered to be the first day in the week. `1` for Monday, `7` for Sunday\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/automationSchedulingRule:AutomationSchedulingRule": {
            "properties": {
                "businessCalendar": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "description": "An optional description for the scheduling rule\n"
                },
                "fixedOffset": {
                    "$ref": "#/types/dynatrace:index/AutomationSchedulingRuleFixedOffset:AutomationSchedulingRuleFixedOffset"
                },
                "grouping": {
                    "$ref": "#/types/dynatrace:index/AutomationSchedulingRuleGrouping:AutomationSchedulingRuleGrouping"
                },
                "recurrence": {
                    "$ref": "#/types/dynatrace:index/AutomationSchedulingRuleRecurrence:AutomationSchedulingRuleRecurrence"
                },
                "relativeOffset": {
                    "$ref": "#/types/dynatrace:index/AutomationSchedulingRuleRelativeOffset:AutomationSchedulingRuleRelativeOffset"
                },
                "title": {
                    "type": "string",
                    "description": "The title / name of the scheduling rule\n"
                }
            },
            "required": [
                "title"
            ],
            "inputProperties": {
                "businessCalendar": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "description": "An optional description for the scheduling rule\n"
                },
                "fixedOffset": {
                    "$ref": "#/types/dynatrace:index/AutomationSchedulingRuleFixedOffset:AutomationSchedulingRuleFixedOffset"
                },
                "grouping": {
                    "$ref": "#/types/dynatrace:index/AutomationSchedulingRuleGrouping:AutomationSchedulingRuleGrouping"
                },
                "recurrence": {
                    "$ref": "#/types/dynatrace:index/AutomationSchedulingRuleRecurrence:AutomationSchedulingRuleRecurrence"
                },
                "relativeOffset": {
                    "$ref": "#/types/dynatrace:index/AutomationSchedulingRuleRelativeOffset:AutomationSchedulingRuleRelativeOffset"
                },
                "title": {
                    "type": "string",
                    "description": "The title / name of the scheduling rule\n"
                }
            },
            "requiredInputs": [
                "title"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AutomationSchedulingRule resources.\n",
                "properties": {
                    "businessCalendar": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string",
                        "description": "An optional description for the scheduling rule\n"
                    },
                    "fixedOffset": {
                        "$ref": "#/types/dynatrace:index/AutomationSchedulingRuleFixedOffset:AutomationSchedulingRuleFixedOffset"
                    },
                    "grouping": {
                        "$ref": "#/types/dynatrace:index/AutomationSchedulingRuleGrouping:AutomationSchedulingRuleGrouping"
                    },
                    "recurrence": {
                        "$ref": "#/types/dynatrace:index/AutomationSchedulingRuleRecurrence:AutomationSchedulingRuleRecurrence"
                    },
                    "relativeOffset": {
                        "$ref": "#/types/dynatrace:index/AutomationSchedulingRuleRelativeOffset:AutomationSchedulingRuleRelativeOffset"
                    },
                    "title": {
                        "type": "string",
                        "description": "The title / name of the scheduling rule\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/automationWorkflow:AutomationWorkflow": {
            "properties": {
                "actor": {
                    "type": "string",
                    "description": "The user context the executions of the workflow will happen with\n"
                },
                "description": {
                    "type": "string",
                    "description": "An optional description for the workflow\n"
                },
                "owner": {
                    "type": "string",
                    "description": "The ID of the owner of this workflow\n"
                },
                "private": {
                    "type": "boolean",
                    "description": "Defines whether this workflow is private to the owner or not. Default is `true`\n"
                },
                "tasks": {
                    "$ref": "#/types/dynatrace:index/AutomationWorkflowTasks:AutomationWorkflowTasks",
                    "description": "The tasks to run for every execution of this workflow\n"
                },
                "title": {
                    "type": "string",
                    "description": "The title / name of the workflow\n"
                },
                "trigger": {
                    "$ref": "#/types/dynatrace:index/AutomationWorkflowTrigger:AutomationWorkflowTrigger",
                    "description": "Configures how executions of the workflows are getting triggered. If no trigger is specified it means the workflow is\ngetting manually triggered\n"
                }
            },
            "required": [
                "tasks",
                "title"
            ],
            "inputProperties": {
                "actor": {
                    "type": "string",
                    "description": "The user context the executions of the workflow will happen with\n"
                },
                "description": {
                    "type": "string",
                    "description": "An optional description for the workflow\n"
                },
                "owner": {
                    "type": "string",
                    "description": "The ID of the owner of this workflow\n"
                },
                "private": {
                    "type": "boolean",
                    "description": "Defines whether this workflow is private to the owner or not. Default is `true`\n"
                },
                "tasks": {
                    "$ref": "#/types/dynatrace:index/AutomationWorkflowTasks:AutomationWorkflowTasks",
                    "description": "The tasks to run for every execution of this workflow\n"
                },
                "title": {
                    "type": "string",
                    "description": "The title / name of the workflow\n"
                },
                "trigger": {
                    "$ref": "#/types/dynatrace:index/AutomationWorkflowTrigger:AutomationWorkflowTrigger",
                    "description": "Configures how executions of the workflows are getting triggered. If no trigger is specified it means the workflow is\ngetting manually triggered\n"
                }
            },
            "requiredInputs": [
                "tasks",
                "title"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AutomationWorkflow resources.\n",
                "properties": {
                    "actor": {
                        "type": "string",
                        "description": "The user context the executions of the workflow will happen with\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "An optional description for the workflow\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "The ID of the owner of this workflow\n"
                    },
                    "private": {
                        "type": "boolean",
                        "description": "Defines whether this workflow is private to the owner or not. Default is `true`\n"
                    },
                    "tasks": {
                        "$ref": "#/types/dynatrace:index/AutomationWorkflowTasks:AutomationWorkflowTasks",
                        "description": "The tasks to run for every execution of this workflow\n"
                    },
                    "title": {
                        "type": "string",
                        "description": "The title / name of the workflow\n"
                    },
                    "trigger": {
                        "$ref": "#/types/dynatrace:index/AutomationWorkflowTrigger:AutomationWorkflowTrigger",
                        "description": "Configures how executions of the workflows are getting triggered. If no trigger is specified it means the workflow is\ngetting manually triggered\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/automationWorkflowJira:AutomationWorkflowJira": {
            "properties": {
                "insertAfter": {
                    "type": "string",
                    "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Jira connection\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password of the Jira user\n",
                    "secret": true
                },
                "token": {
                    "type": "string",
                    "description": "Token for the selected authentication type\n",
                    "secret": true
                },
                "type": {
                    "type": "string",
                    "description": "Possible Values: `Basic`, `Cloud_token`, `Pat`\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the Jira server\n"
                },
                "user": {
                    "type": "string",
                    "description": "Username or E-Mail address\n"
                }
            },
            "required": [
                "insertAfter",
                "name",
                "type",
                "url"
            ],
            "inputProperties": {
                "insertAfter": {
                    "type": "string",
                    "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Jira connection\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password of the Jira user\n",
                    "secret": true
                },
                "token": {
                    "type": "string",
                    "description": "Token for the selected authentication type\n",
                    "secret": true
                },
                "type": {
                    "type": "string",
                    "description": "Possible Values: `Basic`, `Cloud_token`, `Pat`\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL of the Jira server\n"
                },
                "user": {
                    "type": "string",
                    "description": "Username or E-Mail address\n"
                }
            },
            "requiredInputs": [
                "type",
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AutomationWorkflowJira resources.\n",
                "properties": {
                    "insertAfter": {
                        "type": "string",
                        "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Jira connection\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "Password of the Jira user\n",
                        "secret": true
                    },
                    "token": {
                        "type": "string",
                        "description": "Token for the selected authentication type\n",
                        "secret": true
                    },
                    "type": {
                        "type": "string",
                        "description": "Possible Values: `Basic`, `Cloud_token`, `Pat`\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "URL of the Jira server\n"
                    },
                    "user": {
                        "type": "string",
                        "description": "Username or E-Mail address\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/automationWorkflowSlack:AutomationWorkflowSlack": {
            "properties": {
                "insertAfter": {
                    "type": "string",
                    "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Slack connection\n"
                },
                "token": {
                    "type": "string",
                    "description": "The bot token obtained from the Slack App Management UI\n",
                    "secret": true
                }
            },
            "required": [
                "insertAfter",
                "name",
                "token"
            ],
            "inputProperties": {
                "insertAfter": {
                    "type": "string",
                    "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Slack connection\n"
                },
                "token": {
                    "type": "string",
                    "description": "The bot token obtained from the Slack App Management UI\n",
                    "secret": true
                }
            },
            "requiredInputs": [
                "token"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AutomationWorkflowSlack resources.\n",
                "properties": {
                    "insertAfter": {
                        "type": "string",
                        "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Slack connection\n"
                    },
                    "token": {
                        "type": "string",
                        "description": "The bot token obtained from the Slack App Management UI\n",
                        "secret": true
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/autotag:Autotag": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the auto-tag.\n"
                },
                "entitySelectorBasedRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/AutotagEntitySelectorBasedRule:AutotagEntitySelectorBasedRule"
                    },
                    "description": "A list of entity-selector based rules for management zone usage. If several rules are specified, the `or` logic applies\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the auto-tag, which is applied to entities. Additionally you can specify a **valueFormat** in the tag rule.\nIn that case the tag is used in the `name:valueFormat` format. For example you can extend the `Infrastructure` tag to\n`Infrastructure:Windows` and `Infrastructure:Linux`.\n"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/AutotagRule:AutotagRule"
                    },
                    "description": "A list of rules for management zone usage. Each rule is evaluated independently of all other rules\n"
                },
                "unknowns": {
                    "type": "string",
                    "description": "allows for configuring properties that are not explicitly supported by the current version of this provider\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the auto-tag.\n"
                },
                "entitySelectorBasedRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/AutotagEntitySelectorBasedRule:AutotagEntitySelectorBasedRule"
                    },
                    "description": "A list of entity-selector based rules for management zone usage. If several rules are specified, the `or` logic applies\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the auto-tag, which is applied to entities. Additionally you can specify a **valueFormat** in the tag rule.\nIn that case the tag is used in the `name:valueFormat` format. For example you can extend the `Infrastructure` tag to\n`Infrastructure:Windows` and `Infrastructure:Linux`.\n"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/AutotagRule:AutotagRule"
                    },
                    "description": "A list of rules for management zone usage. Each rule is evaluated independently of all other rules\n"
                },
                "unknowns": {
                    "type": "string",
                    "description": "allows for configuring properties that are not explicitly supported by the current version of this provider\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Autotag resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the auto-tag.\n"
                    },
                    "entitySelectorBasedRules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/dynatrace:index/AutotagEntitySelectorBasedRule:AutotagEntitySelectorBasedRule"
                        },
                        "description": "A list of entity-selector based rules for management zone usage. If several rules are specified, the `or` logic applies\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the auto-tag, which is applied to entities. Additionally you can specify a **valueFormat** in the tag rule.\nIn that case the tag is used in the `name:valueFormat` format. For example you can extend the `Infrastructure` tag to\n`Infrastructure:Windows` and `Infrastructure:Linux`.\n"
                    },
                    "rules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/dynatrace:index/AutotagRule:AutotagRule"
                        },
                        "description": "A list of rules for management zone usage. Each rule is evaluated independently of all other rules\n"
                    },
                    "unknowns": {
                        "type": "string",
                        "description": "allows for configuring properties that are not explicitly supported by the current version of this provider\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/autotagRules:AutotagRules": {
            "properties": {
                "autoTagId": {
                    "type": "string",
                    "description": "Automatically applied tag ID\n"
                },
                "currentState": {
                    "type": "string",
                    "description": "For internal use: current state of rules in JSON format\n"
                },
                "rules": {
                    "$ref": "#/types/dynatrace:index/AutotagRulesRules:AutotagRulesRules",
                    "description": "Rules\n"
                }
            },
            "required": [
                "autoTagId",
                "currentState"
            ],
            "inputProperties": {
                "autoTagId": {
                    "type": "string",
                    "description": "Automatically applied tag ID\n"
                },
                "currentState": {
                    "type": "string",
                    "description": "For internal use: current state of rules in JSON format\n"
                },
                "rules": {
                    "$ref": "#/types/dynatrace:index/AutotagRulesRules:AutotagRulesRules",
                    "description": "Rules\n"
                }
            },
            "requiredInputs": [
                "autoTagId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AutotagRules resources.\n",
                "properties": {
                    "autoTagId": {
                        "type": "string",
                        "description": "Automatically applied tag ID\n"
                    },
                    "currentState": {
                        "type": "string",
                        "description": "For internal use: current state of rules in JSON format\n"
                    },
                    "rules": {
                        "$ref": "#/types/dynatrace:index/AutotagRulesRules:AutotagRulesRules",
                        "description": "Rules\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/autotagV2:AutotagV2": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description\n"
                },
                "name": {
                    "type": "string",
                    "description": "Tag name\n"
                },
                "rules": {
                    "$ref": "#/types/dynatrace:index/AutotagV2Rules:AutotagV2Rules",
                    "description": "Rules\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description\n"
                },
                "name": {
                    "type": "string",
                    "description": "Tag name\n"
                },
                "rules": {
                    "$ref": "#/types/dynatrace:index/AutotagV2Rules:AutotagV2Rules",
                    "description": "Rules\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AutotagV2 resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Tag name\n"
                    },
                    "rules": {
                        "$ref": "#/types/dynatrace:index/AutotagV2Rules:AutotagV2Rules",
                        "description": "Rules\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/awsAnomalies:AwsAnomalies": {
            "properties": {
                "ec2CandidateHighCpuDetection": {
                    "$ref": "#/types/dynatrace:index/AwsAnomaliesEc2CandidateHighCpuDetection:AwsAnomaliesEc2CandidateHighCpuDetection",
                    "description": "no documentation available\n"
                },
                "elbHighConnectionErrorsDetection": {
                    "$ref": "#/types/dynatrace:index/AwsAnomaliesElbHighConnectionErrorsDetection:AwsAnomaliesElbHighConnectionErrorsDetection",
                    "description": "no documentation available\n"
                },
                "lambdaHighErrorRateDetection": {
                    "$ref": "#/types/dynatrace:index/AwsAnomaliesLambdaHighErrorRateDetection:AwsAnomaliesLambdaHighErrorRateDetection",
                    "description": "no documentation available\n"
                },
                "rdsHighCpuDetection": {
                    "$ref": "#/types/dynatrace:index/AwsAnomaliesRdsHighCpuDetection:AwsAnomaliesRdsHighCpuDetection",
                    "description": "no documentation available\n"
                },
                "rdsHighMemoryDetection": {
                    "$ref": "#/types/dynatrace:index/AwsAnomaliesRdsHighMemoryDetection:AwsAnomaliesRdsHighMemoryDetection",
                    "description": "no documentation available\n"
                },
                "rdsHighWriteReadLatencyDetection": {
                    "$ref": "#/types/dynatrace:index/AwsAnomaliesRdsHighWriteReadLatencyDetection:AwsAnomaliesRdsHighWriteReadLatencyDetection",
                    "description": "no documentation available\n"
                },
                "rdsLowStorageDetection": {
                    "$ref": "#/types/dynatrace:index/AwsAnomaliesRdsLowStorageDetection:AwsAnomaliesRdsLowStorageDetection",
                    "description": "no documentation available\n"
                },
                "rdsRestartsSequenceDetection": {
                    "$ref": "#/types/dynatrace:index/AwsAnomaliesRdsRestartsSequenceDetection:AwsAnomaliesRdsRestartsSequenceDetection",
                    "description": "no documentation available\n"
                }
            },
            "required": [
                "ec2CandidateHighCpuDetection",
                "elbHighConnectionErrorsDetection",
                "lambdaHighErrorRateDetection",
                "rdsHighCpuDetection",
                "rdsHighMemoryDetection",
                "rdsHighWriteReadLatencyDetection",
                "rdsLowStorageDetection",
                "rdsRestartsSequenceDetection"
            ],
            "inputProperties": {
                "ec2CandidateHighCpuDetection": {
                    "$ref": "#/types/dynatrace:index/AwsAnomaliesEc2CandidateHighCpuDetection:AwsAnomaliesEc2CandidateHighCpuDetection",
                    "description": "no documentation available\n"
                },
                "elbHighConnectionErrorsDetection": {
                    "$ref": "#/types/dynatrace:index/AwsAnomaliesElbHighConnectionErrorsDetection:AwsAnomaliesElbHighConnectionErrorsDetection",
                    "description": "no documentation available\n"
                },
                "lambdaHighErrorRateDetection": {
                    "$ref": "#/types/dynatrace:index/AwsAnomaliesLambdaHighErrorRateDetection:AwsAnomaliesLambdaHighErrorRateDetection",
                    "description": "no documentation available\n"
                },
                "rdsHighCpuDetection": {
                    "$ref": "#/types/dynatrace:index/AwsAnomaliesRdsHighCpuDetection:AwsAnomaliesRdsHighCpuDetection",
                    "description": "no documentation available\n"
                },
                "rdsHighMemoryDetection": {
                    "$ref": "#/types/dynatrace:index/AwsAnomaliesRdsHighMemoryDetection:AwsAnomaliesRdsHighMemoryDetection",
                    "description": "no documentation available\n"
                },
                "rdsHighWriteReadLatencyDetection": {
                    "$ref": "#/types/dynatrace:index/AwsAnomaliesRdsHighWriteReadLatencyDetection:AwsAnomaliesRdsHighWriteReadLatencyDetection",
                    "description": "no documentation available\n"
                },
                "rdsLowStorageDetection": {
                    "$ref": "#/types/dynatrace:index/AwsAnomaliesRdsLowStorageDetection:AwsAnomaliesRdsLowStorageDetection",
                    "description": "no documentation available\n"
                },
                "rdsRestartsSequenceDetection": {
                    "$ref": "#/types/dynatrace:index/AwsAnomaliesRdsRestartsSequenceDetection:AwsAnomaliesRdsRestartsSequenceDetection",
                    "description": "no documentation available\n"
                }
            },
            "requiredInputs": [
                "ec2CandidateHighCpuDetection",
                "elbHighConnectionErrorsDetection",
                "lambdaHighErrorRateDetection",
                "rdsHighCpuDetection",
                "rdsHighMemoryDetection",
                "rdsHighWriteReadLatencyDetection",
                "rdsLowStorageDetection",
                "rdsRestartsSequenceDetection"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AwsAnomalies resources.\n",
                "properties": {
                    "ec2CandidateHighCpuDetection": {
                        "$ref": "#/types/dynatrace:index/AwsAnomaliesEc2CandidateHighCpuDetection:AwsAnomaliesEc2CandidateHighCpuDetection",
                        "description": "no documentation available\n"
                    },
                    "elbHighConnectionErrorsDetection": {
                        "$ref": "#/types/dynatrace:index/AwsAnomaliesElbHighConnectionErrorsDetection:AwsAnomaliesElbHighConnectionErrorsDetection",
                        "description": "no documentation available\n"
                    },
                    "lambdaHighErrorRateDetection": {
                        "$ref": "#/types/dynatrace:index/AwsAnomaliesLambdaHighErrorRateDetection:AwsAnomaliesLambdaHighErrorRateDetection",
                        "description": "no documentation available\n"
                    },
                    "rdsHighCpuDetection": {
                        "$ref": "#/types/dynatrace:index/AwsAnomaliesRdsHighCpuDetection:AwsAnomaliesRdsHighCpuDetection",
                        "description": "no documentation available\n"
                    },
                    "rdsHighMemoryDetection": {
                        "$ref": "#/types/dynatrace:index/AwsAnomaliesRdsHighMemoryDetection:AwsAnomaliesRdsHighMemoryDetection",
                        "description": "no documentation available\n"
                    },
                    "rdsHighWriteReadLatencyDetection": {
                        "$ref": "#/types/dynatrace:index/AwsAnomaliesRdsHighWriteReadLatencyDetection:AwsAnomaliesRdsHighWriteReadLatencyDetection",
                        "description": "no documentation available\n"
                    },
                    "rdsLowStorageDetection": {
                        "$ref": "#/types/dynatrace:index/AwsAnomaliesRdsLowStorageDetection:AwsAnomaliesRdsLowStorageDetection",
                        "description": "no documentation available\n"
                    },
                    "rdsRestartsSequenceDetection": {
                        "$ref": "#/types/dynatrace:index/AwsAnomaliesRdsRestartsSequenceDetection:AwsAnomaliesRdsRestartsSequenceDetection",
                        "description": "no documentation available\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/awsCredentials:AwsCredentials": {
            "properties": {
                "authenticationData": {
                    "$ref": "#/types/dynatrace:index/AwsCredentialsAuthenticationData:AwsCredentialsAuthenticationData",
                    "description": "credentials for the AWS authentication\n"
                },
                "label": {
                    "type": "string",
                    "description": "The name of the credentials\n"
                },
                "partitionType": {
                    "type": "string",
                    "description": "The type of the AWS partition\n"
                },
                "removeDefaults": {
                    "type": "boolean",
                    "description": "Instructs the provider to remove the supporting services Dynatrace applies by default to newly created AWS Credentials.\nSupporting Services applied by via `dynatrace_aws_service` subsequently won't get touched.\n"
                },
                "supportingServicesManagedInDynatrace": {
                    "type": "boolean",
                    "description": "If enabled (`true`) the attribute `supporting_services` will not get synchronized with Dynatrace. You will be able to\nmanage them via WebUI without interference by Terraform.\n",
                    "deprecationMessage": "Supporting Services are no longer getting managed via this resource. Regardless of the value set here, this resource won't affect the supporting services during updates"
                },
                "supportingServicesToMonitors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/AwsCredentialsSupportingServicesToMonitor:AwsCredentialsSupportingServicesToMonitor"
                    },
                    "description": "supporting services to be monitored\n",
                    "deprecationMessage": "Managing supporting services directly within AWS Credentials has been deprecated within the REST API. This attribute just exists for backwards compatibility. It no longer has an effect. For managing services use the resource `dynatrace_aws_service`"
                },
                "taggedOnly": {
                    "type": "boolean",
                    "description": "Monitor only resources which have specified AWS tags (`true`) or all resources (`false`)\n"
                },
                "tagsToMonitors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/AwsCredentialsTagsToMonitor:AwsCredentialsTagsToMonitor"
                    },
                    "description": "AWS tags to be monitored. You can specify up to 10 tags. Only applicable when the **tagged_only** parameter is set to\n`true`\n"
                },
                "unknowns": {
                    "type": "string",
                    "description": "Any attributes that aren't yet supported by this provider\n"
                }
            },
            "required": [
                "authenticationData",
                "partitionType",
                "taggedOnly"
            ],
            "inputProperties": {
                "authenticationData": {
                    "$ref": "#/types/dynatrace:index/AwsCredentialsAuthenticationData:AwsCredentialsAuthenticationData",
                    "description": "credentials for the AWS authentication\n"
                },
                "label": {
                    "type": "string",
                    "description": "The name of the credentials\n"
                },
                "partitionType": {
                    "type": "string",
                    "description": "The type of the AWS partition\n"
                },
                "removeDefaults": {
                    "type": "boolean",
                    "description": "Instructs the provider to remove the supporting services Dynatrace applies by default to newly created AWS Credentials.\nSupporting Services applied by via `dynatrace_aws_service` subsequently won't get touched.\n"
                },
                "supportingServicesManagedInDynatrace": {
                    "type": "boolean",
                    "description": "If enabled (`true`) the attribute `supporting_services` will not get synchronized with Dynatrace. You will be able to\nmanage them via WebUI without interference by Terraform.\n",
                    "deprecationMessage": "Supporting Services are no longer getting managed via this resource. Regardless of the value set here, this resource won't affect the supporting services during updates"
                },
                "supportingServicesToMonitors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/AwsCredentialsSupportingServicesToMonitor:AwsCredentialsSupportingServicesToMonitor"
                    },
                    "description": "supporting services to be monitored\n",
                    "deprecationMessage": "Managing supporting services directly within AWS Credentials has been deprecated within the REST API. This attribute just exists for backwards compatibility. It no longer has an effect. For managing services use the resource `dynatrace_aws_service`"
                },
                "taggedOnly": {
                    "type": "boolean",
                    "description": "Monitor only resources which have specified AWS tags (`true`) or all resources (`false`)\n"
                },
                "tagsToMonitors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/AwsCredentialsTagsToMonitor:AwsCredentialsTagsToMonitor"
                    },
                    "description": "AWS tags to be monitored. You can specify up to 10 tags. Only applicable when the **tagged_only** parameter is set to\n`true`\n"
                },
                "unknowns": {
                    "type": "string",
                    "description": "Any attributes that aren't yet supported by this provider\n"
                }
            },
            "requiredInputs": [
                "authenticationData",
                "partitionType",
                "taggedOnly"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AwsCredentials resources.\n",
                "properties": {
                    "authenticationData": {
                        "$ref": "#/types/dynatrace:index/AwsCredentialsAuthenticationData:AwsCredentialsAuthenticationData",
                        "description": "credentials for the AWS authentication\n"
                    },
                    "label": {
                        "type": "string",
                        "description": "The name of the credentials\n"
                    },
                    "partitionType": {
                        "type": "string",
                        "description": "The type of the AWS partition\n"
                    },
                    "removeDefaults": {
                        "type": "boolean",
                        "description": "Instructs the provider to remove the supporting services Dynatrace applies by default to newly created AWS Credentials.\nSupporting Services applied by via `dynatrace_aws_service` subsequently won't get touched.\n"
                    },
                    "supportingServicesManagedInDynatrace": {
                        "type": "boolean",
                        "description": "If enabled (`true`) the attribute `supporting_services` will not get synchronized with Dynatrace. You will be able to\nmanage them via WebUI without interference by Terraform.\n",
                        "deprecationMessage": "Supporting Services are no longer getting managed via this resource. Regardless of the value set here, this resource won't affect the supporting services during updates"
                    },
                    "supportingServicesToMonitors": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/dynatrace:index/AwsCredentialsSupportingServicesToMonitor:AwsCredentialsSupportingServicesToMonitor"
                        },
                        "description": "supporting services to be monitored\n",
                        "deprecationMessage": "Managing supporting services directly within AWS Credentials has been deprecated within the REST API. This attribute just exists for backwards compatibility. It no longer has an effect. For managing services use the resource `dynatrace_aws_service`"
                    },
                    "taggedOnly": {
                        "type": "boolean",
                        "description": "Monitor only resources which have specified AWS tags (`true`) or all resources (`false`)\n"
                    },
                    "tagsToMonitors": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/dynatrace:index/AwsCredentialsTagsToMonitor:AwsCredentialsTagsToMonitor"
                        },
                        "description": "AWS tags to be monitored. You can specify up to 10 tags. Only applicable when the **tagged_only** parameter is set to\n`true`\n"
                    },
                    "unknowns": {
                        "type": "string",
                        "description": "Any attributes that aren't yet supported by this provider\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/awsService:AwsService": {
            "properties": {
                "builtIn": {
                    "type": "boolean",
                    "description": "This attribute is automatically set to `true` if Dynatrace considers the supporting service with the given name to be a\nbuilt-in service\n"
                },
                "credentialsId": {
                    "type": "string",
                    "description": "the ID of the azure credentials this supported service belongs to\n"
                },
                "metrics": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/AwsServiceMetric:AwsServiceMetric"
                    },
                    "description": "A list of metrics to be monitored for this service. Depending on the service Dynatrace insists on a set of recommended\nmetrics to be configured for that service. If any of these recommended metrics is missing here, the Terraform Provider\nwill automatically add them during `terraform apply`. This usually results in a non-empty plan, until all of the\nrecommended metrics are present within your configuration. For services considered `built-in` by Dynatrace any metrics\nspecified here will be ignored - Dynatrace enforces a fixed set of metrics for these services.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the supporting service.\n"
                },
                "requiredMetrics": {
                    "type": "string",
                    "description": "Used internally by the Terraform Provider in order to remember the metrics enforced by Dynatrace\n"
                },
                "useRecommendedMetrics": {
                    "type": "boolean",
                    "description": "If `true` Terraform will negotiate with the Dynatrace API about the recommended/enforced metrics to be applied. Any\n`metric` specified will be therefore ignored.\n"
                }
            },
            "required": [
                "builtIn",
                "credentialsId",
                "name",
                "requiredMetrics"
            ],
            "inputProperties": {
                "credentialsId": {
                    "type": "string",
                    "description": "the ID of the azure credentials this supported service belongs to\n",
                    "willReplaceOnChanges": true
                },
                "metrics": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/AwsServiceMetric:AwsServiceMetric"
                    },
                    "description": "A list of metrics to be monitored for this service. Depending on the service Dynatrace insists on a set of recommended\nmetrics to be configured for that service. If any of these recommended metrics is missing here, the Terraform Provider\nwill automatically add them during `terraform apply`. This usually results in a non-empty plan, until all of the\nrecommended metrics are present within your configuration. For services considered `built-in` by Dynatrace any metrics\nspecified here will be ignored - Dynatrace enforces a fixed set of metrics for these services.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the supporting service.\n",
                    "willReplaceOnChanges": true
                },
                "useRecommendedMetrics": {
                    "type": "boolean",
                    "description": "If `true` Terraform will negotiate with the Dynatrace API about the recommended/enforced metrics to be applied. Any\n`metric` specified will be therefore ignored.\n"
                }
            },
            "requiredInputs": [
                "credentialsId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AwsService resources.\n",
                "properties": {
                    "builtIn": {
                        "type": "boolean",
                        "description": "This attribute is automatically set to `true` if Dynatrace considers the supporting service with the given name to be a\nbuilt-in service\n"
                    },
                    "credentialsId": {
                        "type": "string",
                        "description": "the ID of the azure credentials this supported service belongs to\n",
                        "willReplaceOnChanges": true
                    },
                    "metrics": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/dynatrace:index/AwsServiceMetric:AwsServiceMetric"
                        },
                        "description": "A list of metrics to be monitored for this service. Depending on the service Dynatrace insists on a set of recommended\nmetrics to be configured for that service. If any of these recommended metrics is missing here, the Terraform Provider\nwill automatically add them during `terraform apply`. This usually results in a non-empty plan, until all of the\nrecommended metrics are present within your configuration. For services considered `built-in` by Dynatrace any metrics\nspecified here will be ignored - Dynatrace enforces a fixed set of metrics for these services.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the supporting service.\n",
                        "willReplaceOnChanges": true
                    },
                    "requiredMetrics": {
                        "type": "string",
                        "description": "Used internally by the Terraform Provider in order to remember the metrics enforced by Dynatrace\n"
                    },
                    "useRecommendedMetrics": {
                        "type": "boolean",
                        "description": "If `true` Terraform will negotiate with the Dynatrace API about the recommended/enforced metrics to be applied. Any\n`metric` specified will be therefore ignored.\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/azureCredentials:AzureCredentials": {
            "properties": {
                "active": {
                    "type": "boolean",
                    "description": "The monitoring is enabled (`true`) or disabled (`false`). If not set on creation, the `true` value is used. If the field\nis omitted during an update, the old value remains unaffected\n"
                },
                "appId": {
                    "type": "string",
                    "description": "The Application ID (also referred to as Client ID) The combination of Application ID and Directory ID must be unique\n"
                },
                "autoTagging": {
                    "type": "boolean",
                    "description": "The automatic capture of Azure tags is on (`true`) or off (`false`)\n"
                },
                "directoryId": {
                    "type": "string",
                    "description": "The Directory ID (also referred to as Tenant ID) The combination of Application ID and Directory ID must be unique\n"
                },
                "key": {
                    "type": "string",
                    "description": "The secret key associated with the Application ID. For security reasons, GET requests return this field as `null`.\nSubmit your key on creation or update of the configuration. If the field is omitted during an update, the old value\nremains unaffected.\n",
                    "secret": true
                },
                "label": {
                    "type": "string",
                    "description": "The unique name of the Azure credentials configuration. Allowed characters are letters, numbers, and spaces. Also the\nspecial characters `.+-_` are allowed\n"
                },
                "monitorOnlyExcludingTagPairs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/AzureCredentialsMonitorOnlyExcludingTagPair:AzureCredentialsMonitorOnlyExcludingTagPair"
                    },
                    "description": "A list of Azure tags to be excluded from monitoring. You can specify up to 20 tags. A resource tagged with *any* of the\nspecified tags is monitored. Only applicable when the **monitorOnlyTaggedEntities** parameter is set to `true`.\n"
                },
                "monitorOnlyTagPairs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/AzureCredentialsMonitorOnlyTagPair:AzureCredentialsMonitorOnlyTagPair"
                    },
                    "description": "A list of Azure tags to be monitored. You can specify up to 20 tags. A resource tagged with *any* of the specified tags\nis monitored. Only applicable when the **monitorOnlyTaggedEntities** parameter is set to `true`\n"
                },
                "monitorOnlyTaggedEntities": {
                    "type": "boolean",
                    "description": "Monitor only resources that have specified Azure tags (`true`) or all resources (`false`).\n"
                },
                "removeDefaults": {
                    "type": "boolean",
                    "description": "Instructs the provider to remove the supporting services Dynatrace applies by default to newly created Azure\nCredentials. Supporting Services applied by via `dynatrace_azure_service` subsequently won't get touched.\n"
                },
                "supportingServices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/AzureCredentialsSupportingService:AzureCredentialsSupportingService"
                    },
                    "description": "A list of Azure supporting services to be monitored. For each service there's a sublist of its metrics and the metrics'\ndimensions that should be monitored. All of these elements (services, metrics, dimensions) must have corresponding\nstatic definitions on the server.\n",
                    "deprecationMessage": "Assigning supported services directly when creating Azure Credentials is deprecated. Use the resource `dynatrace_azure_service` instead."
                },
                "supportingServicesManagedInDynatrace": {
                    "type": "boolean",
                    "description": "If enabled (`true`) the attribute `supporting_services` will not get synchronized with Dynatrace. You will be able to\nmanage them via WebUI without interference by Terraform.\n",
                    "deprecationMessage": "This attribute is deprecated and has no effect any more. It always defaults to `true`."
                },
                "unknowns": {
                    "type": "string",
                    "description": "Any attributes that aren't yet supported by this provider\n"
                }
            },
            "required": [
                "active",
                "monitorOnlyTaggedEntities"
            ],
            "inputProperties": {
                "active": {
                    "type": "boolean",
                    "description": "The monitoring is enabled (`true`) or disabled (`false`). If not set on creation, the `true` value is used. If the field\nis omitted during an update, the old value remains unaffected\n"
                },
                "appId": {
                    "type": "string",
                    "description": "The Application ID (also referred to as Client ID) The combination of Application ID and Directory ID must be unique\n"
                },
                "autoTagging": {
                    "type": "boolean",
                    "description": "The automatic capture of Azure tags is on (`true`) or off (`false`)\n"
                },
                "directoryId": {
                    "type": "string",
                    "description": "The Directory ID (also referred to as Tenant ID) The combination of Application ID and Directory ID must be unique\n"
                },
                "key": {
                    "type": "string",
                    "description": "The secret key associated with the Application ID. For security reasons, GET requests return this field as `null`.\nSubmit your key on creation or update of the configuration. If the field is omitted during an update, the old value\nremains unaffected.\n",
                    "secret": true
                },
                "label": {
                    "type": "string",
                    "description": "The unique name of the Azure credentials configuration. Allowed characters are letters, numbers, and spaces. Also the\nspecial characters `.+-_` are allowed\n"
                },
                "monitorOnlyExcludingTagPairs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/AzureCredentialsMonitorOnlyExcludingTagPair:AzureCredentialsMonitorOnlyExcludingTagPair"
                    },
                    "description": "A list of Azure tags to be excluded from monitoring. You can specify up to 20 tags. A resource tagged with *any* of the\nspecified tags is monitored. Only applicable when the **monitorOnlyTaggedEntities** parameter is set to `true`.\n"
                },
                "monitorOnlyTagPairs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/AzureCredentialsMonitorOnlyTagPair:AzureCredentialsMonitorOnlyTagPair"
                    },
                    "description": "A list of Azure tags to be monitored. You can specify up to 20 tags. A resource tagged with *any* of the specified tags\nis monitored. Only applicable when the **monitorOnlyTaggedEntities** parameter is set to `true`\n"
                },
                "monitorOnlyTaggedEntities": {
                    "type": "boolean",
                    "description": "Monitor only resources that have specified Azure tags (`true`) or all resources (`false`).\n"
                },
                "removeDefaults": {
                    "type": "boolean",
                    "description": "Instructs the provider to remove the supporting services Dynatrace applies by default to newly created Azure\nCredentials. Supporting Services applied by via `dynatrace_azure_service` subsequently won't get touched.\n"
                },
                "supportingServices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/AzureCredentialsSupportingService:AzureCredentialsSupportingService"
                    },
                    "description": "A list of Azure supporting services to be monitored. For each service there's a sublist of its metrics and the metrics'\ndimensions that should be monitored. All of these elements (services, metrics, dimensions) must have corresponding\nstatic definitions on the server.\n",
                    "deprecationMessage": "Assigning supported services directly when creating Azure Credentials is deprecated. Use the resource `dynatrace_azure_service` instead."
                },
                "supportingServicesManagedInDynatrace": {
                    "type": "boolean",
                    "description": "If enabled (`true`) the attribute `supporting_services` will not get synchronized with Dynatrace. You will be able to\nmanage them via WebUI without interference by Terraform.\n",
                    "deprecationMessage": "This attribute is deprecated and has no effect any more. It always defaults to `true`."
                },
                "unknowns": {
                    "type": "string",
                    "description": "Any attributes that aren't yet supported by this provider\n"
                }
            },
            "requiredInputs": [
                "active",
                "monitorOnlyTaggedEntities"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AzureCredentials resources.\n",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "description": "The monitoring is enabled (`true`) or disabled (`false`). If not set on creation, the `true` value is used. If the field\nis omitted during an update, the old value remains unaffected\n"
                    },
                    "appId": {
                        "type": "string",
                        "description": "The Application ID (also referred to as Client ID) The combination of Application ID and Directory ID must be unique\n"
                    },
                    "autoTagging": {
                        "type": "boolean",
                        "description": "The automatic capture of Azure tags is on (`true`) or off (`false`)\n"
                    },
                    "directoryId": {
                        "type": "string",
                        "description": "The Directory ID (also referred to as Tenant ID) The combination of Application ID and Directory ID must be unique\n"
                    },
                    "key": {
                        "type": "string",
                        "description": "The secret key associated with the Application ID. For security reasons, GET requests return this field as `null`.\nSubmit your key on creation or update of the configuration. If the field is omitted during an update, the old value\nremains unaffected.\n",
                        "secret": true
                    },
                    "label": {
                        "type": "string",
                        "description": "The unique name of the Azure credentials configuration. Allowed characters are letters, numbers, and spaces. Also the\nspecial characters `.+-_` are allowed\n"
                    },
                    "monitorOnlyExcludingTagPairs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/dynatrace:index/AzureCredentialsMonitorOnlyExcludingTagPair:AzureCredentialsMonitorOnlyExcludingTagPair"
                        },
                        "description": "A list of Azure tags to be excluded from monitoring. You can specify up to 20 tags. A resource tagged with *any* of the\nspecified tags is monitored. Only applicable when the **monitorOnlyTaggedEntities** parameter is set to `true`.\n"
                    },
                    "monitorOnlyTagPairs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/dynatrace:index/AzureCredentialsMonitorOnlyTagPair:AzureCredentialsMonitorOnlyTagPair"
                        },
                        "description": "A list of Azure tags to be monitored. You can specify up to 20 tags. A resource tagged with *any* of the specified tags\nis monitored. Only applicable when the **monitorOnlyTaggedEntities** parameter is set to `true`\n"
                    },
                    "monitorOnlyTaggedEntities": {
                        "type": "boolean",
                        "description": "Monitor only resources that have specified Azure tags (`true`) or all resources (`false`).\n"
                    },
                    "removeDefaults": {
                        "type": "boolean",
                        "description": "Instructs the provider to remove the supporting services Dynatrace applies by default to newly created Azure\nCredentials. Supporting Services applied by via `dynatrace_azure_service` subsequently won't get touched.\n"
                    },
                    "supportingServices": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/dynatrace:index/AzureCredentialsSupportingService:AzureCredentialsSupportingService"
                        },
                        "description": "A list of Azure supporting services to be monitored. For each service there's a sublist of its metrics and the metrics'\ndimensions that should be monitored. All of these elements (services, metrics, dimensions) must have corresponding\nstatic definitions on the server.\n",
                        "deprecationMessage": "Assigning supported services directly when creating Azure Credentials is deprecated. Use the resource `dynatrace_azure_service` instead."
                    },
                    "supportingServicesManagedInDynatrace": {
                        "type": "boolean",
                        "description": "If enabled (`true`) the attribute `supporting_services` will not get synchronized with Dynatrace. You will be able to\nmanage them via WebUI without interference by Terraform.\n",
                        "deprecationMessage": "This attribute is deprecated and has no effect any more. It always defaults to `true`."
                    },
                    "unknowns": {
                        "type": "string",
                        "description": "Any attributes that aren't yet supported by this provider\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/azureService:AzureService": {
            "properties": {
                "builtIn": {
                    "type": "boolean",
                    "description": "This attribute is automatically set to `true` if Dynatrace considers the supporting service with the given name to be a\nbuilt-in service\n"
                },
                "credentialsId": {
                    "type": "string",
                    "description": "the ID of the azure credentials this supported service belongs to\n"
                },
                "metrics": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/AzureServiceMetric:AzureServiceMetric"
                    },
                    "description": "A list of metrics to be monitored for this service. Depending on the service Dynatrace insists on a set of recommended\nmetrics to be configured for that service. If any of these recommended metrics is missing here, the Terraform Provider\nwill automatically add them during `terraform apply`. This usually results in a non-empty plan, until all of the\nrecommended metrics are present within your configuration. For services considered `built-in` by Dynatrace any metrics\nspecified here will be ignored - Dynatrace enforces a fixed set of metrics for these services.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the supporting service.\n"
                },
                "requiredMetrics": {
                    "type": "string",
                    "description": "Used internally by the Terraform Provider in order to remember the metrics enforced by Dynatrace\n"
                },
                "useRecommendedMetrics": {
                    "type": "boolean",
                    "description": "If `true` Terraform will negotiate with the Dynatrace API about the recommended/enforced metrics to be applied. Any\n`metric` specified will be therefore ignored.\n"
                }
            },
            "required": [
                "builtIn",
                "credentialsId",
                "name",
                "requiredMetrics"
            ],
            "inputProperties": {
                "credentialsId": {
                    "type": "string",
                    "description": "the ID of the azure credentials this supported service belongs to\n",
                    "willReplaceOnChanges": true
                },
                "metrics": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/AzureServiceMetric:AzureServiceMetric"
                    },
                    "description": "A list of metrics to be monitored for this service. Depending on the service Dynatrace insists on a set of recommended\nmetrics to be configured for that service. If any of these recommended metrics is missing here, the Terraform Provider\nwill automatically add them during `terraform apply`. This usually results in a non-empty plan, until all of the\nrecommended metrics are present within your configuration. For services considered `built-in` by Dynatrace any metrics\nspecified here will be ignored - Dynatrace enforces a fixed set of metrics for these services.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the supporting service.\n",
                    "willReplaceOnChanges": true
                },
                "useRecommendedMetrics": {
                    "type": "boolean",
                    "description": "If `true` Terraform will negotiate with the Dynatrace API about the recommended/enforced metrics to be applied. Any\n`metric` specified will be therefore ignored.\n"
                }
            },
            "requiredInputs": [
                "credentialsId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AzureService resources.\n",
                "properties": {
                    "builtIn": {
                        "type": "boolean",
                        "description": "This attribute is automatically set to `true` if Dynatrace considers the supporting service with the given name to be a\nbuilt-in service\n"
                    },
                    "credentialsId": {
                        "type": "string",
                        "description": "the ID of the azure credentials this supported service belongs to\n",
                        "willReplaceOnChanges": true
                    },
                    "metrics": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/dynatrace:index/AzureServiceMetric:AzureServiceMetric"
                        },
                        "description": "A list of metrics to be monitored for this service. Depending on the service Dynatrace insists on a set of recommended\nmetrics to be configured for that service. If any of these recommended metrics is missing here, the Terraform Provider\nwill automatically add them during `terraform apply`. This usually results in a non-empty plan, until all of the\nrecommended metrics are present within your configuration. For services considered `built-in` by Dynatrace any metrics\nspecified here will be ignored - Dynatrace enforces a fixed set of metrics for these services.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the supporting service.\n",
                        "willReplaceOnChanges": true
                    },
                    "requiredMetrics": {
                        "type": "string",
                        "description": "Used internally by the Terraform Provider in order to remember the metrics enforced by Dynatrace\n"
                    },
                    "useRecommendedMetrics": {
                        "type": "boolean",
                        "description": "If `true` Terraform will negotiate with the Dynatrace API about the recommended/enforced metrics to be applied. Any\n`metric` specified will be therefore ignored.\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/browserMonitor:BrowserMonitor": {
            "properties": {
                "anomalyDetection": {
                    "$ref": "#/types/dynatrace:index/BrowserMonitorAnomalyDetection:BrowserMonitorAnomalyDetection",
                    "description": "The anomaly detection configuration.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "The monitor is enabled (`true`) or disabled (`false`).\n"
                },
                "frequency": {
                    "type": "integer",
                    "description": "The frequency of the monitor, in minutes. You can use one of the following values: `5`, `10`, `15`, `30`, and `60`.\n"
                },
                "keyPerformanceMetrics": {
                    "$ref": "#/types/dynatrace:index/BrowserMonitorKeyPerformanceMetrics:BrowserMonitorKeyPerformanceMetrics",
                    "description": "The key performance metrics configuration\n"
                },
                "locations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of locations from which the monitor is executed. To specify a location, use its entity ID.\n"
                },
                "manuallyAssignedApps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of manually assigned applications.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the monitor.\n"
                },
                "script": {
                    "$ref": "#/types/dynatrace:index/BrowserMonitorScript:BrowserMonitorScript",
                    "description": "The Browser Script\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/BrowserMonitorTag:BrowserMonitorTag"
                    },
                    "description": "A set of tags assigned to the monitor. You can specify only the value of the tag here and the `CONTEXTLESS` context and\nsource 'USER' will be added automatically.\n"
                }
            },
            "required": [
                "frequency",
                "keyPerformanceMetrics",
                "name"
            ],
            "inputProperties": {
                "anomalyDetection": {
                    "$ref": "#/types/dynatrace:index/BrowserMonitorAnomalyDetection:BrowserMonitorAnomalyDetection",
                    "description": "The anomaly detection configuration.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "The monitor is enabled (`true`) or disabled (`false`).\n"
                },
                "frequency": {
                    "type": "integer",
                    "description": "The frequency of the monitor, in minutes. You can use one of the following values: `5`, `10`, `15`, `30`, and `60`.\n"
                },
                "keyPerformanceMetrics": {
                    "$ref": "#/types/dynatrace:index/BrowserMonitorKeyPerformanceMetrics:BrowserMonitorKeyPerformanceMetrics",
                    "description": "The key performance metrics configuration\n"
                },
                "locations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of locations from which the monitor is executed. To specify a location, use its entity ID.\n"
                },
                "manuallyAssignedApps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of manually assigned applications.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the monitor.\n"
                },
                "script": {
                    "$ref": "#/types/dynatrace:index/BrowserMonitorScript:BrowserMonitorScript",
                    "description": "The Browser Script\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/BrowserMonitorTag:BrowserMonitorTag"
                    },
                    "description": "A set of tags assigned to the monitor. You can specify only the value of the tag here and the `CONTEXTLESS` context and\nsource 'USER' will be added automatically.\n"
                }
            },
            "requiredInputs": [
                "frequency",
                "keyPerformanceMetrics"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering BrowserMonitor resources.\n",
                "properties": {
                    "anomalyDetection": {
                        "$ref": "#/types/dynatrace:index/BrowserMonitorAnomalyDetection:BrowserMonitorAnomalyDetection",
                        "description": "The anomaly detection configuration.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "The monitor is enabled (`true`) or disabled (`false`).\n"
                    },
                    "frequency": {
                        "type": "integer",
                        "description": "The frequency of the monitor, in minutes. You can use one of the following values: `5`, `10`, `15`, `30`, and `60`.\n"
                    },
                    "keyPerformanceMetrics": {
                        "$ref": "#/types/dynatrace:index/BrowserMonitorKeyPerformanceMetrics:BrowserMonitorKeyPerformanceMetrics",
                        "description": "The key performance metrics configuration\n"
                    },
                    "locations": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of locations from which the monitor is executed. To specify a location, use its entity ID.\n"
                    },
                    "manuallyAssignedApps": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A set of manually assigned applications.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the monitor.\n"
                    },
                    "script": {
                        "$ref": "#/types/dynatrace:index/BrowserMonitorScript:BrowserMonitorScript",
                        "description": "The Browser Script\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/dynatrace:index/BrowserMonitorTag:BrowserMonitorTag"
                        },
                        "description": "A set of tags assigned to the monitor. You can specify only the value of the tag here and the `CONTEXTLESS` context and\nsource 'USER' will be added automatically.\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/browserMonitorOutage:BrowserMonitorOutage": {
            "properties": {
                "globalConsecutiveOutageCountThreshold": {
                    "type": "integer",
                    "description": "(Field has overlap with `dynatrace_browser_monitor`) Alert if all locations are unable to access my web application\n"
                },
                "globalOutages": {
                    "type": "boolean",
                    "description": "(Field has overlap with `dynatrace_browser_monitor`) Generate a problem and send an alert when the monitor is\nunavailable at all configured locations.\n"
                },
                "localConsecutiveOutageCountThreshold": {
                    "type": "integer",
                    "description": "(Field has overlap with `dynatrace_browser_monitor`) are unable to access my web application\n"
                },
                "localLocationOutageCountThreshold": {
                    "type": "integer",
                    "description": "(Field has overlap with `dynatrace_browser_monitor`) Alert if at least\n"
                },
                "localOutages": {
                    "type": "boolean",
                    "description": "(Field has overlap with `dynatrace_browser_monitor`) Generate a problem and send an alert when the monitor is\nunavailable for one or more consecutive runs at any location.\n"
                },
                "retryOnError": {
                    "type": "boolean",
                    "description": "(Field has overlap with `dynatrace_browser_monitor`) When enabled, which is the default, failing monitor executions are\nretried immediately one time to avoid false positives and only the second result is used. When disabled, we use the\nfirst result right away. Requires ActiveGate version 1.207+ for private locations.\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of this setting (SYNTHETIC_TEST). Omit this property if you want to cover the whole environment.\n"
                }
            },
            "required": [
                "globalOutages",
                "localOutages",
                "retryOnError"
            ],
            "inputProperties": {
                "globalConsecutiveOutageCountThreshold": {
                    "type": "integer",
                    "description": "(Field has overlap with `dynatrace_browser_monitor`) Alert if all locations are unable to access my web application\n"
                },
                "globalOutages": {
                    "type": "boolean",
                    "description": "(Field has overlap with `dynatrace_browser_monitor`) Generate a problem and send an alert when the monitor is\nunavailable at all configured locations.\n"
                },
                "localConsecutiveOutageCountThreshold": {
                    "type": "integer",
                    "description": "(Field has overlap with `dynatrace_browser_monitor`) are unable to access my web application\n"
                },
                "localLocationOutageCountThreshold": {
                    "type": "integer",
                    "description": "(Field has overlap with `dynatrace_browser_monitor`) Alert if at least\n"
                },
                "localOutages": {
                    "type": "boolean",
                    "description": "(Field has overlap with `dynatrace_browser_monitor`) Generate a problem and send an alert when the monitor is\nunavailable for one or more consecutive runs at any location.\n"
                },
                "retryOnError": {
                    "type": "boolean",
                    "description": "(Field has overlap with `dynatrace_browser_monitor`) When enabled, which is the default, failing monitor executions are\nretried immediately one time to avoid false positives and only the second result is used. When disabled, we use the\nfirst result right away. Requires ActiveGate version 1.207+ for private locations.\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of this setting (SYNTHETIC_TEST). Omit this property if you want to cover the whole environment.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "globalOutages",
                "localOutages",
                "retryOnError"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering BrowserMonitorOutage resources.\n",
                "properties": {
                    "globalConsecutiveOutageCountThreshold": {
                        "type": "integer",
                        "description": "(Field has overlap with `dynatrace_browser_monitor`) Alert if all locations are unable to access my web application\n"
                    },
                    "globalOutages": {
                        "type": "boolean",
                        "description": "(Field has overlap with `dynatrace_browser_monitor`) Generate a problem and send an alert when the monitor is\nunavailable at all configured locations.\n"
                    },
                    "localConsecutiveOutageCountThreshold": {
                        "type": "integer",
                        "description": "(Field has overlap with `dynatrace_browser_monitor`) are unable to access my web application\n"
                    },
                    "localLocationOutageCountThreshold": {
                        "type": "integer",
                        "description": "(Field has overlap with `dynatrace_browser_monitor`) Alert if at least\n"
                    },
                    "localOutages": {
                        "type": "boolean",
                        "description": "(Field has overlap with `dynatrace_browser_monitor`) Generate a problem and send an alert when the monitor is\nunavailable for one or more consecutive runs at any location.\n"
                    },
                    "retryOnError": {
                        "type": "boolean",
                        "description": "(Field has overlap with `dynatrace_browser_monitor`) When enabled, which is the default, failing monitor executions are\nretried immediately one time to avoid false positives and only the second result is used. When disabled, we use the\nfirst result right away. Requires ActiveGate version 1.207+ for private locations.\n"
                    },
                    "scope": {
                        "type": "string",
                        "description": "The scope of this setting (SYNTHETIC_TEST). Omit this property if you want to cover the whole environment.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/browserMonitorPerformance:BrowserMonitorPerformance": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of this setting (SYNTHETIC_TEST)\n"
                },
                "thresholds": {
                    "$ref": "#/types/dynatrace:index/BrowserMonitorPerformanceThresholds:BrowserMonitorPerformanceThresholds",
                    "description": "Performance thresholds\n"
                }
            },
            "required": [
                "enabled",
                "scope"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of this setting (SYNTHETIC_TEST)\n",
                    "willReplaceOnChanges": true
                },
                "thresholds": {
                    "$ref": "#/types/dynatrace:index/BrowserMonitorPerformanceThresholds:BrowserMonitorPerformanceThresholds",
                    "description": "Performance thresholds\n"
                }
            },
            "requiredInputs": [
                "enabled",
                "scope"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering BrowserMonitorPerformance resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                    },
                    "scope": {
                        "type": "string",
                        "description": "The scope of this setting (SYNTHETIC_TEST)\n",
                        "willReplaceOnChanges": true
                    },
                    "thresholds": {
                        "$ref": "#/types/dynatrace:index/BrowserMonitorPerformanceThresholds:BrowserMonitorPerformanceThresholds",
                        "description": "Performance thresholds\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/builtinProcessMonitoring:BuiltinProcessMonitoring": {
            "properties": {
                "aspnetcore": {
                    "type": "boolean",
                    "description": "Rule id: 3 - Do monitor processes if ASP.NET Core application path exists\n"
                },
                "aspnetcoreAgentlistener": {
                    "type": "boolean",
                    "description": "Rule id: 64 - Do not monitor processes if ASP.NET Core application DLL contains 'Agent.Listener'\n"
                },
                "aspnetcoreAgentworker": {
                    "type": "boolean",
                    "description": "Rule id: 62 - Do not monitor processes if ASP.NET Core application DLL contains 'Agent.Worker'\n"
                },
                "cf": {
                    "type": "boolean",
                    "description": "Rule id: 37 - Do monitor processes if Cloud Foundry application exists\n"
                },
                "cfAppsmanagerjs": {
                    "type": "boolean",
                    "description": "Do not monitor processes if Cloud Foundry application begins with 'apps-manager-js'\n"
                },
                "container": {
                    "type": "boolean",
                    "description": "Rule id: 41 - Do monitor processes if container name exists\n"
                },
                "dockerPauseamd64": {
                    "type": "boolean",
                    "description": "Rule id: 39 - Do not monitor processes if Docker stripped image contains 'pause-amd64'\n"
                },
                "exeAdapter": {
                    "type": "boolean",
                    "description": "Rule id: 7 - Do monitor processes if EXE name equals 'adapter'\n"
                },
                "exeAgentlistener": {
                    "type": "boolean",
                    "description": "Rule id: 63 - Do not monitor processes if EXE name contains 'Agent.Listener'\n"
                },
                "exeAgentworker": {
                    "type": "boolean",
                    "description": "Rule id: 61 - Do not monitor processes if EXE name contains 'Agent.Worker'\n"
                },
                "exeAuctioneer": {
                    "type": "boolean",
                    "description": "Rule id: 8 - Do monitor processes if EXE name equals 'auctioneer'\n"
                },
                "exeAuditbeat": {
                    "type": "boolean",
                    "description": "Rule id: 52 - Do not monitor processes if EXE name equals 'auditbeat'\n"
                },
                "exeBbs": {
                    "type": "boolean",
                    "description": "Rule id: 9 - Do monitor processes if EXE name equals 'bbs'\n"
                },
                "exeCaddy": {
                    "type": "boolean",
                    "description": "Rule id: 5 - Do monitor processes if EXE name equals 'caddy'\n"
                },
                "exeCaliconode": {
                    "type": "boolean",
                    "description": "Rule id: 58 - Do not monitor processes if EXE name equals 'calico-node'\n"
                },
                "exeCasclient": {
                    "type": "boolean",
                    "description": "Rule id: 59 - Do not monitor processes if EXE name equals 'casclient.exe'\n"
                },
                "exeCcuploader": {
                    "type": "boolean",
                    "description": "Rule id: 10 - Do monitor processes if EXE name equals 'cc-uploader'\n"
                },
                "exeDoppler": {
                    "type": "boolean",
                    "description": "Rule id: 11 - Do monitor processes if EXE name equals 'doppler'\n"
                },
                "exeFilebeat": {
                    "type": "boolean",
                    "description": "Rule id: 49 - Do not monitor processes if EXE name equals 'filebeat'\n"
                },
                "exeFlexnetjobexecutorservice": {
                    "type": "boolean",
                    "description": "Rule id: 65 - Do not monitor processes if EXE name equals 'FlexNetJobExecutorService'\n"
                },
                "exeFlexnetmaintenanceremotingservice": {
                    "type": "boolean",
                    "description": "Rule id: 66 - Do not monitor processes if EXE name equals 'FlexNetMaintenanceRemotingService'\n"
                },
                "exeFunctionbeat": {
                    "type": "boolean",
                    "description": "Rule id: 54 - Do not monitor processes if EXE name equals 'functionbeat'\n"
                },
                "exeGorouter": {
                    "type": "boolean",
                    "description": "Rule id: 12 - Do monitor processes if EXE name equals 'gorouter'\n"
                },
                "exeGrootfs": {
                    "type": "boolean",
                    "description": "Rule id: 55 - Do not monitor processes if EXE name equals 'grootfs'\n"
                },
                "exeHeartbeat": {
                    "type": "boolean",
                    "description": "Rule id: 53 - Do not monitor processes if EXE name equals 'heartbeat'\n"
                },
                "exeInfluxd": {
                    "type": "boolean",
                    "description": "Rule id: 6 - Do monitor processes if EXE name equals 'influxd'\n"
                },
                "exeLocket": {
                    "type": "boolean",
                    "description": "Rule id: 13 - Do monitor processes if EXE name equals 'locket'\n"
                },
                "exeMetricbeat": {
                    "type": "boolean",
                    "description": "Rule id: 50 - Do not monitor processes if EXE name equals 'metricbeat'\n"
                },
                "exeMetron": {
                    "type": "boolean",
                    "description": "Rule id: 14 - Do monitor processes if EXE name equals 'metron'\n"
                },
                "exeMqsi": {
                    "type": "boolean",
                    "description": "Rule id: 48 - Do not monitor processes if EXE name begins with 'mqsi'\n"
                },
                "exeOc": {
                    "type": "boolean",
                    "description": "Rule id: 44 - Do not monitor processes if EXE name equals 'oc'\n"
                },
                "exeOpenhandlecollector": {
                    "type": "boolean",
                    "description": "Rule id: 71 - Do not monitor processes if EXE name equals 'openhandlecollector.exe'\n"
                },
                "exeOptcnibinhostlocal": {
                    "type": "boolean",
                    "description": "Rule id: 46 - Do not monitor processes if EXE path equals '/opt/cni/bin/host-local'\n"
                },
                "exePacketbeat": {
                    "type": "boolean",
                    "description": "Rule id: 51 - Do not monitor processes if EXE name equals 'packetbeat'\n"
                },
                "exePhpcgi": {
                    "type": "boolean",
                    "description": "Rule id: 2 - Do not monitor processes if EXE name equals 'php-cgi'\n"
                },
                "exeRep": {
                    "type": "boolean",
                    "description": "Rule id: 16 - Do monitor processes if EXE name equals 'rep'\n"
                },
                "exeRouteemitter": {
                    "type": "boolean",
                    "description": "Rule id: 17 - Do monitor processes if EXE name equals 'route-emitter'\n"
                },
                "exeRouteregistrar": {
                    "type": "boolean",
                    "description": "Rule id: 18 - Do monitor processes if EXE name equals 'route-registrar'\n"
                },
                "exeRoutingapi": {
                    "type": "boolean",
                    "description": "Rule id: 19 - Do monitor processes if EXE name equals 'routing-api'\n"
                },
                "exeSchedular": {
                    "type": "boolean",
                    "description": "Rule id: 20 - Do monitor processes if EXE name equals 'scheduler'\n"
                },
                "exeSilkdaemon": {
                    "type": "boolean",
                    "description": "Rule id: 21 - Do monitor processes if EXE name equals 'silk-daemon'\n"
                },
                "exeSwitchboard": {
                    "type": "boolean",
                    "description": "Rule id: 22 - Do monitor processes if EXE name equals 'switchboard'\n"
                },
                "exeSyslogdrainbinder": {
                    "type": "boolean",
                    "description": "Rule id: 23 - Do monitor processes if EXE name equals 'syslog_drain_binder'\n"
                },
                "exeTardis": {
                    "type": "boolean",
                    "description": "Rule id: 56 - Do not monitor processes if EXE name equals 'tardis'\n"
                },
                "exeTmpbuildpacks": {
                    "type": "boolean",
                    "description": "Rule id: 43 - Do not monitor processes if EXE path begins with '/tmp/buildpacks/'\n"
                },
                "exeTpswatcher": {
                    "type": "boolean",
                    "description": "Rule id: 24 - Do monitor processes if EXE name equals 'tps-watcher'\n"
                },
                "exeTrafficcontroller": {
                    "type": "boolean",
                    "description": "Rule id: 25 - Do monitor processes if EXE name equals 'trafficcontroller'\n"
                },
                "exeUipath": {
                    "type": "boolean",
                    "description": "Rule id: 70 - Do not monitor processes if EXE name contains 'UiPath'\n"
                },
                "exeUserbinpiper": {
                    "type": "boolean",
                    "description": "Rule id: 67 - Do not monitor processes if EXE path equals '/usr/bin/piper'\n"
                },
                "exeW3wp": {
                    "type": "boolean",
                    "description": "Rule id: 4 - Do monitor processes if EXE name equals 'w3wp.exe'\n"
                },
                "goStatic": {
                    "type": "boolean",
                    "description": "Rule id: 47 - Do not monitor processes if Go Binary Linkage equals 'static'\n"
                },
                "hostGroupId": {
                    "type": "string",
                    "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.\n"
                },
                "jarDtibmmqconnector": {
                    "type": "boolean",
                    "description": "Rule id: 60 - Do not monitor processes if JAR file name equals 'dynatrace_ibm_mq_connector.jar'\n"
                },
                "jarEclipseequinox": {
                    "type": "boolean",
                    "description": "Rule id: 57 - Do not monitor processes if Java JAR file begins with 'org.eclipse.equinox.launcher'\n"
                },
                "k8sCassandraoperator": {
                    "type": "boolean",
                    "description": "Rule id: 69 - Do not monitor processes if Kubernetes container name equals 'cassandra-operator'\n"
                },
                "k8sContainerpod": {
                    "type": "boolean",
                    "description": "Rule id: 38 - Do not monitor processes if Kubernetes container name equals 'POD'\n"
                },
                "k8sNamespace": {
                    "type": "boolean",
                    "description": "Rule id: 40 - Do monitor processes if Kubernetes namespace exists\n"
                },
                "nodeBinpm2": {
                    "type": "boolean",
                    "description": "Do not monitor processes if Node.js script equals 'bin/pm2'\n"
                },
                "nodeCorepack": {
                    "type": "boolean",
                    "description": "Rule id: 68 - Do not monitor processes if Node.js application equals 'corepack'\n"
                },
                "nodeGrunt": {
                    "type": "boolean",
                    "description": "Rule id: 28 - Do not monitor processes if Node.js application base directory ends with '/node_modules/grunt'\n"
                },
                "nodeGulpcli": {
                    "type": "boolean",
                    "description": "Do not monitor processes if Node.js application base directory ends with '/node_modules/gulp-cli'\n"
                },
                "nodeNodegyp": {
                    "type": "boolean",
                    "description": "Rule id: 33 - Do not monitor processes if Node.js application base directory ends with '/node_modules/node-gyp'\n"
                },
                "nodeNodepregyp": {
                    "type": "boolean",
                    "description": "Rule id: 32 - Do not monitor processes if Node.js application base directory ends with '/node_modules/node-pre-gyp'\n"
                },
                "nodeNpm": {
                    "type": "boolean",
                    "description": "Rule id: 27 - Do not monitor processes if Node.js application base directory ends with '/node_modules/npm'\n"
                },
                "nodePrebuildinstall": {
                    "type": "boolean",
                    "description": "Rule id: 26 - Do not monitor processes if Node.js application base directory ends with '/node_modules/prebuild-install'\n"
                },
                "nodeTypescript": {
                    "type": "boolean",
                    "description": "Rule id: 29 - Do not monitor processes if Node.js application base directory ends with '/node_modules/typescript'\n"
                },
                "nodeYarn": {
                    "type": "boolean",
                    "description": "Rule id: 45 - Do not monitor processes if Node.js application equals 'yarn'\n"
                },
                "phpScript": {
                    "type": "boolean",
                    "description": "(v1.274) Rule id: 1 - Do not monitor processes if PHP script exists\n"
                }
            },
            "inputProperties": {
                "aspnetcore": {
                    "type": "boolean",
                    "description": "Rule id: 3 - Do monitor processes if ASP.NET Core application path exists\n"
                },
                "aspnetcoreAgentlistener": {
                    "type": "boolean",
                    "description": "Rule id: 64 - Do not monitor processes if ASP.NET Core application DLL contains 'Agent.Listener'\n"
                },
                "aspnetcoreAgentworker": {
                    "type": "boolean",
                    "description": "Rule id: 62 - Do not monitor processes if ASP.NET Core application DLL contains 'Agent.Worker'\n"
                },
                "cf": {
                    "type": "boolean",
                    "description": "Rule id: 37 - Do monitor processes if Cloud Foundry application exists\n"
                },
                "cfAppsmanagerjs": {
                    "type": "boolean",
                    "description": "Do not monitor processes if Cloud Foundry application begins with 'apps-manager-js'\n"
                },
                "container": {
                    "type": "boolean",
                    "description": "Rule id: 41 - Do monitor processes if container name exists\n"
                },
                "dockerPauseamd64": {
                    "type": "boolean",
                    "description": "Rule id: 39 - Do not monitor processes if Docker stripped image contains 'pause-amd64'\n"
                },
                "exeAdapter": {
                    "type": "boolean",
                    "description": "Rule id: 7 - Do monitor processes if EXE name equals 'adapter'\n"
                },
                "exeAgentlistener": {
                    "type": "boolean",
                    "description": "Rule id: 63 - Do not monitor processes if EXE name contains 'Agent.Listener'\n"
                },
                "exeAgentworker": {
                    "type": "boolean",
                    "description": "Rule id: 61 - Do not monitor processes if EXE name contains 'Agent.Worker'\n"
                },
                "exeAuctioneer": {
                    "type": "boolean",
                    "description": "Rule id: 8 - Do monitor processes if EXE name equals 'auctioneer'\n"
                },
                "exeAuditbeat": {
                    "type": "boolean",
                    "description": "Rule id: 52 - Do not monitor processes if EXE name equals 'auditbeat'\n"
                },
                "exeBbs": {
                    "type": "boolean",
                    "description": "Rule id: 9 - Do monitor processes if EXE name equals 'bbs'\n"
                },
                "exeCaddy": {
                    "type": "boolean",
                    "description": "Rule id: 5 - Do monitor processes if EXE name equals 'caddy'\n"
                },
                "exeCaliconode": {
                    "type": "boolean",
                    "description": "Rule id: 58 - Do not monitor processes if EXE name equals 'calico-node'\n"
                },
                "exeCasclient": {
                    "type": "boolean",
                    "description": "Rule id: 59 - Do not monitor processes if EXE name equals 'casclient.exe'\n"
                },
                "exeCcuploader": {
                    "type": "boolean",
                    "description": "Rule id: 10 - Do monitor processes if EXE name equals 'cc-uploader'\n"
                },
                "exeDoppler": {
                    "type": "boolean",
                    "description": "Rule id: 11 - Do monitor processes if EXE name equals 'doppler'\n"
                },
                "exeFilebeat": {
                    "type": "boolean",
                    "description": "Rule id: 49 - Do not monitor processes if EXE name equals 'filebeat'\n"
                },
                "exeFlexnetjobexecutorservice": {
                    "type": "boolean",
                    "description": "Rule id: 65 - Do not monitor processes if EXE name equals 'FlexNetJobExecutorService'\n"
                },
                "exeFlexnetmaintenanceremotingservice": {
                    "type": "boolean",
                    "description": "Rule id: 66 - Do not monitor processes if EXE name equals 'FlexNetMaintenanceRemotingService'\n"
                },
                "exeFunctionbeat": {
                    "type": "boolean",
                    "description": "Rule id: 54 - Do not monitor processes if EXE name equals 'functionbeat'\n"
                },
                "exeGorouter": {
                    "type": "boolean",
                    "description": "Rule id: 12 - Do monitor processes if EXE name equals 'gorouter'\n"
                },
                "exeGrootfs": {
                    "type": "boolean",
                    "description": "Rule id: 55 - Do not monitor processes if EXE name equals 'grootfs'\n"
                },
                "exeHeartbeat": {
                    "type": "boolean",
                    "description": "Rule id: 53 - Do not monitor processes if EXE name equals 'heartbeat'\n"
                },
                "exeInfluxd": {
                    "type": "boolean",
                    "description": "Rule id: 6 - Do monitor processes if EXE name equals 'influxd'\n"
                },
                "exeLocket": {
                    "type": "boolean",
                    "description": "Rule id: 13 - Do monitor processes if EXE name equals 'locket'\n"
                },
                "exeMetricbeat": {
                    "type": "boolean",
                    "description": "Rule id: 50 - Do not monitor processes if EXE name equals 'metricbeat'\n"
                },
                "exeMetron": {
                    "type": "boolean",
                    "description": "Rule id: 14 - Do monitor processes if EXE name equals 'metron'\n"
                },
                "exeMqsi": {
                    "type": "boolean",
                    "description": "Rule id: 48 - Do not monitor processes if EXE name begins with 'mqsi'\n"
                },
                "exeOc": {
                    "type": "boolean",
                    "description": "Rule id: 44 - Do not monitor processes if EXE name equals 'oc'\n"
                },
                "exeOpenhandlecollector": {
                    "type": "boolean",
                    "description": "Rule id: 71 - Do not monitor processes if EXE name equals 'openhandlecollector.exe'\n"
                },
                "exeOptcnibinhostlocal": {
                    "type": "boolean",
                    "description": "Rule id: 46 - Do not monitor processes if EXE path equals '/opt/cni/bin/host-local'\n"
                },
                "exePacketbeat": {
                    "type": "boolean",
                    "description": "Rule id: 51 - Do not monitor processes if EXE name equals 'packetbeat'\n"
                },
                "exePhpcgi": {
                    "type": "boolean",
                    "description": "Rule id: 2 - Do not monitor processes if EXE name equals 'php-cgi'\n"
                },
                "exeRep": {
                    "type": "boolean",
                    "description": "Rule id: 16 - Do monitor processes if EXE name equals 'rep'\n"
                },
                "exeRouteemitter": {
                    "type": "boolean",
                    "description": "Rule id: 17 - Do monitor processes if EXE name equals 'route-emitter'\n"
                },
                "exeRouteregistrar": {
                    "type": "boolean",
                    "description": "Rule id: 18 - Do monitor processes if EXE name equals 'route-registrar'\n"
                },
                "exeRoutingapi": {
                    "type": "boolean",
                    "description": "Rule id: 19 - Do monitor processes if EXE name equals 'routing-api'\n"
                },
                "exeSchedular": {
                    "type": "boolean",
                    "description": "Rule id: 20 - Do monitor processes if EXE name equals 'scheduler'\n"
                },
                "exeSilkdaemon": {
                    "type": "boolean",
                    "description": "Rule id: 21 - Do monitor processes if EXE name equals 'silk-daemon'\n"
                },
                "exeSwitchboard": {
                    "type": "boolean",
                    "description": "Rule id: 22 - Do monitor processes if EXE name equals 'switchboard'\n"
                },
                "exeSyslogdrainbinder": {
                    "type": "boolean",
                    "description": "Rule id: 23 - Do monitor processes if EXE name equals 'syslog_drain_binder'\n"
                },
                "exeTardis": {
                    "type": "boolean",
                    "description": "Rule id: 56 - Do not monitor processes if EXE name equals 'tardis'\n"
                },
                "exeTmpbuildpacks": {
                    "type": "boolean",
                    "description": "Rule id: 43 - Do not monitor processes if EXE path begins with '/tmp/buildpacks/'\n"
                },
                "exeTpswatcher": {
                    "type": "boolean",
                    "description": "Rule id: 24 - Do monitor processes if EXE name equals 'tps-watcher'\n"
                },
                "exeTrafficcontroller": {
                    "type": "boolean",
                    "description": "Rule id: 25 - Do monitor processes if EXE name equals 'trafficcontroller'\n"
                },
                "exeUipath": {
                    "type": "boolean",
                    "description": "Rule id: 70 - Do not monitor processes if EXE name contains 'UiPath'\n"
                },
                "exeUserbinpiper": {
                    "type": "boolean",
                    "description": "Rule id: 67 - Do not monitor processes if EXE path equals '/usr/bin/piper'\n"
                },
                "exeW3wp": {
                    "type": "boolean",
                    "description": "Rule id: 4 - Do monitor processes if EXE name equals 'w3wp.exe'\n"
                },
                "goStatic": {
                    "type": "boolean",
                    "description": "Rule id: 47 - Do not monitor processes if Go Binary Linkage equals 'static'\n"
                },
                "hostGroupId": {
                    "type": "string",
                    "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.\n",
                    "willReplaceOnChanges": true
                },
                "jarDtibmmqconnector": {
                    "type": "boolean",
                    "description": "Rule id: 60 - Do not monitor processes if JAR file name equals 'dynatrace_ibm_mq_connector.jar'\n"
                },
                "jarEclipseequinox": {
                    "type": "boolean",
                    "description": "Rule id: 57 - Do not monitor processes if Java JAR file begins with 'org.eclipse.equinox.launcher'\n"
                },
                "k8sCassandraoperator": {
                    "type": "boolean",
                    "description": "Rule id: 69 - Do not monitor processes if Kubernetes container name equals 'cassandra-operator'\n"
                },
                "k8sContainerpod": {
                    "type": "boolean",
                    "description": "Rule id: 38 - Do not monitor processes if Kubernetes container name equals 'POD'\n"
                },
                "k8sNamespace": {
                    "type": "boolean",
                    "description": "Rule id: 40 - Do monitor processes if Kubernetes namespace exists\n"
                },
                "nodeBinpm2": {
                    "type": "boolean",
                    "description": "Do not monitor processes if Node.js script equals 'bin/pm2'\n"
                },
                "nodeCorepack": {
                    "type": "boolean",
                    "description": "Rule id: 68 - Do not monitor processes if Node.js application equals 'corepack'\n"
                },
                "nodeGrunt": {
                    "type": "boolean",
                    "description": "Rule id: 28 - Do not monitor processes if Node.js application base directory ends with '/node_modules/grunt'\n"
                },
                "nodeGulpcli": {
                    "type": "boolean",
                    "description": "Do not monitor processes if Node.js application base directory ends with '/node_modules/gulp-cli'\n"
                },
                "nodeNodegyp": {
                    "type": "boolean",
                    "description": "Rule id: 33 - Do not monitor processes if Node.js application base directory ends with '/node_modules/node-gyp'\n"
                },
                "nodeNodepregyp": {
                    "type": "boolean",
                    "description": "Rule id: 32 - Do not monitor processes if Node.js application base directory ends with '/node_modules/node-pre-gyp'\n"
                },
                "nodeNpm": {
                    "type": "boolean",
                    "description": "Rule id: 27 - Do not monitor processes if Node.js application base directory ends with '/node_modules/npm'\n"
                },
                "nodePrebuildinstall": {
                    "type": "boolean",
                    "description": "Rule id: 26 - Do not monitor processes if Node.js application base directory ends with '/node_modules/prebuild-install'\n"
                },
                "nodeTypescript": {
                    "type": "boolean",
                    "description": "Rule id: 29 - Do not monitor processes if Node.js application base directory ends with '/node_modules/typescript'\n"
                },
                "nodeYarn": {
                    "type": "boolean",
                    "description": "Rule id: 45 - Do not monitor processes if Node.js application equals 'yarn'\n"
                },
                "phpScript": {
                    "type": "boolean",
                    "description": "(v1.274) Rule id: 1 - Do not monitor processes if PHP script exists\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering BuiltinProcessMonitoring resources.\n",
                "properties": {
                    "aspnetcore": {
                        "type": "boolean",
                        "description": "Rule id: 3 - Do monitor processes if ASP.NET Core application path exists\n"
                    },
                    "aspnetcoreAgentlistener": {
                        "type": "boolean",
                        "description": "Rule id: 64 - Do not monitor processes if ASP.NET Core application DLL contains 'Agent.Listener'\n"
                    },
                    "aspnetcoreAgentworker": {
                        "type": "boolean",
                        "description": "Rule id: 62 - Do not monitor processes if ASP.NET Core application DLL contains 'Agent.Worker'\n"
                    },
                    "cf": {
                        "type": "boolean",
                        "description": "Rule id: 37 - Do monitor processes if Cloud Foundry application exists\n"
                    },
                    "cfAppsmanagerjs": {
                        "type": "boolean",
                        "description": "Do not monitor processes if Cloud Foundry application begins with 'apps-manager-js'\n"
                    },
                    "container": {
                        "type": "boolean",
                        "description": "Rule id: 41 - Do monitor processes if container name exists\n"
                    },
                    "dockerPauseamd64": {
                        "type": "boolean",
                        "description": "Rule id: 39 - Do not monitor processes if Docker stripped image contains 'pause-amd64'\n"
                    },
                    "exeAdapter": {
                        "type": "boolean",
                        "description": "Rule id: 7 - Do monitor processes if EXE name equals 'adapter'\n"
                    },
                    "exeAgentlistener": {
                        "type": "boolean",
                        "description": "Rule id: 63 - Do not monitor processes if EXE name contains 'Agent.Listener'\n"
                    },
                    "exeAgentworker": {
                        "type": "boolean",
                        "description": "Rule id: 61 - Do not monitor processes if EXE name contains 'Agent.Worker'\n"
                    },
                    "exeAuctioneer": {
                        "type": "boolean",
                        "description": "Rule id: 8 - Do monitor processes if EXE name equals 'auctioneer'\n"
                    },
                    "exeAuditbeat": {
                        "type": "boolean",
                        "description": "Rule id: 52 - Do not monitor processes if EXE name equals 'auditbeat'\n"
                    },
                    "exeBbs": {
                        "type": "boolean",
                        "description": "Rule id: 9 - Do monitor processes if EXE name equals 'bbs'\n"
                    },
                    "exeCaddy": {
                        "type": "boolean",
                        "description": "Rule id: 5 - Do monitor processes if EXE name equals 'caddy'\n"
                    },
                    "exeCaliconode": {
                        "type": "boolean",
                        "description": "Rule id: 58 - Do not monitor processes if EXE name equals 'calico-node'\n"
                    },
                    "exeCasclient": {
                        "type": "boolean",
                        "description": "Rule id: 59 - Do not monitor processes if EXE name equals 'casclient.exe'\n"
                    },
                    "exeCcuploader": {
                        "type": "boolean",
                        "description": "Rule id: 10 - Do monitor processes if EXE name equals 'cc-uploader'\n"
                    },
                    "exeDoppler": {
                        "type": "boolean",
                        "description": "Rule id: 11 - Do monitor processes if EXE name equals 'doppler'\n"
                    },
                    "exeFilebeat": {
                        "type": "boolean",
                        "description": "Rule id: 49 - Do not monitor processes if EXE name equals 'filebeat'\n"
                    },
                    "exeFlexnetjobexecutorservice": {
                        "type": "boolean",
                        "description": "Rule id: 65 - Do not monitor processes if EXE name equals 'FlexNetJobExecutorService'\n"
                    },
                    "exeFlexnetmaintenanceremotingservice": {
                        "type": "boolean",
                        "description": "Rule id: 66 - Do not monitor processes if EXE name equals 'FlexNetMaintenanceRemotingService'\n"
                    },
                    "exeFunctionbeat": {
                        "type": "boolean",
                        "description": "Rule id: 54 - Do not monitor processes if EXE name equals 'functionbeat'\n"
                    },
                    "exeGorouter": {
                        "type": "boolean",
                        "description": "Rule id: 12 - Do monitor processes if EXE name equals 'gorouter'\n"
                    },
                    "exeGrootfs": {
                        "type": "boolean",
                        "description": "Rule id: 55 - Do not monitor processes if EXE name equals 'grootfs'\n"
                    },
                    "exeHeartbeat": {
                        "type": "boolean",
                        "description": "Rule id: 53 - Do not monitor processes if EXE name equals 'heartbeat'\n"
                    },
                    "exeInfluxd": {
                        "type": "boolean",
                        "description": "Rule id: 6 - Do monitor processes if EXE name equals 'influxd'\n"
                    },
                    "exeLocket": {
                        "type": "boolean",
                        "description": "Rule id: 13 - Do monitor processes if EXE name equals 'locket'\n"
                    },
                    "exeMetricbeat": {
                        "type": "boolean",
                        "description": "Rule id: 50 - Do not monitor processes if EXE name equals 'metricbeat'\n"
                    },
                    "exeMetron": {
                        "type": "boolean",
                        "description": "Rule id: 14 - Do monitor processes if EXE name equals 'metron'\n"
                    },
                    "exeMqsi": {
                        "type": "boolean",
                        "description": "Rule id: 48 - Do not monitor processes if EXE name begins with 'mqsi'\n"
                    },
                    "exeOc": {
                        "type": "boolean",
                        "description": "Rule id: 44 - Do not monitor processes if EXE name equals 'oc'\n"
                    },
                    "exeOpenhandlecollector": {
                        "type": "boolean",
                        "description": "Rule id: 71 - Do not monitor processes if EXE name equals 'openhandlecollector.exe'\n"
                    },
                    "exeOptcnibinhostlocal": {
                        "type": "boolean",
                        "description": "Rule id: 46 - Do not monitor processes if EXE path equals '/opt/cni/bin/host-local'\n"
                    },
                    "exePacketbeat": {
                        "type": "boolean",
                        "description": "Rule id: 51 - Do not monitor processes if EXE name equals 'packetbeat'\n"
                    },
                    "exePhpcgi": {
                        "type": "boolean",
                        "description": "Rule id: 2 - Do not monitor processes if EXE name equals 'php-cgi'\n"
                    },
                    "exeRep": {
                        "type": "boolean",
                        "description": "Rule id: 16 - Do monitor processes if EXE name equals 'rep'\n"
                    },
                    "exeRouteemitter": {
                        "type": "boolean",
                        "description": "Rule id: 17 - Do monitor processes if EXE name equals 'route-emitter'\n"
                    },
                    "exeRouteregistrar": {
                        "type": "boolean",
                        "description": "Rule id: 18 - Do monitor processes if EXE name equals 'route-registrar'\n"
                    },
                    "exeRoutingapi": {
                        "type": "boolean",
                        "description": "Rule id: 19 - Do monitor processes if EXE name equals 'routing-api'\n"
                    },
                    "exeSchedular": {
                        "type": "boolean",
                        "description": "Rule id: 20 - Do monitor processes if EXE name equals 'scheduler'\n"
                    },
                    "exeSilkdaemon": {
                        "type": "boolean",
                        "description": "Rule id: 21 - Do monitor processes if EXE name equals 'silk-daemon'\n"
                    },
                    "exeSwitchboard": {
                        "type": "boolean",
                        "description": "Rule id: 22 - Do monitor processes if EXE name equals 'switchboard'\n"
                    },
                    "exeSyslogdrainbinder": {
                        "type": "boolean",
                        "description": "Rule id: 23 - Do monitor processes if EXE name equals 'syslog_drain_binder'\n"
                    },
                    "exeTardis": {
                        "type": "boolean",
                        "description": "Rule id: 56 - Do not monitor processes if EXE name equals 'tardis'\n"
                    },
                    "exeTmpbuildpacks": {
                        "type": "boolean",
                        "description": "Rule id: 43 - Do not monitor processes if EXE path begins with '/tmp/buildpacks/'\n"
                    },
                    "exeTpswatcher": {
                        "type": "boolean",
                        "description": "Rule id: 24 - Do monitor processes if EXE name equals 'tps-watcher'\n"
                    },
                    "exeTrafficcontroller": {
                        "type": "boolean",
                        "description": "Rule id: 25 - Do monitor processes if EXE name equals 'trafficcontroller'\n"
                    },
                    "exeUipath": {
                        "type": "boolean",
                        "description": "Rule id: 70 - Do not monitor processes if EXE name contains 'UiPath'\n"
                    },
                    "exeUserbinpiper": {
                        "type": "boolean",
                        "description": "Rule id: 67 - Do not monitor processes if EXE path equals '/usr/bin/piper'\n"
                    },
                    "exeW3wp": {
                        "type": "boolean",
                        "description": "Rule id: 4 - Do monitor processes if EXE name equals 'w3wp.exe'\n"
                    },
                    "goStatic": {
                        "type": "boolean",
                        "description": "Rule id: 47 - Do not monitor processes if Go Binary Linkage equals 'static'\n"
                    },
                    "hostGroupId": {
                        "type": "string",
                        "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.\n",
                        "willReplaceOnChanges": true
                    },
                    "jarDtibmmqconnector": {
                        "type": "boolean",
                        "description": "Rule id: 60 - Do not monitor processes if JAR file name equals 'dynatrace_ibm_mq_connector.jar'\n"
                    },
                    "jarEclipseequinox": {
                        "type": "boolean",
                        "description": "Rule id: 57 - Do not monitor processes if Java JAR file begins with 'org.eclipse.equinox.launcher'\n"
                    },
                    "k8sCassandraoperator": {
                        "type": "boolean",
                        "description": "Rule id: 69 - Do not monitor processes if Kubernetes container name equals 'cassandra-operator'\n"
                    },
                    "k8sContainerpod": {
                        "type": "boolean",
                        "description": "Rule id: 38 - Do not monitor processes if Kubernetes container name equals 'POD'\n"
                    },
                    "k8sNamespace": {
                        "type": "boolean",
                        "description": "Rule id: 40 - Do monitor processes if Kubernetes namespace exists\n"
                    },
                    "nodeBinpm2": {
                        "type": "boolean",
                        "description": "Do not monitor processes if Node.js script equals 'bin/pm2'\n"
                    },
                    "nodeCorepack": {
                        "type": "boolean",
                        "description": "Rule id: 68 - Do not monitor processes if Node.js application equals 'corepack'\n"
                    },
                    "nodeGrunt": {
                        "type": "boolean",
                        "description": "Rule id: 28 - Do not monitor processes if Node.js application base directory ends with '/node_modules/grunt'\n"
                    },
                    "nodeGulpcli": {
                        "type": "boolean",
                        "description": "Do not monitor processes if Node.js application base directory ends with '/node_modules/gulp-cli'\n"
                    },
                    "nodeNodegyp": {
                        "type": "boolean",
                        "description": "Rule id: 33 - Do not monitor processes if Node.js application base directory ends with '/node_modules/node-gyp'\n"
                    },
                    "nodeNodepregyp": {
                        "type": "boolean",
                        "description": "Rule id: 32 - Do not monitor processes if Node.js application base directory ends with '/node_modules/node-pre-gyp'\n"
                    },
                    "nodeNpm": {
                        "type": "boolean",
                        "description": "Rule id: 27 - Do not monitor processes if Node.js application base directory ends with '/node_modules/npm'\n"
                    },
                    "nodePrebuildinstall": {
                        "type": "boolean",
                        "description": "Rule id: 26 - Do not monitor processes if Node.js application base directory ends with '/node_modules/prebuild-install'\n"
                    },
                    "nodeTypescript": {
                        "type": "boolean",
                        "description": "Rule id: 29 - Do not monitor processes if Node.js application base directory ends with '/node_modules/typescript'\n"
                    },
                    "nodeYarn": {
                        "type": "boolean",
                        "description": "Rule id: 45 - Do not monitor processes if Node.js application equals 'yarn'\n"
                    },
                    "phpScript": {
                        "type": "boolean",
                        "description": "(v1.274) Rule id: 1 - Do not monitor processes if PHP script exists\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/businessEventsBuckets:BusinessEventsBuckets": {
            "properties": {
                "bucketName": {
                    "type": "string",
                    "description": "Events will be stored in the selected bucket. Analyze bucket contents in the [log \u0026 event\nviewer.](/ui/logs-events?advancedQueryMode=true\u0026query=fetch+bizevents)\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "insertAfter": {
                    "type": "string",
                    "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                },
                "matcher": {
                    "type": "string",
                    "description": "[See our documentation](https://dt-url.net/bp234rv)\n"
                },
                "ruleName": {
                    "type": "string",
                    "description": "Rule name\n"
                }
            },
            "required": [
                "bucketName",
                "enabled",
                "insertAfter",
                "matcher",
                "ruleName"
            ],
            "inputProperties": {
                "bucketName": {
                    "type": "string",
                    "description": "Events will be stored in the selected bucket. Analyze bucket contents in the [log \u0026 event\nviewer.](/ui/logs-events?advancedQueryMode=true\u0026query=fetch+bizevents)\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "insertAfter": {
                    "type": "string",
                    "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                },
                "matcher": {
                    "type": "string",
                    "description": "[See our documentation](https://dt-url.net/bp234rv)\n"
                },
                "ruleName": {
                    "type": "string",
                    "description": "Rule name\n"
                }
            },
            "requiredInputs": [
                "bucketName",
                "enabled",
                "matcher",
                "ruleName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering BusinessEventsBuckets resources.\n",
                "properties": {
                    "bucketName": {
                        "type": "string",
                        "description": "Events will be stored in the selected bucket. Analyze bucket contents in the [log \u0026 event\nviewer.](/ui/logs-events?advancedQueryMode=true\u0026query=fetch+bizevents)\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                    },
                    "insertAfter": {
                        "type": "string",
                        "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                    },
                    "matcher": {
                        "type": "string",
                        "description": "[See our documentation](https://dt-url.net/bp234rv)\n"
                    },
                    "ruleName": {
                        "type": "string",
                        "description": "Rule name\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/businessEventsMetrics:BusinessEventsMetrics": {
            "properties": {
                "dimensions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "no documentation available\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "key": {
                    "type": "string",
                    "description": "Key\n"
                },
                "matcher": {
                    "type": "string",
                    "description": "[See our documentation](https://dt-url.net/bp234rv)\n"
                },
                "measure": {
                    "type": "string",
                    "description": "Possible Values: `ATTRIBUTE`, `OCCURRENCE`\n"
                },
                "measureAttribute": {
                    "type": "string",
                    "description": "Attribute\n"
                }
            },
            "required": [
                "enabled",
                "key",
                "matcher",
                "measure"
            ],
            "inputProperties": {
                "dimensions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "no documentation available\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "key": {
                    "type": "string",
                    "description": "Key\n"
                },
                "matcher": {
                    "type": "string",
                    "description": "[See our documentation](https://dt-url.net/bp234rv)\n"
                },
                "measure": {
                    "type": "string",
                    "description": "Possible Values: `ATTRIBUTE`, `OCCURRENCE`\n"
                },
                "measureAttribute": {
                    "type": "string",
                    "description": "Attribute\n"
                }
            },
            "requiredInputs": [
                "enabled",
                "key",
                "matcher",
                "measure"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering BusinessEventsMetrics resources.\n",
                "properties": {
                    "dimensions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "no documentation available\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                    },
                    "key": {
                        "type": "string",
                        "description": "Key\n"
                    },
                    "matcher": {
                        "type": "string",
                        "description": "[See our documentation](https://dt-url.net/bp234rv)\n"
                    },
                    "measure": {
                        "type": "string",
                        "description": "Possible Values: `ATTRIBUTE`, `OCCURRENCE`\n"
                    },
                    "measureAttribute": {
                        "type": "string",
                        "description": "Attribute\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/businessEventsOneagent:BusinessEventsOneagent": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "event": {
                    "$ref": "#/types/dynatrace:index/BusinessEventsOneagentEvent:BusinessEventsOneagentEvent",
                    "description": "Event meta data\n"
                },
                "insertAfter": {
                    "type": "string",
                    "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                },
                "ruleName": {
                    "type": "string",
                    "description": "Rule name\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.\n"
                },
                "triggers": {
                    "$ref": "#/types/dynatrace:index/BusinessEventsOneagentTriggers:BusinessEventsOneagentTriggers",
                    "description": "Define conditions to trigger business events from incoming web requests. Triggers are connected by AND logic per capture\nrule. If you set multiple trigger rules, all of them need to be fulfilled to capture a business event.\n"
                }
            },
            "required": [
                "enabled",
                "event",
                "insertAfter",
                "ruleName",
                "triggers"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "event": {
                    "$ref": "#/types/dynatrace:index/BusinessEventsOneagentEvent:BusinessEventsOneagentEvent",
                    "description": "Event meta data\n"
                },
                "insertAfter": {
                    "type": "string",
                    "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                },
                "ruleName": {
                    "type": "string",
                    "description": "Rule name\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.\n",
                    "willReplaceOnChanges": true
                },
                "triggers": {
                    "$ref": "#/types/dynatrace:index/BusinessEventsOneagentTriggers:BusinessEventsOneagentTriggers",
                    "description": "Define conditions to trigger business events from incoming web requests. Triggers are connected by AND logic per capture\nrule. If you set multiple trigger rules, all of them need to be fulfilled to capture a business event.\n"
                }
            },
            "requiredInputs": [
                "enabled",
                "event",
                "ruleName",
                "triggers"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering BusinessEventsOneagent resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                    },
                    "event": {
                        "$ref": "#/types/dynatrace:index/BusinessEventsOneagentEvent:BusinessEventsOneagentEvent",
                        "description": "Event meta data\n"
                    },
                    "insertAfter": {
                        "type": "string",
                        "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                    },
                    "ruleName": {
                        "type": "string",
                        "description": "Rule name\n"
                    },
                    "scope": {
                        "type": "string",
                        "description": "The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.\n",
                        "willReplaceOnChanges": true
                    },
                    "triggers": {
                        "$ref": "#/types/dynatrace:index/BusinessEventsOneagentTriggers:BusinessEventsOneagentTriggers",
                        "description": "Define conditions to trigger business events from incoming web requests. Triggers are connected by AND logic per capture\nrule. If you set multiple trigger rules, all of them need to be fulfilled to capture a business event.\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/businessEventsProcessing:BusinessEventsProcessing": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "insertAfter": {
                    "type": "string",
                    "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                },
                "matcher": {
                    "type": "string",
                    "description": "[See our documentation](https://dt-url.net/bp234rv)\n"
                },
                "ruleName": {
                    "type": "string",
                    "description": "Rule name\n"
                },
                "ruleTesting": {
                    "$ref": "#/types/dynatrace:index/BusinessEventsProcessingRuleTesting:BusinessEventsProcessingRuleTesting",
                    "description": "## Rule testing ### 1. Paste an event sample\n"
                },
                "script": {
                    "type": "string",
                    "description": "[See our documentation](https://dt-url.net/pz030w5)\n"
                },
                "transformationFields": {
                    "$ref": "#/types/dynatrace:index/BusinessEventsProcessingTransformationFields:BusinessEventsProcessingTransformationFields",
                    "description": "Transformation fields\n"
                }
            },
            "required": [
                "enabled",
                "insertAfter",
                "matcher",
                "ruleName",
                "ruleTesting",
                "script"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "insertAfter": {
                    "type": "string",
                    "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                },
                "matcher": {
                    "type": "string",
                    "description": "[See our documentation](https://dt-url.net/bp234rv)\n"
                },
                "ruleName": {
                    "type": "string",
                    "description": "Rule name\n"
                },
                "ruleTesting": {
                    "$ref": "#/types/dynatrace:index/BusinessEventsProcessingRuleTesting:BusinessEventsProcessingRuleTesting",
                    "description": "## Rule testing ### 1. Paste an event sample\n"
                },
                "script": {
                    "type": "string",
                    "description": "[See our documentation](https://dt-url.net/pz030w5)\n"
                },
                "transformationFields": {
                    "$ref": "#/types/dynatrace:index/BusinessEventsProcessingTransformationFields:BusinessEventsProcessingTransformationFields",
                    "description": "Transformation fields\n"
                }
            },
            "requiredInputs": [
                "enabled",
                "matcher",
                "ruleName",
                "ruleTesting",
                "script"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering BusinessEventsProcessing resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                    },
                    "insertAfter": {
                        "type": "string",
                        "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                    },
                    "matcher": {
                        "type": "string",
                        "description": "[See our documentation](https://dt-url.net/bp234rv)\n"
                    },
                    "ruleName": {
                        "type": "string",
                        "description": "Rule name\n"
                    },
                    "ruleTesting": {
                        "$ref": "#/types/dynatrace:index/BusinessEventsProcessingRuleTesting:BusinessEventsProcessingRuleTesting",
                        "description": "## Rule testing ### 1. Paste an event sample\n"
                    },
                    "script": {
                        "type": "string",
                        "description": "[See our documentation](https://dt-url.net/pz030w5)\n"
                    },
                    "transformationFields": {
                        "$ref": "#/types/dynatrace:index/BusinessEventsProcessingTransformationFields:BusinessEventsProcessingTransformationFields",
                        "description": "Transformation fields\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/businessEventsSecurityContext:BusinessEventsSecurityContext": {
            "properties": {
                "insertAfter": {
                    "type": "string",
                    "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                },
                "securityContextRule": {
                    "$ref": "#/types/dynatrace:index/BusinessEventsSecurityContextSecurityContextRule:BusinessEventsSecurityContextSecurityContextRule",
                    "description": "no documentation available\n"
                }
            },
            "required": [
                "insertAfter",
                "securityContextRule"
            ],
            "inputProperties": {
                "insertAfter": {
                    "type": "string",
                    "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                },
                "securityContextRule": {
                    "$ref": "#/types/dynatrace:index/BusinessEventsSecurityContextSecurityContextRule:BusinessEventsSecurityContextSecurityContextRule",
                    "description": "no documentation available\n"
                }
            },
            "requiredInputs": [
                "securityContextRule"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering BusinessEventsSecurityContext resources.\n",
                "properties": {
                    "insertAfter": {
                        "type": "string",
                        "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                    },
                    "securityContextRule": {
                        "$ref": "#/types/dynatrace:index/BusinessEventsSecurityContextSecurityContextRule:BusinessEventsSecurityContextSecurityContextRule",
                        "description": "no documentation available\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/calculatedMobileMetric:CalculatedMobileMetric": {
            "properties": {
                "appIdentifier": {
                    "type": "string",
                    "description": "The Dynatrace entity ID of the application to which the metric belongs.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Descriptor of a calculated mobile/custom app metric.\n"
                },
                "dimensions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/CalculatedMobileMetricDimension:CalculatedMobileMetricDimension"
                    },
                    "description": "Parameters of a definition of a calculated mobile/custom app metric.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "The metric is enabled (`true`) or disabled (`false`)\n"
                },
                "metricKey": {
                    "type": "string",
                    "description": "The unique key of the calculated mobile/custom app metric.\n"
                },
                "metricType": {
                    "type": "string",
                    "description": "The type of the metric. Possible values: [ REPORTED_ERROR_COUNT, USER_ACTION_DURATION, WEB_REQUEST_COUNT,\nWEB_REQUEST_ERROR_COUNT ]\n"
                },
                "name": {
                    "type": "string",
                    "description": "The displayed name of the metric.\n"
                },
                "userActionFilter": {
                    "$ref": "#/types/dynatrace:index/CalculatedMobileMetricUserActionFilter:CalculatedMobileMetricUserActionFilter",
                    "description": "Parameters of a definition of a calculated mobile/custom app metric.\n"
                }
            },
            "required": [
                "appIdentifier",
                "enabled",
                "metricKey",
                "metricType",
                "name"
            ],
            "inputProperties": {
                "appIdentifier": {
                    "type": "string",
                    "description": "The Dynatrace entity ID of the application to which the metric belongs.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Descriptor of a calculated mobile/custom app metric.\n"
                },
                "dimensions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/CalculatedMobileMetricDimension:CalculatedMobileMetricDimension"
                    },
                    "description": "Parameters of a definition of a calculated mobile/custom app metric.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "The metric is enabled (`true`) or disabled (`false`)\n"
                },
                "metricKey": {
                    "type": "string",
                    "description": "The unique key of the calculated mobile/custom app metric.\n",
                    "willReplaceOnChanges": true
                },
                "metricType": {
                    "type": "string",
                    "description": "The type of the metric. Possible values: [ REPORTED_ERROR_COUNT, USER_ACTION_DURATION, WEB_REQUEST_COUNT,\nWEB_REQUEST_ERROR_COUNT ]\n"
                },
                "name": {
                    "type": "string",
                    "description": "The displayed name of the metric.\n"
                },
                "userActionFilter": {
                    "$ref": "#/types/dynatrace:index/CalculatedMobileMetricUserActionFilter:CalculatedMobileMetricUserActionFilter",
                    "description": "Parameters of a definition of a calculated mobile/custom app metric.\n"
                }
            },
            "requiredInputs": [
                "appIdentifier",
                "enabled",
                "metricKey",
                "metricType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CalculatedMobileMetric resources.\n",
                "properties": {
                    "appIdentifier": {
                        "type": "string",
                        "description": "The Dynatrace entity ID of the application to which the metric belongs.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Descriptor of a calculated mobile/custom app metric.\n"
                    },
                    "dimensions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/dynatrace:index/CalculatedMobileMetricDimension:CalculatedMobileMetricDimension"
                        },
                        "description": "Parameters of a definition of a calculated mobile/custom app metric.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "The metric is enabled (`true`) or disabled (`false`)\n"
                    },
                    "metricKey": {
                        "type": "string",
                        "description": "The unique key of the calculated mobile/custom app metric.\n",
                        "willReplaceOnChanges": true
                    },
                    "metricType": {
                        "type": "string",
                        "description": "The type of the metric. Possible values: [ REPORTED_ERROR_COUNT, USER_ACTION_DURATION, WEB_REQUEST_COUNT,\nWEB_REQUEST_ERROR_COUNT ]\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The displayed name of the metric.\n"
                    },
                    "userActionFilter": {
                        "$ref": "#/types/dynatrace:index/CalculatedMobileMetricUserActionFilter:CalculatedMobileMetricUserActionFilter",
                        "description": "Parameters of a definition of a calculated mobile/custom app metric.\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/calculatedServiceMetric:CalculatedServiceMetric": {
            "properties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/CalculatedServiceMetricCondition:CalculatedServiceMetricCondition"
                    },
                    "description": "The set of conditions for the metric usage. **All** the specified conditions must be fulfilled to use the metric\n"
                },
                "description": {
                    "type": "string",
                    "description": "The displayed description of the metric\n"
                },
                "dimensionDefinition": {
                    "$ref": "#/types/dynatrace:index/CalculatedServiceMetricDimensionDefinition:CalculatedServiceMetricDimensionDefinition",
                    "description": "Parameters of a definition of a calculated service metric\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "The metric is enabled (`true`) or disabled (`false`)\n"
                },
                "entityId": {
                    "type": "string",
                    "description": "Restricts the metric usage to the specified service. This field is mutually exclusive with the `management_zones` field\n"
                },
                "ignoreMutedRequests": {
                    "type": "boolean",
                    "description": "Metric should (true) or not (false) ignore muted requests.\n"
                },
                "managementZones": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Restricts the metric usage to specified management zones. This field is mutually exclusive with the `entity_id` field\n"
                },
                "metricDefinition": {
                    "$ref": "#/types/dynatrace:index/CalculatedServiceMetricMetricDefinition:CalculatedServiceMetricMetricDefinition",
                    "description": "The definition of a calculated service metric\n"
                },
                "metricKey": {
                    "type": "string",
                    "description": "The key of the calculated service metric\n"
                },
                "name": {
                    "type": "string",
                    "description": "The displayed name of the metric\n"
                },
                "unit": {
                    "type": "string",
                    "description": "The unit of the metric. Possible values are `BIT`, `BIT_PER_HOUR`, `BIT_PER_MINUTE`, `BIT_PER_SECOND`, `BYTE`,\n`BYTE_PER_HOUR`, `BYTE_PER_MINUTE`, `BYTE_PER_SECOND`, `CORES`, `COUNT`, `DAY`, `DECIBEL_MILLI_WATT`, `GIBI_BYTE`,\n`GIGA`, `GIGA_BYTE`, `HOUR`, `KIBI_BYTE`, `KIBI_BYTE_PER_HOUR`, `KIBI_BYTE_PER_MINUTE`, `KIBI_BYTE_PER_SECOND`, `KILO`,\n`KILO_BYTE`, `KILO_BYTE_PER_HOUR`, `KILO_BYTE_PER_MINUTE`, `KILO_BYTE_PER_SECOND`, `MEBI_BYTE`, `MEBI_BYTE_PER_HOUR`,\n`MEBI_BYTE_PER_MINUTE`, `MEBI_BYTE_PER_SECOND`, `MEGA`, `MEGA_BYTE`, `MEGA_BYTE_PER_HOUR`, `MEGA_BYTE_PER_MINUTE`,\n`MEGA_BYTE_PER_SECOND`, `MICRO_SECOND`, `MILLI_CORES`, `MILLI_SECOND`, `MILLI_SECOND_PER_MINUTE`, `MINUTE`, `MONTH`,\n`MSU`, `NANO_SECOND`, `NANO_SECOND_PER_MINUTE`, `NOT_APPLICABLE`, `PERCENT`, `PER_HOUR`, `PER_MINUTE`, `PER_SECOND`,\n`PIXEL`, `PROMILLE`, `RATIO`, `SECOND`, `STATE`, `UNSPECIFIED`, `WEEK` and `YEAR`\n"
                },
                "unitDisplayName": {
                    "type": "string",
                    "description": "The display name of the metric's unit. Only applicable when the **unit** parameter is set to `UNSPECIFIED`\n"
                },
                "unknowns": {
                    "type": "string",
                    "description": "allows for configuring properties that are not explicitly supported by the current version of this provider\n"
                }
            },
            "required": [
                "metricKey",
                "name",
                "unit"
            ],
            "inputProperties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/CalculatedServiceMetricCondition:CalculatedServiceMetricCondition"
                    },
                    "description": "The set of conditions for the metric usage. **All** the specified conditions must be fulfilled to use the metric\n"
                },
                "description": {
                    "type": "string",
                    "description": "The displayed description of the metric\n"
                },
                "dimensionDefinition": {
                    "$ref": "#/types/dynatrace:index/CalculatedServiceMetricDimensionDefinition:CalculatedServiceMetricDimensionDefinition",
                    "description": "Parameters of a definition of a calculated service metric\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "The metric is enabled (`true`) or disabled (`false`)\n"
                },
                "entityId": {
                    "type": "string",
                    "description": "Restricts the metric usage to the specified service. This field is mutually exclusive with the `management_zones` field\n"
                },
                "ignoreMutedRequests": {
                    "type": "boolean",
                    "description": "Metric should (true) or not (false) ignore muted requests.\n"
                },
                "managementZones": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Restricts the metric usage to specified management zones. This field is mutually exclusive with the `entity_id` field\n"
                },
                "metricDefinition": {
                    "$ref": "#/types/dynatrace:index/CalculatedServiceMetricMetricDefinition:CalculatedServiceMetricMetricDefinition",
                    "description": "The definition of a calculated service metric\n"
                },
                "metricKey": {
                    "type": "string",
                    "description": "The key of the calculated service metric\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The displayed name of the metric\n"
                },
                "unit": {
                    "type": "string",
                    "description": "The unit of the metric. Possible values are `BIT`, `BIT_PER_HOUR`, `BIT_PER_MINUTE`, `BIT_PER_SECOND`, `BYTE`,\n`BYTE_PER_HOUR`, `BYTE_PER_MINUTE`, `BYTE_PER_SECOND`, `CORES`, `COUNT`, `DAY`, `DECIBEL_MILLI_WATT`, `GIBI_BYTE`,\n`GIGA`, `GIGA_BYTE`, `HOUR`, `KIBI_BYTE`, `KIBI_BYTE_PER_HOUR`, `KIBI_BYTE_PER_MINUTE`, `KIBI_BYTE_PER_SECOND`, `KILO`,\n`KILO_BYTE`, `KILO_BYTE_PER_HOUR`, `KILO_BYTE_PER_MINUTE`, `KILO_BYTE_PER_SECOND`, `MEBI_BYTE`, `MEBI_BYTE_PER_HOUR`,\n`MEBI_BYTE_PER_MINUTE`, `MEBI_BYTE_PER_SECOND`, `MEGA`, `MEGA_BYTE`, `MEGA_BYTE_PER_HOUR`, `MEGA_BYTE_PER_MINUTE`,\n`MEGA_BYTE_PER_SECOND`, `MICRO_SECOND`, `MILLI_CORES`, `MILLI_SECOND`, `MILLI_SECOND_PER_MINUTE`, `MINUTE`, `MONTH`,\n`MSU`, `NANO_SECOND`, `NANO_SECOND_PER_MINUTE`, `NOT_APPLICABLE`, `PERCENT`, `PER_HOUR`, `PER_MINUTE`, `PER_SECOND`,\n`PIXEL`, `PROMILLE`, `RATIO`, `SECOND`, `STATE`, `UNSPECIFIED`, `WEEK` and `YEAR`\n"
                },
                "unitDisplayName": {
                    "type": "string",
                    "description": "The display name of the metric's unit. Only applicable when the **unit** parameter is set to `UNSPECIFIED`\n"
                },
                "unknowns": {
                    "type": "string",
                    "description": "allows for configuring properties that are not explicitly supported by the current version of this provider\n"
                }
            },
            "requiredInputs": [
                "metricKey",
                "unit"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CalculatedServiceMetric resources.\n",
                "properties": {
                    "conditions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/dynatrace:index/CalculatedServiceMetricCondition:CalculatedServiceMetricCondition"
                        },
                        "description": "The set of conditions for the metric usage. **All** the specified conditions must be fulfilled to use the metric\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The displayed description of the metric\n"
                    },
                    "dimensionDefinition": {
                        "$ref": "#/types/dynatrace:index/CalculatedServiceMetricDimensionDefinition:CalculatedServiceMetricDimensionDefinition",
                        "description": "Parameters of a definition of a calculated service metric\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "The metric is enabled (`true`) or disabled (`false`)\n"
                    },
                    "entityId": {
                        "type": "string",
                        "description": "Restricts the metric usage to the specified service. This field is mutually exclusive with the `management_zones` field\n"
                    },
                    "ignoreMutedRequests": {
                        "type": "boolean",
                        "description": "Metric should (true) or not (false) ignore muted requests.\n"
                    },
                    "managementZones": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Restricts the metric usage to specified management zones. This field is mutually exclusive with the `entity_id` field\n"
                    },
                    "metricDefinition": {
                        "$ref": "#/types/dynatrace:index/CalculatedServiceMetricMetricDefinition:CalculatedServiceMetricMetricDefinition",
                        "description": "The definition of a calculated service metric\n"
                    },
                    "metricKey": {
                        "type": "string",
                        "description": "The key of the calculated service metric\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The displayed name of the metric\n"
                    },
                    "unit": {
                        "type": "string",
                        "description": "The unit of the metric. Possible values are `BIT`, `BIT_PER_HOUR`, `BIT_PER_MINUTE`, `BIT_PER_SECOND`, `BYTE`,\n`BYTE_PER_HOUR`, `BYTE_PER_MINUTE`, `BYTE_PER_SECOND`, `CORES`, `COUNT`, `DAY`, `DECIBEL_MILLI_WATT`, `GIBI_BYTE`,\n`GIGA`, `GIGA_BYTE`, `HOUR`, `KIBI_BYTE`, `KIBI_BYTE_PER_HOUR`, `KIBI_BYTE_PER_MINUTE`, `KIBI_BYTE_PER_SECOND`, `KILO`,\n`KILO_BYTE`, `KILO_BYTE_PER_HOUR`, `KILO_BYTE_PER_MINUTE`, `KILO_BYTE_PER_SECOND`, `MEBI_BYTE`, `MEBI_BYTE_PER_HOUR`,\n`MEBI_BYTE_PER_MINUTE`, `MEBI_BYTE_PER_SECOND`, `MEGA`, `MEGA_BYTE`, `MEGA_BYTE_PER_HOUR`, `MEGA_BYTE_PER_MINUTE`,\n`MEGA_BYTE_PER_SECOND`, `MICRO_SECOND`, `MILLI_CORES`, `MILLI_SECOND`, `MILLI_SECOND_PER_MINUTE`, `MINUTE`, `MONTH`,\n`MSU`, `NANO_SECOND`, `NANO_SECOND_PER_MINUTE`, `NOT_APPLICABLE`, `PERCENT`, `PER_HOUR`, `PER_MINUTE`, `PER_SECOND`,\n`PIXEL`, `PROMILLE`, `RATIO`, `SECOND`, `STATE`, `UNSPECIFIED`, `WEEK` and `YEAR`\n"
                    },
                    "unitDisplayName": {
                        "type": "string",
                        "description": "The display name of the metric's unit. Only applicable when the **unit** parameter is set to `UNSPECIFIED`\n"
                    },
                    "unknowns": {
                        "type": "string",
                        "description": "allows for configuring properties that are not explicitly supported by the current version of this provider\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/calculatedSyntheticMetric:CalculatedSyntheticMetric": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Descriptor of a calculated synthetic metric.\n"
                },
                "dimensions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/CalculatedSyntheticMetricDimension:CalculatedSyntheticMetricDimension"
                    },
                    "description": "Dimension of the calculated synthetic metric.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "The metric is enabled (`true`) or disabled (`false`)\n"
                },
                "filter": {
                    "$ref": "#/types/dynatrace:index/CalculatedSyntheticMetricFilter:CalculatedSyntheticMetricFilter",
                    "description": "Filter of the calculated synthetic metric.\n"
                },
                "metric": {
                    "type": "string",
                    "description": "The type of the synthetic metric. Possible values: [ ApplicationCache, Callback, CumulativeLayoutShift, DNSLookup,\nDOMComplete, DOMContentLoaded, DOMInteractive, FailedRequestsResources, FirstContentfulPaint, FirstInputDelay,\nFirstInputStart, FirstPaint, HTMLDownloaded, HttpErrors, JavaScriptErrors, LargestContentfulPaint, LoadEventEnd,\nLoadEventStart, LongTasks, NavigationStart, OnDOMContentLoaded, OnLoad, Processing, RedirectTime, Request, RequestStart,\nResourceCount, Response, SecureConnect, SpeedIndex, TCPConnect, TimeToFirstByte, TotalDuration, TransferSize,\nUserActionDuration, VisuallyComplete ]\n"
                },
                "metricKey": {
                    "type": "string",
                    "description": "The unique key of the calculated synthetic metric.\n"
                },
                "monitorIdentifier": {
                    "type": "string",
                    "description": "The Dynatrace entity ID of the monitor to which the metric belongs.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The displayed name of the metric.\n"
                }
            },
            "required": [
                "enabled",
                "metric",
                "metricKey",
                "monitorIdentifier",
                "name"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Descriptor of a calculated synthetic metric.\n"
                },
                "dimensions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/CalculatedSyntheticMetricDimension:CalculatedSyntheticMetricDimension"
                    },
                    "description": "Dimension of the calculated synthetic metric.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "The metric is enabled (`true`) or disabled (`false`)\n"
                },
                "filter": {
                    "$ref": "#/types/dynatrace:index/CalculatedSyntheticMetricFilter:CalculatedSyntheticMetricFilter",
                    "description": "Filter of the calculated synthetic metric.\n"
                },
                "metric": {
                    "type": "string",
                    "description": "The type of the synthetic metric. Possible values: [ ApplicationCache, Callback, CumulativeLayoutShift, DNSLookup,\nDOMComplete, DOMContentLoaded, DOMInteractive, FailedRequestsResources, FirstContentfulPaint, FirstInputDelay,\nFirstInputStart, FirstPaint, HTMLDownloaded, HttpErrors, JavaScriptErrors, LargestContentfulPaint, LoadEventEnd,\nLoadEventStart, LongTasks, NavigationStart, OnDOMContentLoaded, OnLoad, Processing, RedirectTime, Request, RequestStart,\nResourceCount, Response, SecureConnect, SpeedIndex, TCPConnect, TimeToFirstByte, TotalDuration, TransferSize,\nUserActionDuration, VisuallyComplete ]\n"
                },
                "metricKey": {
                    "type": "string",
                    "description": "The unique key of the calculated synthetic metric.\n",
                    "willReplaceOnChanges": true
                },
                "monitorIdentifier": {
                    "type": "string",
                    "description": "The Dynatrace entity ID of the monitor to which the metric belongs.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The displayed name of the metric.\n"
                }
            },
            "requiredInputs": [
                "enabled",
                "metric",
                "metricKey",
                "monitorIdentifier"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CalculatedSyntheticMetric resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Descriptor of a calculated synthetic metric.\n"
                    },
                    "dimensions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/dynatrace:index/CalculatedSyntheticMetricDimension:CalculatedSyntheticMetricDimension"
                        },
                        "description": "Dimension of the calculated synthetic metric.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "The metric is enabled (`true`) or disabled (`false`)\n"
                    },
                    "filter": {
                        "$ref": "#/types/dynatrace:index/CalculatedSyntheticMetricFilter:CalculatedSyntheticMetricFilter",
                        "description": "Filter of the calculated synthetic metric.\n"
                    },
                    "metric": {
                        "type": "string",
                        "description": "The type of the synthetic metric. Possible values: [ ApplicationCache, Callback, CumulativeLayoutShift, DNSLookup,\nDOMComplete, DOMContentLoaded, DOMInteractive, FailedRequestsResources, FirstContentfulPaint, FirstInputDelay,\nFirstInputStart, FirstPaint, HTMLDownloaded, HttpErrors, JavaScriptErrors, LargestContentfulPaint, LoadEventEnd,\nLoadEventStart, LongTasks, NavigationStart, OnDOMContentLoaded, OnLoad, Processing, RedirectTime, Request, RequestStart,\nResourceCount, Response, SecureConnect, SpeedIndex, TCPConnect, TimeToFirstByte, TotalDuration, TransferSize,\nUserActionDuration, VisuallyComplete ]\n"
                    },
                    "metricKey": {
                        "type": "string",
                        "description": "The unique key of the calculated synthetic metric.\n",
                        "willReplaceOnChanges": true
                    },
                    "monitorIdentifier": {
                        "type": "string",
                        "description": "The Dynatrace entity ID of the monitor to which the metric belongs.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The displayed name of the metric.\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/calculatedWebMetric:CalculatedWebMetric": {
            "properties": {
                "appIdentifier": {
                    "type": "string",
                    "description": "The Dynatrace entity ID of the application to which the metric belongs.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Descriptor of a calculated web metric.\n"
                },
                "dimensions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/CalculatedWebMetricDimension:CalculatedWebMetricDimension"
                    },
                    "description": "Parameters of a definition of a calculated web metric.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "The metric is enabled (`true`) or disabled (`false`)\n"
                },
                "metricDefinition": {
                    "$ref": "#/types/dynatrace:index/CalculatedWebMetricMetricDefinition:CalculatedWebMetricMetricDefinition",
                    "description": "The definition of a calculated web metric.\n"
                },
                "metricKey": {
                    "type": "string",
                    "description": "The unique key of the calculated web metric.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The displayed name of the metric.\n"
                },
                "userActionFilter": {
                    "$ref": "#/types/dynatrace:index/CalculatedWebMetricUserActionFilter:CalculatedWebMetricUserActionFilter",
                    "description": "Parameters of a definition of a calculated web metric.\n"
                }
            },
            "required": [
                "appIdentifier",
                "enabled",
                "metricDefinition",
                "metricKey",
                "name"
            ],
            "inputProperties": {
                "appIdentifier": {
                    "type": "string",
                    "description": "The Dynatrace entity ID of the application to which the metric belongs.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Descriptor of a calculated web metric.\n"
                },
                "dimensions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/CalculatedWebMetricDimension:CalculatedWebMetricDimension"
                    },
                    "description": "Parameters of a definition of a calculated web metric.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "The metric is enabled (`true`) or disabled (`false`)\n"
                },
                "metricDefinition": {
                    "$ref": "#/types/dynatrace:index/CalculatedWebMetricMetricDefinition:CalculatedWebMetricMetricDefinition",
                    "description": "The definition of a calculated web metric.\n"
                },
                "metricKey": {
                    "type": "string",
                    "description": "The unique key of the calculated web metric.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The displayed name of the metric.\n"
                },
                "userActionFilter": {
                    "$ref": "#/types/dynatrace:index/CalculatedWebMetricUserActionFilter:CalculatedWebMetricUserActionFilter",
                    "description": "Parameters of a definition of a calculated web metric.\n"
                }
            },
            "requiredInputs": [
                "appIdentifier",
                "enabled",
                "metricDefinition",
                "metricKey"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CalculatedWebMetric resources.\n",
                "properties": {
                    "appIdentifier": {
                        "type": "string",
                        "description": "The Dynatrace entity ID of the application to which the metric belongs.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Descriptor of a calculated web metric.\n"
                    },
                    "dimensions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/dynatrace:index/CalculatedWebMetricDimension:CalculatedWebMetricDimension"
                        },
                        "description": "Parameters of a definition of a calculated web metric.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "The metric is enabled (`true`) or disabled (`false`)\n"
                    },
                    "metricDefinition": {
                        "$ref": "#/types/dynatrace:index/CalculatedWebMetricMetricDefinition:CalculatedWebMetricMetricDefinition",
                        "description": "The definition of a calculated web metric.\n"
                    },
                    "metricKey": {
                        "type": "string",
                        "description": "The unique key of the calculated web metric.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The displayed name of the metric.\n"
                    },
                    "userActionFilter": {
                        "$ref": "#/types/dynatrace:index/CalculatedWebMetricUserActionFilter:CalculatedWebMetricUserActionFilter",
                        "description": "Parameters of a definition of a calculated web metric.\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/cloudFoundry:CloudFoundry": {
            "properties": {
                "activeGateGroup": {
                    "type": "string",
                    "description": "ActiveGate group\n"
                },
                "apiUrl": {
                    "type": "string",
                    "description": "Cloud Foundry API Target\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "label": {
                    "type": "string",
                    "description": "Name this connection\n"
                },
                "loginUrl": {
                    "type": "string",
                    "description": "Cloud Foundry Authentication Endpoint\n"
                },
                "password": {
                    "type": "string",
                    "description": "Cloud Foundry Password\n",
                    "secret": true
                },
                "username": {
                    "type": "string",
                    "description": "Cloud Foundry Username\n"
                }
            },
            "required": [
                "apiUrl",
                "enabled",
                "label",
                "loginUrl",
                "password",
                "username"
            ],
            "inputProperties": {
                "activeGateGroup": {
                    "type": "string",
                    "description": "ActiveGate group\n"
                },
                "apiUrl": {
                    "type": "string",
                    "description": "Cloud Foundry API Target\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "label": {
                    "type": "string",
                    "description": "Name this connection\n"
                },
                "loginUrl": {
                    "type": "string",
                    "description": "Cloud Foundry Authentication Endpoint\n"
                },
                "password": {
                    "type": "string",
                    "description": "Cloud Foundry Password\n",
                    "secret": true
                },
                "username": {
                    "type": "string",
                    "description": "Cloud Foundry Username\n"
                }
            },
            "requiredInputs": [
                "apiUrl",
                "enabled",
                "label",
                "loginUrl",
                "password",
                "username"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CloudFoundry resources.\n",
                "properties": {
                    "activeGateGroup": {
                        "type": "string",
                        "description": "ActiveGate group\n"
                    },
                    "apiUrl": {
                        "type": "string",
                        "description": "Cloud Foundry API Target\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                    },
                    "label": {
                        "type": "string",
                        "description": "Name this connection\n"
                    },
                    "loginUrl": {
                        "type": "string",
                        "description": "Cloud Foundry Authentication Endpoint\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "Cloud Foundry Password\n",
                        "secret": true
                    },
                    "username": {
                        "type": "string",
                        "description": "Cloud Foundry Username\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/cloudappWorkloaddetection:CloudappWorkloaddetection": {
            "properties": {
                "cloudFoundry": {
                    "$ref": "#/types/dynatrace:index/CloudappWorkloaddetectionCloudFoundry:CloudappWorkloaddetectionCloudFoundry",
                    "description": "Enable this setting to get * Processes of Cloud Foundry application instances merged into process groups by Cloud\nFoundry application. * Container resource metrics (Container group instance entities) and [related\nscreens](https://www.dynatrace.com/support/help/shortlink/container-groups).\n"
                },
                "docker": {
                    "$ref": "#/types/dynatrace:index/CloudappWorkloaddetectionDocker:CloudappWorkloaddetectionDocker",
                    "description": "Enable this setting for plain Docker environments to get * Container resource metrics (Container group instance\nentities) and [related screens](https://www.dynatrace.com/support/help/shortlink/container-groups).\n"
                },
                "kubernetes": {
                    "$ref": "#/types/dynatrace:index/CloudappWorkloaddetectionKubernetes:CloudappWorkloaddetectionKubernetes",
                    "description": "Enable this setting to get * Insights into your Kubernetes namespaces, workloads and pods (cloud application namespace,\ncloud application and cloud application instance and entities). * Container resource metrics (container group instance\nentities) and [related screens](https://www.dynatrace.com/support/help/shortlink/container-groups). * Similar workloads\nmerged into process groups based on defined rules (see below). * Version detection for services that run in Kubernetes\nworkloads.\n"
                }
            },
            "required": [
                "cloudFoundry",
                "docker",
                "kubernetes"
            ],
            "inputProperties": {
                "cloudFoundry": {
                    "$ref": "#/types/dynatrace:index/CloudappWorkloaddetectionCloudFoundry:CloudappWorkloaddetectionCloudFoundry",
                    "description": "Enable this setting to get * Processes of Cloud Foundry application instances merged into process groups by Cloud\nFoundry application. * Container resource metrics (Container group instance entities) and [related\nscreens](https://www.dynatrace.com/support/help/shortlink/container-groups).\n"
                },
                "docker": {
                    "$ref": "#/types/dynatrace:index/CloudappWorkloaddetectionDocker:CloudappWorkloaddetectionDocker",
                    "description": "Enable this setting for plain Docker environments to get * Container resource metrics (Container group instance\nentities) and [related screens](https://www.dynatrace.com/support/help/shortlink/container-groups).\n"
                },
                "kubernetes": {
                    "$ref": "#/types/dynatrace:index/CloudappWorkloaddetectionKubernetes:CloudappWorkloaddetectionKubernetes",
                    "description": "Enable this setting to get * Insights into your Kubernetes namespaces, workloads and pods (cloud application namespace,\ncloud application and cloud application instance and entities). * Container resource metrics (container group instance\nentities) and [related screens](https://www.dynatrace.com/support/help/shortlink/container-groups). * Similar workloads\nmerged into process groups based on defined rules (see below). * Version detection for services that run in Kubernetes\nworkloads.\n"
                }
            },
            "requiredInputs": [
                "cloudFoundry",
                "docker",
                "kubernetes"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CloudappWorkloaddetection resources.\n",
                "properties": {
                    "cloudFoundry": {
                        "$ref": "#/types/dynatrace:index/CloudappWorkloaddetectionCloudFoundry:CloudappWorkloaddetectionCloudFoundry",
                        "description": "Enable this setting to get * Processes of Cloud Foundry application instances merged into process groups by Cloud\nFoundry application. * Container resource metrics (Container group instance entities) and [related\nscreens](https://www.dynatrace.com/support/help/shortlink/container-groups).\n"
                    },
                    "docker": {
                        "$ref": "#/types/dynatrace:index/CloudappWorkloaddetectionDocker:CloudappWorkloaddetectionDocker",
                        "description": "Enable this setting for plain Docker environments to get * Container resource metrics (Container group instance\nentities) and [related screens](https://www.dynatrace.com/support/help/shortlink/container-groups).\n"
                    },
                    "kubernetes": {
                        "$ref": "#/types/dynatrace:index/CloudappWorkloaddetectionKubernetes:CloudappWorkloaddetectionKubernetes",
                        "description": "Enable this setting to get * Insights into your Kubernetes namespaces, workloads and pods (cloud application namespace,\ncloud application and cloud application instance and entities). * Container resource metrics (container group instance\nentities) and [related screens](https://www.dynatrace.com/support/help/shortlink/container-groups). * Similar workloads\nmerged into process groups based on defined rules (see below). * Version detection for services that run in Kubernetes\nworkloads.\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/cloudfoundryCredentials:CloudfoundryCredentials": {
            "properties": {
                "active": {
                    "type": "boolean",
                    "description": "The monitoring is enabled (`true`) or disabled (`false`) for given credentials configuration. If not set on creation,\nthe `true` value is used. If the field is omitted during an update, the old value remains unaffected.\n"
                },
                "apiUrl": {
                    "type": "string",
                    "description": "The URL of the Cloud Foundry foundation credentials. The URL must be valid according to RFC 2396. Leading or trailing\nwhitespaces are not allowed.\n"
                },
                "loginUrl": {
                    "type": "string",
                    "description": "The login URL of the Cloud Foundry foundation credentials. The URL must be valid according to RFC 2396. Leading or\ntrailing whitespaces are not allowed.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Cloud Foundry foundation credentials. Allowed characters are letters, numbers, whitespaces, and the\nfollowing characters: `.+-_`. Leading or trailing whitespace is not allowed.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password of the Cloud Foundry foundation credentials.\n",
                    "secret": true
                },
                "unknowns": {
                    "type": "string",
                    "description": "Any attributes that aren't yet supported by this provider\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username of the Cloud Foundry foundation credentials. Leading and trailing whitespaces are not allowed.\n"
                }
            },
            "required": [
                "apiUrl",
                "loginUrl",
                "name",
                "username"
            ],
            "inputProperties": {
                "active": {
                    "type": "boolean",
                    "description": "The monitoring is enabled (`true`) or disabled (`false`) for given credentials configuration. If not set on creation,\nthe `true` value is used. If the field is omitted during an update, the old value remains unaffected.\n"
                },
                "apiUrl": {
                    "type": "string",
                    "description": "The URL of the Cloud Foundry foundation credentials. The URL must be valid according to RFC 2396. Leading or trailing\nwhitespaces are not allowed.\n"
                },
                "loginUrl": {
                    "type": "string",
                    "description": "The login URL of the Cloud Foundry foundation credentials. The URL must be valid according to RFC 2396. Leading or\ntrailing whitespaces are not allowed.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Cloud Foundry foundation credentials. Allowed characters are letters, numbers, whitespaces, and the\nfollowing characters: `.+-_`. Leading or trailing whitespace is not allowed.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password of the Cloud Foundry foundation credentials.\n",
                    "secret": true
                },
                "unknowns": {
                    "type": "string",
                    "description": "Any attributes that aren't yet supported by this provider\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username of the Cloud Foundry foundation credentials. Leading and trailing whitespaces are not allowed.\n"
                }
            },
            "requiredInputs": [
                "apiUrl",
                "loginUrl",
                "username"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CloudfoundryCredentials resources.\n",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "description": "The monitoring is enabled (`true`) or disabled (`false`) for given credentials configuration. If not set on creation,\nthe `true` value is used. If the field is omitted during an update, the old value remains unaffected.\n"
                    },
                    "apiUrl": {
                        "type": "string",
                        "description": "The URL of the Cloud Foundry foundation credentials. The URL must be valid according to RFC 2396. Leading or trailing\nwhitespaces are not allowed.\n"
                    },
                    "loginUrl": {
                        "type": "string",
                        "description": "The login URL of the Cloud Foundry foundation credentials. The URL must be valid according to RFC 2396. Leading or\ntrailing whitespaces are not allowed.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Cloud Foundry foundation credentials. Allowed characters are letters, numbers, whitespaces, and the\nfollowing characters: `.+-_`. Leading or trailing whitespace is not allowed.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "The password of the Cloud Foundry foundation credentials.\n",
                        "secret": true
                    },
                    "unknowns": {
                        "type": "string",
                        "description": "Any attributes that aren't yet supported by this provider\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "The username of the Cloud Foundry foundation credentials. Leading and trailing whitespaces are not allowed.\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/connectivityAlerts:ConnectivityAlerts": {
            "properties": {
                "connectivityAlerts": {
                    "type": "boolean",
                    "description": "TCP connectivity problems\n"
                },
                "processGroupId": {
                    "type": "string",
                    "description": "The scope of this settings\n"
                }
            },
            "required": [
                "connectivityAlerts",
                "processGroupId"
            ],
            "inputProperties": {
                "connectivityAlerts": {
                    "type": "boolean",
                    "description": "TCP connectivity problems\n"
                },
                "processGroupId": {
                    "type": "string",
                    "description": "The scope of this settings\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "connectivityAlerts",
                "processGroupId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ConnectivityAlerts resources.\n",
                "properties": {
                    "connectivityAlerts": {
                        "type": "boolean",
                        "description": "TCP connectivity problems\n"
                    },
                    "processGroupId": {
                        "type": "string",
                        "description": "The scope of this settings\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/containerBuiltinRule:ContainerBuiltinRule": {
            "properties": {
                "ignoreDockerPauseContainer": {
                    "type": "boolean",
                    "description": "Disable monitoring of platform internal pause containers in Kubernetes and OpenShift.\n"
                },
                "ignoreKubernetesPauseContainer": {
                    "type": "boolean",
                    "description": "Disable monitoring of platform internal pause containers in Kubernetes and OpenShift.\n"
                },
                "ignoreOpenShiftBuildPodName": {
                    "type": "boolean",
                    "description": "Disable monitoring of intermediate containers created during image build.\n"
                },
                "ignoreOpenShiftSdnNamespace": {
                    "type": "boolean",
                    "description": "Disable monitoring of platform internal containers in the openshift-sdn namespace.\n"
                }
            },
            "required": [
                "ignoreDockerPauseContainer",
                "ignoreKubernetesPauseContainer",
                "ignoreOpenShiftBuildPodName",
                "ignoreOpenShiftSdnNamespace"
            ],
            "inputProperties": {
                "ignoreDockerPauseContainer": {
                    "type": "boolean",
                    "description": "Disable monitoring of platform internal pause containers in Kubernetes and OpenShift.\n"
                },
                "ignoreKubernetesPauseContainer": {
                    "type": "boolean",
                    "description": "Disable monitoring of platform internal pause containers in Kubernetes and OpenShift.\n"
                },
                "ignoreOpenShiftBuildPodName": {
                    "type": "boolean",
                    "description": "Disable monitoring of intermediate containers created during image build.\n"
                },
                "ignoreOpenShiftSdnNamespace": {
                    "type": "boolean",
                    "description": "Disable monitoring of platform internal containers in the openshift-sdn namespace.\n"
                }
            },
            "requiredInputs": [
                "ignoreDockerPauseContainer",
                "ignoreKubernetesPauseContainer",
                "ignoreOpenShiftBuildPodName",
                "ignoreOpenShiftSdnNamespace"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ContainerBuiltinRule resources.\n",
                "properties": {
                    "ignoreDockerPauseContainer": {
                        "type": "boolean",
                        "description": "Disable monitoring of platform internal pause containers in Kubernetes and OpenShift.\n"
                    },
                    "ignoreKubernetesPauseContainer": {
                        "type": "boolean",
                        "description": "Disable monitoring of platform internal pause containers in Kubernetes and OpenShift.\n"
                    },
                    "ignoreOpenShiftBuildPodName": {
                        "type": "boolean",
                        "description": "Disable monitoring of intermediate containers created during image build.\n"
                    },
                    "ignoreOpenShiftSdnNamespace": {
                        "type": "boolean",
                        "description": "Disable monitoring of platform internal containers in the openshift-sdn namespace.\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/containerRegistry:ContainerRegistry": {
            "properties": {
                "containerRegistry": {
                    "type": "string",
                    "description": "Typically set without protocol. Leave empty to use default configuration\n"
                }
            },
            "inputProperties": {
                "containerRegistry": {
                    "type": "string",
                    "description": "Typically set without protocol. Leave empty to use default configuration\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ContainerRegistry resources.\n",
                "properties": {
                    "containerRegistry": {
                        "type": "string",
                        "description": "Typically set without protocol. Leave empty to use default configuration\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/containerRule:ContainerRule": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "insertAfter": {
                    "type": "string",
                    "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                },
                "mode": {
                    "type": "string",
                    "description": "Possible Values: `MONITORING_OFF`, `MONITORING_ON`\n"
                },
                "operator": {
                    "type": "string",
                    "description": "Possible Values: `CONTAINS`, `ENDS`, `EQUALS`, `EXISTS`, `NOT_CONTAINS`, `NOT_ENDS`, `NOT_EQUALS`, `NOT_EXISTS`,\n`NOT_STARTS`, `STARTS`\n"
                },
                "property": {
                    "type": "string",
                    "description": "Possible Values: `CONTAINER_NAME`, `IMAGE_NAME`, `KUBERNETES_BASEPODNAME`, `KUBERNETES_CONTAINERNAME`,\n`KUBERNETES_FULLPODNAME`, `KUBERNETES_NAMESPACE`, `KUBERNETES_PODUID`\n"
                },
                "value": {
                    "type": "string",
                    "description": "Condition value\n"
                }
            },
            "required": [
                "enabled",
                "insertAfter",
                "mode",
                "operator",
                "property"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "insertAfter": {
                    "type": "string",
                    "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                },
                "mode": {
                    "type": "string",
                    "description": "Possible Values: `MONITORING_OFF`, `MONITORING_ON`\n"
                },
                "operator": {
                    "type": "string",
                    "description": "Possible Values: `CONTAINS`, `ENDS`, `EQUALS`, `EXISTS`, `NOT_CONTAINS`, `NOT_ENDS`, `NOT_EQUALS`, `NOT_EXISTS`,\n`NOT_STARTS`, `STARTS`\n"
                },
                "property": {
                    "type": "string",
                    "description": "Possible Values: `CONTAINER_NAME`, `IMAGE_NAME`, `KUBERNETES_BASEPODNAME`, `KUBERNETES_CONTAINERNAME`,\n`KUBERNETES_FULLPODNAME`, `KUBERNETES_NAMESPACE`, `KUBERNETES_PODUID`\n"
                },
                "value": {
                    "type": "string",
                    "description": "Condition value\n"
                }
            },
            "requiredInputs": [
                "enabled",
                "mode",
                "operator",
                "property"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ContainerRule resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                    },
                    "insertAfter": {
                        "type": "string",
                        "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                    },
                    "mode": {
                        "type": "string",
                        "description": "Possible Values: `MONITORING_OFF`, `MONITORING_ON`\n"
                    },
                    "operator": {
                        "type": "string",
                        "description": "Possible Values: `CONTAINS`, `ENDS`, `EQUALS`, `EXISTS`, `NOT_CONTAINS`, `NOT_ENDS`, `NOT_EQUALS`, `NOT_EXISTS`,\n`NOT_STARTS`, `STARTS`\n"
                    },
                    "property": {
                        "type": "string",
                        "description": "Possible Values: `CONTAINER_NAME`, `IMAGE_NAME`, `KUBERNETES_BASEPODNAME`, `KUBERNETES_CONTAINERNAME`,\n`KUBERNETES_FULLPODNAME`, `KUBERNETES_NAMESPACE`, `KUBERNETES_PODUID`\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "Condition value\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/containerTechnology:ContainerTechnology": {
            "properties": {
                "boshProcessManager": {
                    "type": "boolean",
                    "description": "Platform: Cloud Foundry Status: Released Operating system: Linux Min agent version: 1.159\n"
                },
                "containerd": {
                    "type": "boolean",
                    "description": "Platform: Kubernetes Status: Released Operating system: Linux Min agent version: 1.169\n"
                },
                "crio": {
                    "type": "boolean",
                    "description": "Platform: Kubernetes Status: Released Operating system: Linux Min agent version: 1.163\n"
                },
                "docker": {
                    "type": "boolean",
                    "description": "Platform: Docker and Kubernetes Status: Released Operating system: Linux\n"
                },
                "dockerWindows": {
                    "type": "boolean",
                    "description": "Platform: Docker Status: Early adopter Operating system: Windows Min agent version: 1.149\n"
                },
                "garden": {
                    "type": "boolean",
                    "description": "Platform: Cloud Foundry Status: Released Operating system: Linux Min agent version: 1.133\n"
                },
                "podman": {
                    "type": "boolean",
                    "description": "Platform: Podman Status: Released Operating system: Linux Min agent version: 1.267\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.\n"
                },
                "winc": {
                    "type": "boolean",
                    "description": "Platform: Cloud Foundry Status: Early adopter Operating system: Windows Min agent version: 1.175\n"
                }
            },
            "required": [
                "boshProcessManager",
                "containerd",
                "crio",
                "docker",
                "dockerWindows",
                "garden",
                "podman",
                "winc"
            ],
            "inputProperties": {
                "boshProcessManager": {
                    "type": "boolean",
                    "description": "Platform: Cloud Foundry Status: Released Operating system: Linux Min agent version: 1.159\n"
                },
                "containerd": {
                    "type": "boolean",
                    "description": "Platform: Kubernetes Status: Released Operating system: Linux Min agent version: 1.169\n"
                },
                "crio": {
                    "type": "boolean",
                    "description": "Platform: Kubernetes Status: Released Operating system: Linux Min agent version: 1.163\n"
                },
                "docker": {
                    "type": "boolean",
                    "description": "Platform: Docker and Kubernetes Status: Released Operating system: Linux\n"
                },
                "dockerWindows": {
                    "type": "boolean",
                    "description": "Platform: Docker Status: Early adopter Operating system: Windows Min agent version: 1.149\n"
                },
                "garden": {
                    "type": "boolean",
                    "description": "Platform: Cloud Foundry Status: Released Operating system: Linux Min agent version: 1.133\n"
                },
                "podman": {
                    "type": "boolean",
                    "description": "Platform: Podman Status: Released Operating system: Linux Min agent version: 1.267\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.\n",
                    "willReplaceOnChanges": true
                },
                "winc": {
                    "type": "boolean",
                    "description": "Platform: Cloud Foundry Status: Early adopter Operating system: Windows Min agent version: 1.175\n"
                }
            },
            "requiredInputs": [
                "boshProcessManager",
                "containerd",
                "crio",
                "docker",
                "dockerWindows",
                "garden",
                "podman",
                "winc"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ContainerTechnology resources.\n",
                "properties": {
                    "boshProcessManager": {
                        "type": "boolean",
                        "description": "Platform: Cloud Foundry Status: Released Operating system: Linux Min agent version: 1.159\n"
                    },
                    "containerd": {
                        "type": "boolean",
                        "description": "Platform: Kubernetes Status: Released Operating system: Linux Min agent version: 1.169\n"
                    },
                    "crio": {
                        "type": "boolean",
                        "description": "Platform: Kubernetes Status: Released Operating system: Linux Min agent version: 1.163\n"
                    },
                    "docker": {
                        "type": "boolean",
                        "description": "Platform: Docker and Kubernetes Status: Released Operating system: Linux\n"
                    },
                    "dockerWindows": {
                        "type": "boolean",
                        "description": "Platform: Docker Status: Early adopter Operating system: Windows Min agent version: 1.149\n"
                    },
                    "garden": {
                        "type": "boolean",
                        "description": "Platform: Cloud Foundry Status: Released Operating system: Linux Min agent version: 1.133\n"
                    },
                    "podman": {
                        "type": "boolean",
                        "description": "Platform: Podman Status: Released Operating system: Linux Min agent version: 1.267\n"
                    },
                    "scope": {
                        "type": "string",
                        "description": "The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.\n",
                        "willReplaceOnChanges": true
                    },
                    "winc": {
                        "type": "boolean",
                        "description": "Platform: Cloud Foundry Status: Early adopter Operating system: Windows Min agent version: 1.175\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/crashdumpAnalytics:CrashdumpAnalytics": {
            "properties": {
                "enableCrashDumpAnalytics": {
                    "type": "boolean",
                    "description": "Control the automatic crash dump analytics feature. It's strongly recommended to keep this option enabled. Disabling\nthis feature will stop receiving information about potential problems\n"
                },
                "hostId": {
                    "type": "string",
                    "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.\n"
                }
            },
            "required": [
                "enableCrashDumpAnalytics",
                "hostId"
            ],
            "inputProperties": {
                "enableCrashDumpAnalytics": {
                    "type": "boolean",
                    "description": "Control the automatic crash dump analytics feature. It's strongly recommended to keep this option enabled. Disabling\nthis feature will stop receiving information about potential problems\n"
                },
                "hostId": {
                    "type": "string",
                    "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.\n"
                }
            },
            "requiredInputs": [
                "enableCrashDumpAnalytics",
                "hostId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CrashdumpAnalytics resources.\n",
                "properties": {
                    "enableCrashDumpAnalytics": {
                        "type": "boolean",
                        "description": "Control the automatic crash dump analytics feature. It's strongly recommended to keep this option enabled. Disabling\nthis feature will stop receiving information about potential problems\n"
                    },
                    "hostId": {
                        "type": "string",
                        "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/credentials:Credentials": {
            "properties": {
                "allowContextlessRequests": {
                    "type": "boolean",
                    "description": "Allow ad-hoc functions to access the credential details (requires the APP_ENGINE scope).\n"
                },
                "certificate": {
                    "type": "string",
                    "description": "The certificate in the string format.\n"
                },
                "credentialUsageSummaries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/CredentialsCredentialUsageSummary:CredentialsCredentialUsageSummary"
                    },
                    "description": "The list contains summary data related to the use of credentials\n",
                    "deprecationMessage": "`credential_usage_summary` will be removed in future versions. It's not getting filled anymore, because it's runtime data"
                },
                "description": {
                    "type": "string",
                    "description": "A short description of the credentials set\n"
                },
                "external": {
                    "$ref": "#/types/dynatrace:index/CredentialsExternal:CredentialsExternal",
                    "description": "External Vault Configuration\n"
                },
                "format": {
                    "type": "string",
                    "description": "The certificate format. Possible values are `PEM`, `PKCS12` and `UNKNOWN`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the credentials set\n"
                },
                "ownerAccessOnly": {
                    "type": "boolean",
                    "description": "The credentials set is available to every user (`false`) or to owner only (`true`)\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password of the credential. Note: Terraform treats an empty string for a value as if the attribute was absent. If\nyou want to set an empty password, use the value `--empty--`.\n",
                    "secret": true
                },
                "public": {
                    "type": "boolean",
                    "description": "For certificate authentication specifies whether it's public certificate auth (`true`) or not (`false`).\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of the credentials set. Possible values are `ALL`, `EXTENSION` and `SYNTHETIC`\n",
                    "deprecationMessage": "Deprecated(v279), please use `scopes` instead."
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The set of scopes of the credentials set. Possible values are `ALL`, `EXTENSION` and `SYNTHETIC`\n"
                },
                "token": {
                    "type": "string",
                    "description": "Token in the string format. Specifying a token implies `Token Authentication`.\n",
                    "secret": true
                },
                "username": {
                    "type": "string",
                    "description": "The username of the credentials set.\n",
                    "secret": true
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "allowContextlessRequests": {
                    "type": "boolean",
                    "description": "Allow ad-hoc functions to access the credential details (requires the APP_ENGINE scope).\n"
                },
                "certificate": {
                    "type": "string",
                    "description": "The certificate in the string format.\n"
                },
                "credentialUsageSummaries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/CredentialsCredentialUsageSummary:CredentialsCredentialUsageSummary"
                    },
                    "description": "The list contains summary data related to the use of credentials\n",
                    "deprecationMessage": "`credential_usage_summary` will be removed in future versions. It's not getting filled anymore, because it's runtime data"
                },
                "description": {
                    "type": "string",
                    "description": "A short description of the credentials set\n"
                },
                "external": {
                    "$ref": "#/types/dynatrace:index/CredentialsExternal:CredentialsExternal",
                    "description": "External Vault Configuration\n"
                },
                "format": {
                    "type": "string",
                    "description": "The certificate format. Possible values are `PEM`, `PKCS12` and `UNKNOWN`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the credentials set\n"
                },
                "ownerAccessOnly": {
                    "type": "boolean",
                    "description": "The credentials set is available to every user (`false`) or to owner only (`true`)\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password of the credential. Note: Terraform treats an empty string for a value as if the attribute was absent. If\nyou want to set an empty password, use the value `--empty--`.\n",
                    "secret": true
                },
                "public": {
                    "type": "boolean",
                    "description": "For certificate authentication specifies whether it's public certificate auth (`true`) or not (`false`).\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of the credentials set. Possible values are `ALL`, `EXTENSION` and `SYNTHETIC`\n",
                    "deprecationMessage": "Deprecated(v279), please use `scopes` instead."
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The set of scopes of the credentials set. Possible values are `ALL`, `EXTENSION` and `SYNTHETIC`\n"
                },
                "token": {
                    "type": "string",
                    "description": "Token in the string format. Specifying a token implies `Token Authentication`.\n",
                    "secret": true
                },
                "username": {
                    "type": "string",
                    "description": "The username of the credentials set.\n",
                    "secret": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Credentials resources.\n",
                "properties": {
                    "allowContextlessRequests": {
                        "type": "boolean",
                        "description": "Allow ad-hoc functions to access the credential details (requires the APP_ENGINE scope).\n"
                    },
                    "certificate": {
                        "type": "string",
                        "description": "The certificate in the string format.\n"
                    },
                    "credentialUsageSummaries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/dynatrace:index/CredentialsCredentialUsageSummary:CredentialsCredentialUsageSummary"
                        },
                        "description": "The list contains summary data related to the use of credentials\n",
                        "deprecationMessage": "`credential_usage_summary` will be removed in future versions. It's not getting filled anymore, because it's runtime data"
                    },
                    "description": {
                        "type": "string",
                        "description": "A short description of the credentials set\n"
                    },
                    "external": {
                        "$ref": "#/types/dynatrace:index/CredentialsExternal:CredentialsExternal",
                        "description": "External Vault Configuration\n"
                    },
                    "format": {
                        "type": "string",
                        "description": "The certificate format. Possible values are `PEM`, `PKCS12` and `UNKNOWN`.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the credentials set\n"
                    },
                    "ownerAccessOnly": {
                        "type": "boolean",
                        "description": "The credentials set is available to every user (`false`) or to owner only (`true`)\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "The password of the credential. Note: Terraform treats an empty string for a value as if the attribute was absent. If\nyou want to set an empty password, use the value `--empty--`.\n",
                        "secret": true
                    },
                    "public": {
                        "type": "boolean",
                        "description": "For certificate authentication specifies whether it's public certificate auth (`true`) or not (`false`).\n"
                    },
                    "scope": {
                        "type": "string",
                        "description": "The scope of the credentials set. Possible values are `ALL`, `EXTENSION` and `SYNTHETIC`\n",
                        "deprecationMessage": "Deprecated(v279), please use `scopes` instead."
                    },
                    "scopes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The set of scopes of the credentials set. Possible values are `ALL`, `EXTENSION` and `SYNTHETIC`\n"
                    },
                    "token": {
                        "type": "string",
                        "description": "Token in the string format. Specifying a token implies `Token Authentication`.\n",
                        "secret": true
                    },
                    "username": {
                        "type": "string",
                        "description": "The username of the credentials set.\n",
                        "secret": true
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/customAnomalies:CustomAnomalies": {
            "properties": {
                "aggregationType": {
                    "type": "string",
                    "description": "How the metric data points are aggregated for the evaluation. The timeseries must support this aggregation\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the metric event\n"
                },
                "dimensions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/CustomAnomaliesDimension:CustomAnomaliesDimension"
                    },
                    "description": "Defines the dimensions of the metric to alert on. The filters are combined by conjunction\n"
                },
                "disabledReason": {
                    "type": "string",
                    "description": "The reason of automatic disabling. The `NONE` means config was not disabled automatically. Possible values are\n`METRIC_DEFINITION_INCONSISTENCY`, `NONE`, `TOO_MANY_DIMS` and `TOPX_FORCIBLY_DEACTIVATED`\n",
                    "deprecationMessage": "This property is not meant to be configured from the outside. It will get removed completely in future versions"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "The metric event is enabled (`true`) or disabled (`false`)\n"
                },
                "metricId": {
                    "type": "string",
                    "description": "The ID of the metric evaluated by the metric event\n"
                },
                "metricSelector": {
                    "type": "string",
                    "description": "The metric selector that should be executed\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the metric event displayed in the UI\n"
                },
                "primaryDimensionKey": {
                    "type": "string",
                    "description": "Defines which dimension key should be used for the **alertingScope**\n"
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/CustomAnomaliesScope:CustomAnomaliesScope"
                    },
                    "description": "Defines the scope of the metric event. Only one filter is allowed per filter type, except for tags, where up to 3 are\nallowed. The filters are combined by conjunction\n"
                },
                "severity": {
                    "type": "string",
                    "description": "The type of the event to trigger on the threshold violation. The `CUSTOM_ALERT` type is not correlated with other\nalerts. The `INFO` type does not open a problem\n"
                },
                "strategy": {
                    "$ref": "#/types/dynatrace:index/CustomAnomaliesStrategy:CustomAnomaliesStrategy",
                    "description": "A monitoring strategy for a metric event config. This is the base version of the monitoring strategy, depending on the\ntype, the actual JSON may contain additional fields\n"
                },
                "unknowns": {
                    "type": "string",
                    "description": "allows for configuring properties that are not explicitly supported by the current version of this provider\n"
                },
                "warningReason": {
                    "type": "string",
                    "description": "The reason of a warning set on the config. The `NONE` means config has no warnings. The other supported value is\n`TOO_MANY_DIMS`\n",
                    "deprecationMessage": "This property is not meant to be configured from the outside. It will get removed completely in future versions"
                }
            },
            "required": [
                "description",
                "enabled",
                "name",
                "strategy"
            ],
            "inputProperties": {
                "aggregationType": {
                    "type": "string",
                    "description": "How the metric data points are aggregated for the evaluation. The timeseries must support this aggregation\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the metric event\n"
                },
                "dimensions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/CustomAnomaliesDimension:CustomAnomaliesDimension"
                    },
                    "description": "Defines the dimensions of the metric to alert on. The filters are combined by conjunction\n"
                },
                "disabledReason": {
                    "type": "string",
                    "description": "The reason of automatic disabling. The `NONE` means config was not disabled automatically. Possible values are\n`METRIC_DEFINITION_INCONSISTENCY`, `NONE`, `TOO_MANY_DIMS` and `TOPX_FORCIBLY_DEACTIVATED`\n",
                    "deprecationMessage": "This property is not meant to be configured from the outside. It will get removed completely in future versions"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "The metric event is enabled (`true`) or disabled (`false`)\n"
                },
                "metricId": {
                    "type": "string",
                    "description": "The ID of the metric evaluated by the metric event\n"
                },
                "metricSelector": {
                    "type": "string",
                    "description": "The metric selector that should be executed\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the metric event displayed in the UI\n"
                },
                "primaryDimensionKey": {
                    "type": "string",
                    "description": "Defines which dimension key should be used for the **alertingScope**\n"
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/CustomAnomaliesScope:CustomAnomaliesScope"
                    },
                    "description": "Defines the scope of the metric event. Only one filter is allowed per filter type, except for tags, where up to 3 are\nallowed. The filters are combined by conjunction\n"
                },
                "severity": {
                    "type": "string",
                    "description": "The type of the event to trigger on the threshold violation. The `CUSTOM_ALERT` type is not correlated with other\nalerts. The `INFO` type does not open a problem\n"
                },
                "strategy": {
                    "$ref": "#/types/dynatrace:index/CustomAnomaliesStrategy:CustomAnomaliesStrategy",
                    "description": "A monitoring strategy for a metric event config. This is the base version of the monitoring strategy, depending on the\ntype, the actual JSON may contain additional fields\n"
                },
                "unknowns": {
                    "type": "string",
                    "description": "allows for configuring properties that are not explicitly supported by the current version of this provider\n"
                },
                "warningReason": {
                    "type": "string",
                    "description": "The reason of a warning set on the config. The `NONE` means config has no warnings. The other supported value is\n`TOO_MANY_DIMS`\n",
                    "deprecationMessage": "This property is not meant to be configured from the outside. It will get removed completely in future versions"
                }
            },
            "requiredInputs": [
                "description",
                "enabled",
                "strategy"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CustomAnomalies resources.\n",
                "properties": {
                    "aggregationType": {
                        "type": "string",
                        "description": "How the metric data points are aggregated for the evaluation. The timeseries must support this aggregation\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the metric event\n"
                    },
                    "dimensions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/dynatrace:index/CustomAnomaliesDimension:CustomAnomaliesDimension"
                        },
                        "description": "Defines the dimensions of the metric to alert on. The filters are combined by conjunction\n"
                    },
                    "disabledReason": {
                        "type": "string",
                        "description": "The reason of automatic disabling. The `NONE` means config was not disabled automatically. Possible values are\n`METRIC_DEFINITION_INCONSISTENCY`, `NONE`, `TOO_MANY_DIMS` and `TOPX_FORCIBLY_DEACTIVATED`\n",
                        "deprecationMessage": "This property is not meant to be configured from the outside. It will get removed completely in future versions"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "The metric event is enabled (`true`) or disabled (`false`)\n"
                    },
                    "metricId": {
                        "type": "string",
                        "description": "The ID of the metric evaluated by the metric event\n"
                    },
                    "metricSelector": {
                        "type": "string",
                        "description": "The metric selector that should be executed\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the metric event displayed in the UI\n"
                    },
                    "primaryDimensionKey": {
                        "type": "string",
                        "description": "Defines which dimension key should be used for the **alertingScope**\n"
                    },
                    "scopes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/dynatrace:index/CustomAnomaliesScope:CustomAnomaliesScope"
                        },
                        "description": "Defines the scope of the metric event. Only one filter is allowed per filter type, except for tags, where up to 3 are\nallowed. The filters are combined by conjunction\n"
                    },
                    "severity": {
                        "type": "string",
                        "description": "The type of the event to trigger on the threshold violation. The `CUSTOM_ALERT` type is not correlated with other\nalerts. The `INFO` type does not open a problem\n"
                    },
                    "strategy": {
                        "$ref": "#/types/dynatrace:index/CustomAnomaliesStrategy:CustomAnomaliesStrategy",
                        "description": "A monitoring strategy for a metric event config. This is the base version of the monitoring strategy, depending on the\ntype, the actual JSON may contain additional fields\n"
                    },
                    "unknowns": {
                        "type": "string",
                        "description": "allows for configuring properties that are not explicitly supported by the current version of this provider\n"
                    },
                    "warningReason": {
                        "type": "string",
                        "description": "The reason of a warning set on the config. The `NONE` means config has no warnings. The other supported value is\n`TOO_MANY_DIMS`\n",
                        "deprecationMessage": "This property is not meant to be configured from the outside. It will get removed completely in future versions"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/customAppAnomalies:CustomAppAnomalies": {
            "properties": {
                "errorRateIncrease": {
                    "$ref": "#/types/dynatrace:index/CustomAppAnomaliesErrorRateIncrease:CustomAppAnomaliesErrorRateIncrease",
                    "description": "Error rate increase\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of this setting (DEVICE_APPLICATION_METHOD CUSTOM_APPLICATION environment)\n"
                },
                "slowUserActions": {
                    "$ref": "#/types/dynatrace:index/CustomAppAnomaliesSlowUserActions:CustomAppAnomaliesSlowUserActions",
                    "description": "Slow user actions\n"
                },
                "unexpectedHighLoad": {
                    "$ref": "#/types/dynatrace:index/CustomAppAnomaliesUnexpectedHighLoad:CustomAppAnomaliesUnexpectedHighLoad",
                    "description": "Unexpected high load\n"
                },
                "unexpectedLowLoad": {
                    "$ref": "#/types/dynatrace:index/CustomAppAnomaliesUnexpectedLowLoad:CustomAppAnomaliesUnexpectedLowLoad",
                    "description": "Unexpected low load\n"
                }
            },
            "required": [
                "errorRateIncrease",
                "slowUserActions",
                "unexpectedHighLoad",
                "unexpectedLowLoad"
            ],
            "inputProperties": {
                "errorRateIncrease": {
                    "$ref": "#/types/dynatrace:index/CustomAppAnomaliesErrorRateIncrease:CustomAppAnomaliesErrorRateIncrease",
                    "description": "Error rate increase\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of this setting (DEVICE_APPLICATION_METHOD CUSTOM_APPLICATION environment)\n",
                    "willReplaceOnChanges": true
                },
                "slowUserActions": {
                    "$ref": "#/types/dynatrace:index/CustomAppAnomaliesSlowUserActions:CustomAppAnomaliesSlowUserActions",
                    "description": "Slow user actions\n"
                },
                "unexpectedHighLoad": {
                    "$ref": "#/types/dynatrace:index/CustomAppAnomaliesUnexpectedHighLoad:CustomAppAnomaliesUnexpectedHighLoad",
                    "description": "Unexpected high load\n"
                },
                "unexpectedLowLoad": {
                    "$ref": "#/types/dynatrace:index/CustomAppAnomaliesUnexpectedLowLoad:CustomAppAnomaliesUnexpectedLowLoad",
                    "description": "Unexpected low load\n"
                }
            },
            "requiredInputs": [
                "errorRateIncrease",
                "slowUserActions",
                "unexpectedHighLoad",
                "unexpectedLowLoad"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CustomAppAnomalies resources.\n",
                "properties": {
                    "errorRateIncrease": {
                        "$ref": "#/types/dynatrace:index/CustomAppAnomaliesErrorRateIncrease:CustomAppAnomaliesErrorRateIncrease",
                        "description": "Error rate increase\n"
                    },
                    "scope": {
                        "type": "string",
                        "description": "The scope of this setting (DEVICE_APPLICATION_METHOD CUSTOM_APPLICATION environment)\n",
                        "willReplaceOnChanges": true
                    },
                    "slowUserActions": {
                        "$ref": "#/types/dynatrace:index/CustomAppAnomaliesSlowUserActions:CustomAppAnomaliesSlowUserActions",
                        "description": "Slow user actions\n"
                    },
                    "unexpectedHighLoad": {
                        "$ref": "#/types/dynatrace:index/CustomAppAnomaliesUnexpectedHighLoad:CustomAppAnomaliesUnexpectedHighLoad",
                        "description": "Unexpected high load\n"
                    },
                    "unexpectedLowLoad": {
                        "$ref": "#/types/dynatrace:index/CustomAppAnomaliesUnexpectedLowLoad:CustomAppAnomaliesUnexpectedLowLoad",
                        "description": "Unexpected low load\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/customAppCrashRate:CustomAppCrashRate": {
            "properties": {
                "crashRateIncrease": {
                    "$ref": "#/types/dynatrace:index/CustomAppCrashRateCrashRateIncrease:CustomAppCrashRateCrashRateIncrease",
                    "description": "Crash rate increase\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of this setting (CUSTOM_APPLICATION environment)\n"
                }
            },
            "required": [
                "crashRateIncrease"
            ],
            "inputProperties": {
                "crashRateIncrease": {
                    "$ref": "#/types/dynatrace:index/CustomAppCrashRateCrashRateIncrease:CustomAppCrashRateCrashRateIncrease",
                    "description": "Crash rate increase\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of this setting (CUSTOM_APPLICATION environment)\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "crashRateIncrease"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CustomAppCrashRate resources.\n",
                "properties": {
                    "crashRateIncrease": {
                        "$ref": "#/types/dynatrace:index/CustomAppCrashRateCrashRateIncrease:CustomAppCrashRateCrashRateIncrease",
                        "description": "Crash rate increase\n"
                    },
                    "scope": {
                        "type": "string",
                        "description": "The scope of this setting (CUSTOM_APPLICATION environment)\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/customAppEnablement:CustomAppEnablement": {
            "properties": {
                "rum": {
                    "$ref": "#/types/dynatrace:index/CustomAppEnablementRum:CustomAppEnablementRum",
                    "description": "Capture and analyze all user actions within your application. Enable [Real User Monitoring\n(RUM)](https://dt-url.net/1n2b0prq) to monitor and improve your application's performance, identify errors, and gain\ninsight into your user's behavior and experience.\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of this setting (CUSTOM_APPLICATION). Omit this property if you want to cover the whole environment.\n"
                }
            },
            "required": [
                "rum"
            ],
            "inputProperties": {
                "rum": {
                    "$ref": "#/types/dynatrace:index/CustomAppEnablementRum:CustomAppEnablementRum",
                    "description": "Capture and analyze all user actions within your application. Enable [Real User Monitoring\n(RUM)](https://dt-url.net/1n2b0prq) to monitor and improve your application's performance, identify errors, and gain\ninsight into your user's behavior and experience.\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of this setting (CUSTOM_APPLICATION). Omit this property if you want to cover the whole environment.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "rum"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CustomAppEnablement resources.\n",
                "properties": {
                    "rum": {
                        "$ref": "#/types/dynatrace:index/CustomAppEnablementRum:CustomAppEnablementRum",
                        "description": "Capture and analyze all user actions within your application. Enable [Real User Monitoring\n(RUM)](https://dt-url.net/1n2b0prq) to monitor and improve your application's performance, identify errors, and gain\ninsight into your user's behavior and experience.\n"
                    },
                    "scope": {
                        "type": "string",
                        "description": "The scope of this setting (CUSTOM_APPLICATION). Omit this property if you want to cover the whole environment.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/customDevice:CustomDevice": {
            "properties": {
                "configUrl": {
                    "type": "string",
                    "description": "The URL of a configuration web page for the custom device, such as a login page for a firewall or router.\n"
                },
                "customDeviceId": {
                    "type": "string",
                    "description": "The unique name of the custom device. This Id can either be provided in the resource or generated by Terraform when the\nresource is created. If you use the ID of an existing device, the respective parameters will be updated\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The name of the custom device, displayed in the UI.\n"
                },
                "dnsNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of DNS names related to the custom device.\n"
                },
                "entityId": {
                    "type": "string",
                    "description": "The Dynatrace EntityID of this resource. If you need to refer to this custom device within other resources you want to\nuse this ID\n"
                },
                "faviconUrl": {
                    "type": "string",
                    "description": "The icon to be displayed for your custom component within Smartscape. Provide the full URL of the icon file.\n"
                },
                "group": {
                    "type": "string",
                    "description": "User defined group of entity. Changing the group requires a new custom device to be created.\n"
                },
                "ipAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of IP addresses that belong to the custom device.\n"
                },
                "listenPorts": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "The list of ports the custom devices listens to.\n"
                },
                "properties": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The list of key-value pair properties that will be shown beneath the infographics of your custom device.\n",
                    "deprecationMessage": "Please use the attribute `props` instead"
                },
                "props": {
                    "type": "string",
                    "description": "The list of key-value pair properties that will be shown beneath the infographics of your custom device.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The technology type definition of the custom device.\n"
                },
                "uiBased": {
                    "type": "boolean",
                    "description": "If `true` the custom device will be handled as if it was created via UI. It will be refreshed automatically and won't\nage out. This attribute is taken into consideration when creating the custom device. Changing it afterwards won't have\nan effect.\n"
                }
            },
            "required": [
                "customDeviceId",
                "displayName",
                "entityId",
                "group",
                "type"
            ],
            "inputProperties": {
                "configUrl": {
                    "type": "string",
                    "description": "The URL of a configuration web page for the custom device, such as a login page for a firewall or router.\n"
                },
                "customDeviceId": {
                    "type": "string",
                    "description": "The unique name of the custom device. This Id can either be provided in the resource or generated by Terraform when the\nresource is created. If you use the ID of an existing device, the respective parameters will be updated\n",
                    "willReplaceOnChanges": true
                },
                "displayName": {
                    "type": "string",
                    "description": "The name of the custom device, displayed in the UI.\n"
                },
                "dnsNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of DNS names related to the custom device.\n"
                },
                "faviconUrl": {
                    "type": "string",
                    "description": "The icon to be displayed for your custom component within Smartscape. Provide the full URL of the icon file.\n"
                },
                "group": {
                    "type": "string",
                    "description": "User defined group of entity. Changing the group requires a new custom device to be created.\n",
                    "willReplaceOnChanges": true
                },
                "ipAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of IP addresses that belong to the custom device.\n"
                },
                "listenPorts": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "The list of ports the custom devices listens to.\n"
                },
                "properties": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The list of key-value pair properties that will be shown beneath the infographics of your custom device.\n",
                    "deprecationMessage": "Please use the attribute `props` instead"
                },
                "props": {
                    "type": "string",
                    "description": "The list of key-value pair properties that will be shown beneath the infographics of your custom device.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The technology type definition of the custom device.\n"
                },
                "uiBased": {
                    "type": "boolean",
                    "description": "If `true` the custom device will be handled as if it was created via UI. It will be refreshed automatically and won't\nage out. This attribute is taken into consideration when creating the custom device. Changing it afterwards won't have\nan effect.\n"
                }
            },
            "requiredInputs": [
                "displayName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CustomDevice resources.\n",
                "properties": {
                    "configUrl": {
                        "type": "string",
                        "description": "The URL of a configuration web page for the custom device, such as a login page for a firewall or router.\n"
                    },
                    "customDeviceId": {
                        "type": "string",
                        "description": "The unique name of the custom device. This Id can either be provided in the resource or generated by Terraform when the\nresource is created. If you use the ID of an existing device, the respective parameters will be updated\n",
                        "willReplaceOnChanges": true
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The name of the custom device, displayed in the UI.\n"
                    },
                    "dnsNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of DNS names related to the custom device.\n"
                    },
                    "entityId": {
                        "type": "string",
                        "description": "The Dynatrace EntityID of this resource. If you need to refer to this custom device within other resources you want to\nuse this ID\n"
                    },
                    "faviconUrl": {
                        "type": "string",
                        "description": "The icon to be displayed for your custom component within Smartscape. Provide the full URL of the icon file.\n"
                    },
                    "group": {
                        "type": "string",
                        "description": "User defined group of entity. Changing the group requires a new custom device to be created.\n",
                        "willReplaceOnChanges": true
                    },
                    "ipAddresses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of IP addresses that belong to the custom device.\n"
                    },
                    "listenPorts": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "The list of ports the custom devices listens to.\n"
                    },
                    "properties": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The list of key-value pair properties that will be shown beneath the infographics of your custom device.\n",
                        "deprecationMessage": "Please use the attribute `props` instead"
                    },
                    "props": {
                        "type": "string",
                        "description": "The list of key-value pair properties that will be shown beneath the infographics of your custom device.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The technology type definition of the custom device.\n"
                    },
                    "uiBased": {
                        "type": "boolean",
                        "description": "If `true` the custom device will be handled as if it was created via UI. It will be refreshed automatically and won't\nage out. This attribute is taken into consideration when creating the custom device. Changing it afterwards won't have\nan effect.\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/customService:CustomService": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Custom service enabled/disabled\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the custom service, displayed in the UI\n"
                },
                "processGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of process groups the custom service should belong to\n"
                },
                "queueEntryPoint": {
                    "type": "boolean",
                    "description": "The queue entry point flag. Set to `true` for custom messaging services\n"
                },
                "queueEntryPointType": {
                    "type": "string",
                    "description": "The queue entry point type (IBM_MQ, JMS, KAFKA, MSMQ or RABBIT_MQ)\n"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/CustomServiceRule:CustomServiceRule"
                    },
                    "description": "The list of rules defining the custom service\n"
                },
                "technology": {
                    "type": "string",
                    "description": "Matcher applying to the file name (ENDS_WITH, EQUALS or STARTS_WITH). Default value is ENDS_WITH (if applicable)\n"
                },
                "unknowns": {
                    "type": "string",
                    "description": "allows for configuring properties that are not explicitly supported by the current version of this provider\n"
                }
            },
            "required": [
                "enabled",
                "name",
                "technology"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Custom service enabled/disabled\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the custom service, displayed in the UI\n"
                },
                "processGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of process groups the custom service should belong to\n"
                },
                "queueEntryPoint": {
                    "type": "boolean",
                    "description": "The queue entry point flag. Set to `true` for custom messaging services\n"
                },
                "queueEntryPointType": {
                    "type": "string",
                    "description": "The queue entry point type (IBM_MQ, JMS, KAFKA, MSMQ or RABBIT_MQ)\n"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/CustomServiceRule:CustomServiceRule"
                    },
                    "description": "The list of rules defining the custom service\n"
                },
                "technology": {
                    "type": "string",
                    "description": "Matcher applying to the file name (ENDS_WITH, EQUALS or STARTS_WITH). Default value is ENDS_WITH (if applicable)\n"
                },
                "unknowns": {
                    "type": "string",
                    "description": "allows for configuring properties that are not explicitly supported by the current version of this provider\n"
                }
            },
            "requiredInputs": [
                "enabled",
                "technology"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CustomService resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Custom service enabled/disabled\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the custom service, displayed in the UI\n"
                    },
                    "processGroups": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of process groups the custom service should belong to\n"
                    },
                    "queueEntryPoint": {
                        "type": "boolean",
                        "description": "The queue entry point flag. Set to `true` for custom messaging services\n"
                    },
                    "queueEntryPointType": {
                        "type": "string",
                        "description": "The queue entry point type (IBM_MQ, JMS, KAFKA, MSMQ or RABBIT_MQ)\n"
                    },
                    "rules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/dynatrace:index/CustomServiceRule:CustomServiceRule"
                        },
                        "description": "The list of rules defining the custom service\n"
                    },
                    "technology": {
                        "type": "string",
                        "description": "Matcher applying to the file name (ENDS_WITH, EQUALS or STARTS_WITH). Default value is ENDS_WITH (if applicable)\n"
                    },
                    "unknowns": {
                        "type": "string",
                        "description": "allows for configuring properties that are not explicitly supported by the current version of this provider\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/customTags:CustomTags": {
            "properties": {
                "currentState": {
                    "type": "string",
                    "description": "For internal use: current state of tags in JSON format\n"
                },
                "entitySelector": {
                    "type": "string",
                    "description": "Specifies the entities where you want to update tags\n"
                },
                "matchedEntities": {
                    "type": "integer",
                    "description": "The number of monitored entities where the tags have been added.\n"
                },
                "tags": {
                    "$ref": "#/types/dynatrace:index/CustomTagsTags:CustomTagsTags",
                    "description": "Specifies the entities where you want to update tags\n"
                }
            },
            "required": [
                "currentState",
                "entitySelector",
                "matchedEntities",
                "tags"
            ],
            "inputProperties": {
                "currentState": {
                    "type": "string",
                    "description": "For internal use: current state of tags in JSON format\n"
                },
                "entitySelector": {
                    "type": "string",
                    "description": "Specifies the entities where you want to update tags\n",
                    "willReplaceOnChanges": true
                },
                "matchedEntities": {
                    "type": "integer",
                    "description": "The number of monitored entities where the tags have been added.\n"
                },
                "tags": {
                    "$ref": "#/types/dynatrace:index/CustomTagsTags:CustomTagsTags",
                    "description": "Specifies the entities where you want to update tags\n"
                }
            },
            "requiredInputs": [
                "entitySelector",
                "tags"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CustomTags resources.\n",
                "properties": {
                    "currentState": {
                        "type": "string",
                        "description": "For internal use: current state of tags in JSON format\n"
                    },
                    "entitySelector": {
                        "type": "string",
                        "description": "Specifies the entities where you want to update tags\n",
                        "willReplaceOnChanges": true
                    },
                    "matchedEntities": {
                        "type": "integer",
                        "description": "The number of monitored entities where the tags have been added.\n"
                    },
                    "tags": {
                        "$ref": "#/types/dynatrace:index/CustomTagsTags:CustomTagsTags",
                        "description": "Specifies the entities where you want to update tags\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/customUnits:CustomUnits": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Unit description should provide additional information about the new unit\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unit name has to be unique and is used as identifier.\n"
                },
                "pluralName": {
                    "type": "string",
                    "description": "Unit plural name represent the plural form of the unit name.\n"
                },
                "symbol": {
                    "type": "string",
                    "description": "Unit symbol has to be unique.\n"
                }
            },
            "required": [
                "description",
                "name",
                "pluralName",
                "symbol"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Unit description should provide additional information about the new unit\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unit name has to be unique and is used as identifier.\n"
                },
                "pluralName": {
                    "type": "string",
                    "description": "Unit plural name represent the plural form of the unit name.\n"
                },
                "symbol": {
                    "type": "string",
                    "description": "Unit symbol has to be unique.\n"
                }
            },
            "requiredInputs": [
                "description",
                "pluralName",
                "symbol"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CustomUnits resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Unit description should provide additional information about the new unit\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Unit name has to be unique and is used as identifier.\n"
                    },
                    "pluralName": {
                        "type": "string",
                        "description": "Unit plural name represent the plural form of the unit name.\n"
                    },
                    "symbol": {
                        "type": "string",
                        "description": "Unit symbol has to be unique.\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/dashboard:Dashboard": {
            "properties": {
                "dashboardMetadata": {
                    "$ref": "#/types/dynatrace:index/DashboardDashboardMetadata:DashboardDashboardMetadata",
                    "description": "contains parameters of a dashboard\n"
                },
                "metadata": {
                    "$ref": "#/types/dynatrace:index/DashboardMetadata:DashboardMetadata",
                    "description": "`metadata` exists for backwards compatibility but shouldn't get specified anymore\n",
                    "deprecationMessage": "`metadata` exists for backwards compatibility but shouldn't get specified anymore"
                },
                "tiles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/DashboardTile:DashboardTile"
                    },
                    "description": "the tiles this Dashboard consist of\n"
                },
                "unknowns": {
                    "type": "string",
                    "description": "allows for configuring properties that are not explicitly supported by the current version of this provider\n"
                }
            },
            "inputProperties": {
                "dashboardMetadata": {
                    "$ref": "#/types/dynatrace:index/DashboardDashboardMetadata:DashboardDashboardMetadata",
                    "description": "contains parameters of a dashboard\n"
                },
                "metadata": {
                    "$ref": "#/types/dynatrace:index/DashboardMetadata:DashboardMetadata",
                    "description": "`metadata` exists for backwards compatibility but shouldn't get specified anymore\n",
                    "deprecationMessage": "`metadata` exists for backwards compatibility but shouldn't get specified anymore"
                },
                "tiles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/DashboardTile:DashboardTile"
                    },
                    "description": "the tiles this Dashboard consist of\n"
                },
                "unknowns": {
                    "type": "string",
                    "description": "allows for configuring properties that are not explicitly supported by the current version of this provider\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Dashboard resources.\n",
                "properties": {
                    "dashboardMetadata": {
                        "$ref": "#/types/dynatrace:index/DashboardDashboardMetadata:DashboardDashboardMetadata",
                        "description": "contains parameters of a dashboard\n"
                    },
                    "metadata": {
                        "$ref": "#/types/dynatrace:index/DashboardMetadata:DashboardMetadata",
                        "description": "`metadata` exists for backwards compatibility but shouldn't get specified anymore\n",
                        "deprecationMessage": "`metadata` exists for backwards compatibility but shouldn't get specified anymore"
                    },
                    "tiles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/dynatrace:index/DashboardTile:DashboardTile"
                        },
                        "description": "the tiles this Dashboard consist of\n"
                    },
                    "unknowns": {
                        "type": "string",
                        "description": "allows for configuring properties that are not explicitly supported by the current version of this provider\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/dashboardSharing:DashboardSharing": {
            "properties": {
                "dashboardId": {
                    "type": "string",
                    "description": "The Dynatrace entity ID of the dashboard\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "The dashboard is shared (`true`) or private (`false`). Make sure that this value is aligned with the attribute `shared`\nof the resources `dynatrace_dashboard` and `dynatrace_json_dashboard`. Otherwise you will encounter non-empty plans.\n"
                },
                "muted": {
                    "type": "boolean",
                    "description": "Reserved for internal use by the provider\n"
                },
                "permissions": {
                    "$ref": "#/types/dynatrace:index/DashboardSharingPermissions:DashboardSharingPermissions",
                    "description": "Access permissions of the dashboard\n"
                },
                "preset": {
                    "type": "boolean",
                    "description": "If `true` the dashboard will be marked as preset. Setting this attribute to `true` will automatically enforce a specific\nset of permissions - Dashboards flagged as Preset are shared by default. Make sure that this value is aligned with the\nattribute `preset` of the resources `dynatrace_dashboard` and `dynatrace_json_dashboard`. Otherwise you will encounter\nnon-empty plans.\n"
                },
                "public": {
                    "$ref": "#/types/dynatrace:index/DashboardSharingPublic:DashboardSharingPublic",
                    "description": "Configuration of the [anonymous access](https://dt-url.net/ov03sf1) to the dashboard\n"
                }
            },
            "required": [
                "dashboardId",
                "muted"
            ],
            "inputProperties": {
                "dashboardId": {
                    "type": "string",
                    "description": "The Dynatrace entity ID of the dashboard\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "The dashboard is shared (`true`) or private (`false`). Make sure that this value is aligned with the attribute `shared`\nof the resources `dynatrace_dashboard` and `dynatrace_json_dashboard`. Otherwise you will encounter non-empty plans.\n"
                },
                "permissions": {
                    "$ref": "#/types/dynatrace:index/DashboardSharingPermissions:DashboardSharingPermissions",
                    "description": "Access permissions of the dashboard\n"
                },
                "preset": {
                    "type": "boolean",
                    "description": "If `true` the dashboard will be marked as preset. Setting this attribute to `true` will automatically enforce a specific\nset of permissions - Dashboards flagged as Preset are shared by default. Make sure that this value is aligned with the\nattribute `preset` of the resources `dynatrace_dashboard` and `dynatrace_json_dashboard`. Otherwise you will encounter\nnon-empty plans.\n"
                },
                "public": {
                    "$ref": "#/types/dynatrace:index/DashboardSharingPublic:DashboardSharingPublic",
                    "description": "Configuration of the [anonymous access](https://dt-url.net/ov03sf1) to the dashboard\n"
                }
            },
            "requiredInputs": [
                "dashboardId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DashboardSharing resources.\n",
                "properties": {
                    "dashboardId": {
                        "type": "string",
                        "description": "The Dynatrace entity ID of the dashboard\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "The dashboard is shared (`true`) or private (`false`). Make sure that this value is aligned with the attribute `shared`\nof the resources `dynatrace_dashboard` and `dynatrace_json_dashboard`. Otherwise you will encounter non-empty plans.\n"
                    },
                    "muted": {
                        "type": "boolean",
                        "description": "Reserved for internal use by the provider\n"
                    },
                    "permissions": {
                        "$ref": "#/types/dynatrace:index/DashboardSharingPermissions:DashboardSharingPermissions",
                        "description": "Access permissions of the dashboard\n"
                    },
                    "preset": {
                        "type": "boolean",
                        "description": "If `true` the dashboard will be marked as preset. Setting this attribute to `true` will automatically enforce a specific\nset of permissions - Dashboards flagged as Preset are shared by default. Make sure that this value is aligned with the\nattribute `preset` of the resources `dynatrace_dashboard` and `dynatrace_json_dashboard`. Otherwise you will encounter\nnon-empty plans.\n"
                    },
                    "public": {
                        "$ref": "#/types/dynatrace:index/DashboardSharingPublic:DashboardSharingPublic",
                        "description": "Configuration of the [anonymous access](https://dt-url.net/ov03sf1) to the dashboard\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/dashboardsAllowlist:DashboardsAllowlist": {
            "properties": {
                "allowlist": {
                    "$ref": "#/types/dynatrace:index/DashboardsAllowlistAllowlist:DashboardsAllowlistAllowlist",
                    "description": "List of URL pattern matchers\n"
                }
            },
            "inputProperties": {
                "allowlist": {
                    "$ref": "#/types/dynatrace:index/DashboardsAllowlistAllowlist:DashboardsAllowlistAllowlist",
                    "description": "List of URL pattern matchers\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DashboardsAllowlist resources.\n",
                "properties": {
                    "allowlist": {
                        "$ref": "#/types/dynatrace:index/DashboardsAllowlistAllowlist:DashboardsAllowlistAllowlist",
                        "description": "List of URL pattern matchers\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/dashboardsGeneral:DashboardsGeneral": {
            "properties": {
                "defaultDashboardList": {
                    "$ref": "#/types/dynatrace:index/DashboardsGeneralDefaultDashboardList:DashboardsGeneralDefaultDashboardList",
                    "description": "Configure home dashboard for selected user group. The selected preset dashboard will be loaded as default landing page\nfor this environment.\n"
                },
                "enablePublicSharing": {
                    "type": "boolean",
                    "description": "Allow users to grant anonymous access to dashboards. No sign-in will be required to view those dashboards read-only.\n"
                }
            },
            "required": [
                "enablePublicSharing"
            ],
            "inputProperties": {
                "defaultDashboardList": {
                    "$ref": "#/types/dynatrace:index/DashboardsGeneralDefaultDashboardList:DashboardsGeneralDefaultDashboardList",
                    "description": "Configure home dashboard for selected user group. The selected preset dashboard will be loaded as default landing page\nfor this environment.\n"
                },
                "enablePublicSharing": {
                    "type": "boolean",
                    "description": "Allow users to grant anonymous access to dashboards. No sign-in will be required to view those dashboards read-only.\n"
                }
            },
            "requiredInputs": [
                "enablePublicSharing"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DashboardsGeneral resources.\n",
                "properties": {
                    "defaultDashboardList": {
                        "$ref": "#/types/dynatrace:index/DashboardsGeneralDefaultDashboardList:DashboardsGeneralDefaultDashboardList",
                        "description": "Configure home dashboard for selected user group. The selected preset dashboard will be loaded as default landing page\nfor this environment.\n"
                    },
                    "enablePublicSharing": {
                        "type": "boolean",
                        "description": "Allow users to grant anonymous access to dashboards. No sign-in will be required to view those dashboards read-only.\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/dashboardsPresets:DashboardsPresets": {
            "properties": {
                "dashboardPresetsList": {
                    "$ref": "#/types/dynatrace:index/DashboardsPresetsDashboardPresetsList:DashboardsPresetsDashboardPresetsList",
                    "description": "Show selected preset to respective user group only.\n"
                },
                "enableDashboardPresets": {
                    "type": "boolean",
                    "description": "Dashboard presets are visible to all users by default. For a pristine environment you may disable them entirely or opt\nto manually limit visibility to selected user groups.\n"
                }
            },
            "required": [
                "enableDashboardPresets"
            ],
            "inputProperties": {
                "dashboardPresetsList": {
                    "$ref": "#/types/dynatrace:index/DashboardsPresetsDashboardPresetsList:DashboardsPresetsDashboardPresetsList",
                    "description": "Show selected preset to respective user group only.\n"
                },
                "enableDashboardPresets": {
                    "type": "boolean",
                    "description": "Dashboard presets are visible to all users by default. For a pristine environment you may disable them entirely or opt\nto manually limit visibility to selected user groups.\n"
                }
            },
            "requiredInputs": [
                "enableDashboardPresets"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DashboardsPresets resources.\n",
                "properties": {
                    "dashboardPresetsList": {
                        "$ref": "#/types/dynatrace:index/DashboardsPresetsDashboardPresetsList:DashboardsPresetsDashboardPresetsList",
                        "description": "Show selected preset to respective user group only.\n"
                    },
                    "enableDashboardPresets": {
                        "type": "boolean",
                        "description": "Dashboard presets are visible to all users by default. For a pristine environment you may disable them entirely or opt\nto manually limit visibility to selected user groups.\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/dataPrivacy:DataPrivacy": {
            "properties": {
                "applicationId": {
                    "type": "string",
                    "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.\n"
                },
                "dataCollection": {
                    "$ref": "#/types/dynatrace:index/DataPrivacyDataCollection:DataPrivacyDataCollection",
                    "description": "To provide your end users with the ability to decide for themselves if their activities should be tracked to measure\napplication performance and usage, enable opt-in mode.\n"
                },
                "doNotTrack": {
                    "$ref": "#/types/dynatrace:index/DataPrivacyDoNotTrack:DataPrivacyDoNotTrack",
                    "description": "Most modern web browsers have a privacy feature called [\"Do Not Track\"](https://dt-url.net/sb3n0pnl) that individual\nusers may have enabled on their devices. Customize how Dynatrace should behave when it encounters this setting.\n"
                },
                "masking": {
                    "$ref": "#/types/dynatrace:index/DataPrivacyMasking:DataPrivacyMasking",
                    "description": "no documentation available\n"
                },
                "userTracking": {
                    "$ref": "#/types/dynatrace:index/DataPrivacyUserTracking:DataPrivacyUserTracking",
                    "description": "User tracking\n"
                }
            },
            "required": [
                "dataCollection",
                "doNotTrack",
                "masking",
                "userTracking"
            ],
            "inputProperties": {
                "applicationId": {
                    "type": "string",
                    "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.\n",
                    "willReplaceOnChanges": true
                },
                "dataCollection": {
                    "$ref": "#/types/dynatrace:index/DataPrivacyDataCollection:DataPrivacyDataCollection",
                    "description": "To provide your end users with the ability to decide for themselves if their activities should be tracked to measure\napplication performance and usage, enable opt-in mode.\n"
                },
                "doNotTrack": {
                    "$ref": "#/types/dynatrace:index/DataPrivacyDoNotTrack:DataPrivacyDoNotTrack",
                    "description": "Most modern web browsers have a privacy feature called [\"Do Not Track\"](https://dt-url.net/sb3n0pnl) that individual\nusers may have enabled on their devices. Customize how Dynatrace should behave when it encounters this setting.\n"
                },
                "masking": {
                    "$ref": "#/types/dynatrace:index/DataPrivacyMasking:DataPrivacyMasking",
                    "description": "no documentation available\n"
                },
                "userTracking": {
                    "$ref": "#/types/dynatrace:index/DataPrivacyUserTracking:DataPrivacyUserTracking",
                    "description": "User tracking\n"
                }
            },
            "requiredInputs": [
                "dataCollection",
                "doNotTrack",
                "masking",
                "userTracking"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DataPrivacy resources.\n",
                "properties": {
                    "applicationId": {
                        "type": "string",
                        "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.\n",
                        "willReplaceOnChanges": true
                    },
                    "dataCollection": {
                        "$ref": "#/types/dynatrace:index/DataPrivacyDataCollection:DataPrivacyDataCollection",
                        "description": "To provide your end users with the ability to decide for themselves if their activities should be tracked to measure\napplication performance and usage, enable opt-in mode.\n"
                    },
                    "doNotTrack": {
                        "$ref": "#/types/dynatrace:index/DataPrivacyDoNotTrack:DataPrivacyDoNotTrack",
                        "description": "Most modern web browsers have a privacy feature called [\"Do Not Track\"](https://dt-url.net/sb3n0pnl) that individual\nusers may have enabled on their devices. Customize how Dynatrace should behave when it encounters this setting.\n"
                    },
                    "masking": {
                        "$ref": "#/types/dynatrace:index/DataPrivacyMasking:DataPrivacyMasking",
                        "description": "no documentation available\n"
                    },
                    "userTracking": {
                        "$ref": "#/types/dynatrace:index/DataPrivacyUserTracking:DataPrivacyUserTracking",
                        "description": "User tracking\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/databaseAnomalies:DatabaseAnomalies": {
            "properties": {
                "dbConnectFailures": {
                    "$ref": "#/types/dynatrace:index/DatabaseAnomaliesDbConnectFailures:DatabaseAnomaliesDbConnectFailures",
                    "description": "Parameters of the failed database connections detection. The alert is triggered when failed connections number exceeds\n**connectionFailsCount** during any **timePeriodMinutes** minutes period\n"
                },
                "failureRate": {
                    "$ref": "#/types/dynatrace:index/DatabaseAnomaliesFailureRate:DatabaseAnomaliesFailureRate",
                    "description": "Configuration of failure rate increase detection\n"
                },
                "load": {
                    "$ref": "#/types/dynatrace:index/DatabaseAnomaliesLoad:DatabaseAnomaliesLoad",
                    "description": "Configuration for anomalies regarding load drops and spikes\n"
                },
                "responseTime": {
                    "$ref": "#/types/dynatrace:index/DatabaseAnomaliesResponseTime:DatabaseAnomaliesResponseTime",
                    "description": "Configuration of response time degradation detection\n"
                }
            },
            "inputProperties": {
                "dbConnectFailures": {
                    "$ref": "#/types/dynatrace:index/DatabaseAnomaliesDbConnectFailures:DatabaseAnomaliesDbConnectFailures",
                    "description": "Parameters of the failed database connections detection. The alert is triggered when failed connections number exceeds\n**connectionFailsCount** during any **timePeriodMinutes** minutes period\n"
                },
                "failureRate": {
                    "$ref": "#/types/dynatrace:index/DatabaseAnomaliesFailureRate:DatabaseAnomaliesFailureRate",
                    "description": "Configuration of failure rate increase detection\n"
                },
                "load": {
                    "$ref": "#/types/dynatrace:index/DatabaseAnomaliesLoad:DatabaseAnomaliesLoad",
                    "description": "Configuration for anomalies regarding load drops and spikes\n"
                },
                "responseTime": {
                    "$ref": "#/types/dynatrace:index/DatabaseAnomaliesResponseTime:DatabaseAnomaliesResponseTime",
                    "description": "Configuration of response time degradation detection\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DatabaseAnomalies resources.\n",
                "properties": {
                    "dbConnectFailures": {
                        "$ref": "#/types/dynatrace:index/DatabaseAnomaliesDbConnectFailures:DatabaseAnomaliesDbConnectFailures",
                        "description": "Parameters of the failed database connections detection. The alert is triggered when failed connections number exceeds\n**connectionFailsCount** during any **timePeriodMinutes** minutes period\n"
                    },
                    "failureRate": {
                        "$ref": "#/types/dynatrace:index/DatabaseAnomaliesFailureRate:DatabaseAnomaliesFailureRate",
                        "description": "Configuration of failure rate increase detection\n"
                    },
                    "load": {
                        "$ref": "#/types/dynatrace:index/DatabaseAnomaliesLoad:DatabaseAnomaliesLoad",
                        "description": "Configuration for anomalies regarding load drops and spikes\n"
                    },
                    "responseTime": {
                        "$ref": "#/types/dynatrace:index/DatabaseAnomaliesResponseTime:DatabaseAnomaliesResponseTime",
                        "description": "Configuration of response time degradation detection\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/databaseAnomaliesV2:DatabaseAnomaliesV2": {
            "properties": {
                "databaseConnections": {
                    "$ref": "#/types/dynatrace:index/DatabaseAnomaliesV2DatabaseConnections:DatabaseAnomaliesV2DatabaseConnections",
                    "description": "Alert if the number of failed database connects within the specified time exceeds the specified absolute threshold:\n"
                },
                "failureRate": {
                    "$ref": "#/types/dynatrace:index/DatabaseAnomaliesV2FailureRate:DatabaseAnomaliesV2FailureRate",
                    "description": "Failure rate\n"
                },
                "loadDrops": {
                    "$ref": "#/types/dynatrace:index/DatabaseAnomaliesV2LoadDrops:DatabaseAnomaliesV2LoadDrops",
                    "description": "Alert if the observed load is lower than the expected load by a specified margin for a specified amount of time.\n"
                },
                "loadSpikes": {
                    "$ref": "#/types/dynatrace:index/DatabaseAnomaliesV2LoadSpikes:DatabaseAnomaliesV2LoadSpikes",
                    "description": "Alert if the observed load exceeds the expected load by a specified margin for a specified amount of time.\n"
                },
                "responseTime": {
                    "$ref": "#/types/dynatrace:index/DatabaseAnomaliesV2ResponseTime:DatabaseAnomaliesV2ResponseTime",
                    "description": "Response time\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope for the database anomaly detection\n"
                }
            },
            "required": [
                "databaseConnections",
                "failureRate",
                "loadDrops",
                "loadSpikes",
                "responseTime",
                "scope"
            ],
            "inputProperties": {
                "databaseConnections": {
                    "$ref": "#/types/dynatrace:index/DatabaseAnomaliesV2DatabaseConnections:DatabaseAnomaliesV2DatabaseConnections",
                    "description": "Alert if the number of failed database connects within the specified time exceeds the specified absolute threshold:\n"
                },
                "failureRate": {
                    "$ref": "#/types/dynatrace:index/DatabaseAnomaliesV2FailureRate:DatabaseAnomaliesV2FailureRate",
                    "description": "Failure rate\n"
                },
                "loadDrops": {
                    "$ref": "#/types/dynatrace:index/DatabaseAnomaliesV2LoadDrops:DatabaseAnomaliesV2LoadDrops",
                    "description": "Alert if the observed load is lower than the expected load by a specified margin for a specified amount of time.\n"
                },
                "loadSpikes": {
                    "$ref": "#/types/dynatrace:index/DatabaseAnomaliesV2LoadSpikes:DatabaseAnomaliesV2LoadSpikes",
                    "description": "Alert if the observed load exceeds the expected load by a specified margin for a specified amount of time.\n"
                },
                "responseTime": {
                    "$ref": "#/types/dynatrace:index/DatabaseAnomaliesV2ResponseTime:DatabaseAnomaliesV2ResponseTime",
                    "description": "Response time\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope for the database anomaly detection\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "databaseConnections",
                "failureRate",
                "loadDrops",
                "loadSpikes",
                "responseTime",
                "scope"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DatabaseAnomaliesV2 resources.\n",
                "properties": {
                    "databaseConnections": {
                        "$ref": "#/types/dynatrace:index/DatabaseAnomaliesV2DatabaseConnections:DatabaseAnomaliesV2DatabaseConnections",
                        "description": "Alert if the number of failed database connects within the specified time exceeds the specified absolute threshold:\n"
                    },
                    "failureRate": {
                        "$ref": "#/types/dynatrace:index/DatabaseAnomaliesV2FailureRate:DatabaseAnomaliesV2FailureRate",
                        "description": "Failure rate\n"
                    },
                    "loadDrops": {
                        "$ref": "#/types/dynatrace:index/DatabaseAnomaliesV2LoadDrops:DatabaseAnomaliesV2LoadDrops",
                        "description": "Alert if the observed load is lower than the expected load by a specified margin for a specified amount of time.\n"
                    },
                    "loadSpikes": {
                        "$ref": "#/types/dynatrace:index/DatabaseAnomaliesV2LoadSpikes:DatabaseAnomaliesV2LoadSpikes",
                        "description": "Alert if the observed load exceeds the expected load by a specified margin for a specified amount of time.\n"
                    },
                    "responseTime": {
                        "$ref": "#/types/dynatrace:index/DatabaseAnomaliesV2ResponseTime:DatabaseAnomaliesV2ResponseTime",
                        "description": "Response time\n"
                    },
                    "scope": {
                        "type": "string",
                        "description": "The scope for the database anomaly detection\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/dbAppFeatureFlags:DbAppFeatureFlags": {
            "properties": {
                "booleanValue": {
                    "type": "boolean",
                    "description": "State of boolean feature flag\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the feature\n"
                },
                "numberValue": {
                    "type": "integer",
                    "description": "State of numeric feature flag\n"
                },
                "stringValue": {
                    "type": "string",
                    "description": "State of textual feature flag\n"
                },
                "type": {
                    "type": "string",
                    "description": "Possible Values: `Boolean`, `Number`, `String`\n"
                }
            },
            "required": [
                "name",
                "type"
            ],
            "inputProperties": {
                "booleanValue": {
                    "type": "boolean",
                    "description": "State of boolean feature flag\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the feature\n"
                },
                "numberValue": {
                    "type": "integer",
                    "description": "State of numeric feature flag\n"
                },
                "stringValue": {
                    "type": "string",
                    "description": "State of textual feature flag\n"
                },
                "type": {
                    "type": "string",
                    "description": "Possible Values: `Boolean`, `Number`, `String`\n"
                }
            },
            "requiredInputs": [
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DbAppFeatureFlags resources.\n",
                "properties": {
                    "booleanValue": {
                        "type": "boolean",
                        "description": "State of boolean feature flag\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the feature\n"
                    },
                    "numberValue": {
                        "type": "integer",
                        "description": "State of numeric feature flag\n"
                    },
                    "stringValue": {
                        "type": "string",
                        "description": "State of textual feature flag\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Possible Values: `Boolean`, `Number`, `String`\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/dduPool:DduPool": {
            "properties": {
                "events": {
                    "$ref": "#/types/dynatrace:index/DduPoolEvents:DduPoolEvents",
                    "description": "DDU pool settings for Events\n"
                },
                "logMonitoring": {
                    "$ref": "#/types/dynatrace:index/DduPoolLogMonitoring:DduPoolLogMonitoring",
                    "description": "DDU pool settings for Log Monitoring\n"
                },
                "metrics": {
                    "$ref": "#/types/dynatrace:index/DduPoolMetrics:DduPoolMetrics",
                    "description": "DDU pool settings for Metrics\n"
                },
                "serverless": {
                    "$ref": "#/types/dynatrace:index/DduPoolServerless:DduPoolServerless",
                    "description": "DDU pool settings for Serverless\n"
                },
                "traces": {
                    "$ref": "#/types/dynatrace:index/DduPoolTraces:DduPoolTraces",
                    "description": "DDU pool settings for Traces\n"
                }
            },
            "inputProperties": {
                "events": {
                    "$ref": "#/types/dynatrace:index/DduPoolEvents:DduPoolEvents",
                    "description": "DDU pool settings for Events\n"
                },
                "logMonitoring": {
                    "$ref": "#/types/dynatrace:index/DduPoolLogMonitoring:DduPoolLogMonitoring",
                    "description": "DDU pool settings for Log Monitoring\n"
                },
                "metrics": {
                    "$ref": "#/types/dynatrace:index/DduPoolMetrics:DduPoolMetrics",
                    "description": "DDU pool settings for Metrics\n"
                },
                "serverless": {
                    "$ref": "#/types/dynatrace:index/DduPoolServerless:DduPoolServerless",
                    "description": "DDU pool settings for Serverless\n"
                },
                "traces": {
                    "$ref": "#/types/dynatrace:index/DduPoolTraces:DduPoolTraces",
                    "description": "DDU pool settings for Traces\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DduPool resources.\n",
                "properties": {
                    "events": {
                        "$ref": "#/types/dynatrace:index/DduPoolEvents:DduPoolEvents",
                        "description": "DDU pool settings for Events\n"
                    },
                    "logMonitoring": {
                        "$ref": "#/types/dynatrace:index/DduPoolLogMonitoring:DduPoolLogMonitoring",
                        "description": "DDU pool settings for Log Monitoring\n"
                    },
                    "metrics": {
                        "$ref": "#/types/dynatrace:index/DduPoolMetrics:DduPoolMetrics",
                        "description": "DDU pool settings for Metrics\n"
                    },
                    "serverless": {
                        "$ref": "#/types/dynatrace:index/DduPoolServerless:DduPoolServerless",
                        "description": "DDU pool settings for Serverless\n"
                    },
                    "traces": {
                        "$ref": "#/types/dynatrace:index/DduPoolTraces:DduPoolTraces",
                        "description": "DDU pool settings for Traces\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/declarativeGrouping:DeclarativeGrouping": {
            "properties": {
                "detection": {
                    "$ref": "#/types/dynatrace:index/DeclarativeGroupingDetection:DeclarativeGroupingDetection",
                    "description": "Enter a descriptive process group display name and a unique identifier that Dynatrace can use to recognize this process\ngroup.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "insertAfter": {
                    "type": "string",
                    "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                },
                "name": {
                    "type": "string",
                    "description": "Monitored technology name\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.\n"
                }
            },
            "required": [
                "enabled",
                "insertAfter",
                "name"
            ],
            "inputProperties": {
                "detection": {
                    "$ref": "#/types/dynatrace:index/DeclarativeGroupingDetection:DeclarativeGroupingDetection",
                    "description": "Enter a descriptive process group display name and a unique identifier that Dynatrace can use to recognize this process\ngroup.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "insertAfter": {
                    "type": "string",
                    "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                },
                "name": {
                    "type": "string",
                    "description": "Monitored technology name\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "enabled"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DeclarativeGrouping resources.\n",
                "properties": {
                    "detection": {
                        "$ref": "#/types/dynatrace:index/DeclarativeGroupingDetection:DeclarativeGroupingDetection",
                        "description": "Enter a descriptive process group display name and a unique identifier that Dynatrace can use to recognize this process\ngroup.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                    },
                    "insertAfter": {
                        "type": "string",
                        "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Monitored technology name\n"
                    },
                    "scope": {
                        "type": "string",
                        "description": "The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/directShares:DirectShares": {
            "properties": {
                "access": {
                    "type": "string",
                    "description": "Access grants. Possible values are `read` and `read-write`\n"
                },
                "documentId": {
                    "type": "string",
                    "description": "Document ID\n"
                },
                "recipients": {
                    "$ref": "#/types/dynatrace:index/DirectSharesRecipients:DirectSharesRecipients",
                    "description": "Recipients of the direct share\n"
                }
            },
            "required": [
                "documentId",
                "recipients"
            ],
            "inputProperties": {
                "access": {
                    "type": "string",
                    "description": "Access grants. Possible values are `read` and `read-write`\n",
                    "willReplaceOnChanges": true
                },
                "documentId": {
                    "type": "string",
                    "description": "Document ID\n"
                },
                "recipients": {
                    "$ref": "#/types/dynatrace:index/DirectSharesRecipients:DirectSharesRecipients",
                    "description": "Recipients of the direct share\n"
                }
            },
            "requiredInputs": [
                "documentId",
                "recipients"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DirectShares resources.\n",
                "properties": {
                    "access": {
                        "type": "string",
                        "description": "Access grants. Possible values are `read` and `read-write`\n",
                        "willReplaceOnChanges": true
                    },
                    "documentId": {
                        "type": "string",
                        "description": "Document ID\n"
                    },
                    "recipients": {
                        "$ref": "#/types/dynatrace:index/DirectSharesRecipients:DirectSharesRecipients",
                        "description": "Recipients of the direct share\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/diskAnalytics:DiskAnalytics": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "The Disk Analytics feature requires an extension to be added to your environment. The Disk Analytics extension consumes\ncustom metrics and [Davis data units](https://www.dynatrace.com/support/help/shortlink/metric-cost-calculation). After\nyou have installed the Disk Analytics extension, you can enable the Data Collection in host or host-group level\nsettings. If you enable the Data Collection without adding the extension the data is only visible in the data explorer.\nFor details, see [Disk Analytics extension documentation](https://dt-url.net/3a03v9v).\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of this setting (HOST, HOST_GROUP)\n"
                }
            },
            "required": [
                "enabled",
                "scope"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "The Disk Analytics feature requires an extension to be added to your environment. The Disk Analytics extension consumes\ncustom metrics and [Davis data units](https://www.dynatrace.com/support/help/shortlink/metric-cost-calculation). After\nyou have installed the Disk Analytics extension, you can enable the Data Collection in host or host-group level\nsettings. If you enable the Data Collection without adding the extension the data is only visible in the data explorer.\nFor details, see [Disk Analytics extension documentation](https://dt-url.net/3a03v9v).\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of this setting (HOST, HOST_GROUP)\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "enabled",
                "scope"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DiskAnalytics resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "The Disk Analytics feature requires an extension to be added to your environment. The Disk Analytics extension consumes\ncustom metrics and [Davis data units](https://www.dynatrace.com/support/help/shortlink/metric-cost-calculation). After\nyou have installed the Disk Analytics extension, you can enable the Data Collection in host or host-group level\nsettings. If you enable the Data Collection without adding the extension the data is only visible in the data explorer.\nFor details, see [Disk Analytics extension documentation](https://dt-url.net/3a03v9v).\n"
                    },
                    "scope": {
                        "type": "string",
                        "description": "The scope of this setting (HOST, HOST_GROUP)\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/diskAnomalies:DiskAnomalies": {
            "properties": {
                "diskName": {
                    "$ref": "#/types/dynatrace:index/DiskAnomaliesDiskName:DiskAnomaliesDiskName",
                    "description": "Narrows the rule usage down to disks, matching the specified criteria\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Disk event rule enabled/disabled\n"
                },
                "hostGroupId": {
                    "type": "string",
                    "description": "Narrows the rule usage down to disks that run on hosts that themselves run on the specified host group\n"
                },
                "metric": {
                    "type": "string",
                    "description": "The metric to monitor. Possible values are: `LOW_DISK_SPACE`, `LOW_INODES`, `READ_TIME_EXCEEDING` and\n`WRITE_TIME_EXCEEDING`\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the disk event rule\n"
                },
                "samples": {
                    "type": "integer",
                    "description": "The number of samples to evaluate\n"
                },
                "tags": {
                    "$ref": "#/types/dynatrace:index/DiskAnomaliesTags:DiskAnomaliesTags",
                    "description": "Narrows the rule usage down to the hosts matching the specified tags\n"
                },
                "threshold": {
                    "type": "number",
                    "description": "The threshold to trigger disk event. * A percentage for `LowDiskSpace` or `LowInodes` metrics. * In milliseconds for\n`ReadTimeExceeding` or `WriteTimeExceeding` metrics\n"
                },
                "violatingSamples": {
                    "type": "integer",
                    "description": "The number of samples that must violate the threshold to trigger an event. Must not exceed the number of evaluated\nsamples\n"
                }
            },
            "required": [
                "enabled",
                "metric",
                "name",
                "samples",
                "threshold",
                "violatingSamples"
            ],
            "inputProperties": {
                "diskName": {
                    "$ref": "#/types/dynatrace:index/DiskAnomaliesDiskName:DiskAnomaliesDiskName",
                    "description": "Narrows the rule usage down to disks, matching the specified criteria\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Disk event rule enabled/disabled\n"
                },
                "hostGroupId": {
                    "type": "string",
                    "description": "Narrows the rule usage down to disks that run on hosts that themselves run on the specified host group\n"
                },
                "metric": {
                    "type": "string",
                    "description": "The metric to monitor. Possible values are: `LOW_DISK_SPACE`, `LOW_INODES`, `READ_TIME_EXCEEDING` and\n`WRITE_TIME_EXCEEDING`\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the disk event rule\n"
                },
                "samples": {
                    "type": "integer",
                    "description": "The number of samples to evaluate\n"
                },
                "tags": {
                    "$ref": "#/types/dynatrace:index/DiskAnomaliesTags:DiskAnomaliesTags",
                    "description": "Narrows the rule usage down to the hosts matching the specified tags\n"
                },
                "threshold": {
                    "type": "number",
                    "description": "The threshold to trigger disk event. * A percentage for `LowDiskSpace` or `LowInodes` metrics. * In milliseconds for\n`ReadTimeExceeding` or `WriteTimeExceeding` metrics\n"
                },
                "violatingSamples": {
                    "type": "integer",
                    "description": "The number of samples that must violate the threshold to trigger an event. Must not exceed the number of evaluated\nsamples\n"
                }
            },
            "requiredInputs": [
                "enabled",
                "metric",
                "samples",
                "threshold",
                "violatingSamples"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DiskAnomalies resources.\n",
                "properties": {
                    "diskName": {
                        "$ref": "#/types/dynatrace:index/DiskAnomaliesDiskName:DiskAnomaliesDiskName",
                        "description": "Narrows the rule usage down to disks, matching the specified criteria\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Disk event rule enabled/disabled\n"
                    },
                    "hostGroupId": {
                        "type": "string",
                        "description": "Narrows the rule usage down to disks that run on hosts that themselves run on the specified host group\n"
                    },
                    "metric": {
                        "type": "string",
                        "description": "The metric to monitor. Possible values are: `LOW_DISK_SPACE`, `LOW_INODES`, `READ_TIME_EXCEEDING` and\n`WRITE_TIME_EXCEEDING`\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the disk event rule\n"
                    },
                    "samples": {
                        "type": "integer",
                        "description": "The number of samples to evaluate\n"
                    },
                    "tags": {
                        "$ref": "#/types/dynatrace:index/DiskAnomaliesTags:DiskAnomaliesTags",
                        "description": "Narrows the rule usage down to the hosts matching the specified tags\n"
                    },
                    "threshold": {
                        "type": "number",
                        "description": "The threshold to trigger disk event. * A percentage for `LowDiskSpace` or `LowInodes` metrics. * In milliseconds for\n`ReadTimeExceeding` or `WriteTimeExceeding` metrics\n"
                    },
                    "violatingSamples": {
                        "type": "integer",
                        "description": "The number of samples that must violate the threshold to trigger an event. Must not exceed the number of evaluated\nsamples\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/diskAnomaliesV2:DiskAnomaliesV2": {
            "properties": {
                "disk": {
                    "$ref": "#/types/dynatrace:index/DiskAnomaliesV2Disk:DiskAnomaliesV2Disk",
                    "description": "Disk\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope for the disk anomaly detection\n"
                }
            },
            "required": [
                "disk",
                "scope"
            ],
            "inputProperties": {
                "disk": {
                    "$ref": "#/types/dynatrace:index/DiskAnomaliesV2Disk:DiskAnomaliesV2Disk",
                    "description": "Disk\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope for the disk anomaly detection\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "disk",
                "scope"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DiskAnomaliesV2 resources.\n",
                "properties": {
                    "disk": {
                        "$ref": "#/types/dynatrace:index/DiskAnomaliesV2Disk:DiskAnomaliesV2Disk",
                        "description": "Disk\n"
                    },
                    "scope": {
                        "type": "string",
                        "description": "The scope for the disk anomaly detection\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/diskAnomalyRules:DiskAnomalyRules": {
            "properties": {
                "diskNameFilter": {
                    "$ref": "#/types/dynatrace:index/DiskAnomalyRulesDiskNameFilter:DiskAnomalyRulesDiskNameFilter",
                    "description": "Only apply to disks whose name matches\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "hostGroupId": {
                    "type": "string",
                    "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.\n"
                },
                "metric": {
                    "type": "string",
                    "description": "Possible Values: `LOW_DISK_SPACE`, `LOW_INODES`, `READ_TIME_EXCEEDING`, `WRITE_TIME_EXCEEDING`\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name\n"
                },
                "sampleLimit": {
                    "$ref": "#/types/dynatrace:index/DiskAnomalyRulesSampleLimit:DiskAnomalyRulesSampleLimit",
                    "description": "Only alert if the threshold was violated in at least *n* of the last *m* samples\n"
                },
                "tagFilters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Only apply to hosts that have the following tags\n"
                },
                "thresholdMilliseconds": {
                    "type": "number",
                    "description": "Alert if higher than\n"
                },
                "thresholdPercent": {
                    "type": "number",
                    "description": "Alert if lower than\n"
                }
            },
            "required": [
                "diskNameFilter",
                "enabled",
                "metric",
                "name",
                "sampleLimit"
            ],
            "inputProperties": {
                "diskNameFilter": {
                    "$ref": "#/types/dynatrace:index/DiskAnomalyRulesDiskNameFilter:DiskAnomalyRulesDiskNameFilter",
                    "description": "Only apply to disks whose name matches\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "hostGroupId": {
                    "type": "string",
                    "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.\n",
                    "willReplaceOnChanges": true
                },
                "metric": {
                    "type": "string",
                    "description": "Possible Values: `LOW_DISK_SPACE`, `LOW_INODES`, `READ_TIME_EXCEEDING`, `WRITE_TIME_EXCEEDING`\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name\n"
                },
                "sampleLimit": {
                    "$ref": "#/types/dynatrace:index/DiskAnomalyRulesSampleLimit:DiskAnomalyRulesSampleLimit",
                    "description": "Only alert if the threshold was violated in at least *n* of the last *m* samples\n"
                },
                "tagFilters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Only apply to hosts that have the following tags\n"
                },
                "thresholdMilliseconds": {
                    "type": "number",
                    "description": "Alert if higher than\n"
                },
                "thresholdPercent": {
                    "type": "number",
                    "description": "Alert if lower than\n"
                }
            },
            "requiredInputs": [
                "diskNameFilter",
                "enabled",
                "metric",
                "sampleLimit"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DiskAnomalyRules resources.\n",
                "properties": {
                    "diskNameFilter": {
                        "$ref": "#/types/dynatrace:index/DiskAnomalyRulesDiskNameFilter:DiskAnomalyRulesDiskNameFilter",
                        "description": "Only apply to disks whose name matches\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                    },
                    "hostGroupId": {
                        "type": "string",
                        "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.\n",
                        "willReplaceOnChanges": true
                    },
                    "metric": {
                        "type": "string",
                        "description": "Possible Values: `LOW_DISK_SPACE`, `LOW_INODES`, `READ_TIME_EXCEEDING`, `WRITE_TIME_EXCEEDING`\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name\n"
                    },
                    "sampleLimit": {
                        "$ref": "#/types/dynatrace:index/DiskAnomalyRulesSampleLimit:DiskAnomalyRulesSampleLimit",
                        "description": "Only alert if the threshold was violated in at least *n* of the last *m* samples\n"
                    },
                    "tagFilters": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Only apply to hosts that have the following tags\n"
                    },
                    "thresholdMilliseconds": {
                        "type": "number",
                        "description": "Alert if higher than\n"
                    },
                    "thresholdPercent": {
                        "type": "number",
                        "description": "Alert if lower than\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/diskOptions:DiskOptions": {
            "properties": {
                "disableNfsDiskMonitoring": {
                    "type": "boolean",
                    "description": "Deactivate NFS monitoring on all supported systems\n"
                },
                "exclusions": {
                    "$ref": "#/types/dynatrace:index/DiskOptionsExclusions:DiskOptionsExclusions",
                    "description": "OneAgent automatically detects and monitors all your mount points, however you can create exception rules to remove\ndisks from the monitoring list.\n"
                },
                "nfsShowAll": {
                    "type": "boolean",
                    "description": "When disabled OneAgent will try to deduplicate some of nfs disks. Disabled by default, applies only to Linux hosts.\nRequires OneAgent 1.209 or later\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.\n"
                }
            },
            "inputProperties": {
                "disableNfsDiskMonitoring": {
                    "type": "boolean",
                    "description": "Deactivate NFS monitoring on all supported systems\n"
                },
                "exclusions": {
                    "$ref": "#/types/dynatrace:index/DiskOptionsExclusions:DiskOptionsExclusions",
                    "description": "OneAgent automatically detects and monitors all your mount points, however you can create exception rules to remove\ndisks from the monitoring list.\n"
                },
                "nfsShowAll": {
                    "type": "boolean",
                    "description": "When disabled OneAgent will try to deduplicate some of nfs disks. Disabled by default, applies only to Linux hosts.\nRequires OneAgent 1.209 or later\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DiskOptions resources.\n",
                "properties": {
                    "disableNfsDiskMonitoring": {
                        "type": "boolean",
                        "description": "Deactivate NFS monitoring on all supported systems\n"
                    },
                    "exclusions": {
                        "$ref": "#/types/dynatrace:index/DiskOptionsExclusions:DiskOptionsExclusions",
                        "description": "OneAgent automatically detects and monitors all your mount points, however you can create exception rules to remove\ndisks from the monitoring list.\n"
                    },
                    "nfsShowAll": {
                        "type": "boolean",
                        "description": "When disabled OneAgent will try to deduplicate some of nfs disks. Disabled by default, applies only to Linux hosts.\nRequires OneAgent 1.209 or later\n"
                    },
                    "scope": {
                        "type": "string",
                        "description": "The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/diskSpecificAnomaliesV2:DiskSpecificAnomaliesV2": {
            "properties": {
                "diskId": {
                    "type": "string",
                    "description": "The id for the disk anomaly detection\n"
                },
                "diskLowInodesDetection": {
                    "$ref": "#/types/dynatrace:index/DiskSpecificAnomaliesV2DiskLowInodesDetection:DiskSpecificAnomaliesV2DiskLowInodesDetection",
                    "description": "no documentation available\n"
                },
                "diskLowSpaceDetection": {
                    "$ref": "#/types/dynatrace:index/DiskSpecificAnomaliesV2DiskLowSpaceDetection:DiskSpecificAnomaliesV2DiskLowSpaceDetection",
                    "description": "no documentation available\n"
                },
                "diskSlowWritesAndReadsDetection": {
                    "$ref": "#/types/dynatrace:index/DiskSpecificAnomaliesV2DiskSlowWritesAndReadsDetection:DiskSpecificAnomaliesV2DiskSlowWritesAndReadsDetection",
                    "description": "no documentation available\n"
                },
                "overrideDiskLowSpaceDetection": {
                    "type": "boolean",
                    "description": "Override low disk space detection settings\n"
                },
                "overrideLowInodesDetection": {
                    "type": "boolean",
                    "description": "Override low inodes detection settings\n"
                },
                "overrideSlowWritesAndReadsDetection": {
                    "type": "boolean",
                    "description": "Override slow writes and reads detection settings\n"
                }
            },
            "required": [
                "diskId",
                "overrideDiskLowSpaceDetection",
                "overrideLowInodesDetection",
                "overrideSlowWritesAndReadsDetection"
            ],
            "inputProperties": {
                "diskId": {
                    "type": "string",
                    "description": "The id for the disk anomaly detection\n",
                    "willReplaceOnChanges": true
                },
                "diskLowInodesDetection": {
                    "$ref": "#/types/dynatrace:index/DiskSpecificAnomaliesV2DiskLowInodesDetection:DiskSpecificAnomaliesV2DiskLowInodesDetection",
                    "description": "no documentation available\n"
                },
                "diskLowSpaceDetection": {
                    "$ref": "#/types/dynatrace:index/DiskSpecificAnomaliesV2DiskLowSpaceDetection:DiskSpecificAnomaliesV2DiskLowSpaceDetection",
                    "description": "no documentation available\n"
                },
                "diskSlowWritesAndReadsDetection": {
                    "$ref": "#/types/dynatrace:index/DiskSpecificAnomaliesV2DiskSlowWritesAndReadsDetection:DiskSpecificAnomaliesV2DiskSlowWritesAndReadsDetection",
                    "description": "no documentation available\n"
                },
                "overrideDiskLowSpaceDetection": {
                    "type": "boolean",
                    "description": "Override low disk space detection settings\n"
                },
                "overrideLowInodesDetection": {
                    "type": "boolean",
                    "description": "Override low inodes detection settings\n"
                },
                "overrideSlowWritesAndReadsDetection": {
                    "type": "boolean",
                    "description": "Override slow writes and reads detection settings\n"
                }
            },
            "requiredInputs": [
                "diskId",
                "overrideDiskLowSpaceDetection",
                "overrideLowInodesDetection",
                "overrideSlowWritesAndReadsDetection"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DiskSpecificAnomaliesV2 resources.\n",
                "properties": {
                    "diskId": {
                        "type": "string",
                        "description": "The id for the disk anomaly detection\n",
                        "willReplaceOnChanges": true
                    },
                    "diskLowInodesDetection": {
                        "$ref": "#/types/dynatrace:index/DiskSpecificAnomaliesV2DiskLowInodesDetection:DiskSpecificAnomaliesV2DiskLowInodesDetection",
                        "description": "no documentation available\n"
                    },
                    "diskLowSpaceDetection": {
                        "$ref": "#/types/dynatrace:index/DiskSpecificAnomaliesV2DiskLowSpaceDetection:DiskSpecificAnomaliesV2DiskLowSpaceDetection",
                        "description": "no documentation available\n"
                    },
                    "diskSlowWritesAndReadsDetection": {
                        "$ref": "#/types/dynatrace:index/DiskSpecificAnomaliesV2DiskSlowWritesAndReadsDetection:DiskSpecificAnomaliesV2DiskSlowWritesAndReadsDetection",
                        "description": "no documentation available\n"
                    },
                    "overrideDiskLowSpaceDetection": {
                        "type": "boolean",
                        "description": "Override low disk space detection settings\n"
                    },
                    "overrideLowInodesDetection": {
                        "type": "boolean",
                        "description": "Override low inodes detection settings\n"
                    },
                    "overrideSlowWritesAndReadsDetection": {
                        "type": "boolean",
                        "description": "Override slow writes and reads detection settings\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/document:Document": {
            "properties": {
                "actor": {
                    "type": "string",
                    "description": "The user context the executions of the document will happen with\n"
                },
                "content": {
                    "type": "string",
                    "description": "Document content as JSON\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name/name of the document\n"
                },
                "owner": {
                    "type": "string",
                    "description": "The ID of the owner of this document\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of the document. Possible Values are `dashboard` and `notebook`\n"
                },
                "version": {
                    "type": "integer",
                    "description": "The version of the document\n"
                }
            },
            "required": [
                "actor",
                "content",
                "name",
                "owner",
                "type",
                "version"
            ],
            "inputProperties": {
                "actor": {
                    "type": "string",
                    "description": "The user context the executions of the document will happen with\n"
                },
                "content": {
                    "type": "string",
                    "description": "Document content as JSON\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name/name of the document\n"
                },
                "owner": {
                    "type": "string",
                    "description": "The ID of the owner of this document\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of the document. Possible Values are `dashboard` and `notebook`\n"
                }
            },
            "requiredInputs": [
                "content",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Document resources.\n",
                "properties": {
                    "actor": {
                        "type": "string",
                        "description": "The user context the executions of the document will happen with\n"
                    },
                    "content": {
                        "type": "string",
                        "description": "Document content as JSON\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name/name of the document\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "The ID of the owner of this document\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the document. Possible Values are `dashboard` and `notebook`\n"
                    },
                    "version": {
                        "type": "integer",
                        "description": "The version of the document\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/emailNotification:EmailNotification": {
            "properties": {
                "active": {
                    "type": "boolean",
                    "description": "The configuration is enabled (`true`) or disabled (`false`)\n"
                },
                "bccs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of the email BCC-recipients\n"
                },
                "body": {
                    "type": "string",
                    "description": "The template of the email notification. You can use the following placeholders: * `{ImpactedEntities}`: Details about\nthe entities impacted by the problem in form of a JSON array. * `{ImpactedEntity}`: The entity impacted by the problem\nor *X* impacted entities. * `{PID}`: The ID of the reported problem. * `{ProblemDetailsHTML}`: All problem event\ndetails, including root cause, as an HTML-formatted string. * `{ProblemDetailsJSON}`: All problem event details,\nincluding root cause, as a JSON object. * `{ProblemDetailsMarkdown}`: All problem event details, including root cause,\nas a [Markdown-formatted](https://www.markdownguide.org/cheat-sheet/) string. * `{ProblemDetailsText}`: All problem\nevent details, including root cause, as a text-formatted string. * `{ProblemID}`: The display number of the reported\nproblem. * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of\nthe problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`. * `{ProblemSeverity}`: The [severity\nlevel](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`,\n`ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`. * `{ProblemTitle}`: A short description of the\nproblem. * `{ProblemURL}`: The URL of the problem within Dynatrace. * `{State}`: The state of the problem. Possible\nvalues are `OPEN` and `RESOLVED`. * `{Tags}`: The list of tags that are defined for all impacted entities, separated by\ncommas\n"
                },
                "ccs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of the email CC-recipients\n"
                },
                "legacyId": {
                    "type": "string",
                    "description": "The ID of these settings when referred to from resources requiring the REST API V1 keys\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the notification configuration\n"
                },
                "notifyClosedProblems": {
                    "type": "boolean",
                    "description": "Send email if problem is closed\n"
                },
                "profile": {
                    "type": "string",
                    "description": "The ID of the associated alerting profile\n"
                },
                "subject": {
                    "type": "string",
                    "description": "The subject of the email notifications\n"
                },
                "tos": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of the email recipients\n"
                }
            },
            "required": [
                "body",
                "legacyId",
                "name",
                "profile",
                "subject",
                "tos"
            ],
            "inputProperties": {
                "active": {
                    "type": "boolean",
                    "description": "The configuration is enabled (`true`) or disabled (`false`)\n"
                },
                "bccs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of the email BCC-recipients\n"
                },
                "body": {
                    "type": "string",
                    "description": "The template of the email notification. You can use the following placeholders: * `{ImpactedEntities}`: Details about\nthe entities impacted by the problem in form of a JSON array. * `{ImpactedEntity}`: The entity impacted by the problem\nor *X* impacted entities. * `{PID}`: The ID of the reported problem. * `{ProblemDetailsHTML}`: All problem event\ndetails, including root cause, as an HTML-formatted string. * `{ProblemDetailsJSON}`: All problem event details,\nincluding root cause, as a JSON object. * `{ProblemDetailsMarkdown}`: All problem event details, including root cause,\nas a [Markdown-formatted](https://www.markdownguide.org/cheat-sheet/) string. * `{ProblemDetailsText}`: All problem\nevent details, including root cause, as a text-formatted string. * `{ProblemID}`: The display number of the reported\nproblem. * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of\nthe problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`. * `{ProblemSeverity}`: The [severity\nlevel](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`,\n`ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`. * `{ProblemTitle}`: A short description of the\nproblem. * `{ProblemURL}`: The URL of the problem within Dynatrace. * `{State}`: The state of the problem. Possible\nvalues are `OPEN` and `RESOLVED`. * `{Tags}`: The list of tags that are defined for all impacted entities, separated by\ncommas\n"
                },
                "ccs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of the email CC-recipients\n"
                },
                "legacyId": {
                    "type": "string",
                    "description": "The ID of these settings when referred to from resources requiring the REST API V1 keys\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the notification configuration\n"
                },
                "notifyClosedProblems": {
                    "type": "boolean",
                    "description": "Send email if problem is closed\n"
                },
                "profile": {
                    "type": "string",
                    "description": "The ID of the associated alerting profile\n"
                },
                "subject": {
                    "type": "string",
                    "description": "The subject of the email notifications\n"
                },
                "tos": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of the email recipients\n"
                }
            },
            "requiredInputs": [
                "body",
                "profile",
                "subject",
                "tos"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering EmailNotification resources.\n",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "description": "The configuration is enabled (`true`) or disabled (`false`)\n"
                    },
                    "bccs": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of the email BCC-recipients\n"
                    },
                    "body": {
                        "type": "string",
                        "description": "The template of the email notification. You can use the following placeholders: * `{ImpactedEntities}`: Details about\nthe entities impacted by the problem in form of a JSON array. * `{ImpactedEntity}`: The entity impacted by the problem\nor *X* impacted entities. * `{PID}`: The ID of the reported problem. * `{ProblemDetailsHTML}`: All problem event\ndetails, including root cause, as an HTML-formatted string. * `{ProblemDetailsJSON}`: All problem event details,\nincluding root cause, as a JSON object. * `{ProblemDetailsMarkdown}`: All problem event details, including root cause,\nas a [Markdown-formatted](https://www.markdownguide.org/cheat-sheet/) string. * `{ProblemDetailsText}`: All problem\nevent details, including root cause, as a text-formatted string. * `{ProblemID}`: The display number of the reported\nproblem. * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of\nthe problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`. * `{ProblemSeverity}`: The [severity\nlevel](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`,\n`ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`. * `{ProblemTitle}`: A short description of the\nproblem. * `{ProblemURL}`: The URL of the problem within Dynatrace. * `{State}`: The state of the problem. Possible\nvalues are `OPEN` and `RESOLVED`. * `{Tags}`: The list of tags that are defined for all impacted entities, separated by\ncommas\n"
                    },
                    "ccs": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of the email CC-recipients\n"
                    },
                    "legacyId": {
                        "type": "string",
                        "description": "The ID of these settings when referred to from resources requiring the REST API V1 keys\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the notification configuration\n"
                    },
                    "notifyClosedProblems": {
                        "type": "boolean",
                        "description": "Send email if problem is closed\n"
                    },
                    "profile": {
                        "type": "string",
                        "description": "The ID of the associated alerting profile\n"
                    },
                    "subject": {
                        "type": "string",
                        "description": "The subject of the email notifications\n"
                    },
                    "tos": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of the email recipients\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/environment:Environment": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The display name of the environment\n"
                },
                "quotas": {
                    "$ref": "#/types/dynatrace:index/EnvironmentQuotas:EnvironmentQuotas",
                    "description": "Environment level consumption and quotas information\n"
                },
                "state": {
                    "type": "string",
                    "description": "Indicates whether the environment is enabled or disabled. Possible values are `ENABLED` and `DISABLED`. The default\nvalue is ENABLED\n"
                },
                "storage": {
                    "$ref": "#/types/dynatrace:index/EnvironmentStorage:EnvironmentStorage",
                    "description": "Environment level storage usage and limit information\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of tags that are assigned to this environment. Every tag can have a maximum length of 100 characters\n"
                },
                "trial": {
                    "type": "boolean",
                    "description": "Specifies whether the environment is a trial environment or a non-trial environment. Creating a trial environment is\nonly possible if your license allows that. The default value is false (non-trial)\n"
                }
            },
            "required": [
                "name",
                "state",
                "storage"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The display name of the environment\n"
                },
                "quotas": {
                    "$ref": "#/types/dynatrace:index/EnvironmentQuotas:EnvironmentQuotas",
                    "description": "Environment level consumption and quotas information\n"
                },
                "state": {
                    "type": "string",
                    "description": "Indicates whether the environment is enabled or disabled. Possible values are `ENABLED` and `DISABLED`. The default\nvalue is ENABLED\n"
                },
                "storage": {
                    "$ref": "#/types/dynatrace:index/EnvironmentStorage:EnvironmentStorage",
                    "description": "Environment level storage usage and limit information\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of tags that are assigned to this environment. Every tag can have a maximum length of 100 characters\n"
                },
                "trial": {
                    "type": "boolean",
                    "description": "Specifies whether the environment is a trial environment or a non-trial environment. Creating a trial environment is\nonly possible if your license allows that. The default value is false (non-trial)\n"
                }
            },
            "requiredInputs": [
                "state",
                "storage"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Environment resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The display name of the environment\n"
                    },
                    "quotas": {
                        "$ref": "#/types/dynatrace:index/EnvironmentQuotas:EnvironmentQuotas",
                        "description": "Environment level consumption and quotas information\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "Indicates whether the environment is enabled or disabled. Possible values are `ENABLED` and `DISABLED`. The default\nvalue is ENABLED\n"
                    },
                    "storage": {
                        "$ref": "#/types/dynatrace:index/EnvironmentStorage:EnvironmentStorage",
                        "description": "Environment level storage usage and limit information\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A set of tags that are assigned to this environment. Every tag can have a maximum length of 100 characters\n"
                    },
                    "trial": {
                        "type": "boolean",
                        "description": "Specifies whether the environment is a trial environment or a non-trial environment. Creating a trial environment is\nonly possible if your license allows that. The default value is false (non-trial)\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/eulaSettings:EulaSettings": {
            "properties": {
                "enableEula": {
                    "type": "boolean",
                    "description": "Display end user terms to new users logging in to the environment\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of this setting (environment)\n"
                }
            },
            "required": [
                "enableEula"
            ],
            "inputProperties": {
                "enableEula": {
                    "type": "boolean",
                    "description": "Display end user terms to new users logging in to the environment\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of this setting (environment)\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "enableEula"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering EulaSettings resources.\n",
                "properties": {
                    "enableEula": {
                        "type": "boolean",
                        "description": "Display end user terms to new users logging in to the environment\n"
                    },
                    "scope": {
                        "type": "string",
                        "description": "The scope of this setting (environment)\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/extensionExecutionController:ExtensionExecutionController": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "ingestActive": {
                    "type": "boolean",
                    "description": "Enable local HTTP Metric, Log and Event Ingest API\n"
                },
                "performanceProfile": {
                    "type": "string",
                    "description": "Possible Values: `DEFAULT`, `HIGH`\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.\n"
                },
                "statsdActive": {
                    "type": "boolean",
                    "description": "Enable Dynatrace StatsD\n"
                }
            },
            "required": [
                "enabled"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "ingestActive": {
                    "type": "boolean",
                    "description": "Enable local HTTP Metric, Log and Event Ingest API\n"
                },
                "performanceProfile": {
                    "type": "string",
                    "description": "Possible Values: `DEFAULT`, `HIGH`\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.\n",
                    "willReplaceOnChanges": true
                },
                "statsdActive": {
                    "type": "boolean",
                    "description": "Enable Dynatrace StatsD\n"
                }
            },
            "requiredInputs": [
                "enabled"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ExtensionExecutionController resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                    },
                    "ingestActive": {
                        "type": "boolean",
                        "description": "Enable local HTTP Metric, Log and Event Ingest API\n"
                    },
                    "performanceProfile": {
                        "type": "string",
                        "description": "Possible Values: `DEFAULT`, `HIGH`\n"
                    },
                    "scope": {
                        "type": "string",
                        "description": "The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.\n",
                        "willReplaceOnChanges": true
                    },
                    "statsdActive": {
                        "type": "boolean",
                        "description": "Enable Dynatrace StatsD\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/extensionExecutionRemote:ExtensionExecutionRemote": {
            "properties": {
                "performanceProfile": {
                    "type": "string",
                    "description": "Select performance profile for Extension Execution Controller\n[Documentation](https://www.dynatrace.com/support/help/shortlink/extensions-concepts#resource-consumption \"More about\nperformance profiles\")\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of this setting (ENVIRONMENT_ACTIVE_GATE)\n"
                }
            },
            "required": [
                "performanceProfile",
                "scope"
            ],
            "inputProperties": {
                "performanceProfile": {
                    "type": "string",
                    "description": "Select performance profile for Extension Execution Controller\n[Documentation](https://www.dynatrace.com/support/help/shortlink/extensions-concepts#resource-consumption \"More about\nperformance profiles\")\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of this setting (ENVIRONMENT_ACTIVE_GATE)\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "performanceProfile",
                "scope"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ExtensionExecutionRemote resources.\n",
                "properties": {
                    "performanceProfile": {
                        "type": "string",
                        "description": "Select performance profile for Extension Execution Controller\n[Documentation](https://www.dynatrace.com/support/help/shortlink/extensions-concepts#resource-consumption \"More about\nperformance profiles\")\n"
                    },
                    "scope": {
                        "type": "string",
                        "description": "The scope of this setting (ENVIRONMENT_ACTIVE_GATE)\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/failureDetectionParameters:FailureDetectionParameters": {
            "properties": {
                "brokenLinks": {
                    "$ref": "#/types/dynatrace:index/FailureDetectionParametersBrokenLinks:FailureDetectionParametersBrokenLinks",
                    "description": "HTTP 404 response codes are thrown when a web server can't find a certain page. 404s are classified as broken links on\nthe client side and therefore aren't considered to be service failures. By enabling this setting, you can have 404s\ntreated as server-side service failures.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description\n"
                },
                "exceptionRules": {
                    "$ref": "#/types/dynatrace:index/FailureDetectionParametersExceptionRules:FailureDetectionParametersExceptionRules",
                    "description": "Customize failure detection for specific exceptions and errors\n"
                },
                "httpResponseCodes": {
                    "$ref": "#/types/dynatrace:index/FailureDetectionParametersHttpResponseCodes:FailureDetectionParametersHttpResponseCodes",
                    "description": "HTTP response codes\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name\n"
                }
            },
            "required": [
                "brokenLinks",
                "exceptionRules",
                "httpResponseCodes",
                "name"
            ],
            "inputProperties": {
                "brokenLinks": {
                    "$ref": "#/types/dynatrace:index/FailureDetectionParametersBrokenLinks:FailureDetectionParametersBrokenLinks",
                    "description": "HTTP 404 response codes are thrown when a web server can't find a certain page. 404s are classified as broken links on\nthe client side and therefore aren't considered to be service failures. By enabling this setting, you can have 404s\ntreated as server-side service failures.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description\n"
                },
                "exceptionRules": {
                    "$ref": "#/types/dynatrace:index/FailureDetectionParametersExceptionRules:FailureDetectionParametersExceptionRules",
                    "description": "Customize failure detection for specific exceptions and errors\n"
                },
                "httpResponseCodes": {
                    "$ref": "#/types/dynatrace:index/FailureDetectionParametersHttpResponseCodes:FailureDetectionParametersHttpResponseCodes",
                    "description": "HTTP response codes\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name\n"
                }
            },
            "requiredInputs": [
                "brokenLinks",
                "exceptionRules",
                "httpResponseCodes"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FailureDetectionParameters resources.\n",
                "properties": {
                    "brokenLinks": {
                        "$ref": "#/types/dynatrace:index/FailureDetectionParametersBrokenLinks:FailureDetectionParametersBrokenLinks",
                        "description": "HTTP 404 response codes are thrown when a web server can't find a certain page. 404s are classified as broken links on\nthe client side and therefore aren't considered to be service failures. By enabling this setting, you can have 404s\ntreated as server-side service failures.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description\n"
                    },
                    "exceptionRules": {
                        "$ref": "#/types/dynatrace:index/FailureDetectionParametersExceptionRules:FailureDetectionParametersExceptionRules",
                        "description": "Customize failure detection for specific exceptions and errors\n"
                    },
                    "httpResponseCodes": {
                        "$ref": "#/types/dynatrace:index/FailureDetectionParametersHttpResponseCodes:FailureDetectionParametersHttpResponseCodes",
                        "description": "HTTP response codes\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/failureDetectionRules:FailureDetectionRules": {
            "properties": {
                "conditions": {
                    "$ref": "#/types/dynatrace:index/FailureDetectionRulesConditions:FailureDetectionRulesConditions",
                    "description": "Conditions\n"
                },
                "description": {
                    "type": "string",
                    "description": "Rule description\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "insertAfter": {
                    "type": "string",
                    "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                },
                "name": {
                    "type": "string",
                    "description": "Rule name\n"
                },
                "parameterId": {
                    "type": "string",
                    "description": "Failure detection parameters\n"
                }
            },
            "required": [
                "conditions",
                "enabled",
                "insertAfter",
                "name",
                "parameterId"
            ],
            "inputProperties": {
                "conditions": {
                    "$ref": "#/types/dynatrace:index/FailureDetectionRulesConditions:FailureDetectionRulesConditions",
                    "description": "Conditions\n"
                },
                "description": {
                    "type": "string",
                    "description": "Rule description\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "insertAfter": {
                    "type": "string",
                    "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                },
                "name": {
                    "type": "string",
                    "description": "Rule name\n"
                },
                "parameterId": {
                    "type": "string",
                    "description": "Failure detection parameters\n"
                }
            },
            "requiredInputs": [
                "conditions",
                "enabled",
                "parameterId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FailureDetectionRules resources.\n",
                "properties": {
                    "conditions": {
                        "$ref": "#/types/dynatrace:index/FailureDetectionRulesConditions:FailureDetectionRulesConditions",
                        "description": "Conditions\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Rule description\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                    },
                    "insertAfter": {
                        "type": "string",
                        "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Rule name\n"
                    },
                    "parameterId": {
                        "type": "string",
                        "description": "Failure detection parameters\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/frequentIssues:FrequentIssues": {
            "properties": {
                "detectApps": {
                    "type": "boolean",
                    "description": "Detect frequent issues within applications, enabled (`true`) or disabled (`false`)\n"
                },
                "detectInfra": {
                    "type": "boolean",
                    "description": "Detect frequent issues within infrastructure, enabled (`true`) or disabled (`false`)\n"
                },
                "detectTxn": {
                    "type": "boolean",
                    "description": "Detect frequent issues within transactions and services, enabled (`true`) or disabled (`false`)\n"
                }
            },
            "required": [
                "detectApps",
                "detectInfra",
                "detectTxn"
            ],
            "inputProperties": {
                "detectApps": {
                    "type": "boolean",
                    "description": "Detect frequent issues within applications, enabled (`true`) or disabled (`false`)\n"
                },
                "detectInfra": {
                    "type": "boolean",
                    "description": "Detect frequent issues within infrastructure, enabled (`true`) or disabled (`false`)\n"
                },
                "detectTxn": {
                    "type": "boolean",
                    "description": "Detect frequent issues within transactions and services, enabled (`true`) or disabled (`false`)\n"
                }
            },
            "requiredInputs": [
                "detectApps",
                "detectInfra",
                "detectTxn"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FrequentIssues resources.\n",
                "properties": {
                    "detectApps": {
                        "type": "boolean",
                        "description": "Detect frequent issues within applications, enabled (`true`) or disabled (`false`)\n"
                    },
                    "detectInfra": {
                        "type": "boolean",
                        "description": "Detect frequent issues within infrastructure, enabled (`true`) or disabled (`false`)\n"
                    },
                    "detectTxn": {
                        "type": "boolean",
                        "description": "Detect frequent issues within transactions and services, enabled (`true`) or disabled (`false`)\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/genericRelationships:GenericRelationships": {
            "properties": {
                "createdBy": {
                    "type": "string",
                    "description": "The user or extension that created this relationship.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "fromRole": {
                    "type": "string",
                    "description": "Specify a role for the source entity. If both source and destination type are the same, referring different roles will\nallow identification of a relationships direction. If role is left blank, any role of the source type is considered for\nthe relationship.\n"
                },
                "fromType": {
                    "type": "string",
                    "description": "Define an entity type as the source of the relationship.\n"
                },
                "sources": {
                    "$ref": "#/types/dynatrace:index/GenericRelationshipsSources:GenericRelationshipsSources",
                    "description": "Specify all sources which should be evaluated for this relationship rule. The relationship is only created when any of\nthe filters match.\n"
                },
                "toRole": {
                    "type": "string",
                    "description": "Specify a role for the destination entity. If both source and destination type are the same, referring different roles\nwill allow identification of a relationships direction. If role is left blank, any role of the destination type is\nconsidered for the relationship.\n"
                },
                "toType": {
                    "type": "string",
                    "description": "Define an entity type as the destination of the relationship. You can choose the same type as the source type. In this\ncase you also may assign different roles for source and destination for having directed relationships.\n"
                },
                "typeOfRelation": {
                    "type": "string",
                    "description": "Possible Values: `CALLS`, `CHILD_OF`, `INSTANCE_OF`, `PART_OF`, `RUNS_ON`, `SAME_AS`\n"
                }
            },
            "required": [
                "createdBy",
                "enabled",
                "fromType",
                "sources",
                "toType",
                "typeOfRelation"
            ],
            "inputProperties": {
                "createdBy": {
                    "type": "string",
                    "description": "The user or extension that created this relationship.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "fromRole": {
                    "type": "string",
                    "description": "Specify a role for the source entity. If both source and destination type are the same, referring different roles will\nallow identification of a relationships direction. If role is left blank, any role of the source type is considered for\nthe relationship.\n"
                },
                "fromType": {
                    "type": "string",
                    "description": "Define an entity type as the source of the relationship.\n"
                },
                "sources": {
                    "$ref": "#/types/dynatrace:index/GenericRelationshipsSources:GenericRelationshipsSources",
                    "description": "Specify all sources which should be evaluated for this relationship rule. The relationship is only created when any of\nthe filters match.\n"
                },
                "toRole": {
                    "type": "string",
                    "description": "Specify a role for the destination entity. If both source and destination type are the same, referring different roles\nwill allow identification of a relationships direction. If role is left blank, any role of the destination type is\nconsidered for the relationship.\n"
                },
                "toType": {
                    "type": "string",
                    "description": "Define an entity type as the destination of the relationship. You can choose the same type as the source type. In this\ncase you also may assign different roles for source and destination for having directed relationships.\n"
                },
                "typeOfRelation": {
                    "type": "string",
                    "description": "Possible Values: `CALLS`, `CHILD_OF`, `INSTANCE_OF`, `PART_OF`, `RUNS_ON`, `SAME_AS`\n"
                }
            },
            "requiredInputs": [
                "createdBy",
                "enabled",
                "fromType",
                "sources",
                "toType",
                "typeOfRelation"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GenericRelationships resources.\n",
                "properties": {
                    "createdBy": {
                        "type": "string",
                        "description": "The user or extension that created this relationship.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                    },
                    "fromRole": {
                        "type": "string",
                        "description": "Specify a role for the source entity. If both source and destination type are the same, referring different roles will\nallow identification of a relationships direction. If role is left blank, any role of the source type is considered for\nthe relationship.\n"
                    },
                    "fromType": {
                        "type": "string",
                        "description": "Define an entity type as the source of the relationship.\n"
                    },
                    "sources": {
                        "$ref": "#/types/dynatrace:index/GenericRelationshipsSources:GenericRelationshipsSources",
                        "description": "Specify all sources which should be evaluated for this relationship rule. The relationship is only created when any of\nthe filters match.\n"
                    },
                    "toRole": {
                        "type": "string",
                        "description": "Specify a role for the destination entity. If both source and destination type are the same, referring different roles\nwill allow identification of a relationships direction. If role is left blank, any role of the destination type is\nconsidered for the relationship.\n"
                    },
                    "toType": {
                        "type": "string",
                        "description": "Define an entity type as the destination of the relationship. You can choose the same type as the source type. In this\ncase you also may assign different roles for source and destination for having directed relationships.\n"
                    },
                    "typeOfRelation": {
                        "type": "string",
                        "description": "Possible Values: `CALLS`, `CHILD_OF`, `INSTANCE_OF`, `PART_OF`, `RUNS_ON`, `SAME_AS`\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/genericSetting:GenericSetting": {
            "properties": {
                "localStorage": {
                    "type": "string"
                },
                "schema": {
                    "type": "string"
                },
                "scope": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "required": [
                "localStorage",
                "schema",
                "scope",
                "value"
            ],
            "inputProperties": {
                "schema": {
                    "type": "string"
                },
                "scope": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "schema",
                "value"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GenericSetting resources.\n",
                "properties": {
                    "localStorage": {
                        "type": "string"
                    },
                    "schema": {
                        "type": "string"
                    },
                    "scope": {
                        "type": "string"
                    },
                    "value": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/genericTypes:GenericTypes": {
            "properties": {
                "createdBy": {
                    "type": "string",
                    "description": "The user or extension that created this type.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The human readable type name for this entity type.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "insertAfter": {
                    "type": "string",
                    "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                },
                "name": {
                    "type": "string",
                    "description": "The entity type name. This type name must be unique and must not be changed after creation.\n"
                },
                "rules": {
                    "$ref": "#/types/dynatrace:index/GenericTypesRules:GenericTypesRules",
                    "description": "Specify a list of rules which are evaluated in order. When **any** rule matches, the entity defined according to that\nrule will be extracted. Subsequent rules will not be evaluated.\n"
                }
            },
            "required": [
                "createdBy",
                "displayName",
                "enabled",
                "insertAfter",
                "name",
                "rules"
            ],
            "inputProperties": {
                "createdBy": {
                    "type": "string",
                    "description": "The user or extension that created this type.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The human readable type name for this entity type.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "insertAfter": {
                    "type": "string",
                    "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                },
                "name": {
                    "type": "string",
                    "description": "The entity type name. This type name must be unique and must not be changed after creation.\n"
                },
                "rules": {
                    "$ref": "#/types/dynatrace:index/GenericTypesRules:GenericTypesRules",
                    "description": "Specify a list of rules which are evaluated in order. When **any** rule matches, the entity defined according to that\nrule will be extracted. Subsequent rules will not be evaluated.\n"
                }
            },
            "requiredInputs": [
                "createdBy",
                "displayName",
                "enabled",
                "rules"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GenericTypes resources.\n",
                "properties": {
                    "createdBy": {
                        "type": "string",
                        "description": "The user or extension that created this type.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The human readable type name for this entity type.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                    },
                    "insertAfter": {
                        "type": "string",
                        "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The entity type name. This type name must be unique and must not be changed after creation.\n"
                    },
                    "rules": {
                        "$ref": "#/types/dynatrace:index/GenericTypesRules:GenericTypesRules",
                        "description": "Specify a list of rules which are evaluated in order. When **any** rule matches, the entity defined according to that\nrule will be extracted. Subsequent rules will not be evaluated.\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/geolocation:Geolocation": {
            "properties": {
                "displayWorldmap": {
                    "type": "boolean",
                    "description": "Display the world map\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of this setting (environment-default). Omit this property if you want to cover the whole environment.\n"
                }
            },
            "required": [
                "displayWorldmap"
            ],
            "inputProperties": {
                "displayWorldmap": {
                    "type": "boolean",
                    "description": "Display the world map\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of this setting (environment-default). Omit this property if you want to cover the whole environment.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "displayWorldmap"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Geolocation resources.\n",
                "properties": {
                    "displayWorldmap": {
                        "type": "boolean",
                        "description": "Display the world map\n"
                    },
                    "scope": {
                        "type": "string",
                        "description": "The scope of this setting (environment-default). Omit this property if you want to cover the whole environment.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/grailMetricsAllowall:GrailMetricsAllowall": {
            "properties": {
                "allowAll": {
                    "type": "boolean",
                    "description": "When enabled every custom metric will be ingested to Grail. Warning: this setting can cause [unexpected\nbilling!](https://docs.dynatrace.com/docs/dynatrace-api/environment-api/metric-v2/best-practices#avoid-high-cardinality-limits)\n"
                }
            },
            "required": [
                "allowAll"
            ],
            "inputProperties": {
                "allowAll": {
                    "type": "boolean",
                    "description": "When enabled every custom metric will be ingested to Grail. Warning: this setting can cause [unexpected\nbilling!](https://docs.dynatrace.com/docs/dynatrace-api/environment-api/metric-v2/best-practices#avoid-high-cardinality-limits)\n"
                }
            },
            "requiredInputs": [
                "allowAll"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GrailMetricsAllowall resources.\n",
                "properties": {
                    "allowAll": {
                        "type": "boolean",
                        "description": "When enabled every custom metric will be ingested to Grail. Warning: this setting can cause [unexpected\nbilling!](https://docs.dynatrace.com/docs/dynatrace-api/environment-api/metric-v2/best-practices#avoid-high-cardinality-limits)\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/grailMetricsAllowlist:GrailMetricsAllowlist": {
            "properties": {
                "allowRules": {
                    "$ref": "#/types/dynatrace:index/GrailMetricsAllowlistAllowRules:GrailMetricsAllowlistAllowRules",
                    "description": "Specify rules for forwarding metrics\n"
                }
            },
            "inputProperties": {
                "allowRules": {
                    "$ref": "#/types/dynatrace:index/GrailMetricsAllowlistAllowRules:GrailMetricsAllowlistAllowRules",
                    "description": "Specify rules for forwarding metrics\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GrailMetricsAllowlist resources.\n",
                "properties": {
                    "allowRules": {
                        "$ref": "#/types/dynatrace:index/GrailMetricsAllowlistAllowRules:GrailMetricsAllowlistAllowRules",
                        "description": "Specify rules for forwarding metrics\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/grailSecurityContext:GrailSecurityContext": {
            "properties": {
                "destinationProperty": {
                    "type": "string",
                    "description": "The case-sensitive name of a property of the destination type.\n"
                },
                "entityType": {
                    "type": "string",
                    "description": "Type of the entity whose security context to override.\n"
                },
                "insertAfter": {
                    "type": "string",
                    "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                }
            },
            "required": [
                "destinationProperty",
                "entityType",
                "insertAfter"
            ],
            "inputProperties": {
                "destinationProperty": {
                    "type": "string",
                    "description": "The case-sensitive name of a property of the destination type.\n"
                },
                "entityType": {
                    "type": "string",
                    "description": "Type of the entity whose security context to override.\n"
                },
                "insertAfter": {
                    "type": "string",
                    "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                }
            },
            "requiredInputs": [
                "destinationProperty",
                "entityType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GrailSecurityContext resources.\n",
                "properties": {
                    "destinationProperty": {
                        "type": "string",
                        "description": "The case-sensitive name of a property of the destination type.\n"
                    },
                    "entityType": {
                        "type": "string",
                        "description": "Type of the entity whose security context to override.\n"
                    },
                    "insertAfter": {
                        "type": "string",
                        "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/hostAnomalies:HostAnomalies": {
            "properties": {
                "connections": {
                    "$ref": "#/types/dynatrace:index/HostAnomaliesConnections:HostAnomaliesConnections",
                    "description": "Configuration of lost connection detection\n"
                },
                "cpu": {
                    "$ref": "#/types/dynatrace:index/HostAnomaliesCpu:HostAnomaliesCpu",
                    "description": "Configuration of high CPU saturation detection\n"
                },
                "disks": {
                    "$ref": "#/types/dynatrace:index/HostAnomaliesDisks:HostAnomaliesDisks",
                    "description": "Configuration of disk related anomalies\n"
                },
                "gc": {
                    "$ref": "#/types/dynatrace:index/HostAnomaliesGc:HostAnomaliesGc",
                    "description": "Configuration of high Garbage Collector activity detection\n"
                },
                "java": {
                    "$ref": "#/types/dynatrace:index/HostAnomaliesJava:HostAnomaliesJava",
                    "description": "Configuration of Java related anomalies\n"
                },
                "memory": {
                    "$ref": "#/types/dynatrace:index/HostAnomaliesMemory:HostAnomaliesMemory",
                    "description": "Configuration of high memory usage detection\n"
                },
                "network": {
                    "$ref": "#/types/dynatrace:index/HostAnomaliesNetwork:HostAnomaliesNetwork",
                    "description": "Configuration of network related anomalies\n"
                }
            },
            "inputProperties": {
                "connections": {
                    "$ref": "#/types/dynatrace:index/HostAnomaliesConnections:HostAnomaliesConnections",
                    "description": "Configuration of lost connection detection\n"
                },
                "cpu": {
                    "$ref": "#/types/dynatrace:index/HostAnomaliesCpu:HostAnomaliesCpu",
                    "description": "Configuration of high CPU saturation detection\n"
                },
                "disks": {
                    "$ref": "#/types/dynatrace:index/HostAnomaliesDisks:HostAnomaliesDisks",
                    "description": "Configuration of disk related anomalies\n"
                },
                "gc": {
                    "$ref": "#/types/dynatrace:index/HostAnomaliesGc:HostAnomaliesGc",
                    "description": "Configuration of high Garbage Collector activity detection\n"
                },
                "java": {
                    "$ref": "#/types/dynatrace:index/HostAnomaliesJava:HostAnomaliesJava",
                    "description": "Configuration of Java related anomalies\n"
                },
                "memory": {
                    "$ref": "#/types/dynatrace:index/HostAnomaliesMemory:HostAnomaliesMemory",
                    "description": "Configuration of high memory usage detection\n"
                },
                "network": {
                    "$ref": "#/types/dynatrace:index/HostAnomaliesNetwork:HostAnomaliesNetwork",
                    "description": "Configuration of network related anomalies\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering HostAnomalies resources.\n",
                "properties": {
                    "connections": {
                        "$ref": "#/types/dynatrace:index/HostAnomaliesConnections:HostAnomaliesConnections",
                        "description": "Configuration of lost connection detection\n"
                    },
                    "cpu": {
                        "$ref": "#/types/dynatrace:index/HostAnomaliesCpu:HostAnomaliesCpu",
                        "description": "Configuration of high CPU saturation detection\n"
                    },
                    "disks": {
                        "$ref": "#/types/dynatrace:index/HostAnomaliesDisks:HostAnomaliesDisks",
                        "description": "Configuration of disk related anomalies\n"
                    },
                    "gc": {
                        "$ref": "#/types/dynatrace:index/HostAnomaliesGc:HostAnomaliesGc",
                        "description": "Configuration of high Garbage Collector activity detection\n"
                    },
                    "java": {
                        "$ref": "#/types/dynatrace:index/HostAnomaliesJava:HostAnomaliesJava",
                        "description": "Configuration of Java related anomalies\n"
                    },
                    "memory": {
                        "$ref": "#/types/dynatrace:index/HostAnomaliesMemory:HostAnomaliesMemory",
                        "description": "Configuration of high memory usage detection\n"
                    },
                    "network": {
                        "$ref": "#/types/dynatrace:index/HostAnomaliesNetwork:HostAnomaliesNetwork",
                        "description": "Configuration of network related anomalies\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/hostAnomaliesV2:HostAnomaliesV2": {
            "properties": {
                "host": {
                    "$ref": "#/types/dynatrace:index/HostAnomaliesV2Host:HostAnomaliesV2Host",
                    "description": "Hosts\n"
                },
                "network": {
                    "$ref": "#/types/dynatrace:index/HostAnomaliesV2Network:HostAnomaliesV2Network",
                    "description": "Network\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of this setting (HOST HOST_GROUP environment)\n"
                }
            },
            "required": [
                "host",
                "network",
                "scope"
            ],
            "inputProperties": {
                "host": {
                    "$ref": "#/types/dynatrace:index/HostAnomaliesV2Host:HostAnomaliesV2Host",
                    "description": "Hosts\n"
                },
                "network": {
                    "$ref": "#/types/dynatrace:index/HostAnomaliesV2Network:HostAnomaliesV2Network",
                    "description": "Network\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of this setting (HOST HOST_GROUP environment)\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "host",
                "network",
                "scope"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering HostAnomaliesV2 resources.\n",
                "properties": {
                    "host": {
                        "$ref": "#/types/dynatrace:index/HostAnomaliesV2Host:HostAnomaliesV2Host",
                        "description": "Hosts\n"
                    },
                    "network": {
                        "$ref": "#/types/dynatrace:index/HostAnomaliesV2Network:HostAnomaliesV2Network",
                        "description": "Network\n"
                    },
                    "scope": {
                        "type": "string",
                        "description": "The scope of this setting (HOST HOST_GROUP environment)\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/hostMonitoring:HostMonitoring": {
            "properties": {
                "autoInjection": {
                    "type": "boolean",
                    "description": "An auto-injection disabled with [oneagentctl](https://dt-url.net/oneagentctl) takes precedence over this setting and\ncannot be changed from the Dynatrace web UI.\n",
                    "deprecationMessage": "This field has been moved to a new schema, please utilize the resource `dynatrace_host_monitoring_advanced` to configure this field."
                },
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "fullStack": {
                    "type": "boolean",
                    "description": "Dynatrace uses full-stack monitoring by default, to monitor every aspect of your environment, including all processes,\nservices, and applications detected on your hosts. If you turn off full-stack monitoring, Dynatrace will only monitor\nyour infrastructure. You will lose access to application performance, user experience data, code-level visibility and\nPurePath insights. To learn more, visit [Infrastructure Monitoring\nmode](https://www.dynatrace.com/support/help/shortlink/infrastructure). Please note that changing the monitoring mode\nwill impact the license consumption of this OneAgent. To learn more, visit [Host units](https://dt-url.net/hi03uns).\n",
                    "deprecationMessage": "This attribute is not supported anymore by the Dynatrace API"
                },
                "hostId": {
                    "type": "string",
                    "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.\n"
                }
            },
            "required": [
                "enabled",
                "hostId"
            ],
            "inputProperties": {
                "autoInjection": {
                    "type": "boolean",
                    "description": "An auto-injection disabled with [oneagentctl](https://dt-url.net/oneagentctl) takes precedence over this setting and\ncannot be changed from the Dynatrace web UI.\n",
                    "deprecationMessage": "This field has been moved to a new schema, please utilize the resource `dynatrace_host_monitoring_advanced` to configure this field."
                },
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "fullStack": {
                    "type": "boolean",
                    "description": "Dynatrace uses full-stack monitoring by default, to monitor every aspect of your environment, including all processes,\nservices, and applications detected on your hosts. If you turn off full-stack monitoring, Dynatrace will only monitor\nyour infrastructure. You will lose access to application performance, user experience data, code-level visibility and\nPurePath insights. To learn more, visit [Infrastructure Monitoring\nmode](https://www.dynatrace.com/support/help/shortlink/infrastructure). Please note that changing the monitoring mode\nwill impact the license consumption of this OneAgent. To learn more, visit [Host units](https://dt-url.net/hi03uns).\n",
                    "deprecationMessage": "This attribute is not supported anymore by the Dynatrace API"
                },
                "hostId": {
                    "type": "string",
                    "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "enabled",
                "hostId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering HostMonitoring resources.\n",
                "properties": {
                    "autoInjection": {
                        "type": "boolean",
                        "description": "An auto-injection disabled with [oneagentctl](https://dt-url.net/oneagentctl) takes precedence over this setting and\ncannot be changed from the Dynatrace web UI.\n",
                        "deprecationMessage": "This field has been moved to a new schema, please utilize the resource `dynatrace_host_monitoring_advanced` to configure this field."
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                    },
                    "fullStack": {
                        "type": "boolean",
                        "description": "Dynatrace uses full-stack monitoring by default, to monitor every aspect of your environment, including all processes,\nservices, and applications detected on your hosts. If you turn off full-stack monitoring, Dynatrace will only monitor\nyour infrastructure. You will lose access to application performance, user experience data, code-level visibility and\nPurePath insights. To learn more, visit [Infrastructure Monitoring\nmode](https://www.dynatrace.com/support/help/shortlink/infrastructure). Please note that changing the monitoring mode\nwill impact the license consumption of this OneAgent. To learn more, visit [Host units](https://dt-url.net/hi03uns).\n",
                        "deprecationMessage": "This attribute is not supported anymore by the Dynatrace API"
                    },
                    "hostId": {
                        "type": "string",
                        "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/hostMonitoringAdvanced:HostMonitoringAdvanced": {
            "properties": {
                "codeModuleInjection": {
                    "type": "boolean",
                    "description": "Inject CodeModules in Discovery mode.\n"
                },
                "hostId": {
                    "type": "string",
                    "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.\n"
                },
                "processAgentInjection": {
                    "type": "boolean",
                    "description": "Disabling this via [oneagentctl](https://dt-url.net/oneagentctl) takes precedence over this setting and cannot be\nchanged from the Dynatrace web UI.\n"
                }
            },
            "required": [
                "hostId",
                "processAgentInjection"
            ],
            "inputProperties": {
                "codeModuleInjection": {
                    "type": "boolean",
                    "description": "Inject CodeModules in Discovery mode.\n"
                },
                "hostId": {
                    "type": "string",
                    "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.\n"
                },
                "processAgentInjection": {
                    "type": "boolean",
                    "description": "Disabling this via [oneagentctl](https://dt-url.net/oneagentctl) takes precedence over this setting and cannot be\nchanged from the Dynatrace web UI.\n"
                }
            },
            "requiredInputs": [
                "hostId",
                "processAgentInjection"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering HostMonitoringAdvanced resources.\n",
                "properties": {
                    "codeModuleInjection": {
                        "type": "boolean",
                        "description": "Inject CodeModules in Discovery mode.\n"
                    },
                    "hostId": {
                        "type": "string",
                        "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.\n"
                    },
                    "processAgentInjection": {
                        "type": "boolean",
                        "description": "Disabling this via [oneagentctl](https://dt-url.net/oneagentctl) takes precedence over this setting and cannot be\nchanged from the Dynatrace web UI.\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/hostMonitoringMode:HostMonitoringMode": {
            "properties": {
                "hostId": {
                    "type": "string",
                    "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.\n"
                },
                "monitoringMode": {
                    "type": "string",
                    "description": "Possible Values: `DISCOVERY`, `FULL_STACK`, `INFRA_ONLY`\n"
                }
            },
            "required": [
                "hostId",
                "monitoringMode"
            ],
            "inputProperties": {
                "hostId": {
                    "type": "string",
                    "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.\n",
                    "willReplaceOnChanges": true
                },
                "monitoringMode": {
                    "type": "string",
                    "description": "Possible Values: `DISCOVERY`, `FULL_STACK`, `INFRA_ONLY`\n"
                }
            },
            "requiredInputs": [
                "hostId",
                "monitoringMode"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering HostMonitoringMode resources.\n",
                "properties": {
                    "hostId": {
                        "type": "string",
                        "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.\n",
                        "willReplaceOnChanges": true
                    },
                    "monitoringMode": {
                        "type": "string",
                        "description": "Possible Values: `DISCOVERY`, `FULL_STACK`, `INFRA_ONLY`\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/hostNaming:HostNaming": {
            "properties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/HostNamingCondition:HostNamingCondition"
                    },
                    "description": "A list of matching conditions of the rule. The rule applies only if **all** conditions are fulfilled\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "The rule is enabled (`true`) or disabled (`false`)\n"
                },
                "format": {
                    "type": "string",
                    "description": "The name to be assigned to matching entities. You can use the following placeholders here: *\n`{AwsAutoScalingGroup:Name}` * `{AwsAvailabilityZone:Name}` * `{AwsElasticLoadBalancer:Name}` *\n`{AwsRelationalDatabaseService:DBName}` * `{AwsRelationalDatabaseService:Endpoint}` *\n`{AwsRelationalDatabaseService:Engine}` * `{AwsRelationalDatabaseService:InstanceClass}` *\n`{AwsRelationalDatabaseService:Name}` * `{AwsRelationalDatabaseService:Port}` * `{AzureRegion:Name}` *\n`{AzureScaleSet:Name}` * `{AzureVm:Name}` * `{CloudFoundryOrganization:Name}` * `{CustomDevice:DetectedName}` *\n`{CustomDevice:DnsName}` * `{CustomDevice:IpAddress}` * `{CustomDevice:Port}` *\n`{DockerContainerGroupInstance:ContainerName}` * `{DockerContainerGroupInstance:FullImageName}` *\n`{DockerContainerGroupInstance:ImageVersion}` * `{DockerContainerGroupInstance:StrippedImageName}` *\n`{ESXIHost:HardwareModel}` * `{ESXIHost:HardwareVendor}` * `{ESXIHost:Name}` * `{ESXIHost:ProductName}` *\n`{ESXIHost:ProductVersion}` * `{Ec2Instance:AmiId}` * `{Ec2Instance:BeanstalkEnvironmentName}` *\n`{Ec2Instance:InstanceId}` * `{Ec2Instance:InstanceType}` * `{Ec2Instance:LocalHostName}` * `{Ec2Instance:Name}` *\n`{Ec2Instance:PublicHostName}` * `{Ec2Instance:SecurityGroup}` * `{GoogleComputeInstance:Id}` *\n`{GoogleComputeInstance:IpAddresses}` * `{GoogleComputeInstance:MachineType}` * `{GoogleComputeInstance:Name}` *\n`{GoogleComputeInstance:ProjectId}` * `{GoogleComputeInstance:Project}` * `{Host:AWSNameTag}` *\n`{Host:AixLogicalCpuCount}` * `{Host:AzureHostName}` * `{Host:AzureSiteName}` * `{Host:BoshDeploymentId}` *\n`{Host:BoshInstanceId}` * `{Host:BoshInstanceName}` * `{Host:BoshName}` * `{Host:BoshStemcellVersion}` *\n`{Host:CpuCores}` * `{Host:DetectedName}` * `{Host:Environment:AppName}` * `{Host:Environment:BoshReleaseVersion}` *\n`{Host:Environment:Environment}` * `{Host:Environment:Link}` * `{Host:Environment:Organization}` *\n`{Host:Environment:Owner}` * `{Host:Environment:Support}` * `{Host:IpAddress}` * `{Host:LogicalCpuCores}` *\n`{Host:OneAgentCustomHostName}` * `{Host:OperatingSystemVersion}` * `{Host:PaasMemoryLimit}` * `{HostGroup:Name}` *\n`{KubernetesCluster:Name}` * `{KubernetesNode:DetectedName}` * `{OpenstackAvailabilityZone:Name}` *\n`{OpenstackZone:Name}` * `{OpenstackComputeNode:Name}` * `{OpenstackProject:Name}` * `{OpenstackVm:InstanceType}` *\n`{OpenstackVm:Name}` * `{OpenstackVm:SecurityGroup}` * `{ProcessGroup:AmazonECRImageAccountId}` *\n`{ProcessGroup:AmazonECRImageRegion}` * `{ProcessGroup:AmazonECSCluster}` * `{ProcessGroup:AmazonECSContainerName}` *\n`{ProcessGroup:AmazonECSFamily}` * `{ProcessGroup:AmazonECSRevision}` * `{ProcessGroup:AmazonLambdaFunctionName}` *\n`{ProcessGroup:AmazonRegion}` * `{ProcessGroup:ApacheConfigPath}` * `{ProcessGroup:ApacheSparkMasterIpAddress}` *\n`{ProcessGroup:AspDotNetCoreApplicationPath}` * `{ProcessGroup:AspDotNetCoreApplicationPath}` *\n`{ProcessGroup:AzureHostName}` * `{ProcessGroup:AzureSiteName}` * `{ProcessGroup:CassandraClusterName}` *\n`{ProcessGroup:CatalinaBase}` * `{ProcessGroup:CatalinaHome}` * `{ProcessGroup:CloudFoundryAppId}` *\n`{ProcessGroup:CloudFoundryAppName}` * `{ProcessGroup:CloudFoundryInstanceIndex}` * `{ProcessGroup:CloudFoundrySpaceId}`\n* `{ProcessGroup:CloudFoundrySpaceName}` * `{ProcessGroup:ColdFusionJvmConfigFile}` *\n`{ProcessGroup:ColdFusionServiceName}` * `{ProcessGroup:CommandLineArgs}` * `{ProcessGroup:DetectedName}` *\n`{ProcessGroup:DotNetCommandPath}` * `{ProcessGroup:DotNetCommand}` * `{ProcessGroup:DotNetClusterId}` *\n`{ProcessGroup:DotNetNodeId}` * `{ProcessGroup:ElasticsearchClusterName}` * `{ProcessGroup:ElasticsearchNodeName}` *\n`{ProcessGroup:EquinoxConfigPath}` * `{ProcessGroup:ExeName}` * `{ProcessGroup:ExePath}` *\n`{ProcessGroup:GlassFishDomainName}` * `{ProcessGroup:GlassFishInstanceName}` * `{ProcessGroup:GoogleAppEngineInstance}`\n* `{ProcessGroup:GoogleAppEngineService}` * `{ProcessGroup:GoogleCloudProject}` * `{ProcessGroup:HybrisBinDirectory}` *\n`{ProcessGroup:HybrisConfigDirectory}` * `{ProcessGroup:HybrisConfigDirectory}` * `{ProcessGroup:HybrisDataDirectory}` *\n`{ProcessGroup:IBMCicsRegion}` * `{ProcessGroup:IBMCtgName}` * `{ProcessGroup:IBMImsConnectRegion}` *\n`{ProcessGroup:IBMImsControlRegion}` * `{ProcessGroup:IBMImsMessageProcessingRegion}` *\n`{ProcessGroup:IBMImsSoapGwName}` * `{ProcessGroup:IBMIntegrationNodeName}` * `{ProcessGroup:IBMIntegrationServerName}`\n* `{ProcessGroup:IISAppPool}` * `{ProcessGroup:IISRoleName}` * `{ProcessGroup:JbossHome}` * `{ProcessGroup:JbossMode}` *\n`{ProcessGroup:JbossServerName}` * `{ProcessGroup:JavaJarFile}` * `{ProcessGroup:JavaJarPath}` *\n`{ProcessGroup:JavaMainCLass}` * `{ProcessGroup:KubernetesBasePodName}` * `{ProcessGroup:KubernetesContainerName}` *\n`{ProcessGroup:KubernetesFullPodName}` * `{ProcessGroup:KubernetesNamespace}` * `{ProcessGroup:KubernetesPodUid}` *\n`{ProcessGroup:MssqlInstanceName}` * `{ProcessGroup:NodeJsAppBaseDirectory}` * `{ProcessGroup:NodeJsAppName}` *\n`{ProcessGroup:NodeJsScriptName}` * `{ProcessGroup:OracleSid}` * `{ProcessGroup:PHPScriptPath}` *\n`{ProcessGroup:PHPWorkingDirectory}` * `{ProcessGroup:Ports}` * `{ProcessGroup:RubyAppRootPath}` *\n`{ProcessGroup:RubyScriptPath}` * `{ProcessGroup:SoftwareAGInstallRoot}` *\n`{ProcessGroup:SoftwareAGProductPropertyName}` * `{ProcessGroup:SpringBootAppName}` *\n`{ProcessGroup:SpringBootProfileName}` * `{ProcessGroup:SpringBootStartupClass}` *\n`{ProcessGroup:TIBCOBusinessWorksAppNodeName}` * `{ProcessGroup:TIBCOBusinessWorksAppSpaceName}` *\n`{ProcessGroup:TIBCOBusinessWorksCeAppName}` * `{ProcessGroup:TIBCOBusinessWorksCeVersion}` *\n`{ProcessGroup:TIBCOBusinessWorksDomainName}` * `{ProcessGroup:TIBCOBusinessWorksEnginePropertyFilePath}` *\n`{ProcessGroup:TIBCOBusinessWorksEnginePropertyFile}` * `{ProcessGroup:TIBCOBusinessWorksHome}` *\n`{ProcessGroup:VarnishInstanceName}` * `{ProcessGroup:WebLogicClusterName}` * `{ProcessGroup:WebLogicDomainName}` *\n`{ProcessGroup:WebLogicHome}` * `{ProcessGroup:WebLogicName}` * `{ProcessGroup:WebSphereCellName}` *\n`{ProcessGroup:WebSphereClusterName}` * `{ProcessGroup:WebSphereNodeName}` * `{ProcessGroup:WebSphereServerName}` *\n`{ProcessGroup:ActorSystem}` * `{Service:STGServerName}` * `{Service:DatabaseHostName}` * `{Service:DatabaseName}` *\n`{Service:DatabaseVendor}` * `{Service:DetectedName}` * `{Service:EndpointPath}` * `{Service:EndpointPathGatewayUrl}` *\n`{Service:IIBApplicationName}` * `{Service:MessageListenerClassName}` * `{Service:Port}` * `{Service:PublicDomainName}`\n* `{Service:RemoteEndpoint}` * `{Service:RemoteName}` * `{Service:WebApplicationId}` * `{Service:WebContextRoot}` *\n`{Service:WebServerName}` * `{Service:WebServiceNamespace}` * `{Service:WebServiceName}` * `{VmwareDatacenter:Name}` *\n`{VmwareVm:Name}\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the rule\n"
                },
                "unknowns": {
                    "type": "string",
                    "description": "allows for configuring properties that are not explicitly supported by the current version of this provider\n"
                }
            },
            "required": [
                "enabled",
                "format",
                "name"
            ],
            "inputProperties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/HostNamingCondition:HostNamingCondition"
                    },
                    "description": "A list of matching conditions of the rule. The rule applies only if **all** conditions are fulfilled\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "The rule is enabled (`true`) or disabled (`false`)\n"
                },
                "format": {
                    "type": "string",
                    "description": "The name to be assigned to matching entities. You can use the following placeholders here: *\n`{AwsAutoScalingGroup:Name}` * `{AwsAvailabilityZone:Name}` * `{AwsElasticLoadBalancer:Name}` *\n`{AwsRelationalDatabaseService:DBName}` * `{AwsRelationalDatabaseService:Endpoint}` *\n`{AwsRelationalDatabaseService:Engine}` * `{AwsRelationalDatabaseService:InstanceClass}` *\n`{AwsRelationalDatabaseService:Name}` * `{AwsRelationalDatabaseService:Port}` * `{AzureRegion:Name}` *\n`{AzureScaleSet:Name}` * `{AzureVm:Name}` * `{CloudFoundryOrganization:Name}` * `{CustomDevice:DetectedName}` *\n`{CustomDevice:DnsName}` * `{CustomDevice:IpAddress}` * `{CustomDevice:Port}` *\n`{DockerContainerGroupInstance:ContainerName}` * `{DockerContainerGroupInstance:FullImageName}` *\n`{DockerContainerGroupInstance:ImageVersion}` * `{DockerContainerGroupInstance:StrippedImageName}` *\n`{ESXIHost:HardwareModel}` * `{ESXIHost:HardwareVendor}` * `{ESXIHost:Name}` * `{ESXIHost:ProductName}` *\n`{ESXIHost:ProductVersion}` * `{Ec2Instance:AmiId}` * `{Ec2Instance:BeanstalkEnvironmentName}` *\n`{Ec2Instance:InstanceId}` * `{Ec2Instance:InstanceType}` * `{Ec2Instance:LocalHostName}` * `{Ec2Instance:Name}` *\n`{Ec2Instance:PublicHostName}` * `{Ec2Instance:SecurityGroup}` * `{GoogleComputeInstance:Id}` *\n`{GoogleComputeInstance:IpAddresses}` * `{GoogleComputeInstance:MachineType}` * `{GoogleComputeInstance:Name}` *\n`{GoogleComputeInstance:ProjectId}` * `{GoogleComputeInstance:Project}` * `{Host:AWSNameTag}` *\n`{Host:AixLogicalCpuCount}` * `{Host:AzureHostName}` * `{Host:AzureSiteName}` * `{Host:BoshDeploymentId}` *\n`{Host:BoshInstanceId}` * `{Host:BoshInstanceName}` * `{Host:BoshName}` * `{Host:BoshStemcellVersion}` *\n`{Host:CpuCores}` * `{Host:DetectedName}` * `{Host:Environment:AppName}` * `{Host:Environment:BoshReleaseVersion}` *\n`{Host:Environment:Environment}` * `{Host:Environment:Link}` * `{Host:Environment:Organization}` *\n`{Host:Environment:Owner}` * `{Host:Environment:Support}` * `{Host:IpAddress}` * `{Host:LogicalCpuCores}` *\n`{Host:OneAgentCustomHostName}` * `{Host:OperatingSystemVersion}` * `{Host:PaasMemoryLimit}` * `{HostGroup:Name}` *\n`{KubernetesCluster:Name}` * `{KubernetesNode:DetectedName}` * `{OpenstackAvailabilityZone:Name}` *\n`{OpenstackZone:Name}` * `{OpenstackComputeNode:Name}` * `{OpenstackProject:Name}` * `{OpenstackVm:InstanceType}` *\n`{OpenstackVm:Name}` * `{OpenstackVm:SecurityGroup}` * `{ProcessGroup:AmazonECRImageAccountId}` *\n`{ProcessGroup:AmazonECRImageRegion}` * `{ProcessGroup:AmazonECSCluster}` * `{ProcessGroup:AmazonECSContainerName}` *\n`{ProcessGroup:AmazonECSFamily}` * `{ProcessGroup:AmazonECSRevision}` * `{ProcessGroup:AmazonLambdaFunctionName}` *\n`{ProcessGroup:AmazonRegion}` * `{ProcessGroup:ApacheConfigPath}` * `{ProcessGroup:ApacheSparkMasterIpAddress}` *\n`{ProcessGroup:AspDotNetCoreApplicationPath}` * `{ProcessGroup:AspDotNetCoreApplicationPath}` *\n`{ProcessGroup:AzureHostName}` * `{ProcessGroup:AzureSiteName}` * `{ProcessGroup:CassandraClusterName}` *\n`{ProcessGroup:CatalinaBase}` * `{ProcessGroup:CatalinaHome}` * `{ProcessGroup:CloudFoundryAppId}` *\n`{ProcessGroup:CloudFoundryAppName}` * `{ProcessGroup:CloudFoundryInstanceIndex}` * `{ProcessGroup:CloudFoundrySpaceId}`\n* `{ProcessGroup:CloudFoundrySpaceName}` * `{ProcessGroup:ColdFusionJvmConfigFile}` *\n`{ProcessGroup:ColdFusionServiceName}` * `{ProcessGroup:CommandLineArgs}` * `{ProcessGroup:DetectedName}` *\n`{ProcessGroup:DotNetCommandPath}` * `{ProcessGroup:DotNetCommand}` * `{ProcessGroup:DotNetClusterId}` *\n`{ProcessGroup:DotNetNodeId}` * `{ProcessGroup:ElasticsearchClusterName}` * `{ProcessGroup:ElasticsearchNodeName}` *\n`{ProcessGroup:EquinoxConfigPath}` * `{ProcessGroup:ExeName}` * `{ProcessGroup:ExePath}` *\n`{ProcessGroup:GlassFishDomainName}` * `{ProcessGroup:GlassFishInstanceName}` * `{ProcessGroup:GoogleAppEngineInstance}`\n* `{ProcessGroup:GoogleAppEngineService}` * `{ProcessGroup:GoogleCloudProject}` * `{ProcessGroup:HybrisBinDirectory}` *\n`{ProcessGroup:HybrisConfigDirectory}` * `{ProcessGroup:HybrisConfigDirectory}` * `{ProcessGroup:HybrisDataDirectory}` *\n`{ProcessGroup:IBMCicsRegion}` * `{ProcessGroup:IBMCtgName}` * `{ProcessGroup:IBMImsConnectRegion}` *\n`{ProcessGroup:IBMImsControlRegion}` * `{ProcessGroup:IBMImsMessageProcessingRegion}` *\n`{ProcessGroup:IBMImsSoapGwName}` * `{ProcessGroup:IBMIntegrationNodeName}` * `{ProcessGroup:IBMIntegrationServerName}`\n* `{ProcessGroup:IISAppPool}` * `{ProcessGroup:IISRoleName}` * `{ProcessGroup:JbossHome}` * `{ProcessGroup:JbossMode}` *\n`{ProcessGroup:JbossServerName}` * `{ProcessGroup:JavaJarFile}` * `{ProcessGroup:JavaJarPath}` *\n`{ProcessGroup:JavaMainCLass}` * `{ProcessGroup:KubernetesBasePodName}` * `{ProcessGroup:KubernetesContainerName}` *\n`{ProcessGroup:KubernetesFullPodName}` * `{ProcessGroup:KubernetesNamespace}` * `{ProcessGroup:KubernetesPodUid}` *\n`{ProcessGroup:MssqlInstanceName}` * `{ProcessGroup:NodeJsAppBaseDirectory}` * `{ProcessGroup:NodeJsAppName}` *\n`{ProcessGroup:NodeJsScriptName}` * `{ProcessGroup:OracleSid}` * `{ProcessGroup:PHPScriptPath}` *\n`{ProcessGroup:PHPWorkingDirectory}` * `{ProcessGroup:Ports}` * `{ProcessGroup:RubyAppRootPath}` *\n`{ProcessGroup:RubyScriptPath}` * `{ProcessGroup:SoftwareAGInstallRoot}` *\n`{ProcessGroup:SoftwareAGProductPropertyName}` * `{ProcessGroup:SpringBootAppName}` *\n`{ProcessGroup:SpringBootProfileName}` * `{ProcessGroup:SpringBootStartupClass}` *\n`{ProcessGroup:TIBCOBusinessWorksAppNodeName}` * `{ProcessGroup:TIBCOBusinessWorksAppSpaceName}` *\n`{ProcessGroup:TIBCOBusinessWorksCeAppName}` * `{ProcessGroup:TIBCOBusinessWorksCeVersion}` *\n`{ProcessGroup:TIBCOBusinessWorksDomainName}` * `{ProcessGroup:TIBCOBusinessWorksEnginePropertyFilePath}` *\n`{ProcessGroup:TIBCOBusinessWorksEnginePropertyFile}` * `{ProcessGroup:TIBCOBusinessWorksHome}` *\n`{ProcessGroup:VarnishInstanceName}` * `{ProcessGroup:WebLogicClusterName}` * `{ProcessGroup:WebLogicDomainName}` *\n`{ProcessGroup:WebLogicHome}` * `{ProcessGroup:WebLogicName}` * `{ProcessGroup:WebSphereCellName}` *\n`{ProcessGroup:WebSphereClusterName}` * `{ProcessGroup:WebSphereNodeName}` * `{ProcessGroup:WebSphereServerName}` *\n`{ProcessGroup:ActorSystem}` * `{Service:STGServerName}` * `{Service:DatabaseHostName}` * `{Service:DatabaseName}` *\n`{Service:DatabaseVendor}` * `{Service:DetectedName}` * `{Service:EndpointPath}` * `{Service:EndpointPathGatewayUrl}` *\n`{Service:IIBApplicationName}` * `{Service:MessageListenerClassName}` * `{Service:Port}` * `{Service:PublicDomainName}`\n* `{Service:RemoteEndpoint}` * `{Service:RemoteName}` * `{Service:WebApplicationId}` * `{Service:WebContextRoot}` *\n`{Service:WebServerName}` * `{Service:WebServiceNamespace}` * `{Service:WebServiceName}` * `{VmwareDatacenter:Name}` *\n`{VmwareVm:Name}\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the rule\n"
                },
                "unknowns": {
                    "type": "string",
                    "description": "allows for configuring properties that are not explicitly supported by the current version of this provider\n"
                }
            },
            "requiredInputs": [
                "enabled",
                "format"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering HostNaming resources.\n",
                "properties": {
                    "conditions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/dynatrace:index/HostNamingCondition:HostNamingCondition"
                        },
                        "description": "A list of matching conditions of the rule. The rule applies only if **all** conditions are fulfilled\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "The rule is enabled (`true`) or disabled (`false`)\n"
                    },
                    "format": {
                        "type": "string",
                        "description": "The name to be assigned to matching entities. You can use the following placeholders here: *\n`{AwsAutoScalingGroup:Name}` * `{AwsAvailabilityZone:Name}` * `{AwsElasticLoadBalancer:Name}` *\n`{AwsRelationalDatabaseService:DBName}` * `{AwsRelationalDatabaseService:Endpoint}` *\n`{AwsRelationalDatabaseService:Engine}` * `{AwsRelationalDatabaseService:InstanceClass}` *\n`{AwsRelationalDatabaseService:Name}` * `{AwsRelationalDatabaseService:Port}` * `{AzureRegion:Name}` *\n`{AzureScaleSet:Name}` * `{AzureVm:Name}` * `{CloudFoundryOrganization:Name}` * `{CustomDevice:DetectedName}` *\n`{CustomDevice:DnsName}` * `{CustomDevice:IpAddress}` * `{CustomDevice:Port}` *\n`{DockerContainerGroupInstance:ContainerName}` * `{DockerContainerGroupInstance:FullImageName}` *\n`{DockerContainerGroupInstance:ImageVersion}` * `{DockerContainerGroupInstance:StrippedImageName}` *\n`{ESXIHost:HardwareModel}` * `{ESXIHost:HardwareVendor}` * `{ESXIHost:Name}` * `{ESXIHost:ProductName}` *\n`{ESXIHost:ProductVersion}` * `{Ec2Instance:AmiId}` * `{Ec2Instance:BeanstalkEnvironmentName}` *\n`{Ec2Instance:InstanceId}` * `{Ec2Instance:InstanceType}` * `{Ec2Instance:LocalHostName}` * `{Ec2Instance:Name}` *\n`{Ec2Instance:PublicHostName}` * `{Ec2Instance:SecurityGroup}` * `{GoogleComputeInstance:Id}` *\n`{GoogleComputeInstance:IpAddresses}` * `{GoogleComputeInstance:MachineType}` * `{GoogleComputeInstance:Name}` *\n`{GoogleComputeInstance:ProjectId}` * `{GoogleComputeInstance:Project}` * `{Host:AWSNameTag}` *\n`{Host:AixLogicalCpuCount}` * `{Host:AzureHostName}` * `{Host:AzureSiteName}` * `{Host:BoshDeploymentId}` *\n`{Host:BoshInstanceId}` * `{Host:BoshInstanceName}` * `{Host:BoshName}` * `{Host:BoshStemcellVersion}` *\n`{Host:CpuCores}` * `{Host:DetectedName}` * `{Host:Environment:AppName}` * `{Host:Environment:BoshReleaseVersion}` *\n`{Host:Environment:Environment}` * `{Host:Environment:Link}` * `{Host:Environment:Organization}` *\n`{Host:Environment:Owner}` * `{Host:Environment:Support}` * `{Host:IpAddress}` * `{Host:LogicalCpuCores}` *\n`{Host:OneAgentCustomHostName}` * `{Host:OperatingSystemVersion}` * `{Host:PaasMemoryLimit}` * `{HostGroup:Name}` *\n`{KubernetesCluster:Name}` * `{KubernetesNode:DetectedName}` * `{OpenstackAvailabilityZone:Name}` *\n`{OpenstackZone:Name}` * `{OpenstackComputeNode:Name}` * `{OpenstackProject:Name}` * `{OpenstackVm:InstanceType}` *\n`{OpenstackVm:Name}` * `{OpenstackVm:SecurityGroup}` * `{ProcessGroup:AmazonECRImageAccountId}` *\n`{ProcessGroup:AmazonECRImageRegion}` * `{ProcessGroup:AmazonECSCluster}` * `{ProcessGroup:AmazonECSContainerName}` *\n`{ProcessGroup:AmazonECSFamily}` * `{ProcessGroup:AmazonECSRevision}` * `{ProcessGroup:AmazonLambdaFunctionName}` *\n`{ProcessGroup:AmazonRegion}` * `{ProcessGroup:ApacheConfigPath}` * `{ProcessGroup:ApacheSparkMasterIpAddress}` *\n`{ProcessGroup:AspDotNetCoreApplicationPath}` * `{ProcessGroup:AspDotNetCoreApplicationPath}` *\n`{ProcessGroup:AzureHostName}` * `{ProcessGroup:AzureSiteName}` * `{ProcessGroup:CassandraClusterName}` *\n`{ProcessGroup:CatalinaBase}` * `{ProcessGroup:CatalinaHome}` * `{ProcessGroup:CloudFoundryAppId}` *\n`{ProcessGroup:CloudFoundryAppName}` * `{ProcessGroup:CloudFoundryInstanceIndex}` * `{ProcessGroup:CloudFoundrySpaceId}`\n* `{ProcessGroup:CloudFoundrySpaceName}` * `{ProcessGroup:ColdFusionJvmConfigFile}` *\n`{ProcessGroup:ColdFusionServiceName}` * `{ProcessGroup:CommandLineArgs}` * `{ProcessGroup:DetectedName}` *\n`{ProcessGroup:DotNetCommandPath}` * `{ProcessGroup:DotNetCommand}` * `{ProcessGroup:DotNetClusterId}` *\n`{ProcessGroup:DotNetNodeId}` * `{ProcessGroup:ElasticsearchClusterName}` * `{ProcessGroup:ElasticsearchNodeName}` *\n`{ProcessGroup:EquinoxConfigPath}` * `{ProcessGroup:ExeName}` * `{ProcessGroup:ExePath}` *\n`{ProcessGroup:GlassFishDomainName}` * `{ProcessGroup:GlassFishInstanceName}` * `{ProcessGroup:GoogleAppEngineInstance}`\n* `{ProcessGroup:GoogleAppEngineService}` * `{ProcessGroup:GoogleCloudProject}` * `{ProcessGroup:HybrisBinDirectory}` *\n`{ProcessGroup:HybrisConfigDirectory}` * `{ProcessGroup:HybrisConfigDirectory}` * `{ProcessGroup:HybrisDataDirectory}` *\n`{ProcessGroup:IBMCicsRegion}` * `{ProcessGroup:IBMCtgName}` * `{ProcessGroup:IBMImsConnectRegion}` *\n`{ProcessGroup:IBMImsControlRegion}` * `{ProcessGroup:IBMImsMessageProcessingRegion}` *\n`{ProcessGroup:IBMImsSoapGwName}` * `{ProcessGroup:IBMIntegrationNodeName}` * `{ProcessGroup:IBMIntegrationServerName}`\n* `{ProcessGroup:IISAppPool}` * `{ProcessGroup:IISRoleName}` * `{ProcessGroup:JbossHome}` * `{ProcessGroup:JbossMode}` *\n`{ProcessGroup:JbossServerName}` * `{ProcessGroup:JavaJarFile}` * `{ProcessGroup:JavaJarPath}` *\n`{ProcessGroup:JavaMainCLass}` * `{ProcessGroup:KubernetesBasePodName}` * `{ProcessGroup:KubernetesContainerName}` *\n`{ProcessGroup:KubernetesFullPodName}` * `{ProcessGroup:KubernetesNamespace}` * `{ProcessGroup:KubernetesPodUid}` *\n`{ProcessGroup:MssqlInstanceName}` * `{ProcessGroup:NodeJsAppBaseDirectory}` * `{ProcessGroup:NodeJsAppName}` *\n`{ProcessGroup:NodeJsScriptName}` * `{ProcessGroup:OracleSid}` * `{ProcessGroup:PHPScriptPath}` *\n`{ProcessGroup:PHPWorkingDirectory}` * `{ProcessGroup:Ports}` * `{ProcessGroup:RubyAppRootPath}` *\n`{ProcessGroup:RubyScriptPath}` * `{ProcessGroup:SoftwareAGInstallRoot}` *\n`{ProcessGroup:SoftwareAGProductPropertyName}` * `{ProcessGroup:SpringBootAppName}` *\n`{ProcessGroup:SpringBootProfileName}` * `{ProcessGroup:SpringBootStartupClass}` *\n`{ProcessGroup:TIBCOBusinessWorksAppNodeName}` * `{ProcessGroup:TIBCOBusinessWorksAppSpaceName}` *\n`{ProcessGroup:TIBCOBusinessWorksCeAppName}` * `{ProcessGroup:TIBCOBusinessWorksCeVersion}` *\n`{ProcessGroup:TIBCOBusinessWorksDomainName}` * `{ProcessGroup:TIBCOBusinessWorksEnginePropertyFilePath}` *\n`{ProcessGroup:TIBCOBusinessWorksEnginePropertyFile}` * `{ProcessGroup:TIBCOBusinessWorksHome}` *\n`{ProcessGroup:VarnishInstanceName}` * `{ProcessGroup:WebLogicClusterName}` * `{ProcessGroup:WebLogicDomainName}` *\n`{ProcessGroup:WebLogicHome}` * `{ProcessGroup:WebLogicName}` * `{ProcessGroup:WebSphereCellName}` *\n`{ProcessGroup:WebSphereClusterName}` * `{ProcessGroup:WebSphereNodeName}` * `{ProcessGroup:WebSphereServerName}` *\n`{ProcessGroup:ActorSystem}` * `{Service:STGServerName}` * `{Service:DatabaseHostName}` * `{Service:DatabaseName}` *\n`{Service:DatabaseVendor}` * `{Service:DetectedName}` * `{Service:EndpointPath}` * `{Service:EndpointPathGatewayUrl}` *\n`{Service:IIBApplicationName}` * `{Service:MessageListenerClassName}` * `{Service:Port}` * `{Service:PublicDomainName}`\n* `{Service:RemoteEndpoint}` * `{Service:RemoteName}` * `{Service:WebApplicationId}` * `{Service:WebContextRoot}` *\n`{Service:WebServerName}` * `{Service:WebServiceNamespace}` * `{Service:WebServiceName}` * `{VmwareDatacenter:Name}` *\n`{VmwareVm:Name}\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the rule\n"
                    },
                    "unknowns": {
                        "type": "string",
                        "description": "allows for configuring properties that are not explicitly supported by the current version of this provider\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/hostProcessGroupMonitoring:HostProcessGroupMonitoring": {
            "properties": {
                "hostId": {
                    "type": "string",
                    "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.\n"
                },
                "monitoringState": {
                    "type": "string",
                    "description": "Possible Values: `DEFAULT`, `MONITORING_OFF`, `MONITORING_ON`\n"
                },
                "processGroup": {
                    "type": "string",
                    "description": "Process group\n"
                }
            },
            "required": [
                "hostId",
                "monitoringState",
                "processGroup"
            ],
            "inputProperties": {
                "hostId": {
                    "type": "string",
                    "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.\n",
                    "willReplaceOnChanges": true
                },
                "monitoringState": {
                    "type": "string",
                    "description": "Possible Values: `DEFAULT`, `MONITORING_OFF`, `MONITORING_ON`\n"
                },
                "processGroup": {
                    "type": "string",
                    "description": "Process group\n"
                }
            },
            "requiredInputs": [
                "hostId",
                "monitoringState",
                "processGroup"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering HostProcessGroupMonitoring resources.\n",
                "properties": {
                    "hostId": {
                        "type": "string",
                        "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.\n",
                        "willReplaceOnChanges": true
                    },
                    "monitoringState": {
                        "type": "string",
                        "description": "Possible Values: `DEFAULT`, `MONITORING_OFF`, `MONITORING_ON`\n"
                    },
                    "processGroup": {
                        "type": "string",
                        "description": "Process group\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/httpMonitor:HttpMonitor": {
            "properties": {
                "anomalyDetections": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/HttpMonitorAnomalyDetection:HttpMonitorAnomalyDetection"
                    },
                    "description": "The anomaly detection configuration.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "The monitor is enabled (`true`) or disabled (`false`).\n"
                },
                "frequency": {
                    "type": "integer",
                    "description": "The frequency of the monitor, in minutes. You can use one of the following values: `5`, `10`, `15`, `30`, and `60`.\n"
                },
                "locations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of locations from which the monitor is executed. To specify a location, use its entity ID.\n"
                },
                "manuallyAssignedApps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of manually assigned applications.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the monitor.\n"
                },
                "noScript": {
                    "type": "boolean",
                    "description": "No script block - handle requests via `dynatrace_http_monitor_script` resource\n"
                },
                "script": {
                    "$ref": "#/types/dynatrace:index/HttpMonitorScript:HttpMonitorScript",
                    "description": "The HTTP Script\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/HttpMonitorTag:HttpMonitorTag"
                    },
                    "description": "A set of tags assigned to the monitor. You can specify only the value of the tag here and the `CONTEXTLESS` context and\nsource 'USER' will be added automatically.\n"
                }
            },
            "required": [
                "frequency",
                "name"
            ],
            "inputProperties": {
                "anomalyDetections": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/HttpMonitorAnomalyDetection:HttpMonitorAnomalyDetection"
                    },
                    "description": "The anomaly detection configuration.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "The monitor is enabled (`true`) or disabled (`false`).\n"
                },
                "frequency": {
                    "type": "integer",
                    "description": "The frequency of the monitor, in minutes. You can use one of the following values: `5`, `10`, `15`, `30`, and `60`.\n"
                },
                "locations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of locations from which the monitor is executed. To specify a location, use its entity ID.\n"
                },
                "manuallyAssignedApps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of manually assigned applications.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the monitor.\n"
                },
                "noScript": {
                    "type": "boolean",
                    "description": "No script block - handle requests via `dynatrace_http_monitor_script` resource\n"
                },
                "script": {
                    "$ref": "#/types/dynatrace:index/HttpMonitorScript:HttpMonitorScript",
                    "description": "The HTTP Script\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/HttpMonitorTag:HttpMonitorTag"
                    },
                    "description": "A set of tags assigned to the monitor. You can specify only the value of the tag here and the `CONTEXTLESS` context and\nsource 'USER' will be added automatically.\n"
                }
            },
            "requiredInputs": [
                "frequency"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering HttpMonitor resources.\n",
                "properties": {
                    "anomalyDetections": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/dynatrace:index/HttpMonitorAnomalyDetection:HttpMonitorAnomalyDetection"
                        },
                        "description": "The anomaly detection configuration.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "The monitor is enabled (`true`) or disabled (`false`).\n"
                    },
                    "frequency": {
                        "type": "integer",
                        "description": "The frequency of the monitor, in minutes. You can use one of the following values: `5`, `10`, `15`, `30`, and `60`.\n"
                    },
                    "locations": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of locations from which the monitor is executed. To specify a location, use its entity ID.\n"
                    },
                    "manuallyAssignedApps": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A set of manually assigned applications.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the monitor.\n"
                    },
                    "noScript": {
                        "type": "boolean",
                        "description": "No script block - handle requests via `dynatrace_http_monitor_script` resource\n"
                    },
                    "script": {
                        "$ref": "#/types/dynatrace:index/HttpMonitorScript:HttpMonitorScript",
                        "description": "The HTTP Script\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/dynatrace:index/HttpMonitorTag:HttpMonitorTag"
                        },
                        "description": "A set of tags assigned to the monitor. You can specify only the value of the tag here and the `CONTEXTLESS` context and\nsource 'USER' will be added automatically.\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/httpMonitorCookies:HttpMonitorCookies": {
            "properties": {
                "cookies": {
                    "$ref": "#/types/dynatrace:index/HttpMonitorCookiesCookies:HttpMonitorCookiesCookies",
                    "description": "no documentation available\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of this setting (HTTP_CHECK)\n"
                }
            },
            "required": [
                "enabled",
                "scope"
            ],
            "inputProperties": {
                "cookies": {
                    "$ref": "#/types/dynatrace:index/HttpMonitorCookiesCookies:HttpMonitorCookiesCookies",
                    "description": "no documentation available\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of this setting (HTTP_CHECK)\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "enabled",
                "scope"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering HttpMonitorCookies resources.\n",
                "properties": {
                    "cookies": {
                        "$ref": "#/types/dynatrace:index/HttpMonitorCookiesCookies:HttpMonitorCookiesCookies",
                        "description": "no documentation available\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                    },
                    "scope": {
                        "type": "string",
                        "description": "The scope of this setting (HTTP_CHECK)\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/httpMonitorOutage:HttpMonitorOutage": {
            "properties": {
                "globalConsecutiveOutageCountThreshold": {
                    "type": "integer",
                    "description": "(Field has overlap with `dynatrace_http_monitor`) Alert if all locations are unable to access my web application\n"
                },
                "globalOutages": {
                    "type": "boolean",
                    "description": "(Field has overlap with `dynatrace_http_monitor`) Generate a problem and send an alert when the monitor is unavailable\nat all configured locations.\n"
                },
                "localConsecutiveOutageCountThreshold": {
                    "type": "integer",
                    "description": "(Field has overlap with `dynatrace_http_monitor`) are unable to access my web application\n"
                },
                "localLocationOutageCountThreshold": {
                    "type": "integer",
                    "description": "(Field has overlap with `dynatrace_http_monitor`) Alert if at least\n"
                },
                "localOutages": {
                    "type": "boolean",
                    "description": "(Field has overlap with `dynatrace_http_monitor`) Generate a problem and send an alert when the monitor is unavailable\nfor one or more consecutive runs at any location.\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of this setting (HTTP_CHECK). Omit this property if you want to cover the whole environment.\n"
                }
            },
            "required": [
                "globalOutages",
                "localOutages"
            ],
            "inputProperties": {
                "globalConsecutiveOutageCountThreshold": {
                    "type": "integer",
                    "description": "(Field has overlap with `dynatrace_http_monitor`) Alert if all locations are unable to access my web application\n"
                },
                "globalOutages": {
                    "type": "boolean",
                    "description": "(Field has overlap with `dynatrace_http_monitor`) Generate a problem and send an alert when the monitor is unavailable\nat all configured locations.\n"
                },
                "localConsecutiveOutageCountThreshold": {
                    "type": "integer",
                    "description": "(Field has overlap with `dynatrace_http_monitor`) are unable to access my web application\n"
                },
                "localLocationOutageCountThreshold": {
                    "type": "integer",
                    "description": "(Field has overlap with `dynatrace_http_monitor`) Alert if at least\n"
                },
                "localOutages": {
                    "type": "boolean",
                    "description": "(Field has overlap with `dynatrace_http_monitor`) Generate a problem and send an alert when the monitor is unavailable\nfor one or more consecutive runs at any location.\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of this setting (HTTP_CHECK). Omit this property if you want to cover the whole environment.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "globalOutages",
                "localOutages"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering HttpMonitorOutage resources.\n",
                "properties": {
                    "globalConsecutiveOutageCountThreshold": {
                        "type": "integer",
                        "description": "(Field has overlap with `dynatrace_http_monitor`) Alert if all locations are unable to access my web application\n"
                    },
                    "globalOutages": {
                        "type": "boolean",
                        "description": "(Field has overlap with `dynatrace_http_monitor`) Generate a problem and send an alert when the monitor is unavailable\nat all configured locations.\n"
                    },
                    "localConsecutiveOutageCountThreshold": {
                        "type": "integer",
                        "description": "(Field has overlap with `dynatrace_http_monitor`) are unable to access my web application\n"
                    },
                    "localLocationOutageCountThreshold": {
                        "type": "integer",
                        "description": "(Field has overlap with `dynatrace_http_monitor`) Alert if at least\n"
                    },
                    "localOutages": {
                        "type": "boolean",
                        "description": "(Field has overlap with `dynatrace_http_monitor`) Generate a problem and send an alert when the monitor is unavailable\nfor one or more consecutive runs at any location.\n"
                    },
                    "scope": {
                        "type": "string",
                        "description": "The scope of this setting (HTTP_CHECK). Omit this property if you want to cover the whole environment.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/httpMonitorPerformance:HttpMonitorPerformance": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of this setting (HTTP_CHECK)\n"
                },
                "thresholds": {
                    "$ref": "#/types/dynatrace:index/HttpMonitorPerformanceThresholds:HttpMonitorPerformanceThresholds",
                    "description": "Performance thresholds\n"
                }
            },
            "required": [
                "enabled",
                "scope"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of this setting (HTTP_CHECK)\n",
                    "willReplaceOnChanges": true
                },
                "thresholds": {
                    "$ref": "#/types/dynatrace:index/HttpMonitorPerformanceThresholds:HttpMonitorPerformanceThresholds",
                    "description": "Performance thresholds\n"
                }
            },
            "requiredInputs": [
                "enabled",
                "scope"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering HttpMonitorPerformance resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                    },
                    "scope": {
                        "type": "string",
                        "description": "The scope of this setting (HTTP_CHECK)\n",
                        "willReplaceOnChanges": true
                    },
                    "thresholds": {
                        "$ref": "#/types/dynatrace:index/HttpMonitorPerformanceThresholds:HttpMonitorPerformanceThresholds",
                        "description": "Performance thresholds\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/httpMonitorScript:HttpMonitorScript": {
            "properties": {
                "httpId": {
                    "type": "string",
                    "description": "The ID of the HTTP monitor\n"
                },
                "script": {
                    "$ref": "#/types/dynatrace:index/HttpMonitorScriptScript:HttpMonitorScriptScript",
                    "description": "The HTTP Script\n"
                }
            },
            "required": [
                "httpId",
                "script"
            ],
            "inputProperties": {
                "httpId": {
                    "type": "string",
                    "description": "The ID of the HTTP monitor\n"
                },
                "script": {
                    "$ref": "#/types/dynatrace:index/HttpMonitorScriptScript:HttpMonitorScriptScript",
                    "description": "The HTTP Script\n"
                }
            },
            "requiredInputs": [
                "httpId",
                "script"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering HttpMonitorScript resources.\n",
                "properties": {
                    "httpId": {
                        "type": "string",
                        "description": "The ID of the HTTP monitor\n"
                    },
                    "script": {
                        "$ref": "#/types/dynatrace:index/HttpMonitorScriptScript:HttpMonitorScriptScript",
                        "description": "The HTTP Script\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/hubExtensionActiveVersion:HubExtensionActiveVersion": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The fully qualified name of the extension, such as `com.dynatrace.extension.jmx-liberty-cp`. You can query for these\nnames using the data source `dynatrace_hub_items`\n"
                },
                "version": {
                    "type": "string",
                    "description": "The version that should be active\n"
                }
            },
            "required": [
                "name",
                "version"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The fully qualified name of the extension, such as `com.dynatrace.extension.jmx-liberty-cp`. You can query for these\nnames using the data source `dynatrace_hub_items`\n",
                    "willReplaceOnChanges": true
                },
                "version": {
                    "type": "string",
                    "description": "The version that should be active\n"
                }
            },
            "requiredInputs": [
                "version"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering HubExtensionActiveVersion resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The fully qualified name of the extension, such as `com.dynatrace.extension.jmx-liberty-cp`. You can query for these\nnames using the data source `dynatrace_hub_items`\n",
                        "willReplaceOnChanges": true
                    },
                    "version": {
                        "type": "string",
                        "description": "The version that should be active\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/hubExtensionConfig:HubExtensionConfig": {
            "properties": {
                "activeGateGroup": {
                    "type": "string",
                    "description": "The name of the Active Gate Group this monitoring configuration will be defined for\n"
                },
                "host": {
                    "type": "string",
                    "description": "The ID of the host this monitoring configuration will be defined for\n"
                },
                "hostGroup": {
                    "type": "string",
                    "description": "The ID of the host group this monitoring configuration will be defined for\n"
                },
                "managementZone": {
                    "type": "string",
                    "description": "The name of the Management Zone this monitoring configuration will be defined for\n"
                },
                "name": {
                    "type": "string",
                    "description": "The fully qualified name of the extension, such as `com.dynatrace.extension.jmx-liberty-cp`. You can query for these\nnames using the data source `dynatrace_hub_items`\n"
                },
                "value": {
                    "type": "string",
                    "description": "The JSON encoded value for this monitoring configuration\n"
                }
            },
            "required": [
                "name",
                "value"
            ],
            "inputProperties": {
                "activeGateGroup": {
                    "type": "string",
                    "description": "The name of the Active Gate Group this monitoring configuration will be defined for\n",
                    "willReplaceOnChanges": true
                },
                "host": {
                    "type": "string",
                    "description": "The ID of the host this monitoring configuration will be defined for\n",
                    "willReplaceOnChanges": true
                },
                "hostGroup": {
                    "type": "string",
                    "description": "The ID of the host group this monitoring configuration will be defined for\n",
                    "willReplaceOnChanges": true
                },
                "managementZone": {
                    "type": "string",
                    "description": "The name of the Management Zone this monitoring configuration will be defined for\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The fully qualified name of the extension, such as `com.dynatrace.extension.jmx-liberty-cp`. You can query for these\nnames using the data source `dynatrace_hub_items`\n",
                    "willReplaceOnChanges": true
                },
                "value": {
                    "type": "string",
                    "description": "The JSON encoded value for this monitoring configuration\n"
                }
            },
            "requiredInputs": [
                "value"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering HubExtensionConfig resources.\n",
                "properties": {
                    "activeGateGroup": {
                        "type": "string",
                        "description": "The name of the Active Gate Group this monitoring configuration will be defined for\n",
                        "willReplaceOnChanges": true
                    },
                    "host": {
                        "type": "string",
                        "description": "The ID of the host this monitoring configuration will be defined for\n",
                        "willReplaceOnChanges": true
                    },
                    "hostGroup": {
                        "type": "string",
                        "description": "The ID of the host group this monitoring configuration will be defined for\n",
                        "willReplaceOnChanges": true
                    },
                    "managementZone": {
                        "type": "string",
                        "description": "The name of the Management Zone this monitoring configuration will be defined for\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The fully qualified name of the extension, such as `com.dynatrace.extension.jmx-liberty-cp`. You can query for these\nnames using the data source `dynatrace_hub_items`\n",
                        "willReplaceOnChanges": true
                    },
                    "value": {
                        "type": "string",
                        "description": "The JSON encoded value for this monitoring configuration\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/hubSubscriptions:HubSubscriptions": {
            "properties": {
                "tokenSubscriptions": {
                    "$ref": "#/types/dynatrace:index/HubSubscriptionsTokenSubscriptions:HubSubscriptionsTokenSubscriptions",
                    "description": "Subscriptions\n"
                }
            },
            "inputProperties": {
                "tokenSubscriptions": {
                    "$ref": "#/types/dynatrace:index/HubSubscriptionsTokenSubscriptions:HubSubscriptionsTokenSubscriptions",
                    "description": "Subscriptions\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering HubSubscriptions resources.\n",
                "properties": {
                    "tokenSubscriptions": {
                        "$ref": "#/types/dynatrace:index/HubSubscriptionsTokenSubscriptions:HubSubscriptionsTokenSubscriptions",
                        "description": "Subscriptions\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/iamGroup:IamGroup": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "federatedAttributeValues": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                },
                "permissions": {
                    "$ref": "#/types/dynatrace:index/IamGroupPermissions:IamGroupPermissions"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "description": {
                    "type": "string"
                },
                "federatedAttributeValues": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                },
                "permissions": {
                    "$ref": "#/types/dynatrace:index/IamGroupPermissions:IamGroupPermissions"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IamGroup resources.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "federatedAttributeValues": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "permissions": {
                        "$ref": "#/types/dynatrace:index/IamGroupPermissions:IamGroupPermissions"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/iamPermission:IamPermission": {
            "properties": {
                "account": {
                    "type": "string",
                    "description": "The UUID of the account this permission is valid for\n"
                },
                "environment": {
                    "type": "string",
                    "description": "The environment this permission is valid (`https://\u003cenvironmentid\u003e.live.dynatrace.com`). Also required in when trying to\nspecify a management zone permission.\n"
                },
                "group": {
                    "type": "string",
                    "description": "The ID of the group this permission is valid for\n"
                },
                "managementZone": {
                    "type": "string",
                    "description": "The management zone this permission is valid for. You need to use the attribute `legacy_id` when referring to a resource\n`dynatrace_management_zone_v2` or a data source `dynatrace_management_zone`. The attribute `environment` is required to\nget specified also in order to identify the management zone uniquely.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Possible values: `account-company-info`, `account-user-management`, `account-viewer`,\n`account-saml-flexible-federation`, `tenant-viewer`, `tenant-manage-settings`, `tenant-agent-install`,\n`tenant-logviewer`, `tenant-view-sensitive-request-data`, `tenant-configure-request-capture-data`,\n`tenant-replay-sessions-with-masking`, `tenant-replay-sessions-without-masking`, `tenant-manage-security-problems`,\n`tenant-view-security-problems`, `tenant-manage-support-tickets`\n"
                }
            },
            "required": [
                "group",
                "name"
            ],
            "inputProperties": {
                "account": {
                    "type": "string",
                    "description": "The UUID of the account this permission is valid for\n",
                    "willReplaceOnChanges": true
                },
                "environment": {
                    "type": "string",
                    "description": "The environment this permission is valid (`https://\u003cenvironmentid\u003e.live.dynatrace.com`). Also required in when trying to\nspecify a management zone permission.\n",
                    "willReplaceOnChanges": true
                },
                "group": {
                    "type": "string",
                    "description": "The ID of the group this permission is valid for\n",
                    "willReplaceOnChanges": true
                },
                "managementZone": {
                    "type": "string",
                    "description": "The management zone this permission is valid for. You need to use the attribute `legacy_id` when referring to a resource\n`dynatrace_management_zone_v2` or a data source `dynatrace_management_zone`. The attribute `environment` is required to\nget specified also in order to identify the management zone uniquely.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Possible values: `account-company-info`, `account-user-management`, `account-viewer`,\n`account-saml-flexible-federation`, `tenant-viewer`, `tenant-manage-settings`, `tenant-agent-install`,\n`tenant-logviewer`, `tenant-view-sensitive-request-data`, `tenant-configure-request-capture-data`,\n`tenant-replay-sessions-with-masking`, `tenant-replay-sessions-without-masking`, `tenant-manage-security-problems`,\n`tenant-view-security-problems`, `tenant-manage-support-tickets`\n"
                }
            },
            "requiredInputs": [
                "group"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IamPermission resources.\n",
                "properties": {
                    "account": {
                        "type": "string",
                        "description": "The UUID of the account this permission is valid for\n",
                        "willReplaceOnChanges": true
                    },
                    "environment": {
                        "type": "string",
                        "description": "The environment this permission is valid (`https://\u003cenvironmentid\u003e.live.dynatrace.com`). Also required in when trying to\nspecify a management zone permission.\n",
                        "willReplaceOnChanges": true
                    },
                    "group": {
                        "type": "string",
                        "description": "The ID of the group this permission is valid for\n",
                        "willReplaceOnChanges": true
                    },
                    "managementZone": {
                        "type": "string",
                        "description": "The management zone this permission is valid for. You need to use the attribute `legacy_id` when referring to a resource\n`dynatrace_management_zone_v2` or a data source `dynatrace_management_zone`. The attribute `environment` is required to\nget specified also in order to identify the management zone uniquely.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Possible values: `account-company-info`, `account-user-management`, `account-viewer`,\n`account-saml-flexible-federation`, `tenant-viewer`, `tenant-manage-settings`, `tenant-agent-install`,\n`tenant-logviewer`, `tenant-view-sensitive-request-data`, `tenant-configure-request-capture-data`,\n`tenant-replay-sessions-with-masking`, `tenant-replay-sessions-without-masking`, `tenant-manage-security-problems`,\n`tenant-view-security-problems`, `tenant-manage-support-tickets`\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/iamPolicy:IamPolicy": {
            "properties": {
                "account": {
                    "type": "string",
                    "description": "The UUID of the account (`urn:dtaccount:\u003caccount-uuid\u003e`) in case the policy should be applied to all environments of\nthis account. The prefix `urn:dtaccount:` MUST be omitted here.\n"
                },
                "description": {
                    "type": "string",
                    "description": "An optional description text for the policy\n"
                },
                "environment": {
                    "type": "string",
                    "description": "The ID of the environment (https://\u003cenvironmentid\u003e.live.dynatrace.com) if the policy should be applied to a specific\nenvironment\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the policy\n"
                },
                "statementQuery": {
                    "type": "string",
                    "description": "The Statement Query of the policy\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags for this policy\n"
                }
            },
            "required": [
                "name",
                "statementQuery"
            ],
            "inputProperties": {
                "account": {
                    "type": "string",
                    "description": "The UUID of the account (`urn:dtaccount:\u003caccount-uuid\u003e`) in case the policy should be applied to all environments of\nthis account. The prefix `urn:dtaccount:` MUST be omitted here.\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "An optional description text for the policy\n"
                },
                "environment": {
                    "type": "string",
                    "description": "The ID of the environment (https://\u003cenvironmentid\u003e.live.dynatrace.com) if the policy should be applied to a specific\nenvironment\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The name of the policy\n"
                },
                "statementQuery": {
                    "type": "string",
                    "description": "The Statement Query of the policy\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags for this policy\n"
                }
            },
            "requiredInputs": [
                "statementQuery"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IamPolicy resources.\n",
                "properties": {
                    "account": {
                        "type": "string",
                        "description": "The UUID of the account (`urn:dtaccount:\u003caccount-uuid\u003e`) in case the policy should be applied to all environments of\nthis account. The prefix `urn:dtaccount:` MUST be omitted here.\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "An optional description text for the policy\n"
                    },
                    "environment": {
                        "type": "string",
                        "description": "The ID of the environment (https://\u003cenvironmentid\u003e.live.dynatrace.com) if the policy should be applied to a specific\nenvironment\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the policy\n"
                    },
                    "statementQuery": {
                        "type": "string",
                        "description": "The Statement Query of the policy\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags for this policy\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/iamPolicyBindings:IamPolicyBindings": {
            "properties": {
                "account": {
                    "type": "string",
                    "description": "The UUID of the account (`urn:dtaccount:\u003caccount-uuid\u003e`). The attribute `policies` must contain ONLY policies defined\nfor that account. The prefix `urn:dtaccount:` MUST be omitted here.\n"
                },
                "environment": {
                    "type": "string",
                    "description": "The ID of the environment (https://\u003cenvironmentid\u003e.live.dynatrace.com). The attribute `policies` must contain ONLY\npolicies defined for that environment.\n"
                },
                "group": {
                    "type": "string",
                    "description": "The name of the policy\n"
                },
                "policies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of IDs referring to policies bound to that group. It's not possible to mix policies here that are defined for\ndifferent scopes (different accounts or environments) than specified via attributes `account` or `environment`.\n"
                }
            },
            "required": [
                "group",
                "policies"
            ],
            "inputProperties": {
                "account": {
                    "type": "string",
                    "description": "The UUID of the account (`urn:dtaccount:\u003caccount-uuid\u003e`). The attribute `policies` must contain ONLY policies defined\nfor that account. The prefix `urn:dtaccount:` MUST be omitted here.\n",
                    "willReplaceOnChanges": true
                },
                "environment": {
                    "type": "string",
                    "description": "The ID of the environment (https://\u003cenvironmentid\u003e.live.dynatrace.com). The attribute `policies` must contain ONLY\npolicies defined for that environment.\n",
                    "willReplaceOnChanges": true
                },
                "group": {
                    "type": "string",
                    "description": "The name of the policy\n",
                    "willReplaceOnChanges": true
                },
                "policies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of IDs referring to policies bound to that group. It's not possible to mix policies here that are defined for\ndifferent scopes (different accounts or environments) than specified via attributes `account` or `environment`.\n"
                }
            },
            "requiredInputs": [
                "group",
                "policies"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IamPolicyBindings resources.\n",
                "properties": {
                    "account": {
                        "type": "string",
                        "description": "The UUID of the account (`urn:dtaccount:\u003caccount-uuid\u003e`). The attribute `policies` must contain ONLY policies defined\nfor that account. The prefix `urn:dtaccount:` MUST be omitted here.\n",
                        "willReplaceOnChanges": true
                    },
                    "environment": {
                        "type": "string",
                        "description": "The ID of the environment (https://\u003cenvironmentid\u003e.live.dynatrace.com). The attribute `policies` must contain ONLY\npolicies defined for that environment.\n",
                        "willReplaceOnChanges": true
                    },
                    "group": {
                        "type": "string",
                        "description": "The name of the policy\n",
                        "willReplaceOnChanges": true
                    },
                    "policies": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of IDs referring to policies bound to that group. It's not possible to mix policies here that are defined for\ndifferent scopes (different accounts or environments) than specified via attributes `account` or `environment`.\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/iamPolicyBindingsV2:IamPolicyBindingsV2": {
            "properties": {
                "account": {
                    "type": "string",
                    "description": "The UUID of the account (`urn:dtaccount:\u003caccount-uuid\u003e`). The attribute `policies` must contain ONLY policies defined\nfor that account. The prefix `urn:dtaccount:` MUST be omitted here.\n"
                },
                "environment": {
                    "type": "string",
                    "description": "The ID of the environment (https://\u003cenvironmentid\u003e.live.dynatrace.com). The attribute `policies` must contain ONLY\npolicies defined for that environment.\n"
                },
                "group": {
                    "type": "string",
                    "description": "The name of the policy\n"
                },
                "policies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/IamPolicyBindingsV2Policy:IamPolicyBindingsV2Policy"
                    },
                    "description": "A list of Policies (ID and parameters/metadata) referring to policies bound to that group. It's not possible to mix\npolicies here that are defined for different scopes (different accounts or environments) than specified via attributes\n`account` or `environment`.\n"
                }
            },
            "required": [
                "group"
            ],
            "inputProperties": {
                "account": {
                    "type": "string",
                    "description": "The UUID of the account (`urn:dtaccount:\u003caccount-uuid\u003e`). The attribute `policies` must contain ONLY policies defined\nfor that account. The prefix `urn:dtaccount:` MUST be omitted here.\n",
                    "willReplaceOnChanges": true
                },
                "environment": {
                    "type": "string",
                    "description": "The ID of the environment (https://\u003cenvironmentid\u003e.live.dynatrace.com). The attribute `policies` must contain ONLY\npolicies defined for that environment.\n",
                    "willReplaceOnChanges": true
                },
                "group": {
                    "type": "string",
                    "description": "The name of the policy\n",
                    "willReplaceOnChanges": true
                },
                "policies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/IamPolicyBindingsV2Policy:IamPolicyBindingsV2Policy"
                    },
                    "description": "A list of Policies (ID and parameters/metadata) referring to policies bound to that group. It's not possible to mix\npolicies here that are defined for different scopes (different accounts or environments) than specified via attributes\n`account` or `environment`.\n"
                }
            },
            "requiredInputs": [
                "group"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IamPolicyBindingsV2 resources.\n",
                "properties": {
                    "account": {
                        "type": "string",
                        "description": "The UUID of the account (`urn:dtaccount:\u003caccount-uuid\u003e`). The attribute `policies` must contain ONLY policies defined\nfor that account. The prefix `urn:dtaccount:` MUST be omitted here.\n",
                        "willReplaceOnChanges": true
                    },
                    "environment": {
                        "type": "string",
                        "description": "The ID of the environment (https://\u003cenvironmentid\u003e.live.dynatrace.com). The attribute `policies` must contain ONLY\npolicies defined for that environment.\n",
                        "willReplaceOnChanges": true
                    },
                    "group": {
                        "type": "string",
                        "description": "The name of the policy\n",
                        "willReplaceOnChanges": true
                    },
                    "policies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/dynatrace:index/IamPolicyBindingsV2Policy:IamPolicyBindingsV2Policy"
                        },
                        "description": "A list of Policies (ID and parameters/metadata) referring to policies bound to that group. It's not possible to mix\npolicies here that are defined for different scopes (different accounts or environments) than specified via attributes\n`account` or `environment`.\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/iamUser:IamUser": {
            "properties": {
                "email": {
                    "type": "string"
                },
                "groups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "uid": {
                    "type": "string"
                }
            },
            "required": [
                "email",
                "uid"
            ],
            "inputProperties": {
                "email": {
                    "type": "string"
                },
                "groups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "requiredInputs": [
                "email"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IamUser resources.\n",
                "properties": {
                    "email": {
                        "type": "string"
                    },
                    "groups": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "uid": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/ibmMqFilters:IbmMqFilters": {
            "properties": {
                "cicsMqQueueIdExcludes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "CICS: Excluded MQ queues\n"
                },
                "cicsMqQueueIdIncludes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "CICS: Included MQ queues\n"
                },
                "imsCrTrnIdExcludes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "When you add a transaction ID to the exclude list remaining transactions are still monitored.\n"
                },
                "imsCrTrnIdIncludes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "When you add a transaction ID to the include list, all the remaining transactions are ignored.\n"
                },
                "imsMqQueueIdExcludes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "IMS: Excluded MQ queues\n"
                },
                "imsMqQueueIdIncludes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "IMS: Included MQ queues\n"
                }
            },
            "inputProperties": {
                "cicsMqQueueIdExcludes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "CICS: Excluded MQ queues\n"
                },
                "cicsMqQueueIdIncludes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "CICS: Included MQ queues\n"
                },
                "imsCrTrnIdExcludes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "When you add a transaction ID to the exclude list remaining transactions are still monitored.\n"
                },
                "imsCrTrnIdIncludes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "When you add a transaction ID to the include list, all the remaining transactions are ignored.\n"
                },
                "imsMqQueueIdExcludes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "IMS: Excluded MQ queues\n"
                },
                "imsMqQueueIdIncludes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "IMS: Included MQ queues\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IbmMqFilters resources.\n",
                "properties": {
                    "cicsMqQueueIdExcludes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "CICS: Excluded MQ queues\n"
                    },
                    "cicsMqQueueIdIncludes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "CICS: Included MQ queues\n"
                    },
                    "imsCrTrnIdExcludes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "When you add a transaction ID to the exclude list remaining transactions are still monitored.\n"
                    },
                    "imsCrTrnIdIncludes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "When you add a transaction ID to the include list, all the remaining transactions are ignored.\n"
                    },
                    "imsMqQueueIdExcludes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "IMS: Excluded MQ queues\n"
                    },
                    "imsMqQueueIdIncludes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "IMS: Included MQ queues\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/imsBridges:ImsBridges": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the IMS bridge\n"
                },
                "queueManagers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ImsBridgesQueueManager:ImsBridgesQueueManager"
                    },
                    "description": "Queue manager(s) that belong to the IMS bridge\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The name of the IMS bridge\n"
                },
                "queueManagers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ImsBridgesQueueManager:ImsBridgesQueueManager"
                    },
                    "description": "Queue manager(s) that belong to the IMS bridge\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ImsBridges resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the IMS bridge\n"
                    },
                    "queueManagers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/dynatrace:index/ImsBridgesQueueManager:ImsBridgesQueueManager"
                        },
                        "description": "Queue manager(s) that belong to the IMS bridge\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/infraopsAppFeatureFlags:InfraopsAppFeatureFlags": {
            "properties": {
                "booleanValue": {
                    "type": "boolean",
                    "description": "State of boolean feature\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the feature\n"
                },
                "numberValue": {
                    "type": "integer",
                    "description": "State of numeric feature\n"
                },
                "stringValue": {
                    "type": "string",
                    "description": "State of textual feature\n"
                },
                "type": {
                    "type": "string",
                    "description": "Possible Values: `Boolean`, `Number`, `String`\n"
                }
            },
            "required": [
                "name",
                "type"
            ],
            "inputProperties": {
                "booleanValue": {
                    "type": "boolean",
                    "description": "State of boolean feature\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the feature\n"
                },
                "numberValue": {
                    "type": "integer",
                    "description": "State of numeric feature\n"
                },
                "stringValue": {
                    "type": "string",
                    "description": "State of textual feature\n"
                },
                "type": {
                    "type": "string",
                    "description": "Possible Values: `Boolean`, `Number`, `String`\n"
                }
            },
            "requiredInputs": [
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering InfraopsAppFeatureFlags resources.\n",
                "properties": {
                    "booleanValue": {
                        "type": "boolean",
                        "description": "State of boolean feature\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the feature\n"
                    },
                    "numberValue": {
                        "type": "integer",
                        "description": "State of numeric feature\n"
                    },
                    "stringValue": {
                        "type": "string",
                        "description": "State of textual feature\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Possible Values: `Boolean`, `Number`, `String`\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/ipAddressMasking:IpAddressMasking": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of this setting (MOBILE_APPLICATION, CUSTOM_APPLICATION, APPLICATION). Omit this property if you want to cover\nthe whole environment.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Possible Values: `all`, `public`\n"
                }
            },
            "required": [
                "enabled"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of this setting (MOBILE_APPLICATION, CUSTOM_APPLICATION, APPLICATION). Omit this property if you want to cover\nthe whole environment.\n",
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "description": "Possible Values: `all`, `public`\n"
                }
            },
            "requiredInputs": [
                "enabled"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IpAddressMasking resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                    },
                    "scope": {
                        "type": "string",
                        "description": "The scope of this setting (MOBILE_APPLICATION, CUSTOM_APPLICATION, APPLICATION). Omit this property if you want to cover\nthe whole environment.\n",
                        "willReplaceOnChanges": true
                    },
                    "type": {
                        "type": "string",
                        "description": "Possible Values: `all`, `public`\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/issueTracking:IssueTracking": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "insertAfter": {
                    "type": "string",
                    "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                },
                "issuelabel": {
                    "type": "string",
                    "description": "Set a label to identify these issues, for example, `release_blocker` or `non-critical`\n"
                },
                "issuequery": {
                    "type": "string",
                    "description": "You can use the following placeholders to automatically insert values from the **Release monitoring** page in your\nquery: `{NAME}`, `{VERSION}`, `{STAGE}`, `{PRODUCT}`.\n"
                },
                "issuetheme": {
                    "type": "string",
                    "description": "Possible Values: `ERROR`, `INFO`, `RESOLVED`\n"
                },
                "issuetrackersystem": {
                    "type": "string",
                    "description": "Possible Values: `GITHUB`, `GITLAB`, `JIRA`, `JIRA_CLOUD`, `JIRA_ON_PREMISE`, `SERVICENOW`\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password\n"
                },
                "token": {
                    "type": "string",
                    "description": "Token\n",
                    "secret": true
                },
                "url": {
                    "type": "string",
                    "description": "For Jira, use the base URL (for example, https://jira.yourcompany.com); for GitHub, use the repository URL (for example,\nhttps://github.com/org/repo); for GitLab, use the specific project API for a single project (for example,\nhttps://gitlab.com/api/v4/projects/:projectId), and the specific group API for a multiple projects (for example,\nhttps://gitlab.com/api/v4/groups/:groupId); for ServiceNow, use your company instance URL (for example,\nhttps://yourinstance.service-now.com/)\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username\n"
                }
            },
            "required": [
                "enabled",
                "insertAfter",
                "issuelabel",
                "issuequery",
                "issuetheme",
                "issuetrackersystem",
                "url",
                "username"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "insertAfter": {
                    "type": "string",
                    "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                },
                "issuelabel": {
                    "type": "string",
                    "description": "Set a label to identify these issues, for example, `release_blocker` or `non-critical`\n"
                },
                "issuequery": {
                    "type": "string",
                    "description": "You can use the following placeholders to automatically insert values from the **Release monitoring** page in your\nquery: `{NAME}`, `{VERSION}`, `{STAGE}`, `{PRODUCT}`.\n"
                },
                "issuetheme": {
                    "type": "string",
                    "description": "Possible Values: `ERROR`, `INFO`, `RESOLVED`\n"
                },
                "issuetrackersystem": {
                    "type": "string",
                    "description": "Possible Values: `GITHUB`, `GITLAB`, `JIRA`, `JIRA_CLOUD`, `JIRA_ON_PREMISE`, `SERVICENOW`\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password\n"
                },
                "token": {
                    "type": "string",
                    "description": "Token\n",
                    "secret": true
                },
                "url": {
                    "type": "string",
                    "description": "For Jira, use the base URL (for example, https://jira.yourcompany.com); for GitHub, use the repository URL (for example,\nhttps://github.com/org/repo); for GitLab, use the specific project API for a single project (for example,\nhttps://gitlab.com/api/v4/projects/:projectId), and the specific group API for a multiple projects (for example,\nhttps://gitlab.com/api/v4/groups/:groupId); for ServiceNow, use your company instance URL (for example,\nhttps://yourinstance.service-now.com/)\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username\n"
                }
            },
            "requiredInputs": [
                "enabled",
                "issuelabel",
                "issuequery",
                "issuetheme",
                "issuetrackersystem",
                "url",
                "username"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IssueTracking resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                    },
                    "insertAfter": {
                        "type": "string",
                        "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                    },
                    "issuelabel": {
                        "type": "string",
                        "description": "Set a label to identify these issues, for example, `release_blocker` or `non-critical`\n"
                    },
                    "issuequery": {
                        "type": "string",
                        "description": "You can use the following placeholders to automatically insert values from the **Release monitoring** page in your\nquery: `{NAME}`, `{VERSION}`, `{STAGE}`, `{PRODUCT}`.\n"
                    },
                    "issuetheme": {
                        "type": "string",
                        "description": "Possible Values: `ERROR`, `INFO`, `RESOLVED`\n"
                    },
                    "issuetrackersystem": {
                        "type": "string",
                        "description": "Possible Values: `GITHUB`, `GITLAB`, `JIRA`, `JIRA_CLOUD`, `JIRA_ON_PREMISE`, `SERVICENOW`\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "Password\n"
                    },
                    "token": {
                        "type": "string",
                        "description": "Token\n",
                        "secret": true
                    },
                    "url": {
                        "type": "string",
                        "description": "For Jira, use the base URL (for example, https://jira.yourcompany.com); for GitHub, use the repository URL (for example,\nhttps://github.com/org/repo); for GitLab, use the specific project API for a single project (for example,\nhttps://gitlab.com/api/v4/projects/:projectId), and the specific group API for a multiple projects (for example,\nhttps://gitlab.com/api/v4/groups/:groupId); for ServiceNow, use your company instance URL (for example,\nhttps://yourinstance.service-now.com/)\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Username\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/jiraNotification:JiraNotification": {
            "properties": {
                "active": {
                    "type": "boolean",
                    "description": "The configuration is enabled (`true`) or disabled (`false`)\n"
                },
                "apiToken": {
                    "type": "string",
                    "description": "The API token for the Jira profile. Using password authentication [was deprecated by\nJira](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-basic-auth-and-cookie-based-auth/)\n",
                    "secret": true
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Jira issue to be created by this notification. You can use same placeholders as in issue summary\n"
                },
                "issueType": {
                    "type": "string",
                    "description": "The type of the Jira issue to be created by this notification\n"
                },
                "legacyId": {
                    "type": "string",
                    "description": "The ID of these settings when referred to from resources requiring the REST API V1 keys\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the notification configuration\n"
                },
                "profile": {
                    "type": "string",
                    "description": "The ID of the associated alerting profile\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "The project key of the Jira issue to be created by this notification\n"
                },
                "summary": {
                    "type": "string",
                    "description": "The summary of the Jira issue to be created by this notification. You can use the following placeholders: *\n`{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities. * `{PID}`: The ID of the reported\nproblem. * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string. *\n`{ProblemID}`: The display number of the reported problem. * `{ProblemImpact}`: The [impact\nlevel](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are\n`APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`. * `{ProblemSeverity}`: The [severity\nlevel](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`,\n`ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`. * `{ProblemTitle}`: A short description of the\nproblem. * `{ProblemURL}`: The URL of the problem within Dynatrace. * `{State}`: The state of the problem. Possible\nvalues are `OPEN` and `RESOLVED`. * `{Tags}`: The list of tags that are defined for all impacted entities, separated by\ncommas\n"
                },
                "url": {
                    "type": "string",
                    "description": "The URL of the Jira API endpoint\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username of the Jira profile\n"
                }
            },
            "required": [
                "active",
                "description",
                "issueType",
                "legacyId",
                "name",
                "profile",
                "projectKey",
                "summary",
                "url",
                "username"
            ],
            "inputProperties": {
                "active": {
                    "type": "boolean",
                    "description": "The configuration is enabled (`true`) or disabled (`false`)\n"
                },
                "apiToken": {
                    "type": "string",
                    "description": "The API token for the Jira profile. Using password authentication [was deprecated by\nJira](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-basic-auth-and-cookie-based-auth/)\n",
                    "secret": true
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Jira issue to be created by this notification. You can use same placeholders as in issue summary\n"
                },
                "issueType": {
                    "type": "string",
                    "description": "The type of the Jira issue to be created by this notification\n"
                },
                "legacyId": {
                    "type": "string",
                    "description": "The ID of these settings when referred to from resources requiring the REST API V1 keys\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the notification configuration\n"
                },
                "profile": {
                    "type": "string",
                    "description": "The ID of the associated alerting profile\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "The project key of the Jira issue to be created by this notification\n"
                },
                "summary": {
                    "type": "string",
                    "description": "The summary of the Jira issue to be created by this notification. You can use the following placeholders: *\n`{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities. * `{PID}`: The ID of the reported\nproblem. * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string. *\n`{ProblemID}`: The display number of the reported problem. * `{ProblemImpact}`: The [impact\nlevel](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are\n`APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`. * `{ProblemSeverity}`: The [severity\nlevel](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`,\n`ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`. * `{ProblemTitle}`: A short description of the\nproblem. * `{ProblemURL}`: The URL of the problem within Dynatrace. * `{State}`: The state of the problem. Possible\nvalues are `OPEN` and `RESOLVED`. * `{Tags}`: The list of tags that are defined for all impacted entities, separated by\ncommas\n"
                },
                "url": {
                    "type": "string",
                    "description": "The URL of the Jira API endpoint\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username of the Jira profile\n"
                }
            },
            "requiredInputs": [
                "active",
                "description",
                "issueType",
                "profile",
                "projectKey",
                "summary",
                "url",
                "username"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering JiraNotification resources.\n",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "description": "The configuration is enabled (`true`) or disabled (`false`)\n"
                    },
                    "apiToken": {
                        "type": "string",
                        "description": "The API token for the Jira profile. Using password authentication [was deprecated by\nJira](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-basic-auth-and-cookie-based-auth/)\n",
                        "secret": true
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the Jira issue to be created by this notification. You can use same placeholders as in issue summary\n"
                    },
                    "issueType": {
                        "type": "string",
                        "description": "The type of the Jira issue to be created by this notification\n"
                    },
                    "legacyId": {
                        "type": "string",
                        "description": "The ID of these settings when referred to from resources requiring the REST API V1 keys\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the notification configuration\n"
                    },
                    "profile": {
                        "type": "string",
                        "description": "The ID of the associated alerting profile\n"
                    },
                    "projectKey": {
                        "type": "string",
                        "description": "The project key of the Jira issue to be created by this notification\n"
                    },
                    "summary": {
                        "type": "string",
                        "description": "The summary of the Jira issue to be created by this notification. You can use the following placeholders: *\n`{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities. * `{PID}`: The ID of the reported\nproblem. * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string. *\n`{ProblemID}`: The display number of the reported problem. * `{ProblemImpact}`: The [impact\nlevel](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are\n`APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`. * `{ProblemSeverity}`: The [severity\nlevel](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`,\n`ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`. * `{ProblemTitle}`: A short description of the\nproblem. * `{ProblemURL}`: The URL of the problem within Dynatrace. * `{State}`: The state of the problem. Possible\nvalues are `OPEN` and `RESOLVED`. * `{Tags}`: The list of tags that are defined for all impacted entities, separated by\ncommas\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "The URL of the Jira API endpoint\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "The username of the Jira profile\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/jsonDashboard:JsonDashboard": {
            "properties": {
                "contents": {
                    "type": "string",
                    "description": "Contains the JSON Code of the Dashboard\n"
                },
                "linkId": {
                    "type": "string",
                    "description": "ID of the dashboard, used with the json_dashboard_base resource and variables to create circular dependencies between\ndashboards for hyperlinks.\n"
                }
            },
            "required": [
                "contents",
                "linkId"
            ],
            "inputProperties": {
                "contents": {
                    "type": "string",
                    "description": "Contains the JSON Code of the Dashboard\n"
                },
                "linkId": {
                    "type": "string",
                    "description": "ID of the dashboard, used with the json_dashboard_base resource and variables to create circular dependencies between\ndashboards for hyperlinks.\n"
                }
            },
            "requiredInputs": [
                "contents"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering JsonDashboard resources.\n",
                "properties": {
                    "contents": {
                        "type": "string",
                        "description": "Contains the JSON Code of the Dashboard\n"
                    },
                    "linkId": {
                        "type": "string",
                        "description": "ID of the dashboard, used with the json_dashboard_base resource and variables to create circular dependencies between\ndashboards for hyperlinks.\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/jsonDashboardBase:JsonDashboardBase": {
            "properties": {
                "contents": {
                    "type": "string",
                    "description": "Contains the JSON Code of the Dashboard\n"
                }
            },
            "required": [
                "contents"
            ],
            "inputProperties": {
                "contents": {
                    "type": "string",
                    "description": "Contains the JSON Code of the Dashboard\n"
                }
            },
            "requiredInputs": [
                "contents"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering JsonDashboardBase resources.\n",
                "properties": {
                    "contents": {
                        "type": "string",
                        "description": "Contains the JSON Code of the Dashboard\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/k8sClusterAnomalies:K8sClusterAnomalies": {
            "properties": {
                "cpuRequestsSaturation": {
                    "$ref": "#/types/dynatrace:index/K8sClusterAnomaliesCpuRequestsSaturation:K8sClusterAnomaliesCpuRequestsSaturation",
                    "description": "no documentation available\n"
                },
                "memoryRequestsSaturation": {
                    "$ref": "#/types/dynatrace:index/K8sClusterAnomaliesMemoryRequestsSaturation:K8sClusterAnomaliesMemoryRequestsSaturation",
                    "description": "no documentation available\n"
                },
                "monitoringIssues": {
                    "$ref": "#/types/dynatrace:index/K8sClusterAnomaliesMonitoringIssues:K8sClusterAnomaliesMonitoringIssues",
                    "description": "no documentation available\n"
                },
                "podsSaturation": {
                    "$ref": "#/types/dynatrace:index/K8sClusterAnomaliesPodsSaturation:K8sClusterAnomaliesPodsSaturation",
                    "description": "no documentation available\n"
                },
                "readinessIssues": {
                    "$ref": "#/types/dynatrace:index/K8sClusterAnomaliesReadinessIssues:K8sClusterAnomaliesReadinessIssues",
                    "description": "Alerts if cluster has not been ready for a given amount of time\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of this setting (KUBERNETES_CLUSTER). Omit this property if you want to cover the whole environment.\n"
                }
            },
            "required": [
                "cpuRequestsSaturation",
                "memoryRequestsSaturation",
                "monitoringIssues",
                "podsSaturation",
                "readinessIssues"
            ],
            "inputProperties": {
                "cpuRequestsSaturation": {
                    "$ref": "#/types/dynatrace:index/K8sClusterAnomaliesCpuRequestsSaturation:K8sClusterAnomaliesCpuRequestsSaturation",
                    "description": "no documentation available\n"
                },
                "memoryRequestsSaturation": {
                    "$ref": "#/types/dynatrace:index/K8sClusterAnomaliesMemoryRequestsSaturation:K8sClusterAnomaliesMemoryRequestsSaturation",
                    "description": "no documentation available\n"
                },
                "monitoringIssues": {
                    "$ref": "#/types/dynatrace:index/K8sClusterAnomaliesMonitoringIssues:K8sClusterAnomaliesMonitoringIssues",
                    "description": "no documentation available\n"
                },
                "podsSaturation": {
                    "$ref": "#/types/dynatrace:index/K8sClusterAnomaliesPodsSaturation:K8sClusterAnomaliesPodsSaturation",
                    "description": "no documentation available\n"
                },
                "readinessIssues": {
                    "$ref": "#/types/dynatrace:index/K8sClusterAnomaliesReadinessIssues:K8sClusterAnomaliesReadinessIssues",
                    "description": "Alerts if cluster has not been ready for a given amount of time\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of this setting (KUBERNETES_CLUSTER). Omit this property if you want to cover the whole environment.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "cpuRequestsSaturation",
                "memoryRequestsSaturation",
                "monitoringIssues",
                "podsSaturation",
                "readinessIssues"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering K8sClusterAnomalies resources.\n",
                "properties": {
                    "cpuRequestsSaturation": {
                        "$ref": "#/types/dynatrace:index/K8sClusterAnomaliesCpuRequestsSaturation:K8sClusterAnomaliesCpuRequestsSaturation",
                        "description": "no documentation available\n"
                    },
                    "memoryRequestsSaturation": {
                        "$ref": "#/types/dynatrace:index/K8sClusterAnomaliesMemoryRequestsSaturation:K8sClusterAnomaliesMemoryRequestsSaturation",
                        "description": "no documentation available\n"
                    },
                    "monitoringIssues": {
                        "$ref": "#/types/dynatrace:index/K8sClusterAnomaliesMonitoringIssues:K8sClusterAnomaliesMonitoringIssues",
                        "description": "no documentation available\n"
                    },
                    "podsSaturation": {
                        "$ref": "#/types/dynatrace:index/K8sClusterAnomaliesPodsSaturation:K8sClusterAnomaliesPodsSaturation",
                        "description": "no documentation available\n"
                    },
                    "readinessIssues": {
                        "$ref": "#/types/dynatrace:index/K8sClusterAnomaliesReadinessIssues:K8sClusterAnomaliesReadinessIssues",
                        "description": "Alerts if cluster has not been ready for a given amount of time\n"
                    },
                    "scope": {
                        "type": "string",
                        "description": "The scope of this setting (KUBERNETES_CLUSTER). Omit this property if you want to cover the whole environment.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/k8sCredentials:K8sCredentials": {
            "properties": {
                "active": {
                    "type": "boolean",
                    "description": "Monitoring is enabled (`true`) or disabled (`false`) for given credentials configuration. If not set on creation, the\n`true` value is used. If the field is omitted during an update, the old value remains unaffected.\n"
                },
                "activeGateGroup": {
                    "type": "string",
                    "description": "Active Gate group to filter active gates for this credentials.\n"
                },
                "authToken": {
                    "type": "string",
                    "description": "The service account bearer token for the Kubernetes API server. Submit your token on creation or update of the\nconfiguration. For security reasons, GET requests return this field as `null`. If the field is omitted during an update,\nthe old value remains unaffected.\n",
                    "secret": true
                },
                "certificateCheckEnabled": {
                    "type": "boolean",
                    "description": "The check of SSL certificates is enabled (`true`) or disabled (`false`) for the Kubernetes cluster. If not set on\ncreation, the `true` value is used. If the field is omitted during an update, the old value remains unaffected.\n"
                },
                "davisEventsIntegrationEnabled": {
                    "type": "boolean",
                    "description": "Inclusion of all Davis relevant events is enabled (`true`) or disabled (`false`) for the Kubernetes cluster. If the\nfield is omitted during an update, the old value remains unaffected\n"
                },
                "endpointUrl": {
                    "type": "string",
                    "description": "The URL of the Kubernetes API server. It must be unique within a Dynatrace environment. The URL must valid according to\nRFC 2396. Leading or trailing whitespaces are not allowed.\n"
                },
                "eventAnalysisAndAlertingEnabled": {
                    "type": "boolean",
                    "description": "Event analysis and alerting is (`true`) or disabled (`false`) for the Kubernetes cluster. If the field is omitted during\nan update, the old value remains unaffected.\n"
                },
                "eventsFieldSelectors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/K8sCredentialsEventsFieldSelector:K8sCredentialsEventsFieldSelector"
                    },
                    "description": "Kubernetes event filters based on field-selectors. If set to `null` on creation, no events field selectors are\nsubscribed. If set to `null` on update, no change of stored events field selectors is applied. Set an empty list to\nclear all events field selectors.\n"
                },
                "eventsIntegrationEnabled": {
                    "type": "boolean",
                    "description": "Monitoring of events is enabled (`true`) or disabled (`false`) for the Kubernetes cluster. Event monitoring depends on\nthe active state of this configuration to be true. If not set on creation, the `false` value is used. If the field is\nomitted during an update, the old value remains unaffected.\n"
                },
                "hostnameVerification": {
                    "type": "boolean",
                    "description": "Verify hostname in certificate against Kubernetes API URL\n"
                },
                "label": {
                    "type": "string",
                    "description": "The name of the Kubernetes credentials configuration. Allowed characters are letters, numbers, whitespaces, and the\nfollowing characters: `.+-_`. Leading or trailing whitespace is not allowed.\n"
                },
                "prometheusExporters": {
                    "type": "boolean",
                    "description": "Prometheus exporters integration is enabled (`true`) or disabled (`false`) for the Kubernetes cluster.If the field is\nomitted during an update, the old value remains unaffected\n"
                },
                "unknowns": {
                    "type": "string",
                    "description": "Any attributes that aren't yet supported by this provider\n"
                },
                "workloadIntegrationEnabled": {
                    "type": "boolean",
                    "description": "Workload and cloud application processing is enabled (`true`) or disabled (`false`) for the Kubernetes cluster. If the\nfield is omitted during an update, the old value remains unaffected.\n"
                }
            },
            "required": [
                "label"
            ],
            "inputProperties": {
                "active": {
                    "type": "boolean",
                    "description": "Monitoring is enabled (`true`) or disabled (`false`) for given credentials configuration. If not set on creation, the\n`true` value is used. If the field is omitted during an update, the old value remains unaffected.\n"
                },
                "activeGateGroup": {
                    "type": "string",
                    "description": "Active Gate group to filter active gates for this credentials.\n"
                },
                "authToken": {
                    "type": "string",
                    "description": "The service account bearer token for the Kubernetes API server. Submit your token on creation or update of the\nconfiguration. For security reasons, GET requests return this field as `null`. If the field is omitted during an update,\nthe old value remains unaffected.\n",
                    "secret": true
                },
                "certificateCheckEnabled": {
                    "type": "boolean",
                    "description": "The check of SSL certificates is enabled (`true`) or disabled (`false`) for the Kubernetes cluster. If not set on\ncreation, the `true` value is used. If the field is omitted during an update, the old value remains unaffected.\n"
                },
                "davisEventsIntegrationEnabled": {
                    "type": "boolean",
                    "description": "Inclusion of all Davis relevant events is enabled (`true`) or disabled (`false`) for the Kubernetes cluster. If the\nfield is omitted during an update, the old value remains unaffected\n"
                },
                "endpointUrl": {
                    "type": "string",
                    "description": "The URL of the Kubernetes API server. It must be unique within a Dynatrace environment. The URL must valid according to\nRFC 2396. Leading or trailing whitespaces are not allowed.\n"
                },
                "eventAnalysisAndAlertingEnabled": {
                    "type": "boolean",
                    "description": "Event analysis and alerting is (`true`) or disabled (`false`) for the Kubernetes cluster. If the field is omitted during\nan update, the old value remains unaffected.\n"
                },
                "eventsFieldSelectors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/K8sCredentialsEventsFieldSelector:K8sCredentialsEventsFieldSelector"
                    },
                    "description": "Kubernetes event filters based on field-selectors. If set to `null` on creation, no events field selectors are\nsubscribed. If set to `null` on update, no change of stored events field selectors is applied. Set an empty list to\nclear all events field selectors.\n"
                },
                "eventsIntegrationEnabled": {
                    "type": "boolean",
                    "description": "Monitoring of events is enabled (`true`) or disabled (`false`) for the Kubernetes cluster. Event monitoring depends on\nthe active state of this configuration to be true. If not set on creation, the `false` value is used. If the field is\nomitted during an update, the old value remains unaffected.\n"
                },
                "hostnameVerification": {
                    "type": "boolean",
                    "description": "Verify hostname in certificate against Kubernetes API URL\n"
                },
                "label": {
                    "type": "string",
                    "description": "The name of the Kubernetes credentials configuration. Allowed characters are letters, numbers, whitespaces, and the\nfollowing characters: `.+-_`. Leading or trailing whitespace is not allowed.\n"
                },
                "prometheusExporters": {
                    "type": "boolean",
                    "description": "Prometheus exporters integration is enabled (`true`) or disabled (`false`) for the Kubernetes cluster.If the field is\nomitted during an update, the old value remains unaffected\n"
                },
                "unknowns": {
                    "type": "string",
                    "description": "Any attributes that aren't yet supported by this provider\n"
                },
                "workloadIntegrationEnabled": {
                    "type": "boolean",
                    "description": "Workload and cloud application processing is enabled (`true`) or disabled (`false`) for the Kubernetes cluster. If the\nfield is omitted during an update, the old value remains unaffected.\n"
                }
            },
            "requiredInputs": [
                "label"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering K8sCredentials resources.\n",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "description": "Monitoring is enabled (`true`) or disabled (`false`) for given credentials configuration. If not set on creation, the\n`true` value is used. If the field is omitted during an update, the old value remains unaffected.\n"
                    },
                    "activeGateGroup": {
                        "type": "string",
                        "description": "Active Gate group to filter active gates for this credentials.\n"
                    },
                    "authToken": {
                        "type": "string",
                        "description": "The service account bearer token for the Kubernetes API server. Submit your token on creation or update of the\nconfiguration. For security reasons, GET requests return this field as `null`. If the field is omitted during an update,\nthe old value remains unaffected.\n",
                        "secret": true
                    },
                    "certificateCheckEnabled": {
                        "type": "boolean",
                        "description": "The check of SSL certificates is enabled (`true`) or disabled (`false`) for the Kubernetes cluster. If not set on\ncreation, the `true` value is used. If the field is omitted during an update, the old value remains unaffected.\n"
                    },
                    "davisEventsIntegrationEnabled": {
                        "type": "boolean",
                        "description": "Inclusion of all Davis relevant events is enabled (`true`) or disabled (`false`) for the Kubernetes cluster. If the\nfield is omitted during an update, the old value remains unaffected\n"
                    },
                    "endpointUrl": {
                        "type": "string",
                        "description": "The URL of the Kubernetes API server. It must be unique within a Dynatrace environment. The URL must valid according to\nRFC 2396. Leading or trailing whitespaces are not allowed.\n"
                    },
                    "eventAnalysisAndAlertingEnabled": {
                        "type": "boolean",
                        "description": "Event analysis and alerting is (`true`) or disabled (`false`) for the Kubernetes cluster. If the field is omitted during\nan update, the old value remains unaffected.\n"
                    },
                    "eventsFieldSelectors": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/dynatrace:index/K8sCredentialsEventsFieldSelector:K8sCredentialsEventsFieldSelector"
                        },
                        "description": "Kubernetes event filters based on field-selectors. If set to `null` on creation, no events field selectors are\nsubscribed. If set to `null` on update, no change of stored events field selectors is applied. Set an empty list to\nclear all events field selectors.\n"
                    },
                    "eventsIntegrationEnabled": {
                        "type": "boolean",
                        "description": "Monitoring of events is enabled (`true`) or disabled (`false`) for the Kubernetes cluster. Event monitoring depends on\nthe active state of this configuration to be true. If not set on creation, the `false` value is used. If the field is\nomitted during an update, the old value remains unaffected.\n"
                    },
                    "hostnameVerification": {
                        "type": "boolean",
                        "description": "Verify hostname in certificate against Kubernetes API URL\n"
                    },
                    "label": {
                        "type": "string",
                        "description": "The name of the Kubernetes credentials configuration. Allowed characters are letters, numbers, whitespaces, and the\nfollowing characters: `.+-_`. Leading or trailing whitespace is not allowed.\n"
                    },
                    "prometheusExporters": {
                        "type": "boolean",
                        "description": "Prometheus exporters integration is enabled (`true`) or disabled (`false`) for the Kubernetes cluster.If the field is\nomitted during an update, the old value remains unaffected\n"
                    },
                    "unknowns": {
                        "type": "string",
                        "description": "Any attributes that aren't yet supported by this provider\n"
                    },
                    "workloadIntegrationEnabled": {
                        "type": "boolean",
                        "description": "Workload and cloud application processing is enabled (`true`) or disabled (`false`) for the Kubernetes cluster. If the\nfield is omitted during an update, the old value remains unaffected.\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/k8sMonitoring:K8sMonitoring": {
            "properties": {
                "cloudApplicationPipelineEnabled": {
                    "type": "boolean",
                    "description": "Monitor Kubernetes namespaces, services, workloads, and pods\n"
                },
                "eventPatterns": {
                    "$ref": "#/types/dynatrace:index/K8sMonitoringEventPatterns:K8sMonitoringEventPatterns",
                    "description": "Define Kubernetes event filters to ingest events into your environment. For more details, see the\n[documentation](https://dt-url.net/2201p0u).\n"
                },
                "eventProcessingActive": {
                    "type": "boolean",
                    "description": "All events are monitored unless event filters are specified. All ingested events are subject to licensing by default. If\nyou have a DPS license see [licensing documentation](https://dt-url.net/cee34zj) for details. If you have a non-DPS\nlicense see [DDUs for events](https://dt-url.net/5n03vcu) for details.\n"
                },
                "filterEvents": {
                    "type": "boolean",
                    "description": "Include only events specified by Events Field Selectors\n"
                },
                "includeAllFdiEvents": {
                    "type": "boolean",
                    "description": "For a list of included events, see the [documentation](https://dt-url.net/l61d02no).\n"
                },
                "openMetricsBuiltinEnabled": {
                    "type": "boolean",
                    "description": "Workload and node resource metrics are based on a subset of cAdvisor metrics. Depending on your Kubernetes cluster size,\nthis may increase the CPU/memory resource consumption of your ActiveGate.\n"
                },
                "openMetricsPipelineEnabled": {
                    "type": "boolean",
                    "description": "For annotation guidance, see the [documentation](https://dt-url.net/g42i0ppw).\n"
                },
                "pvcMonitoringEnabled": {
                    "type": "boolean",
                    "description": "To enable dashboards and alerts, add the [Kubernetes persistent volume\nclaims](ui/hub/ext/com.dynatrace.extension.kubernetes-pvc) extension to your environment.\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of this setting (KUBERNETES_CLUSTER). Omit this property if you want to cover the whole environment.\n"
                }
            },
            "required": [
                "cloudApplicationPipelineEnabled",
                "eventProcessingActive",
                "openMetricsBuiltinEnabled",
                "openMetricsPipelineEnabled",
                "pvcMonitoringEnabled"
            ],
            "inputProperties": {
                "cloudApplicationPipelineEnabled": {
                    "type": "boolean",
                    "description": "Monitor Kubernetes namespaces, services, workloads, and pods\n"
                },
                "eventPatterns": {
                    "$ref": "#/types/dynatrace:index/K8sMonitoringEventPatterns:K8sMonitoringEventPatterns",
                    "description": "Define Kubernetes event filters to ingest events into your environment. For more details, see the\n[documentation](https://dt-url.net/2201p0u).\n"
                },
                "eventProcessingActive": {
                    "type": "boolean",
                    "description": "All events are monitored unless event filters are specified. All ingested events are subject to licensing by default. If\nyou have a DPS license see [licensing documentation](https://dt-url.net/cee34zj) for details. If you have a non-DPS\nlicense see [DDUs for events](https://dt-url.net/5n03vcu) for details.\n"
                },
                "filterEvents": {
                    "type": "boolean",
                    "description": "Include only events specified by Events Field Selectors\n"
                },
                "includeAllFdiEvents": {
                    "type": "boolean",
                    "description": "For a list of included events, see the [documentation](https://dt-url.net/l61d02no).\n"
                },
                "openMetricsBuiltinEnabled": {
                    "type": "boolean",
                    "description": "Workload and node resource metrics are based on a subset of cAdvisor metrics. Depending on your Kubernetes cluster size,\nthis may increase the CPU/memory resource consumption of your ActiveGate.\n"
                },
                "openMetricsPipelineEnabled": {
                    "type": "boolean",
                    "description": "For annotation guidance, see the [documentation](https://dt-url.net/g42i0ppw).\n"
                },
                "pvcMonitoringEnabled": {
                    "type": "boolean",
                    "description": "To enable dashboards and alerts, add the [Kubernetes persistent volume\nclaims](ui/hub/ext/com.dynatrace.extension.kubernetes-pvc) extension to your environment.\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of this setting (KUBERNETES_CLUSTER). Omit this property if you want to cover the whole environment.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "cloudApplicationPipelineEnabled",
                "eventProcessingActive",
                "openMetricsBuiltinEnabled",
                "openMetricsPipelineEnabled",
                "pvcMonitoringEnabled"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering K8sMonitoring resources.\n",
                "properties": {
                    "cloudApplicationPipelineEnabled": {
                        "type": "boolean",
                        "description": "Monitor Kubernetes namespaces, services, workloads, and pods\n"
                    },
                    "eventPatterns": {
                        "$ref": "#/types/dynatrace:index/K8sMonitoringEventPatterns:K8sMonitoringEventPatterns",
                        "description": "Define Kubernetes event filters to ingest events into your environment. For more details, see the\n[documentation](https://dt-url.net/2201p0u).\n"
                    },
                    "eventProcessingActive": {
                        "type": "boolean",
                        "description": "All events are monitored unless event filters are specified. All ingested events are subject to licensing by default. If\nyou have a DPS license see [licensing documentation](https://dt-url.net/cee34zj) for details. If you have a non-DPS\nlicense see [DDUs for events](https://dt-url.net/5n03vcu) for details.\n"
                    },
                    "filterEvents": {
                        "type": "boolean",
                        "description": "Include only events specified by Events Field Selectors\n"
                    },
                    "includeAllFdiEvents": {
                        "type": "boolean",
                        "description": "For a list of included events, see the [documentation](https://dt-url.net/l61d02no).\n"
                    },
                    "openMetricsBuiltinEnabled": {
                        "type": "boolean",
                        "description": "Workload and node resource metrics are based on a subset of cAdvisor metrics. Depending on your Kubernetes cluster size,\nthis may increase the CPU/memory resource consumption of your ActiveGate.\n"
                    },
                    "openMetricsPipelineEnabled": {
                        "type": "boolean",
                        "description": "For annotation guidance, see the [documentation](https://dt-url.net/g42i0ppw).\n"
                    },
                    "pvcMonitoringEnabled": {
                        "type": "boolean",
                        "description": "To enable dashboards and alerts, add the [Kubernetes persistent volume\nclaims](ui/hub/ext/com.dynatrace.extension.kubernetes-pvc) extension to your environment.\n"
                    },
                    "scope": {
                        "type": "string",
                        "description": "The scope of this setting (KUBERNETES_CLUSTER). Omit this property if you want to cover the whole environment.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/k8sNamespaceAnomalies:K8sNamespaceAnomalies": {
            "properties": {
                "cpuLimitsQuotaSaturation": {
                    "$ref": "#/types/dynatrace:index/K8sNamespaceAnomaliesCpuLimitsQuotaSaturation:K8sNamespaceAnomaliesCpuLimitsQuotaSaturation",
                    "description": "Alerts if almost no CPU-limit quota left in namespace\n"
                },
                "cpuRequestsQuotaSaturation": {
                    "$ref": "#/types/dynatrace:index/K8sNamespaceAnomaliesCpuRequestsQuotaSaturation:K8sNamespaceAnomaliesCpuRequestsQuotaSaturation",
                    "description": "Alerts if almost no CPU-request quota left in namespace\n"
                },
                "memoryLimitsQuotaSaturation": {
                    "$ref": "#/types/dynatrace:index/K8sNamespaceAnomaliesMemoryLimitsQuotaSaturation:K8sNamespaceAnomaliesMemoryLimitsQuotaSaturation",
                    "description": "Alerts if almost no memory-limit quota left in namespace\n"
                },
                "memoryRequestsQuotaSaturation": {
                    "$ref": "#/types/dynatrace:index/K8sNamespaceAnomaliesMemoryRequestsQuotaSaturation:K8sNamespaceAnomaliesMemoryRequestsQuotaSaturation",
                    "description": "Alerts if almost no memory-request quota left in namespace\n"
                },
                "podsQuotaSaturation": {
                    "$ref": "#/types/dynatrace:index/K8sNamespaceAnomaliesPodsQuotaSaturation:K8sNamespaceAnomaliesPodsQuotaSaturation",
                    "description": "Alerts if almost no pod quota left in namespace\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of this setting (CLOUD_APPLICATION_NAMESPACE, KUBERNETES_CLUSTER). Omit this property if you want to cover the\nwhole environment.\n"
                }
            },
            "required": [
                "cpuLimitsQuotaSaturation",
                "cpuRequestsQuotaSaturation",
                "memoryLimitsQuotaSaturation",
                "memoryRequestsQuotaSaturation",
                "podsQuotaSaturation"
            ],
            "inputProperties": {
                "cpuLimitsQuotaSaturation": {
                    "$ref": "#/types/dynatrace:index/K8sNamespaceAnomaliesCpuLimitsQuotaSaturation:K8sNamespaceAnomaliesCpuLimitsQuotaSaturation",
                    "description": "Alerts if almost no CPU-limit quota left in namespace\n"
                },
                "cpuRequestsQuotaSaturation": {
                    "$ref": "#/types/dynatrace:index/K8sNamespaceAnomaliesCpuRequestsQuotaSaturation:K8sNamespaceAnomaliesCpuRequestsQuotaSaturation",
                    "description": "Alerts if almost no CPU-request quota left in namespace\n"
                },
                "memoryLimitsQuotaSaturation": {
                    "$ref": "#/types/dynatrace:index/K8sNamespaceAnomaliesMemoryLimitsQuotaSaturation:K8sNamespaceAnomaliesMemoryLimitsQuotaSaturation",
                    "description": "Alerts if almost no memory-limit quota left in namespace\n"
                },
                "memoryRequestsQuotaSaturation": {
                    "$ref": "#/types/dynatrace:index/K8sNamespaceAnomaliesMemoryRequestsQuotaSaturation:K8sNamespaceAnomaliesMemoryRequestsQuotaSaturation",
                    "description": "Alerts if almost no memory-request quota left in namespace\n"
                },
                "podsQuotaSaturation": {
                    "$ref": "#/types/dynatrace:index/K8sNamespaceAnomaliesPodsQuotaSaturation:K8sNamespaceAnomaliesPodsQuotaSaturation",
                    "description": "Alerts if almost no pod quota left in namespace\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of this setting (CLOUD_APPLICATION_NAMESPACE, KUBERNETES_CLUSTER). Omit this property if you want to cover the\nwhole environment.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "cpuLimitsQuotaSaturation",
                "cpuRequestsQuotaSaturation",
                "memoryLimitsQuotaSaturation",
                "memoryRequestsQuotaSaturation",
                "podsQuotaSaturation"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering K8sNamespaceAnomalies resources.\n",
                "properties": {
                    "cpuLimitsQuotaSaturation": {
                        "$ref": "#/types/dynatrace:index/K8sNamespaceAnomaliesCpuLimitsQuotaSaturation:K8sNamespaceAnomaliesCpuLimitsQuotaSaturation",
                        "description": "Alerts if almost no CPU-limit quota left in namespace\n"
                    },
                    "cpuRequestsQuotaSaturation": {
                        "$ref": "#/types/dynatrace:index/K8sNamespaceAnomaliesCpuRequestsQuotaSaturation:K8sNamespaceAnomaliesCpuRequestsQuotaSaturation",
                        "description": "Alerts if almost no CPU-request quota left in namespace\n"
                    },
                    "memoryLimitsQuotaSaturation": {
                        "$ref": "#/types/dynatrace:index/K8sNamespaceAnomaliesMemoryLimitsQuotaSaturation:K8sNamespaceAnomaliesMemoryLimitsQuotaSaturation",
                        "description": "Alerts if almost no memory-limit quota left in namespace\n"
                    },
                    "memoryRequestsQuotaSaturation": {
                        "$ref": "#/types/dynatrace:index/K8sNamespaceAnomaliesMemoryRequestsQuotaSaturation:K8sNamespaceAnomaliesMemoryRequestsQuotaSaturation",
                        "description": "Alerts if almost no memory-request quota left in namespace\n"
                    },
                    "podsQuotaSaturation": {
                        "$ref": "#/types/dynatrace:index/K8sNamespaceAnomaliesPodsQuotaSaturation:K8sNamespaceAnomaliesPodsQuotaSaturation",
                        "description": "Alerts if almost no pod quota left in namespace\n"
                    },
                    "scope": {
                        "type": "string",
                        "description": "The scope of this setting (CLOUD_APPLICATION_NAMESPACE, KUBERNETES_CLUSTER). Omit this property if you want to cover the\nwhole environment.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/k8sNodeAnomalies:K8sNodeAnomalies": {
            "properties": {
                "cpuRequestsSaturation": {
                    "$ref": "#/types/dynatrace:index/K8sNodeAnomaliesCpuRequestsSaturation:K8sNodeAnomaliesCpuRequestsSaturation",
                    "description": "no documentation available\n"
                },
                "memoryRequestsSaturation": {
                    "$ref": "#/types/dynatrace:index/K8sNodeAnomaliesMemoryRequestsSaturation:K8sNodeAnomaliesMemoryRequestsSaturation",
                    "description": "no documentation available\n"
                },
                "nodeProblematicCondition": {
                    "$ref": "#/types/dynatrace:index/K8sNodeAnomaliesNodeProblematicCondition:K8sNodeAnomaliesNodeProblematicCondition",
                    "description": "no documentation available\n"
                },
                "podsSaturation": {
                    "$ref": "#/types/dynatrace:index/K8sNodeAnomaliesPodsSaturation:K8sNodeAnomaliesPodsSaturation",
                    "description": "no documentation available\n"
                },
                "readinessIssues": {
                    "$ref": "#/types/dynatrace:index/K8sNodeAnomaliesReadinessIssues:K8sNodeAnomaliesReadinessIssues",
                    "description": "Alerts if node has not been available for a given amount of time\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of this setting (KUBERNETES_CLUSTER). Omit this property if you want to cover the whole environment.\n"
                }
            },
            "required": [
                "cpuRequestsSaturation",
                "memoryRequestsSaturation",
                "nodeProblematicCondition",
                "podsSaturation",
                "readinessIssues"
            ],
            "inputProperties": {
                "cpuRequestsSaturation": {
                    "$ref": "#/types/dynatrace:index/K8sNodeAnomaliesCpuRequestsSaturation:K8sNodeAnomaliesCpuRequestsSaturation",
                    "description": "no documentation available\n"
                },
                "memoryRequestsSaturation": {
                    "$ref": "#/types/dynatrace:index/K8sNodeAnomaliesMemoryRequestsSaturation:K8sNodeAnomaliesMemoryRequestsSaturation",
                    "description": "no documentation available\n"
                },
                "nodeProblematicCondition": {
                    "$ref": "#/types/dynatrace:index/K8sNodeAnomaliesNodeProblematicCondition:K8sNodeAnomaliesNodeProblematicCondition",
                    "description": "no documentation available\n"
                },
                "podsSaturation": {
                    "$ref": "#/types/dynatrace:index/K8sNodeAnomaliesPodsSaturation:K8sNodeAnomaliesPodsSaturation",
                    "description": "no documentation available\n"
                },
                "readinessIssues": {
                    "$ref": "#/types/dynatrace:index/K8sNodeAnomaliesReadinessIssues:K8sNodeAnomaliesReadinessIssues",
                    "description": "Alerts if node has not been available for a given amount of time\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of this setting (KUBERNETES_CLUSTER). Omit this property if you want to cover the whole environment.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "cpuRequestsSaturation",
                "memoryRequestsSaturation",
                "nodeProblematicCondition",
                "podsSaturation",
                "readinessIssues"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering K8sNodeAnomalies resources.\n",
                "properties": {
                    "cpuRequestsSaturation": {
                        "$ref": "#/types/dynatrace:index/K8sNodeAnomaliesCpuRequestsSaturation:K8sNodeAnomaliesCpuRequestsSaturation",
                        "description": "no documentation available\n"
                    },
                    "memoryRequestsSaturation": {
                        "$ref": "#/types/dynatrace:index/K8sNodeAnomaliesMemoryRequestsSaturation:K8sNodeAnomaliesMemoryRequestsSaturation",
                        "description": "no documentation available\n"
                    },
                    "nodeProblematicCondition": {
                        "$ref": "#/types/dynatrace:index/K8sNodeAnomaliesNodeProblematicCondition:K8sNodeAnomaliesNodeProblematicCondition",
                        "description": "no documentation available\n"
                    },
                    "podsSaturation": {
                        "$ref": "#/types/dynatrace:index/K8sNodeAnomaliesPodsSaturation:K8sNodeAnomaliesPodsSaturation",
                        "description": "no documentation available\n"
                    },
                    "readinessIssues": {
                        "$ref": "#/types/dynatrace:index/K8sNodeAnomaliesReadinessIssues:K8sNodeAnomaliesReadinessIssues",
                        "description": "Alerts if node has not been available for a given amount of time\n"
                    },
                    "scope": {
                        "type": "string",
                        "description": "The scope of this setting (KUBERNETES_CLUSTER). Omit this property if you want to cover the whole environment.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/k8sPvcAnomalies:K8sPvcAnomalies": {
            "properties": {
                "lowDiskSpaceCritical": {
                    "$ref": "#/types/dynatrace:index/K8sPvcAnomaliesLowDiskSpaceCritical:K8sPvcAnomaliesLowDiskSpaceCritical",
                    "description": "Alerts on low disk space in megabytes for a persistent volume claim.\n"
                },
                "lowDiskSpaceCriticalPercentage": {
                    "$ref": "#/types/dynatrace:index/K8sPvcAnomaliesLowDiskSpaceCriticalPercentage:K8sPvcAnomaliesLowDiskSpaceCriticalPercentage",
                    "description": "Alerts on low disk space in % for a persistent volume claim.\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of this setting (CLOUD_APPLICATION_NAMESPACE, KUBERNETES_CLUSTER). Omit this property if you want to cover the\nwhole environment.\n"
                }
            },
            "required": [
                "lowDiskSpaceCritical",
                "lowDiskSpaceCriticalPercentage"
            ],
            "inputProperties": {
                "lowDiskSpaceCritical": {
                    "$ref": "#/types/dynatrace:index/K8sPvcAnomaliesLowDiskSpaceCritical:K8sPvcAnomaliesLowDiskSpaceCritical",
                    "description": "Alerts on low disk space in megabytes for a persistent volume claim.\n"
                },
                "lowDiskSpaceCriticalPercentage": {
                    "$ref": "#/types/dynatrace:index/K8sPvcAnomaliesLowDiskSpaceCriticalPercentage:K8sPvcAnomaliesLowDiskSpaceCriticalPercentage",
                    "description": "Alerts on low disk space in % for a persistent volume claim.\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of this setting (CLOUD_APPLICATION_NAMESPACE, KUBERNETES_CLUSTER). Omit this property if you want to cover the\nwhole environment.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "lowDiskSpaceCritical",
                "lowDiskSpaceCriticalPercentage"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering K8sPvcAnomalies resources.\n",
                "properties": {
                    "lowDiskSpaceCritical": {
                        "$ref": "#/types/dynatrace:index/K8sPvcAnomaliesLowDiskSpaceCritical:K8sPvcAnomaliesLowDiskSpaceCritical",
                        "description": "Alerts on low disk space in megabytes for a persistent volume claim.\n"
                    },
                    "lowDiskSpaceCriticalPercentage": {
                        "$ref": "#/types/dynatrace:index/K8sPvcAnomaliesLowDiskSpaceCriticalPercentage:K8sPvcAnomaliesLowDiskSpaceCriticalPercentage",
                        "description": "Alerts on low disk space in % for a persistent volume claim.\n"
                    },
                    "scope": {
                        "type": "string",
                        "description": "The scope of this setting (CLOUD_APPLICATION_NAMESPACE, KUBERNETES_CLUSTER). Omit this property if you want to cover the\nwhole environment.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/k8sWorkloadAnomalies:K8sWorkloadAnomalies": {
            "properties": {
                "containerRestarts": {
                    "$ref": "#/types/dynatrace:index/K8sWorkloadAnomaliesContainerRestarts:K8sWorkloadAnomaliesContainerRestarts",
                    "description": "no documentation available\n"
                },
                "deploymentStuck": {
                    "$ref": "#/types/dynatrace:index/K8sWorkloadAnomaliesDeploymentStuck:K8sWorkloadAnomaliesDeploymentStuck",
                    "description": "no documentation available\n"
                },
                "highCpuThrottling": {
                    "$ref": "#/types/dynatrace:index/K8sWorkloadAnomaliesHighCpuThrottling:K8sWorkloadAnomaliesHighCpuThrottling",
                    "description": "no documentation available\n"
                },
                "highCpuUsage": {
                    "$ref": "#/types/dynatrace:index/K8sWorkloadAnomaliesHighCpuUsage:K8sWorkloadAnomaliesHighCpuUsage",
                    "description": "no documentation available\n"
                },
                "highMemoryUsage": {
                    "$ref": "#/types/dynatrace:index/K8sWorkloadAnomaliesHighMemoryUsage:K8sWorkloadAnomaliesHighMemoryUsage",
                    "description": "no documentation available\n"
                },
                "jobFailureEvents": {
                    "$ref": "#/types/dynatrace:index/K8sWorkloadAnomaliesJobFailureEvents:K8sWorkloadAnomaliesJobFailureEvents",
                    "description": "no documentation available\n"
                },
                "notAllPodsReady": {
                    "$ref": "#/types/dynatrace:index/K8sWorkloadAnomaliesNotAllPodsReady:K8sWorkloadAnomaliesNotAllPodsReady",
                    "description": "no documentation available\n"
                },
                "oomKills": {
                    "$ref": "#/types/dynatrace:index/K8sWorkloadAnomaliesOomKills:K8sWorkloadAnomaliesOomKills",
                    "description": "no documentation available\n"
                },
                "pendingPods": {
                    "$ref": "#/types/dynatrace:index/K8sWorkloadAnomaliesPendingPods:K8sWorkloadAnomaliesPendingPods",
                    "description": "no documentation available\n"
                },
                "podBackoffEvents": {
                    "$ref": "#/types/dynatrace:index/K8sWorkloadAnomaliesPodBackoffEvents:K8sWorkloadAnomaliesPodBackoffEvents",
                    "description": "no documentation available\n"
                },
                "podEvictionEvents": {
                    "$ref": "#/types/dynatrace:index/K8sWorkloadAnomaliesPodEvictionEvents:K8sWorkloadAnomaliesPodEvictionEvents",
                    "description": "no documentation available\n"
                },
                "podPreemptionEvents": {
                    "$ref": "#/types/dynatrace:index/K8sWorkloadAnomaliesPodPreemptionEvents:K8sWorkloadAnomaliesPodPreemptionEvents",
                    "description": "no documentation available\n"
                },
                "podStuckInTerminating": {
                    "$ref": "#/types/dynatrace:index/K8sWorkloadAnomaliesPodStuckInTerminating:K8sWorkloadAnomaliesPodStuckInTerminating",
                    "description": "no documentation available\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of this setting (CLOUD_APPLICATION_NAMESPACE, KUBERNETES_CLUSTER). Omit this property if you want to cover the\nwhole environment.\n"
                },
                "workloadWithoutReadyPods": {
                    "$ref": "#/types/dynatrace:index/K8sWorkloadAnomaliesWorkloadWithoutReadyPods:K8sWorkloadAnomaliesWorkloadWithoutReadyPods",
                    "description": "no documentation available\n"
                }
            },
            "required": [
                "containerRestarts",
                "deploymentStuck",
                "highCpuThrottling",
                "highCpuUsage",
                "highMemoryUsage",
                "jobFailureEvents",
                "notAllPodsReady",
                "oomKills",
                "pendingPods",
                "podBackoffEvents",
                "podEvictionEvents",
                "podPreemptionEvents",
                "podStuckInTerminating",
                "workloadWithoutReadyPods"
            ],
            "inputProperties": {
                "containerRestarts": {
                    "$ref": "#/types/dynatrace:index/K8sWorkloadAnomaliesContainerRestarts:K8sWorkloadAnomaliesContainerRestarts",
                    "description": "no documentation available\n"
                },
                "deploymentStuck": {
                    "$ref": "#/types/dynatrace:index/K8sWorkloadAnomaliesDeploymentStuck:K8sWorkloadAnomaliesDeploymentStuck",
                    "description": "no documentation available\n"
                },
                "highCpuThrottling": {
                    "$ref": "#/types/dynatrace:index/K8sWorkloadAnomaliesHighCpuThrottling:K8sWorkloadAnomaliesHighCpuThrottling",
                    "description": "no documentation available\n"
                },
                "highCpuUsage": {
                    "$ref": "#/types/dynatrace:index/K8sWorkloadAnomaliesHighCpuUsage:K8sWorkloadAnomaliesHighCpuUsage",
                    "description": "no documentation available\n"
                },
                "highMemoryUsage": {
                    "$ref": "#/types/dynatrace:index/K8sWorkloadAnomaliesHighMemoryUsage:K8sWorkloadAnomaliesHighMemoryUsage",
                    "description": "no documentation available\n"
                },
                "jobFailureEvents": {
                    "$ref": "#/types/dynatrace:index/K8sWorkloadAnomaliesJobFailureEvents:K8sWorkloadAnomaliesJobFailureEvents",
                    "description": "no documentation available\n"
                },
                "notAllPodsReady": {
                    "$ref": "#/types/dynatrace:index/K8sWorkloadAnomaliesNotAllPodsReady:K8sWorkloadAnomaliesNotAllPodsReady",
                    "description": "no documentation available\n"
                },
                "oomKills": {
                    "$ref": "#/types/dynatrace:index/K8sWorkloadAnomaliesOomKills:K8sWorkloadAnomaliesOomKills",
                    "description": "no documentation available\n"
                },
                "pendingPods": {
                    "$ref": "#/types/dynatrace:index/K8sWorkloadAnomaliesPendingPods:K8sWorkloadAnomaliesPendingPods",
                    "description": "no documentation available\n"
                },
                "podBackoffEvents": {
                    "$ref": "#/types/dynatrace:index/K8sWorkloadAnomaliesPodBackoffEvents:K8sWorkloadAnomaliesPodBackoffEvents",
                    "description": "no documentation available\n"
                },
                "podEvictionEvents": {
                    "$ref": "#/types/dynatrace:index/K8sWorkloadAnomaliesPodEvictionEvents:K8sWorkloadAnomaliesPodEvictionEvents",
                    "description": "no documentation available\n"
                },
                "podPreemptionEvents": {
                    "$ref": "#/types/dynatrace:index/K8sWorkloadAnomaliesPodPreemptionEvents:K8sWorkloadAnomaliesPodPreemptionEvents",
                    "description": "no documentation available\n"
                },
                "podStuckInTerminating": {
                    "$ref": "#/types/dynatrace:index/K8sWorkloadAnomaliesPodStuckInTerminating:K8sWorkloadAnomaliesPodStuckInTerminating",
                    "description": "no documentation available\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of this setting (CLOUD_APPLICATION_NAMESPACE, KUBERNETES_CLUSTER). Omit this property if you want to cover the\nwhole environment.\n",
                    "willReplaceOnChanges": true
                },
                "workloadWithoutReadyPods": {
                    "$ref": "#/types/dynatrace:index/K8sWorkloadAnomaliesWorkloadWithoutReadyPods:K8sWorkloadAnomaliesWorkloadWithoutReadyPods",
                    "description": "no documentation available\n"
                }
            },
            "requiredInputs": [
                "containerRestarts",
                "deploymentStuck",
                "highCpuThrottling",
                "highCpuUsage",
                "highMemoryUsage",
                "jobFailureEvents",
                "notAllPodsReady",
                "oomKills",
                "pendingPods",
                "podBackoffEvents",
                "podEvictionEvents",
                "podPreemptionEvents",
                "podStuckInTerminating",
                "workloadWithoutReadyPods"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering K8sWorkloadAnomalies resources.\n",
                "properties": {
                    "containerRestarts": {
                        "$ref": "#/types/dynatrace:index/K8sWorkloadAnomaliesContainerRestarts:K8sWorkloadAnomaliesContainerRestarts",
                        "description": "no documentation available\n"
                    },
                    "deploymentStuck": {
                        "$ref": "#/types/dynatrace:index/K8sWorkloadAnomaliesDeploymentStuck:K8sWorkloadAnomaliesDeploymentStuck",
                        "description": "no documentation available\n"
                    },
                    "highCpuThrottling": {
                        "$ref": "#/types/dynatrace:index/K8sWorkloadAnomaliesHighCpuThrottling:K8sWorkloadAnomaliesHighCpuThrottling",
                        "description": "no documentation available\n"
                    },
                    "highCpuUsage": {
                        "$ref": "#/types/dynatrace:index/K8sWorkloadAnomaliesHighCpuUsage:K8sWorkloadAnomaliesHighCpuUsage",
                        "description": "no documentation available\n"
                    },
                    "highMemoryUsage": {
                        "$ref": "#/types/dynatrace:index/K8sWorkloadAnomaliesHighMemoryUsage:K8sWorkloadAnomaliesHighMemoryUsage",
                        "description": "no documentation available\n"
                    },
                    "jobFailureEvents": {
                        "$ref": "#/types/dynatrace:index/K8sWorkloadAnomaliesJobFailureEvents:K8sWorkloadAnomaliesJobFailureEvents",
                        "description": "no documentation available\n"
                    },
                    "notAllPodsReady": {
                        "$ref": "#/types/dynatrace:index/K8sWorkloadAnomaliesNotAllPodsReady:K8sWorkloadAnomaliesNotAllPodsReady",
                        "description": "no documentation available\n"
                    },
                    "oomKills": {
                        "$ref": "#/types/dynatrace:index/K8sWorkloadAnomaliesOomKills:K8sWorkloadAnomaliesOomKills",
                        "description": "no documentation available\n"
                    },
                    "pendingPods": {
                        "$ref": "#/types/dynatrace:index/K8sWorkloadAnomaliesPendingPods:K8sWorkloadAnomaliesPendingPods",
                        "description": "no documentation available\n"
                    },
                    "podBackoffEvents": {
                        "$ref": "#/types/dynatrace:index/K8sWorkloadAnomaliesPodBackoffEvents:K8sWorkloadAnomaliesPodBackoffEvents",
                        "description": "no documentation available\n"
                    },
                    "podEvictionEvents": {
                        "$ref": "#/types/dynatrace:index/K8sWorkloadAnomaliesPodEvictionEvents:K8sWorkloadAnomaliesPodEvictionEvents",
                        "description": "no documentation available\n"
                    },
                    "podPreemptionEvents": {
                        "$ref": "#/types/dynatrace:index/K8sWorkloadAnomaliesPodPreemptionEvents:K8sWorkloadAnomaliesPodPreemptionEvents",
                        "description": "no documentation available\n"
                    },
                    "podStuckInTerminating": {
                        "$ref": "#/types/dynatrace:index/K8sWorkloadAnomaliesPodStuckInTerminating:K8sWorkloadAnomaliesPodStuckInTerminating",
                        "description": "no documentation available\n"
                    },
                    "scope": {
                        "type": "string",
                        "description": "The scope of this setting (CLOUD_APPLICATION_NAMESPACE, KUBERNETES_CLUSTER). Omit this property if you want to cover the\nwhole environment.\n",
                        "willReplaceOnChanges": true
                    },
                    "workloadWithoutReadyPods": {
                        "$ref": "#/types/dynatrace:index/K8sWorkloadAnomaliesWorkloadWithoutReadyPods:K8sWorkloadAnomaliesWorkloadWithoutReadyPods",
                        "description": "no documentation available\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/keyRequests:KeyRequests": {
            "properties": {
                "names": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The names of the key requests\n"
                },
                "service": {
                    "type": "string",
                    "description": "ID of Dynatrace Service, eg. SERVICE-123ABC45678EFGH\n"
                }
            },
            "required": [
                "service"
            ],
            "inputProperties": {
                "names": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The names of the key requests\n"
                },
                "service": {
                    "type": "string",
                    "description": "ID of Dynatrace Service, eg. SERVICE-123ABC45678EFGH\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "service"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering KeyRequests resources.\n",
                "properties": {
                    "names": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The names of the key requests\n"
                    },
                    "service": {
                        "type": "string",
                        "description": "ID of Dynatrace Service, eg. SERVICE-123ABC45678EFGH\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/keyUserAction:KeyUserAction": {
            "properties": {
                "applicationId": {
                    "type": "string",
                    "description": "The ID of the WebApplication\n"
                },
                "domain": {
                    "type": "string",
                    "description": "The domain where the action is performed\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the action\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the action. Possible values are `Custom`, `Load` and `Xhr`\n"
                }
            },
            "required": [
                "applicationId",
                "name",
                "type"
            ],
            "inputProperties": {
                "applicationId": {
                    "type": "string",
                    "description": "The ID of the WebApplication\n",
                    "willReplaceOnChanges": true
                },
                "domain": {
                    "type": "string",
                    "description": "The domain where the action is performed\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The name of the action\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the action. Possible values are `Custom`, `Load` and `Xhr`\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "applicationId",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering KeyUserAction resources.\n",
                "properties": {
                    "applicationId": {
                        "type": "string",
                        "description": "The ID of the WebApplication\n",
                        "willReplaceOnChanges": true
                    },
                    "domain": {
                        "type": "string",
                        "description": "The domain where the action is performed\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the action\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the action. Possible values are `Custom`, `Load` and `Xhr`\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/kubernetes:Kubernetes": {
            "properties": {
                "activeGateGroup": {
                    "type": "string",
                    "description": "ActiveGate Group\n"
                },
                "authToken": {
                    "type": "string",
                    "description": "Create a bearer token for [Kubernetes](https://dt-url.net/og43szq \"Kubernetes\") or\n[OpenShift](https://dt-url.net/7l43xtp \"OpenShift\").\n",
                    "secret": true
                },
                "certificateCheckEnabled": {
                    "type": "boolean",
                    "description": "Require valid certificates for communication with API server (recommended)\n"
                },
                "cloudApplicationPipelineEnabled": {
                    "type": "boolean",
                    "description": "Monitor Kubernetes namespaces, services, workloads, and pods\n",
                    "deprecationMessage": "This field has been moved to a new schema, please utilize the resource `dynatrace_k8s_monitoring` to configure this field."
                },
                "clusterId": {
                    "type": "string",
                    "description": "Unique ID of the cluster, the containerized ActiveGate is deployed to. Defaults to the UUID of the kube-system\nnamespace. The cluster ID of containerized ActiveGates is shown on the Deployment status screen.\n"
                },
                "clusterIdEnabled": {
                    "type": "boolean",
                    "description": "For more information on local Kubernetes API monitoring, see the [documentation](https://dt-url.net/6q62uep).\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "endpointUrl": {
                    "type": "string",
                    "description": "Get the API URL for [Kubernetes](https://dt-url.net/kz23snj \"Kubernetes\") or [OpenShift](https://dt-url.net/d623xgw\n\"OpenShift\").\n"
                },
                "eventPatterns": {
                    "$ref": "#/types/dynatrace:index/KubernetesEventPatterns:KubernetesEventPatterns",
                    "description": "Define Kubernetes event filters to ingest events into your environment. For more details, see the\n[documentation](https://dt-url.net/2201p0u).\n",
                    "deprecationMessage": "This field has been moved to a new schema, please utilize the resource `dynatrace_k8s_monitoring` to configure this field."
                },
                "eventProcessingActive": {
                    "type": "boolean",
                    "description": "All events are monitored by default unless event filters are specified. Kubernetes events are subject to Davis data\nunits (DDU) licensing. See [DDUs for events](https://dt-url.net/5n03vcu) for details.\n",
                    "deprecationMessage": "This field has been moved to a new schema, please utilize the resource `dynatrace_k8s_monitoring` to configure this field."
                },
                "filterEvents": {
                    "type": "boolean",
                    "description": "Include only events specified by Events Field Selectors\n",
                    "deprecationMessage": "This field has been moved to a new schema, please utilize the resource `dynatrace_k8s_monitoring` to configure this field."
                },
                "hostnameVerificationEnabled": {
                    "type": "boolean",
                    "description": "Verify hostname in certificate against Kubernetes API URL\n"
                },
                "includeAllFdiEvents": {
                    "type": "boolean",
                    "description": "For a list of included events, see the [documentation](https://dt-url.net/l61d02no).\n",
                    "deprecationMessage": "This field has been moved to a new schema, please utilize the resource `dynatrace_k8s_monitoring` to configure this field."
                },
                "label": {
                    "type": "string",
                    "description": "Renaming the cluster breaks configurations that are based on its name (e.g., management zones, and alerting).\n"
                },
                "openMetricsBuiltinEnabled": {
                    "type": "boolean",
                    "description": "The workload resource metrics are based on a subset of cAdvisor metrics. Depending on your Kubernetes cluster size, this\nmay increase the CPU/memory resource consumption of your ActiveGate.\n",
                    "deprecationMessage": "This field has been moved to a new schema, please utilize the resource `dynatrace_k8s_monitoring` to configure this field."
                },
                "openMetricsPipelineEnabled": {
                    "type": "boolean",
                    "description": "For annotation guidance, see the [documentation](https://dt-url.net/g42i0ppw).\n",
                    "deprecationMessage": "This field has been moved to a new schema, please utilize the resource `dynatrace_k8s_monitoring` to configure this field."
                },
                "pvcMonitoringEnabled": {
                    "type": "boolean",
                    "description": "To enable dashboards and alerts, add the [Kubernetes persistent volume\nclaims](ui/hub/ext/com.dynatrace.extension.kubernetes-pvc) extension to your environment.\n",
                    "deprecationMessage": "This field has been moved to a new schema, please utilize the resource `dynatrace_k8s_monitoring` to configure this field."
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of this setting (KUBERNETES_CLUSTER)\n"
                }
            },
            "required": [
                "clusterIdEnabled",
                "enabled",
                "label"
            ],
            "inputProperties": {
                "activeGateGroup": {
                    "type": "string",
                    "description": "ActiveGate Group\n"
                },
                "authToken": {
                    "type": "string",
                    "description": "Create a bearer token for [Kubernetes](https://dt-url.net/og43szq \"Kubernetes\") or\n[OpenShift](https://dt-url.net/7l43xtp \"OpenShift\").\n",
                    "secret": true
                },
                "certificateCheckEnabled": {
                    "type": "boolean",
                    "description": "Require valid certificates for communication with API server (recommended)\n"
                },
                "cloudApplicationPipelineEnabled": {
                    "type": "boolean",
                    "description": "Monitor Kubernetes namespaces, services, workloads, and pods\n",
                    "deprecationMessage": "This field has been moved to a new schema, please utilize the resource `dynatrace_k8s_monitoring` to configure this field."
                },
                "clusterId": {
                    "type": "string",
                    "description": "Unique ID of the cluster, the containerized ActiveGate is deployed to. Defaults to the UUID of the kube-system\nnamespace. The cluster ID of containerized ActiveGates is shown on the Deployment status screen.\n"
                },
                "clusterIdEnabled": {
                    "type": "boolean",
                    "description": "For more information on local Kubernetes API monitoring, see the [documentation](https://dt-url.net/6q62uep).\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "endpointUrl": {
                    "type": "string",
                    "description": "Get the API URL for [Kubernetes](https://dt-url.net/kz23snj \"Kubernetes\") or [OpenShift](https://dt-url.net/d623xgw\n\"OpenShift\").\n"
                },
                "eventPatterns": {
                    "$ref": "#/types/dynatrace:index/KubernetesEventPatterns:KubernetesEventPatterns",
                    "description": "Define Kubernetes event filters to ingest events into your environment. For more details, see the\n[documentation](https://dt-url.net/2201p0u).\n",
                    "deprecationMessage": "This field has been moved to a new schema, please utilize the resource `dynatrace_k8s_monitoring` to configure this field."
                },
                "eventProcessingActive": {
                    "type": "boolean",
                    "description": "All events are monitored by default unless event filters are specified. Kubernetes events are subject to Davis data\nunits (DDU) licensing. See [DDUs for events](https://dt-url.net/5n03vcu) for details.\n",
                    "deprecationMessage": "This field has been moved to a new schema, please utilize the resource `dynatrace_k8s_monitoring` to configure this field."
                },
                "filterEvents": {
                    "type": "boolean",
                    "description": "Include only events specified by Events Field Selectors\n",
                    "deprecationMessage": "This field has been moved to a new schema, please utilize the resource `dynatrace_k8s_monitoring` to configure this field."
                },
                "hostnameVerificationEnabled": {
                    "type": "boolean",
                    "description": "Verify hostname in certificate against Kubernetes API URL\n"
                },
                "includeAllFdiEvents": {
                    "type": "boolean",
                    "description": "For a list of included events, see the [documentation](https://dt-url.net/l61d02no).\n",
                    "deprecationMessage": "This field has been moved to a new schema, please utilize the resource `dynatrace_k8s_monitoring` to configure this field."
                },
                "label": {
                    "type": "string",
                    "description": "Renaming the cluster breaks configurations that are based on its name (e.g., management zones, and alerting).\n"
                },
                "openMetricsBuiltinEnabled": {
                    "type": "boolean",
                    "description": "The workload resource metrics are based on a subset of cAdvisor metrics. Depending on your Kubernetes cluster size, this\nmay increase the CPU/memory resource consumption of your ActiveGate.\n",
                    "deprecationMessage": "This field has been moved to a new schema, please utilize the resource `dynatrace_k8s_monitoring` to configure this field."
                },
                "openMetricsPipelineEnabled": {
                    "type": "boolean",
                    "description": "For annotation guidance, see the [documentation](https://dt-url.net/g42i0ppw).\n",
                    "deprecationMessage": "This field has been moved to a new schema, please utilize the resource `dynatrace_k8s_monitoring` to configure this field."
                },
                "pvcMonitoringEnabled": {
                    "type": "boolean",
                    "description": "To enable dashboards and alerts, add the [Kubernetes persistent volume\nclaims](ui/hub/ext/com.dynatrace.extension.kubernetes-pvc) extension to your environment.\n",
                    "deprecationMessage": "This field has been moved to a new schema, please utilize the resource `dynatrace_k8s_monitoring` to configure this field."
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of this setting (KUBERNETES_CLUSTER)\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "clusterIdEnabled",
                "enabled",
                "label"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Kubernetes resources.\n",
                "properties": {
                    "activeGateGroup": {
                        "type": "string",
                        "description": "ActiveGate Group\n"
                    },
                    "authToken": {
                        "type": "string",
                        "description": "Create a bearer token for [Kubernetes](https://dt-url.net/og43szq \"Kubernetes\") or\n[OpenShift](https://dt-url.net/7l43xtp \"OpenShift\").\n",
                        "secret": true
                    },
                    "certificateCheckEnabled": {
                        "type": "boolean",
                        "description": "Require valid certificates for communication with API server (recommended)\n"
                    },
                    "cloudApplicationPipelineEnabled": {
                        "type": "boolean",
                        "description": "Monitor Kubernetes namespaces, services, workloads, and pods\n",
                        "deprecationMessage": "This field has been moved to a new schema, please utilize the resource `dynatrace_k8s_monitoring` to configure this field."
                    },
                    "clusterId": {
                        "type": "string",
                        "description": "Unique ID of the cluster, the containerized ActiveGate is deployed to. Defaults to the UUID of the kube-system\nnamespace. The cluster ID of containerized ActiveGates is shown on the Deployment status screen.\n"
                    },
                    "clusterIdEnabled": {
                        "type": "boolean",
                        "description": "For more information on local Kubernetes API monitoring, see the [documentation](https://dt-url.net/6q62uep).\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                    },
                    "endpointUrl": {
                        "type": "string",
                        "description": "Get the API URL for [Kubernetes](https://dt-url.net/kz23snj \"Kubernetes\") or [OpenShift](https://dt-url.net/d623xgw\n\"OpenShift\").\n"
                    },
                    "eventPatterns": {
                        "$ref": "#/types/dynatrace:index/KubernetesEventPatterns:KubernetesEventPatterns",
                        "description": "Define Kubernetes event filters to ingest events into your environment. For more details, see the\n[documentation](https://dt-url.net/2201p0u).\n",
                        "deprecationMessage": "This field has been moved to a new schema, please utilize the resource `dynatrace_k8s_monitoring` to configure this field."
                    },
                    "eventProcessingActive": {
                        "type": "boolean",
                        "description": "All events are monitored by default unless event filters are specified. Kubernetes events are subject to Davis data\nunits (DDU) licensing. See [DDUs for events](https://dt-url.net/5n03vcu) for details.\n",
                        "deprecationMessage": "This field has been moved to a new schema, please utilize the resource `dynatrace_k8s_monitoring` to configure this field."
                    },
                    "filterEvents": {
                        "type": "boolean",
                        "description": "Include only events specified by Events Field Selectors\n",
                        "deprecationMessage": "This field has been moved to a new schema, please utilize the resource `dynatrace_k8s_monitoring` to configure this field."
                    },
                    "hostnameVerificationEnabled": {
                        "type": "boolean",
                        "description": "Verify hostname in certificate against Kubernetes API URL\n"
                    },
                    "includeAllFdiEvents": {
                        "type": "boolean",
                        "description": "For a list of included events, see the [documentation](https://dt-url.net/l61d02no).\n",
                        "deprecationMessage": "This field has been moved to a new schema, please utilize the resource `dynatrace_k8s_monitoring` to configure this field."
                    },
                    "label": {
                        "type": "string",
                        "description": "Renaming the cluster breaks configurations that are based on its name (e.g., management zones, and alerting).\n"
                    },
                    "openMetricsBuiltinEnabled": {
                        "type": "boolean",
                        "description": "The workload resource metrics are based on a subset of cAdvisor metrics. Depending on your Kubernetes cluster size, this\nmay increase the CPU/memory resource consumption of your ActiveGate.\n",
                        "deprecationMessage": "This field has been moved to a new schema, please utilize the resource `dynatrace_k8s_monitoring` to configure this field."
                    },
                    "openMetricsPipelineEnabled": {
                        "type": "boolean",
                        "description": "For annotation guidance, see the [documentation](https://dt-url.net/g42i0ppw).\n",
                        "deprecationMessage": "This field has been moved to a new schema, please utilize the resource `dynatrace_k8s_monitoring` to configure this field."
                    },
                    "pvcMonitoringEnabled": {
                        "type": "boolean",
                        "description": "To enable dashboards and alerts, add the [Kubernetes persistent volume\nclaims](ui/hub/ext/com.dynatrace.extension.kubernetes-pvc) extension to your environment.\n",
                        "deprecationMessage": "This field has been moved to a new schema, please utilize the resource `dynatrace_k8s_monitoring` to configure this field."
                    },
                    "scope": {
                        "type": "string",
                        "description": "The scope of this setting (KUBERNETES_CLUSTER)\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/kubernetesApp:KubernetesApp": {
            "properties": {
                "kubernetesAppOptions": {
                    "$ref": "#/types/dynatrace:index/KubernetesAppKubernetesAppOptions:KubernetesAppKubernetesAppOptions",
                    "description": "no documentation available\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of this setting (KUBERNETES_CLUSTER). Omit this property if you want to cover the whole environment.\n"
                }
            },
            "required": [
                "kubernetesAppOptions"
            ],
            "inputProperties": {
                "kubernetesAppOptions": {
                    "$ref": "#/types/dynatrace:index/KubernetesAppKubernetesAppOptions:KubernetesAppKubernetesAppOptions",
                    "description": "no documentation available\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of this setting (KUBERNETES_CLUSTER). Omit this property if you want to cover the whole environment.\n"
                }
            },
            "requiredInputs": [
                "kubernetesAppOptions"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering KubernetesApp resources.\n",
                "properties": {
                    "kubernetesAppOptions": {
                        "$ref": "#/types/dynatrace:index/KubernetesAppKubernetesAppOptions:KubernetesAppKubernetesAppOptions",
                        "description": "no documentation available\n"
                    },
                    "scope": {
                        "type": "string",
                        "description": "The scope of this setting (KUBERNETES_CLUSTER). Omit this property if you want to cover the whole environment.\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/limitOutboundConnections:LimitOutboundConnections": {
            "properties": {
                "allowedOutboundConnections": {
                    "$ref": "#/types/dynatrace:index/LimitOutboundConnectionsAllowedOutboundConnections:LimitOutboundConnectionsAllowedOutboundConnections",
                    "description": "no documentation available\n"
                }
            },
            "required": [
                "allowedOutboundConnections"
            ],
            "inputProperties": {
                "allowedOutboundConnections": {
                    "$ref": "#/types/dynatrace:index/LimitOutboundConnectionsAllowedOutboundConnections:LimitOutboundConnectionsAllowedOutboundConnections",
                    "description": "no documentation available\n"
                }
            },
            "requiredInputs": [
                "allowedOutboundConnections"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LimitOutboundConnections resources.\n",
                "properties": {
                    "allowedOutboundConnections": {
                        "$ref": "#/types/dynatrace:index/LimitOutboundConnectionsAllowedOutboundConnections:LimitOutboundConnectionsAllowedOutboundConnections",
                        "description": "no documentation available\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/logBuckets:LogBuckets": {
            "properties": {
                "bucketName": {
                    "type": "string",
                    "description": "A 'bucket' is the length of time your logs will be stored. Select the bucket that's best for you.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "insertAfter": {
                    "type": "string",
                    "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                },
                "matcher": {
                    "type": "string",
                    "description": "Matcher (DQL)\n"
                },
                "ruleName": {
                    "type": "string",
                    "description": "Rule name\n"
                }
            },
            "required": [
                "bucketName",
                "enabled",
                "insertAfter",
                "matcher",
                "ruleName"
            ],
            "inputProperties": {
                "bucketName": {
                    "type": "string",
                    "description": "A 'bucket' is the length of time your logs will be stored. Select the bucket that's best for you.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "insertAfter": {
                    "type": "string",
                    "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                },
                "matcher": {
                    "type": "string",
                    "description": "Matcher (DQL)\n"
                },
                "ruleName": {
                    "type": "string",
                    "description": "Rule name\n"
                }
            },
            "requiredInputs": [
                "bucketName",
                "enabled",
                "matcher",
                "ruleName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LogBuckets resources.\n",
                "properties": {
                    "bucketName": {
                        "type": "string",
                        "description": "A 'bucket' is the length of time your logs will be stored. Select the bucket that's best for you.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                    },
                    "insertAfter": {
                        "type": "string",
                        "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                    },
                    "matcher": {
                        "type": "string",
                        "description": "Matcher (DQL)\n"
                    },
                    "ruleName": {
                        "type": "string",
                        "description": "Rule name\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/logCustomAttribute:LogCustomAttribute": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The attribute key is case insensitive in log data ingestion.\n"
                },
                "sidebar": {
                    "type": "boolean",
                    "description": "Show attribute values in side bar\n"
                }
            },
            "required": [
                "key",
                "sidebar"
            ],
            "inputProperties": {
                "key": {
                    "type": "string",
                    "description": "The attribute key is case insensitive in log data ingestion.\n",
                    "willReplaceOnChanges": true
                },
                "sidebar": {
                    "type": "boolean",
                    "description": "Show attribute values in side bar\n"
                }
            },
            "requiredInputs": [
                "key",
                "sidebar"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LogCustomAttribute resources.\n",
                "properties": {
                    "key": {
                        "type": "string",
                        "description": "The attribute key is case insensitive in log data ingestion.\n",
                        "willReplaceOnChanges": true
                    },
                    "sidebar": {
                        "type": "boolean",
                        "description": "Show attribute values in side bar\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/logCustomSource:LogCustomSource": {
            "properties": {
                "context": {
                    "$ref": "#/types/dynatrace:index/LogCustomSourceContext:LogCustomSourceContext",
                    "description": "Define Custom Log Source only within context if provided\n"
                },
                "customLogSource": {
                    "$ref": "#/types/dynatrace:index/LogCustomSourceCustomLogSource:LogCustomSourceCustomLogSource",
                    "description": "no documentation available\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.\n"
                }
            },
            "required": [
                "customLogSource",
                "enabled",
                "name"
            ],
            "inputProperties": {
                "context": {
                    "$ref": "#/types/dynatrace:index/LogCustomSourceContext:LogCustomSourceContext",
                    "description": "Define Custom Log Source only within context if provided\n"
                },
                "customLogSource": {
                    "$ref": "#/types/dynatrace:index/LogCustomSourceCustomLogSource:LogCustomSourceCustomLogSource",
                    "description": "no documentation available\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "customLogSource",
                "enabled"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LogCustomSource resources.\n",
                "properties": {
                    "context": {
                        "$ref": "#/types/dynatrace:index/LogCustomSourceContext:LogCustomSourceContext",
                        "description": "Define Custom Log Source only within context if provided\n"
                    },
                    "customLogSource": {
                        "$ref": "#/types/dynatrace:index/LogCustomSourceCustomLogSource:LogCustomSourceCustomLogSource",
                        "description": "no documentation available\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name\n"
                    },
                    "scope": {
                        "type": "string",
                        "description": "The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/logEvents:LogEvents": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "eventTemplate": {
                    "$ref": "#/types/dynatrace:index/LogEventsEventTemplate:LogEventsEventTemplate",
                    "description": "Event template\n"
                },
                "query": {
                    "type": "string",
                    "description": "Log query\n"
                },
                "summary": {
                    "type": "string",
                    "description": "The textual summary of the log event entry\n"
                }
            },
            "required": [
                "enabled",
                "eventTemplate",
                "query",
                "summary"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "eventTemplate": {
                    "$ref": "#/types/dynatrace:index/LogEventsEventTemplate:LogEventsEventTemplate",
                    "description": "Event template\n"
                },
                "query": {
                    "type": "string",
                    "description": "Log query\n"
                },
                "summary": {
                    "type": "string",
                    "description": "The textual summary of the log event entry\n"
                }
            },
            "requiredInputs": [
                "enabled",
                "eventTemplate",
                "query",
                "summary"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LogEvents resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                    },
                    "eventTemplate": {
                        "$ref": "#/types/dynatrace:index/LogEventsEventTemplate:LogEventsEventTemplate",
                        "description": "Event template\n"
                    },
                    "query": {
                        "type": "string",
                        "description": "Log query\n"
                    },
                    "summary": {
                        "type": "string",
                        "description": "The textual summary of the log event entry\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/logGrail:LogGrail": {
            "properties": {
                "activated": {
                    "type": "boolean",
                    "description": "Activate logs powered by Grail.\n"
                },
                "parallelIngestPeriod": {
                    "type": "string",
                    "description": "Possible Values: `NONE`, `SEVEN_DAYS`, `THIRTY_FIVE_DAYS`\n"
                }
            },
            "required": [
                "activated",
                "parallelIngestPeriod"
            ],
            "inputProperties": {
                "activated": {
                    "type": "boolean",
                    "description": "Activate logs powered by Grail.\n"
                },
                "parallelIngestPeriod": {
                    "type": "string",
                    "description": "Possible Values: `NONE`, `SEVEN_DAYS`, `THIRTY_FIVE_DAYS`\n"
                }
            },
            "requiredInputs": [
                "activated",
                "parallelIngestPeriod"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LogGrail resources.\n",
                "properties": {
                    "activated": {
                        "type": "boolean",
                        "description": "Activate logs powered by Grail.\n"
                    },
                    "parallelIngestPeriod": {
                        "type": "string",
                        "description": "Possible Values: `NONE`, `SEVEN_DAYS`, `THIRTY_FIVE_DAYS`\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/logMetrics:LogMetrics": {
            "properties": {
                "dimensions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "To enable splitting on your metric, add desired dimensions. You can select a dimension name from the list or set it to\nany value. To extract fields from logs, you can use [log processing](builtin:logmonitoring.log-dpp-rules).\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "key": {
                    "type": "string",
                    "description": "Metric key\n"
                },
                "measure": {
                    "type": "string",
                    "description": "Possible Values: `OCCURRENCE`, `ATTRIBUTE`\n"
                },
                "measureAttribute": {
                    "type": "string",
                    "description": "Attribute\n"
                },
                "query": {
                    "type": "string",
                    "description": "Matcher\n"
                }
            },
            "required": [
                "enabled",
                "key",
                "measure",
                "query"
            ],
            "inputProperties": {
                "dimensions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "To enable splitting on your metric, add desired dimensions. You can select a dimension name from the list or set it to\nany value. To extract fields from logs, you can use [log processing](builtin:logmonitoring.log-dpp-rules).\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "key": {
                    "type": "string",
                    "description": "Metric key\n"
                },
                "measure": {
                    "type": "string",
                    "description": "Possible Values: `OCCURRENCE`, `ATTRIBUTE`\n"
                },
                "measureAttribute": {
                    "type": "string",
                    "description": "Attribute\n"
                },
                "query": {
                    "type": "string",
                    "description": "Matcher\n"
                }
            },
            "requiredInputs": [
                "enabled",
                "key",
                "measure",
                "query"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LogMetrics resources.\n",
                "properties": {
                    "dimensions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "To enable splitting on your metric, add desired dimensions. You can select a dimension name from the list or set it to\nany value. To extract fields from logs, you can use [log processing](builtin:logmonitoring.log-dpp-rules).\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                    },
                    "key": {
                        "type": "string",
                        "description": "Metric key\n"
                    },
                    "measure": {
                        "type": "string",
                        "description": "Possible Values: `OCCURRENCE`, `ATTRIBUTE`\n"
                    },
                    "measureAttribute": {
                        "type": "string",
                        "description": "Attribute\n"
                    },
                    "query": {
                        "type": "string",
                        "description": "Matcher\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/logOneagent:LogOneagent": {
            "properties": {
                "containerTimezoneHeuristicEnabled": {
                    "type": "boolean",
                    "description": "Enables automatic detection of timezone in container's logs if it is not explicitly defined in content or configured.\n"
                },
                "containersLogsDetectionEnabled": {
                    "type": "boolean",
                    "description": "Allows detection of log messages written to the containerized application's stdout/stderr streams.\n"
                },
                "dateSearchLimitBytes": {
                    "type": "integer",
                    "description": "Defines the number of characters in every log line (starting from the first character in the line) where the timestamp\nis searched.\n"
                },
                "defaultTimezone": {
                    "type": "string",
                    "description": "Default timezone for agent if more specific configurations is not defined.\n"
                },
                "eventLogQueryTimeoutSec": {
                    "type": "integer",
                    "description": "Defines the maximum timeout value, in seconds, for the query extracting Windows Event Logs\n"
                },
                "iisdetectionEnabled": {
                    "type": "boolean",
                    "description": "Allows detection of logs and event logs written by IIS server.\n"
                },
                "logScannerLinuxNfsEnabled": {
                    "type": "boolean",
                    "description": "Allows detection of logs written to mounted network storage drives.\n"
                },
                "maxLgisPerEntityCount": {
                    "type": "integer",
                    "description": "Defines the maximum number of log group instances per entity after which, the new automatic ones wouldn't be added.\n"
                },
                "minBinaryDetectionLimitBytes": {
                    "type": "integer",
                    "description": "Defines the minimum number of bytes in log file required for binary detection.\n"
                },
                "monitorOwnLogsEnabled": {
                    "type": "boolean",
                    "description": "Enabling this option may affect your licensing costs. For more details, see [documentation](https://dt-url.net/4l02yi8).\n"
                },
                "openLogFilesDetectionEnabled": {
                    "type": "boolean",
                    "description": "Automatically detect logs written by important processes. For more details, check our\n[documentation](https://dt-url.net/7v02z76)\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.\n"
                },
                "severityDetectionLimitBytes": {
                    "type": "integer",
                    "description": "Defines the number of characters in every log line (starting from the first character in the line) where severity is\nsearched.\n"
                },
                "severityDetectionLinesLimit": {
                    "type": "integer",
                    "description": "Defines the number of the first lines of every log entry where severity is searched.\n"
                },
                "systemLogsDetectionEnabled": {
                    "type": "boolean",
                    "description": "Linux: syslog, message log Windows: system, application, security event logs\n"
                }
            },
            "required": [
                "containerTimezoneHeuristicEnabled",
                "containersLogsDetectionEnabled",
                "dateSearchLimitBytes",
                "defaultTimezone",
                "eventLogQueryTimeoutSec",
                "iisdetectionEnabled",
                "logScannerLinuxNfsEnabled",
                "maxLgisPerEntityCount",
                "minBinaryDetectionLimitBytes",
                "monitorOwnLogsEnabled",
                "openLogFilesDetectionEnabled",
                "severityDetectionLimitBytes",
                "severityDetectionLinesLimit",
                "systemLogsDetectionEnabled"
            ],
            "inputProperties": {
                "containerTimezoneHeuristicEnabled": {
                    "type": "boolean",
                    "description": "Enables automatic detection of timezone in container's logs if it is not explicitly defined in content or configured.\n"
                },
                "containersLogsDetectionEnabled": {
                    "type": "boolean",
                    "description": "Allows detection of log messages written to the containerized application's stdout/stderr streams.\n"
                },
                "dateSearchLimitBytes": {
                    "type": "integer",
                    "description": "Defines the number of characters in every log line (starting from the first character in the line) where the timestamp\nis searched.\n"
                },
                "defaultTimezone": {
                    "type": "string",
                    "description": "Default timezone for agent if more specific configurations is not defined.\n"
                },
                "eventLogQueryTimeoutSec": {
                    "type": "integer",
                    "description": "Defines the maximum timeout value, in seconds, for the query extracting Windows Event Logs\n"
                },
                "iisdetectionEnabled": {
                    "type": "boolean",
                    "description": "Allows detection of logs and event logs written by IIS server.\n"
                },
                "logScannerLinuxNfsEnabled": {
                    "type": "boolean",
                    "description": "Allows detection of logs written to mounted network storage drives.\n"
                },
                "maxLgisPerEntityCount": {
                    "type": "integer",
                    "description": "Defines the maximum number of log group instances per entity after which, the new automatic ones wouldn't be added.\n"
                },
                "minBinaryDetectionLimitBytes": {
                    "type": "integer",
                    "description": "Defines the minimum number of bytes in log file required for binary detection.\n"
                },
                "monitorOwnLogsEnabled": {
                    "type": "boolean",
                    "description": "Enabling this option may affect your licensing costs. For more details, see [documentation](https://dt-url.net/4l02yi8).\n"
                },
                "openLogFilesDetectionEnabled": {
                    "type": "boolean",
                    "description": "Automatically detect logs written by important processes. For more details, check our\n[documentation](https://dt-url.net/7v02z76)\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.\n",
                    "willReplaceOnChanges": true
                },
                "severityDetectionLimitBytes": {
                    "type": "integer",
                    "description": "Defines the number of characters in every log line (starting from the first character in the line) where severity is\nsearched.\n"
                },
                "severityDetectionLinesLimit": {
                    "type": "integer",
                    "description": "Defines the number of the first lines of every log entry where severity is searched.\n"
                },
                "systemLogsDetectionEnabled": {
                    "type": "boolean",
                    "description": "Linux: syslog, message log Windows: system, application, security event logs\n"
                }
            },
            "requiredInputs": [
                "containerTimezoneHeuristicEnabled",
                "containersLogsDetectionEnabled",
                "dateSearchLimitBytes",
                "defaultTimezone",
                "eventLogQueryTimeoutSec",
                "iisdetectionEnabled",
                "logScannerLinuxNfsEnabled",
                "maxLgisPerEntityCount",
                "minBinaryDetectionLimitBytes",
                "monitorOwnLogsEnabled",
                "openLogFilesDetectionEnabled",
                "severityDetectionLimitBytes",
                "severityDetectionLinesLimit",
                "systemLogsDetectionEnabled"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LogOneagent resources.\n",
                "properties": {
                    "containerTimezoneHeuristicEnabled": {
                        "type": "boolean",
                        "description": "Enables automatic detection of timezone in container's logs if it is not explicitly defined in content or configured.\n"
                    },
                    "containersLogsDetectionEnabled": {
                        "type": "boolean",
                        "description": "Allows detection of log messages written to the containerized application's stdout/stderr streams.\n"
                    },
                    "dateSearchLimitBytes": {
                        "type": "integer",
                        "description": "Defines the number of characters in every log line (starting from the first character in the line) where the timestamp\nis searched.\n"
                    },
                    "defaultTimezone": {
                        "type": "string",
                        "description": "Default timezone for agent if more specific configurations is not defined.\n"
                    },
                    "eventLogQueryTimeoutSec": {
                        "type": "integer",
                        "description": "Defines the maximum timeout value, in seconds, for the query extracting Windows Event Logs\n"
                    },
                    "iisdetectionEnabled": {
                        "type": "boolean",
                        "description": "Allows detection of logs and event logs written by IIS server.\n"
                    },
                    "logScannerLinuxNfsEnabled": {
                        "type": "boolean",
                        "description": "Allows detection of logs written to mounted network storage drives.\n"
                    },
                    "maxLgisPerEntityCount": {
                        "type": "integer",
                        "description": "Defines the maximum number of log group instances per entity after which, the new automatic ones wouldn't be added.\n"
                    },
                    "minBinaryDetectionLimitBytes": {
                        "type": "integer",
                        "description": "Defines the minimum number of bytes in log file required for binary detection.\n"
                    },
                    "monitorOwnLogsEnabled": {
                        "type": "boolean",
                        "description": "Enabling this option may affect your licensing costs. For more details, see [documentation](https://dt-url.net/4l02yi8).\n"
                    },
                    "openLogFilesDetectionEnabled": {
                        "type": "boolean",
                        "description": "Automatically detect logs written by important processes. For more details, check our\n[documentation](https://dt-url.net/7v02z76)\n"
                    },
                    "scope": {
                        "type": "string",
                        "description": "The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.\n",
                        "willReplaceOnChanges": true
                    },
                    "severityDetectionLimitBytes": {
                        "type": "integer",
                        "description": "Defines the number of characters in every log line (starting from the first character in the line) where severity is\nsearched.\n"
                    },
                    "severityDetectionLinesLimit": {
                        "type": "integer",
                        "description": "Defines the number of the first lines of every log entry where severity is searched.\n"
                    },
                    "systemLogsDetectionEnabled": {
                        "type": "boolean",
                        "description": "Linux: syslog, message log Windows: system, application, security event logs\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/logProcessing:LogProcessing": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "insertAfter": {
                    "type": "string",
                    "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                },
                "processorDefinition": {
                    "$ref": "#/types/dynatrace:index/LogProcessingProcessorDefinition:LogProcessingProcessorDefinition",
                    "description": "## Processor definition Add a rule definition using our syntax. [In our documentation](https://dt-url.net/8k03xm2) you\nwill find instructions and application [examples](https://dt-url.net/m24305t).\n"
                },
                "query": {
                    "type": "string",
                    "description": "Matcher\n"
                },
                "ruleName": {
                    "type": "string",
                    "description": "Rule name\n"
                },
                "ruleTesting": {
                    "$ref": "#/types/dynatrace:index/LogProcessingRuleTesting:LogProcessingRuleTesting",
                    "description": "## Rule testing ### 1. Paste a log / JSON sample\n"
                }
            },
            "required": [
                "enabled",
                "insertAfter",
                "processorDefinition",
                "query",
                "ruleName",
                "ruleTesting"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "insertAfter": {
                    "type": "string",
                    "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                },
                "processorDefinition": {
                    "$ref": "#/types/dynatrace:index/LogProcessingProcessorDefinition:LogProcessingProcessorDefinition",
                    "description": "## Processor definition Add a rule definition using our syntax. [In our documentation](https://dt-url.net/8k03xm2) you\nwill find instructions and application [examples](https://dt-url.net/m24305t).\n"
                },
                "query": {
                    "type": "string",
                    "description": "Matcher\n"
                },
                "ruleName": {
                    "type": "string",
                    "description": "Rule name\n"
                },
                "ruleTesting": {
                    "$ref": "#/types/dynatrace:index/LogProcessingRuleTesting:LogProcessingRuleTesting",
                    "description": "## Rule testing ### 1. Paste a log / JSON sample\n"
                }
            },
            "requiredInputs": [
                "enabled",
                "processorDefinition",
                "query",
                "ruleName",
                "ruleTesting"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LogProcessing resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                    },
                    "insertAfter": {
                        "type": "string",
                        "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                    },
                    "processorDefinition": {
                        "$ref": "#/types/dynatrace:index/LogProcessingProcessorDefinition:LogProcessingProcessorDefinition",
                        "description": "## Processor definition Add a rule definition using our syntax. [In our documentation](https://dt-url.net/8k03xm2) you\nwill find instructions and application [examples](https://dt-url.net/m24305t).\n"
                    },
                    "query": {
                        "type": "string",
                        "description": "Matcher\n"
                    },
                    "ruleName": {
                        "type": "string",
                        "description": "Rule name\n"
                    },
                    "ruleTesting": {
                        "$ref": "#/types/dynatrace:index/LogProcessingRuleTesting:LogProcessingRuleTesting",
                        "description": "## Rule testing ### 1. Paste a log / JSON sample\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/logSecurityContext:LogSecurityContext": {
            "properties": {
                "insertAfter": {
                    "type": "string",
                    "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                },
                "securityContextRule": {
                    "$ref": "#/types/dynatrace:index/LogSecurityContextSecurityContextRule:LogSecurityContextSecurityContextRule",
                    "description": "no documentation available\n"
                }
            },
            "required": [
                "insertAfter",
                "securityContextRule"
            ],
            "inputProperties": {
                "insertAfter": {
                    "type": "string",
                    "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                },
                "securityContextRule": {
                    "$ref": "#/types/dynatrace:index/LogSecurityContextSecurityContextRule:LogSecurityContextSecurityContextRule",
                    "description": "no documentation available\n"
                }
            },
            "requiredInputs": [
                "securityContextRule"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LogSecurityContext resources.\n",
                "properties": {
                    "insertAfter": {
                        "type": "string",
                        "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                    },
                    "securityContextRule": {
                        "$ref": "#/types/dynatrace:index/LogSecurityContextSecurityContextRule:LogSecurityContextSecurityContextRule",
                        "description": "no documentation available\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/logSensitiveDataMasking:LogSensitiveDataMasking": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "insertAfter": {
                    "type": "string",
                    "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                },
                "masking": {
                    "$ref": "#/types/dynatrace:index/LogSensitiveDataMaskingMasking:LogSensitiveDataMaskingMasking",
                    "description": "no documentation available\n"
                },
                "matchers": {
                    "$ref": "#/types/dynatrace:index/LogSensitiveDataMaskingMatchers:LogSensitiveDataMaskingMatchers",
                    "description": "no documentation available\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of this setting (HOST-########, HOST_GROUP-########). Omit this property if you want to cover the whole\nenvironment.\n"
                }
            },
            "required": [
                "enabled",
                "insertAfter",
                "masking",
                "name"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "insertAfter": {
                    "type": "string",
                    "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                },
                "masking": {
                    "$ref": "#/types/dynatrace:index/LogSensitiveDataMaskingMasking:LogSensitiveDataMaskingMasking",
                    "description": "no documentation available\n"
                },
                "matchers": {
                    "$ref": "#/types/dynatrace:index/LogSensitiveDataMaskingMatchers:LogSensitiveDataMaskingMatchers",
                    "description": "no documentation available\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of this setting (HOST-########, HOST_GROUP-########). Omit this property if you want to cover the whole\nenvironment.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "enabled",
                "masking"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LogSensitiveDataMasking resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                    },
                    "insertAfter": {
                        "type": "string",
                        "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                    },
                    "masking": {
                        "$ref": "#/types/dynatrace:index/LogSensitiveDataMaskingMasking:LogSensitiveDataMaskingMasking",
                        "description": "no documentation available\n"
                    },
                    "matchers": {
                        "$ref": "#/types/dynatrace:index/LogSensitiveDataMaskingMatchers:LogSensitiveDataMaskingMatchers",
                        "description": "no documentation available\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name\n"
                    },
                    "scope": {
                        "type": "string",
                        "description": "The scope of this setting (HOST-########, HOST_GROUP-########). Omit this property if you want to cover the whole\nenvironment.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/logStorage:LogStorage": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "insertAfter": {
                    "type": "string",
                    "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                },
                "matchers": {
                    "$ref": "#/types/dynatrace:index/LogStorageMatchers:LogStorageMatchers",
                    "description": "no documentation available\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.\n"
                },
                "sendToStorage": {
                    "type": "boolean",
                    "description": "If `true` matching logs will be included in storage. If `false` matching logs will be excluded from storage.\n"
                }
            },
            "required": [
                "enabled",
                "insertAfter",
                "name",
                "sendToStorage"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "insertAfter": {
                    "type": "string",
                    "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                },
                "matchers": {
                    "$ref": "#/types/dynatrace:index/LogStorageMatchers:LogStorageMatchers",
                    "description": "no documentation available\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.\n",
                    "willReplaceOnChanges": true
                },
                "sendToStorage": {
                    "type": "boolean",
                    "description": "If `true` matching logs will be included in storage. If `false` matching logs will be excluded from storage.\n"
                }
            },
            "requiredInputs": [
                "enabled",
                "sendToStorage"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LogStorage resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                    },
                    "insertAfter": {
                        "type": "string",
                        "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                    },
                    "matchers": {
                        "$ref": "#/types/dynatrace:index/LogStorageMatchers:LogStorageMatchers",
                        "description": "no documentation available\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name\n"
                    },
                    "scope": {
                        "type": "string",
                        "description": "The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.\n",
                        "willReplaceOnChanges": true
                    },
                    "sendToStorage": {
                        "type": "boolean",
                        "description": "If `true` matching logs will be included in storage. If `false` matching logs will be excluded from storage.\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/logTimestamp:LogTimestamp": {
            "properties": {
                "configItemTitle": {
                    "type": "string",
                    "description": "Name\n"
                },
                "dateSearchLimit": {
                    "type": "integer",
                    "description": "(v1.275) Defines the number of characters in every log line (starting from the first character in the line) where the\ntimestamp is searched.\n"
                },
                "dateTimePattern": {
                    "type": "string",
                    "description": "Date-time pattern\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "insertAfter": {
                    "type": "string",
                    "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                },
                "matchers": {
                    "$ref": "#/types/dynatrace:index/LogTimestampMatchers:LogTimestampMatchers",
                    "description": "no documentation available\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "Timezone\n"
                }
            },
            "required": [
                "configItemTitle",
                "dateTimePattern",
                "enabled",
                "insertAfter",
                "timezone"
            ],
            "inputProperties": {
                "configItemTitle": {
                    "type": "string",
                    "description": "Name\n"
                },
                "dateSearchLimit": {
                    "type": "integer",
                    "description": "(v1.275) Defines the number of characters in every log line (starting from the first character in the line) where the\ntimestamp is searched.\n"
                },
                "dateTimePattern": {
                    "type": "string",
                    "description": "Date-time pattern\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "insertAfter": {
                    "type": "string",
                    "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                },
                "matchers": {
                    "$ref": "#/types/dynatrace:index/LogTimestampMatchers:LogTimestampMatchers",
                    "description": "no documentation available\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.\n",
                    "willReplaceOnChanges": true
                },
                "timezone": {
                    "type": "string",
                    "description": "Timezone\n"
                }
            },
            "requiredInputs": [
                "configItemTitle",
                "dateTimePattern",
                "enabled",
                "timezone"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LogTimestamp resources.\n",
                "properties": {
                    "configItemTitle": {
                        "type": "string",
                        "description": "Name\n"
                    },
                    "dateSearchLimit": {
                        "type": "integer",
                        "description": "(v1.275) Defines the number of characters in every log line (starting from the first character in the line) where the\ntimestamp is searched.\n"
                    },
                    "dateTimePattern": {
                        "type": "string",
                        "description": "Date-time pattern\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                    },
                    "insertAfter": {
                        "type": "string",
                        "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                    },
                    "matchers": {
                        "$ref": "#/types/dynatrace:index/LogTimestampMatchers:LogTimestampMatchers",
                        "description": "no documentation available\n"
                    },
                    "scope": {
                        "type": "string",
                        "description": "The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.\n",
                        "willReplaceOnChanges": true
                    },
                    "timezone": {
                        "type": "string",
                        "description": "Timezone\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/mainframeTransactionMonitoring:MainframeTransactionMonitoring": {
            "properties": {
                "groupCicsRegions": {
                    "type": "boolean",
                    "description": "If enabled, CICS regions belonging to the same CICSPlex will be grouped into a single process group. If disabled, a\nprocess group will be created for each CICS region.\n"
                },
                "groupImsRegions": {
                    "type": "boolean",
                    "description": "If enabled, IMS regions belonging to the same subsystem will be grouped into a single process group. If disabled, a\nprocess group will be created for each IMS region.\n"
                },
                "monitorAllCtgProtocols": {
                    "type": "boolean",
                    "description": "If enabled, the CICS Transaction Gateway sensor will trace all EXCI requests including those that are using the TCP/IP\nor SNA protocol.\n"
                },
                "monitorAllIncomingWebRequests": {
                    "type": "boolean",
                    "description": "Dynatrace automatically traces incoming web requests when they are called by already-monitored services. Enable this\nsetting to monitor all incoming web requests. We recommend enabling it only over a short period of time.\n"
                },
                "nodeLimit": {
                    "type": "integer",
                    "description": "We recommend the default limit of 500 nodes. The value 0 means unlimited number of nodes.\n"
                },
                "zosCicsServiceDetectionUsesTransactionId": {
                    "type": "boolean",
                    "description": "If enabled, a CICS service will be created for each monitored transaction ID within a process group. If disabled, a CICS\nservice will be created for each monitored CICS region within a process group. We recommend enabling it only when the\nCICS regions are grouped by their CICSPlex.\n"
                },
                "zosImsServiceDetectionUsesTransactionId": {
                    "type": "boolean",
                    "description": "If enabled, an IMS service will be created for each monitored transaction ID within a process group. If disabled, an IMS\nservice will be created for each monitored IMS region within a process group. We recommend enabling it only when the IMS\nregions are grouped by their subsystem.\n"
                }
            },
            "required": [
                "groupCicsRegions",
                "groupImsRegions",
                "monitorAllCtgProtocols",
                "monitorAllIncomingWebRequests",
                "nodeLimit",
                "zosCicsServiceDetectionUsesTransactionId",
                "zosImsServiceDetectionUsesTransactionId"
            ],
            "inputProperties": {
                "groupCicsRegions": {
                    "type": "boolean",
                    "description": "If enabled, CICS regions belonging to the same CICSPlex will be grouped into a single process group. If disabled, a\nprocess group will be created for each CICS region.\n"
                },
                "groupImsRegions": {
                    "type": "boolean",
                    "description": "If enabled, IMS regions belonging to the same subsystem will be grouped into a single process group. If disabled, a\nprocess group will be created for each IMS region.\n"
                },
                "monitorAllCtgProtocols": {
                    "type": "boolean",
                    "description": "If enabled, the CICS Transaction Gateway sensor will trace all EXCI requests including those that are using the TCP/IP\nor SNA protocol.\n"
                },
                "monitorAllIncomingWebRequests": {
                    "type": "boolean",
                    "description": "Dynatrace automatically traces incoming web requests when they are called by already-monitored services. Enable this\nsetting to monitor all incoming web requests. We recommend enabling it only over a short period of time.\n"
                },
                "nodeLimit": {
                    "type": "integer",
                    "description": "We recommend the default limit of 500 nodes. The value 0 means unlimited number of nodes.\n"
                },
                "zosCicsServiceDetectionUsesTransactionId": {
                    "type": "boolean",
                    "description": "If enabled, a CICS service will be created for each monitored transaction ID within a process group. If disabled, a CICS\nservice will be created for each monitored CICS region within a process group. We recommend enabling it only when the\nCICS regions are grouped by their CICSPlex.\n"
                },
                "zosImsServiceDetectionUsesTransactionId": {
                    "type": "boolean",
                    "description": "If enabled, an IMS service will be created for each monitored transaction ID within a process group. If disabled, an IMS\nservice will be created for each monitored IMS region within a process group. We recommend enabling it only when the IMS\nregions are grouped by their subsystem.\n"
                }
            },
            "requiredInputs": [
                "groupCicsRegions",
                "groupImsRegions",
                "monitorAllCtgProtocols",
                "monitorAllIncomingWebRequests",
                "nodeLimit",
                "zosCicsServiceDetectionUsesTransactionId",
                "zosImsServiceDetectionUsesTransactionId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MainframeTransactionMonitoring resources.\n",
                "properties": {
                    "groupCicsRegions": {
                        "type": "boolean",
                        "description": "If enabled, CICS regions belonging to the same CICSPlex will be grouped into a single process group. If disabled, a\nprocess group will be created for each CICS region.\n"
                    },
                    "groupImsRegions": {
                        "type": "boolean",
                        "description": "If enabled, IMS regions belonging to the same subsystem will be grouped into a single process group. If disabled, a\nprocess group will be created for each IMS region.\n"
                    },
                    "monitorAllCtgProtocols": {
                        "type": "boolean",
                        "description": "If enabled, the CICS Transaction Gateway sensor will trace all EXCI requests including those that are using the TCP/IP\nor SNA protocol.\n"
                    },
                    "monitorAllIncomingWebRequests": {
                        "type": "boolean",
                        "description": "Dynatrace automatically traces incoming web requests when they are called by already-monitored services. Enable this\nsetting to monitor all incoming web requests. We recommend enabling it only over a short period of time.\n"
                    },
                    "nodeLimit": {
                        "type": "integer",
                        "description": "We recommend the default limit of 500 nodes. The value 0 means unlimited number of nodes.\n"
                    },
                    "zosCicsServiceDetectionUsesTransactionId": {
                        "type": "boolean",
                        "description": "If enabled, a CICS service will be created for each monitored transaction ID within a process group. If disabled, a CICS\nservice will be created for each monitored CICS region within a process group. We recommend enabling it only when the\nCICS regions are grouped by their CICSPlex.\n"
                    },
                    "zosImsServiceDetectionUsesTransactionId": {
                        "type": "boolean",
                        "description": "If enabled, an IMS service will be created for each monitored transaction ID within a process group. If disabled, an IMS\nservice will be created for each monitored IMS region within a process group. We recommend enabling it only when the IMS\nregions are grouped by their subsystem.\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/maintenance:Maintenance": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "filters": {
                    "$ref": "#/types/dynatrace:index/MaintenanceFilters:MaintenanceFilters",
                    "description": "## Filters Add filters to limit the scope of maintenance to only select matching entities. If no filter is defined, the\nmaintenance window is valid for the whole environment. Each filter is evaluated separately (**OR**).\n"
                },
                "generalProperties": {
                    "$ref": "#/types/dynatrace:index/MaintenanceGeneralProperties:MaintenanceGeneralProperties",
                    "description": "The general properties of the maintenance window\n"
                },
                "legacyId": {
                    "type": "string",
                    "description": "The ID of this setting when referred to by the Config REST API V1\n"
                },
                "schedule": {
                    "$ref": "#/types/dynatrace:index/MaintenanceSchedule:MaintenanceSchedule",
                    "description": "The schedule of the maintenance window\n"
                }
            },
            "required": [
                "enabled",
                "generalProperties",
                "legacyId",
                "schedule"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "filters": {
                    "$ref": "#/types/dynatrace:index/MaintenanceFilters:MaintenanceFilters",
                    "description": "## Filters Add filters to limit the scope of maintenance to only select matching entities. If no filter is defined, the\nmaintenance window is valid for the whole environment. Each filter is evaluated separately (**OR**).\n"
                },
                "generalProperties": {
                    "$ref": "#/types/dynatrace:index/MaintenanceGeneralProperties:MaintenanceGeneralProperties",
                    "description": "The general properties of the maintenance window\n"
                },
                "legacyId": {
                    "type": "string",
                    "description": "The ID of this setting when referred to by the Config REST API V1\n"
                },
                "schedule": {
                    "$ref": "#/types/dynatrace:index/MaintenanceSchedule:MaintenanceSchedule",
                    "description": "The schedule of the maintenance window\n"
                }
            },
            "requiredInputs": [
                "enabled",
                "generalProperties",
                "schedule"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Maintenance resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                    },
                    "filters": {
                        "$ref": "#/types/dynatrace:index/MaintenanceFilters:MaintenanceFilters",
                        "description": "## Filters Add filters to limit the scope of maintenance to only select matching entities. If no filter is defined, the\nmaintenance window is valid for the whole environment. Each filter is evaluated separately (**OR**).\n"
                    },
                    "generalProperties": {
                        "$ref": "#/types/dynatrace:index/MaintenanceGeneralProperties:MaintenanceGeneralProperties",
                        "description": "The general properties of the maintenance window\n"
                    },
                    "legacyId": {
                        "type": "string",
                        "description": "The ID of this setting when referred to by the Config REST API V1\n"
                    },
                    "schedule": {
                        "$ref": "#/types/dynatrace:index/MaintenanceSchedule:MaintenanceSchedule",
                        "description": "The schedule of the maintenance window\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/maintenanceWindow:MaintenanceWindow": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "A short description of the maintenance purpose\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "The Maintenance Window is enabled or disabled\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the maintenance window, displayed in the UI\n"
                },
                "schedule": {
                    "$ref": "#/types/dynatrace:index/MaintenanceWindowSchedule:MaintenanceWindowSchedule",
                    "description": "The schedule of the maintenance window\n"
                },
                "scope": {
                    "$ref": "#/types/dynatrace:index/MaintenanceWindowScope:MaintenanceWindowScope",
                    "description": "the tiles this Dashboard consist of\n"
                },
                "suppressSynthMonExec": {
                    "type": "boolean",
                    "description": "Suppress execution of synthetic monitors during the maintenance\n"
                },
                "suppression": {
                    "type": "string",
                    "description": "The type of suppression of alerting and problem detection during the maintenance\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the maintenance: planned or unplanned\n"
                },
                "unknowns": {
                    "type": "string",
                    "description": "allows for configuring properties that are not explicitly supported by the current version of this provider\n"
                }
            },
            "required": [
                "name",
                "suppression",
                "type"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "A short description of the maintenance purpose\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "The Maintenance Window is enabled or disabled\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the maintenance window, displayed in the UI\n"
                },
                "schedule": {
                    "$ref": "#/types/dynatrace:index/MaintenanceWindowSchedule:MaintenanceWindowSchedule",
                    "description": "The schedule of the maintenance window\n"
                },
                "scope": {
                    "$ref": "#/types/dynatrace:index/MaintenanceWindowScope:MaintenanceWindowScope",
                    "description": "the tiles this Dashboard consist of\n"
                },
                "suppressSynthMonExec": {
                    "type": "boolean",
                    "description": "Suppress execution of synthetic monitors during the maintenance\n"
                },
                "suppression": {
                    "type": "string",
                    "description": "The type of suppression of alerting and problem detection during the maintenance\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the maintenance: planned or unplanned\n"
                },
                "unknowns": {
                    "type": "string",
                    "description": "allows for configuring properties that are not explicitly supported by the current version of this provider\n"
                }
            },
            "requiredInputs": [
                "suppression",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MaintenanceWindow resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "A short description of the maintenance purpose\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "The Maintenance Window is enabled or disabled\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the maintenance window, displayed in the UI\n"
                    },
                    "schedule": {
                        "$ref": "#/types/dynatrace:index/MaintenanceWindowSchedule:MaintenanceWindowSchedule",
                        "description": "The schedule of the maintenance window\n"
                    },
                    "scope": {
                        "$ref": "#/types/dynatrace:index/MaintenanceWindowScope:MaintenanceWindowScope",
                        "description": "the tiles this Dashboard consist of\n"
                    },
                    "suppressSynthMonExec": {
                        "type": "boolean",
                        "description": "Suppress execution of synthetic monitors during the maintenance\n"
                    },
                    "suppression": {
                        "type": "string",
                        "description": "The type of suppression of alerting and problem detection during the maintenance\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the maintenance: planned or unplanned\n"
                    },
                    "unknowns": {
                        "type": "string",
                        "description": "allows for configuring properties that are not explicitly supported by the current version of this provider\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/managedBackup:ManagedBackup": {
            "properties": {
                "bandwidthLimitMbits": {
                    "type": "integer",
                    "description": "Cassandra backup bandwidth limit in Mbps\n"
                },
                "cassandraScheduledTime": {
                    "type": "integer",
                    "description": "Hour to start Cassandra backups each day.\n"
                },
                "currentState": {
                    "type": "string",
                    "description": "For internal use: current state of rules in JSON format\n"
                },
                "datacenter": {
                    "type": "string",
                    "description": "Datacenter which will create backups\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Backups are enabled (true) or disabled (false).\n"
                },
                "includeLm20Data": {
                    "type": "boolean",
                    "description": "Include (true) or exclude (false) Log Monitoring v2 data\n"
                },
                "includeRumData": {
                    "type": "boolean",
                    "description": "Include user sessions (true) or GDPR compliance (false)\n"
                },
                "includeTsMetricData": {
                    "type": "boolean",
                    "description": "Include time series metric-data (true) or retain configuration data only (false))\n"
                },
                "maxEsSnapshotsToClean": {
                    "type": "integer",
                    "description": "Max number of Elasticsearch snapshots to clean. Elasticsearch snapshots won't be created anymore if there will be more\nbackups to clean than this value.\n"
                },
                "pauseBackups": {
                    "type": "boolean",
                    "description": "Pauses Elasticsearch and Cassandra backups. In comparison to enable/disable backup, this option does not modify any\nconfiguration like Elasticsearch properties.\n"
                },
                "storagePath": {
                    "type": "string",
                    "description": "A full path to the backup archive\n"
                }
            },
            "required": [
                "cassandraScheduledTime",
                "currentState"
            ],
            "inputProperties": {
                "bandwidthLimitMbits": {
                    "type": "integer",
                    "description": "Cassandra backup bandwidth limit in Mbps\n"
                },
                "cassandraScheduledTime": {
                    "type": "integer",
                    "description": "Hour to start Cassandra backups each day.\n"
                },
                "currentState": {
                    "type": "string",
                    "description": "For internal use: current state of rules in JSON format\n"
                },
                "datacenter": {
                    "type": "string",
                    "description": "Datacenter which will create backups\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Backups are enabled (true) or disabled (false).\n"
                },
                "includeLm20Data": {
                    "type": "boolean",
                    "description": "Include (true) or exclude (false) Log Monitoring v2 data\n"
                },
                "includeRumData": {
                    "type": "boolean",
                    "description": "Include user sessions (true) or GDPR compliance (false)\n"
                },
                "includeTsMetricData": {
                    "type": "boolean",
                    "description": "Include time series metric-data (true) or retain configuration data only (false))\n"
                },
                "maxEsSnapshotsToClean": {
                    "type": "integer",
                    "description": "Max number of Elasticsearch snapshots to clean. Elasticsearch snapshots won't be created anymore if there will be more\nbackups to clean than this value.\n"
                },
                "pauseBackups": {
                    "type": "boolean",
                    "description": "Pauses Elasticsearch and Cassandra backups. In comparison to enable/disable backup, this option does not modify any\nconfiguration like Elasticsearch properties.\n"
                },
                "storagePath": {
                    "type": "string",
                    "description": "A full path to the backup archive\n"
                }
            },
            "requiredInputs": [
                "cassandraScheduledTime"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ManagedBackup resources.\n",
                "properties": {
                    "bandwidthLimitMbits": {
                        "type": "integer",
                        "description": "Cassandra backup bandwidth limit in Mbps\n"
                    },
                    "cassandraScheduledTime": {
                        "type": "integer",
                        "description": "Hour to start Cassandra backups each day.\n"
                    },
                    "currentState": {
                        "type": "string",
                        "description": "For internal use: current state of rules in JSON format\n"
                    },
                    "datacenter": {
                        "type": "string",
                        "description": "Datacenter which will create backups\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Backups are enabled (true) or disabled (false).\n"
                    },
                    "includeLm20Data": {
                        "type": "boolean",
                        "description": "Include (true) or exclude (false) Log Monitoring v2 data\n"
                    },
                    "includeRumData": {
                        "type": "boolean",
                        "description": "Include user sessions (true) or GDPR compliance (false)\n"
                    },
                    "includeTsMetricData": {
                        "type": "boolean",
                        "description": "Include time series metric-data (true) or retain configuration data only (false))\n"
                    },
                    "maxEsSnapshotsToClean": {
                        "type": "integer",
                        "description": "Max number of Elasticsearch snapshots to clean. Elasticsearch snapshots won't be created anymore if there will be more\nbackups to clean than this value.\n"
                    },
                    "pauseBackups": {
                        "type": "boolean",
                        "description": "Pauses Elasticsearch and Cassandra backups. In comparison to enable/disable backup, this option does not modify any\nconfiguration like Elasticsearch properties.\n"
                    },
                    "storagePath": {
                        "type": "string",
                        "description": "A full path to the backup archive\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/managedInternetProxy:ManagedInternetProxy": {
            "properties": {
                "nonProxyHosts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Definition of hosts for which proxy won't be used. You can define multiple hosts. Each host can start or end with\nwildcard '*' for instance to match whole domain.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password of proxy server, null means do not change previous value\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "Port of proxy server\n"
                },
                "scheme": {
                    "type": "string",
                    "description": "Protocol which proxy server uses\n"
                },
                "server": {
                    "type": "string",
                    "description": "Address (either IP or Hostname) of proxy server\n"
                },
                "user": {
                    "type": "string",
                    "description": "User of proxy server, null means do not change previous value\n"
                }
            },
            "required": [
                "port",
                "scheme",
                "server"
            ],
            "inputProperties": {
                "nonProxyHosts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Definition of hosts for which proxy won't be used. You can define multiple hosts. Each host can start or end with\nwildcard '*' for instance to match whole domain.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password of proxy server, null means do not change previous value\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "Port of proxy server\n"
                },
                "scheme": {
                    "type": "string",
                    "description": "Protocol which proxy server uses\n"
                },
                "server": {
                    "type": "string",
                    "description": "Address (either IP or Hostname) of proxy server\n"
                },
                "user": {
                    "type": "string",
                    "description": "User of proxy server, null means do not change previous value\n"
                }
            },
            "requiredInputs": [
                "port",
                "scheme",
                "server"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ManagedInternetProxy resources.\n",
                "properties": {
                    "nonProxyHosts": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Definition of hosts for which proxy won't be used. You can define multiple hosts. Each host can start or end with\nwildcard '*' for instance to match whole domain.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "Password of proxy server, null means do not change previous value\n",
                        "secret": true
                    },
                    "port": {
                        "type": "integer",
                        "description": "Port of proxy server\n"
                    },
                    "scheme": {
                        "type": "string",
                        "description": "Protocol which proxy server uses\n"
                    },
                    "server": {
                        "type": "string",
                        "description": "Address (either IP or Hostname) of proxy server\n"
                    },
                    "user": {
                        "type": "string",
                        "description": "User of proxy server, null means do not change previous value\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/managedNetworkZones:ManagedNetworkZones": {
            "properties": {
                "alternativeZones": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of alternative network zones.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A short description of the network zone\n"
                },
                "fallbackMode": {
                    "type": "string",
                    "description": "The fallback mode of the network zone. Possible values: `ANY_ACTIVE_GATE`, `NONE`, `ONLY_DEFAULT_ZONE`\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the network zone cannot be modified once created. Dynatrace stores the field in lowercase, allowed characters:\nalphanumeric, hyphen, underscore, dot\n"
                },
                "numOfConfiguredActivegates": {
                    "type": "integer",
                    "description": "The number of ActiveGates in the network zone.\n"
                },
                "numOfConfiguredOneagents": {
                    "type": "integer",
                    "description": "The number of OneAgents that are configured to use the network zone as primary.\n"
                },
                "numOfOneagentsFromOtherZones": {
                    "type": "integer",
                    "description": "The number of OneAgents from other network zones that are using ActiveGates in the network zone.\n"
                },
                "numOfOneagentsUsing": {
                    "type": "integer",
                    "description": "The number of OneAgents that are using ActiveGates in the network zone.\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "alternativeZones": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of alternative network zones.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A short description of the network zone\n"
                },
                "fallbackMode": {
                    "type": "string",
                    "description": "The fallback mode of the network zone. Possible values: `ANY_ACTIVE_GATE`, `NONE`, `ONLY_DEFAULT_ZONE`\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the network zone cannot be modified once created. Dynatrace stores the field in lowercase, allowed characters:\nalphanumeric, hyphen, underscore, dot\n",
                    "willReplaceOnChanges": true
                },
                "numOfConfiguredActivegates": {
                    "type": "integer",
                    "description": "The number of ActiveGates in the network zone.\n"
                },
                "numOfConfiguredOneagents": {
                    "type": "integer",
                    "description": "The number of OneAgents that are configured to use the network zone as primary.\n"
                },
                "numOfOneagentsFromOtherZones": {
                    "type": "integer",
                    "description": "The number of OneAgents from other network zones that are using ActiveGates in the network zone.\n"
                },
                "numOfOneagentsUsing": {
                    "type": "integer",
                    "description": "The number of OneAgents that are using ActiveGates in the network zone.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ManagedNetworkZones resources.\n",
                "properties": {
                    "alternativeZones": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of alternative network zones.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A short description of the network zone\n"
                    },
                    "fallbackMode": {
                        "type": "string",
                        "description": "The fallback mode of the network zone. Possible values: `ANY_ACTIVE_GATE`, `NONE`, `ONLY_DEFAULT_ZONE`\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the network zone cannot be modified once created. Dynatrace stores the field in lowercase, allowed characters:\nalphanumeric, hyphen, underscore, dot\n",
                        "willReplaceOnChanges": true
                    },
                    "numOfConfiguredActivegates": {
                        "type": "integer",
                        "description": "The number of ActiveGates in the network zone.\n"
                    },
                    "numOfConfiguredOneagents": {
                        "type": "integer",
                        "description": "The number of OneAgents that are configured to use the network zone as primary.\n"
                    },
                    "numOfOneagentsFromOtherZones": {
                        "type": "integer",
                        "description": "The number of OneAgents from other network zones that are using ActiveGates in the network zone.\n"
                    },
                    "numOfOneagentsUsing": {
                        "type": "integer",
                        "description": "The number of OneAgents that are using ActiveGates in the network zone.\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/managedPreferences:ManagedPreferences": {
            "properties": {
                "certificateManagementEnabled": {
                    "type": "boolean",
                    "description": "Default: `false`\n"
                },
                "certificateManagementPossible": {
                    "type": "boolean",
                    "description": "Default: `true`\n"
                },
                "communityCreateUser": {
                    "type": "boolean",
                    "description": "If true, each new user will get an invitation to set up a Dynatrace user account to access Dynatrace support resources\nuser upon first login. Default: `false`\n"
                },
                "communityExternalSearch": {
                    "type": "boolean",
                    "description": "If true, results from Documentation are included in platform search. Default: `false`\n"
                },
                "helpChatEnabled": {
                    "type": "boolean",
                    "description": "If true, live, in-product assistance with our Product Experts is enabled. Default: `false`\n"
                },
                "readOnlyRemoteAccessAllowed": {
                    "type": "boolean",
                    "description": "If true, audited, read-only remote access to your Dynatrace configuration settings is allowed. Default: `false`\n"
                },
                "remoteAccessOnDemandOnly": {
                    "type": "boolean",
                    "description": "If true, audited access to your Dynatrace cluster is allowed by approved Dynatrace employees otherwise by privileged\nDynatrace employees. Default: `false`\n"
                },
                "ruxitMonitorsRuxit": {
                    "type": "boolean",
                    "description": "If true, Dynatrace OneAgent monitors Dynatrace. Default: `true`\n"
                },
                "supportAllowRemoteAccess": {
                    "type": "boolean",
                    "description": "If true, audited remote-access to your Dynatrace configuration is allowed settings. Default: `true`\n"
                },
                "supportSendBilling": {
                    "type": "boolean",
                    "description": "If true, usage and billing information will be reported.\n"
                },
                "supportSendClusterHealth": {
                    "type": "boolean",
                    "description": "If true, Dynatrace cluster health will be reported.\n"
                },
                "supportSendEvents": {
                    "type": "boolean",
                    "description": "If true, Dynatrace cluster health and OneAgent events will be reported. Default: `true`\n"
                },
                "suppressNonBillingRelevantData": {
                    "type": "boolean",
                    "description": "If true, usage and billing information will NOT be reported.\n"
                },
                "telemetrySharing": {
                    "type": "boolean",
                    "description": "Default: `false`\n"
                }
            },
            "required": [
                "ruxitMonitorsRuxit",
                "supportSendBilling",
                "supportSendClusterHealth",
                "suppressNonBillingRelevantData"
            ],
            "inputProperties": {
                "certificateManagementEnabled": {
                    "type": "boolean",
                    "description": "Default: `false`\n"
                },
                "certificateManagementPossible": {
                    "type": "boolean",
                    "description": "Default: `true`\n"
                },
                "communityCreateUser": {
                    "type": "boolean",
                    "description": "If true, each new user will get an invitation to set up a Dynatrace user account to access Dynatrace support resources\nuser upon first login. Default: `false`\n"
                },
                "communityExternalSearch": {
                    "type": "boolean",
                    "description": "If true, results from Documentation are included in platform search. Default: `false`\n"
                },
                "helpChatEnabled": {
                    "type": "boolean",
                    "description": "If true, live, in-product assistance with our Product Experts is enabled. Default: `false`\n"
                },
                "readOnlyRemoteAccessAllowed": {
                    "type": "boolean",
                    "description": "If true, audited, read-only remote access to your Dynatrace configuration settings is allowed. Default: `false`\n"
                },
                "remoteAccessOnDemandOnly": {
                    "type": "boolean",
                    "description": "If true, audited access to your Dynatrace cluster is allowed by approved Dynatrace employees otherwise by privileged\nDynatrace employees. Default: `false`\n"
                },
                "ruxitMonitorsRuxit": {
                    "type": "boolean",
                    "description": "If true, Dynatrace OneAgent monitors Dynatrace. Default: `true`\n"
                },
                "supportAllowRemoteAccess": {
                    "type": "boolean",
                    "description": "If true, audited remote-access to your Dynatrace configuration is allowed settings. Default: `true`\n"
                },
                "supportSendBilling": {
                    "type": "boolean",
                    "description": "If true, usage and billing information will be reported.\n"
                },
                "supportSendClusterHealth": {
                    "type": "boolean",
                    "description": "If true, Dynatrace cluster health will be reported.\n"
                },
                "supportSendEvents": {
                    "type": "boolean",
                    "description": "If true, Dynatrace cluster health and OneAgent events will be reported. Default: `true`\n"
                },
                "suppressNonBillingRelevantData": {
                    "type": "boolean",
                    "description": "If true, usage and billing information will NOT be reported.\n"
                },
                "telemetrySharing": {
                    "type": "boolean",
                    "description": "Default: `false`\n"
                }
            },
            "requiredInputs": [
                "ruxitMonitorsRuxit",
                "supportSendBilling",
                "supportSendClusterHealth",
                "suppressNonBillingRelevantData"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ManagedPreferences resources.\n",
                "properties": {
                    "certificateManagementEnabled": {
                        "type": "boolean",
                        "description": "Default: `false`\n"
                    },
                    "certificateManagementPossible": {
                        "type": "boolean",
                        "description": "Default: `true`\n"
                    },
                    "communityCreateUser": {
                        "type": "boolean",
                        "description": "If true, each new user will get an invitation to set up a Dynatrace user account to access Dynatrace support resources\nuser upon first login. Default: `false`\n"
                    },
                    "communityExternalSearch": {
                        "type": "boolean",
                        "description": "If true, results from Documentation are included in platform search. Default: `false`\n"
                    },
                    "helpChatEnabled": {
                        "type": "boolean",
                        "description": "If true, live, in-product assistance with our Product Experts is enabled. Default: `false`\n"
                    },
                    "readOnlyRemoteAccessAllowed": {
                        "type": "boolean",
                        "description": "If true, audited, read-only remote access to your Dynatrace configuration settings is allowed. Default: `false`\n"
                    },
                    "remoteAccessOnDemandOnly": {
                        "type": "boolean",
                        "description": "If true, audited access to your Dynatrace cluster is allowed by approved Dynatrace employees otherwise by privileged\nDynatrace employees. Default: `false`\n"
                    },
                    "ruxitMonitorsRuxit": {
                        "type": "boolean",
                        "description": "If true, Dynatrace OneAgent monitors Dynatrace. Default: `true`\n"
                    },
                    "supportAllowRemoteAccess": {
                        "type": "boolean",
                        "description": "If true, audited remote-access to your Dynatrace configuration is allowed settings. Default: `true`\n"
                    },
                    "supportSendBilling": {
                        "type": "boolean",
                        "description": "If true, usage and billing information will be reported.\n"
                    },
                    "supportSendClusterHealth": {
                        "type": "boolean",
                        "description": "If true, Dynatrace cluster health will be reported.\n"
                    },
                    "supportSendEvents": {
                        "type": "boolean",
                        "description": "If true, Dynatrace cluster health and OneAgent events will be reported. Default: `true`\n"
                    },
                    "suppressNonBillingRelevantData": {
                        "type": "boolean",
                        "description": "If true, usage and billing information will NOT be reported.\n"
                    },
                    "telemetrySharing": {
                        "type": "boolean",
                        "description": "Default: `false`\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/managedPublicEndpoints:ManagedPublicEndpoints": {
            "properties": {
                "additionalWebUiAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Additional web UI addresses\n"
                },
                "beaconForwarderAddress": {
                    "type": "string",
                    "description": "Beacon forwarder address\n"
                },
                "cdnAddress": {
                    "type": "string",
                    "description": "CDN address\n"
                },
                "webUiAddress": {
                    "type": "string",
                    "description": "Web UI address\n"
                }
            },
            "inputProperties": {
                "additionalWebUiAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Additional web UI addresses\n"
                },
                "beaconForwarderAddress": {
                    "type": "string",
                    "description": "Beacon forwarder address\n"
                },
                "cdnAddress": {
                    "type": "string",
                    "description": "CDN address\n"
                },
                "webUiAddress": {
                    "type": "string",
                    "description": "Web UI address\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ManagedPublicEndpoints resources.\n",
                "properties": {
                    "additionalWebUiAddresses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Additional web UI addresses\n"
                    },
                    "beaconForwarderAddress": {
                        "type": "string",
                        "description": "Beacon forwarder address\n"
                    },
                    "cdnAddress": {
                        "type": "string",
                        "description": "CDN address\n"
                    },
                    "webUiAddress": {
                        "type": "string",
                        "description": "Web UI address\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/managedRemoteAccess:ManagedRemoteAccess": {
            "properties": {
                "reason": {
                    "type": "string",
                    "description": "Request reason description, cannot be changed once created\n"
                },
                "requestedDays": {
                    "type": "integer",
                    "description": "For how many days access is requested, cannot be changed once created\n"
                },
                "role": {
                    "type": "string",
                    "description": "Requested role, cannot be changed once created\n"
                },
                "state": {
                    "type": "string",
                    "description": "Access request state. Automatically set as `ACCEPTED` on create, state can be changed in subsequent updates.\n"
                },
                "userId": {
                    "type": "string",
                    "description": "User id, cannot be changed once created\n"
                }
            },
            "required": [
                "reason",
                "requestedDays",
                "role",
                "userId"
            ],
            "inputProperties": {
                "reason": {
                    "type": "string",
                    "description": "Request reason description, cannot be changed once created\n"
                },
                "requestedDays": {
                    "type": "integer",
                    "description": "For how many days access is requested, cannot be changed once created\n"
                },
                "role": {
                    "type": "string",
                    "description": "Requested role, cannot be changed once created\n"
                },
                "state": {
                    "type": "string",
                    "description": "Access request state. Automatically set as `ACCEPTED` on create, state can be changed in subsequent updates.\n"
                },
                "userId": {
                    "type": "string",
                    "description": "User id, cannot be changed once created\n"
                }
            },
            "requiredInputs": [
                "reason",
                "requestedDays",
                "role",
                "userId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ManagedRemoteAccess resources.\n",
                "properties": {
                    "reason": {
                        "type": "string",
                        "description": "Request reason description, cannot be changed once created\n"
                    },
                    "requestedDays": {
                        "type": "integer",
                        "description": "For how many days access is requested, cannot be changed once created\n"
                    },
                    "role": {
                        "type": "string",
                        "description": "Requested role, cannot be changed once created\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "Access request state. Automatically set as `ACCEPTED` on create, state can be changed in subsequent updates.\n"
                    },
                    "userId": {
                        "type": "string",
                        "description": "User id, cannot be changed once created\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/managedSmtp:ManagedSmtp": {
            "properties": {
                "allowFallbackViaMissionControl": {
                    "type": "boolean",
                    "description": "If true, we will send e-mails via Mission Control in case of problems with SMTP server.\n"
                },
                "connectionSecurity": {
                    "type": "string",
                    "description": "Connection security, possible values: `NO_ENCRYPTION`, `OPTIONAL_STARTTLS`, `REQUIRE_STARTTLS`, `TLS`. Default:\n`NO_ENCRYPTION`\n"
                },
                "hostName": {
                    "type": "string",
                    "description": "Host Name\n"
                },
                "isPasswordConfigured": {
                    "type": "boolean",
                    "description": "If true, a password has been configured. Default: `false`.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "Integer value of port. Default: `25`\n"
                },
                "senderEmailAddress": {
                    "type": "string",
                    "description": "Sender email address\n"
                },
                "useSmtpServer": {
                    "type": "boolean",
                    "description": "If true, we will send e-mails via SMTP server.\n"
                },
                "userName": {
                    "type": "string",
                    "description": "User Name\n"
                }
            },
            "required": [
                "hostName",
                "password",
                "senderEmailAddress",
                "userName"
            ],
            "inputProperties": {
                "allowFallbackViaMissionControl": {
                    "type": "boolean",
                    "description": "If true, we will send e-mails via Mission Control in case of problems with SMTP server.\n"
                },
                "connectionSecurity": {
                    "type": "string",
                    "description": "Connection security, possible values: `NO_ENCRYPTION`, `OPTIONAL_STARTTLS`, `REQUIRE_STARTTLS`, `TLS`. Default:\n`NO_ENCRYPTION`\n"
                },
                "hostName": {
                    "type": "string",
                    "description": "Host Name\n"
                },
                "isPasswordConfigured": {
                    "type": "boolean",
                    "description": "If true, a password has been configured. Default: `false`.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "Integer value of port. Default: `25`\n"
                },
                "senderEmailAddress": {
                    "type": "string",
                    "description": "Sender email address\n"
                },
                "useSmtpServer": {
                    "type": "boolean",
                    "description": "If true, we will send e-mails via SMTP server.\n"
                },
                "userName": {
                    "type": "string",
                    "description": "User Name\n"
                }
            },
            "requiredInputs": [
                "hostName",
                "password",
                "senderEmailAddress",
                "userName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ManagedSmtp resources.\n",
                "properties": {
                    "allowFallbackViaMissionControl": {
                        "type": "boolean",
                        "description": "If true, we will send e-mails via Mission Control in case of problems with SMTP server.\n"
                    },
                    "connectionSecurity": {
                        "type": "string",
                        "description": "Connection security, possible values: `NO_ENCRYPTION`, `OPTIONAL_STARTTLS`, `REQUIRE_STARTTLS`, `TLS`. Default:\n`NO_ENCRYPTION`\n"
                    },
                    "hostName": {
                        "type": "string",
                        "description": "Host Name\n"
                    },
                    "isPasswordConfigured": {
                        "type": "boolean",
                        "description": "If true, a password has been configured. Default: `false`.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "Password\n",
                        "secret": true
                    },
                    "port": {
                        "type": "integer",
                        "description": "Integer value of port. Default: `25`\n"
                    },
                    "senderEmailAddress": {
                        "type": "string",
                        "description": "Sender email address\n"
                    },
                    "useSmtpServer": {
                        "type": "boolean",
                        "description": "If true, we will send e-mails via SMTP server.\n"
                    },
                    "userName": {
                        "type": "string",
                        "description": "User Name\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/managementZone:ManagementZone": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the management zone\n"
                },
                "dimensionalRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ManagementZoneDimensionalRule:ManagementZoneDimensionalRule"
                    },
                    "description": "A list of dimensional data rules for management zone usage. If several rules are specified, the `or` logic applies\n"
                },
                "entitySelectorBasedRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ManagementZoneEntitySelectorBasedRule:ManagementZoneEntitySelectorBasedRule"
                    },
                    "description": "A list of entity-selector based rules for management zone usage. If several rules are specified, the `or` logic applies\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the management zone\n"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ManagementZoneRule:ManagementZoneRule"
                    },
                    "description": "A list of rules for management zone usage. Each rule is evaluated independently of all other rules\n"
                },
                "unknowns": {
                    "type": "string",
                    "description": "allows for configuring properties that are not explicitly supported by the current version of this provider\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the management zone\n"
                },
                "dimensionalRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ManagementZoneDimensionalRule:ManagementZoneDimensionalRule"
                    },
                    "description": "A list of dimensional data rules for management zone usage. If several rules are specified, the `or` logic applies\n"
                },
                "entitySelectorBasedRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ManagementZoneEntitySelectorBasedRule:ManagementZoneEntitySelectorBasedRule"
                    },
                    "description": "A list of entity-selector based rules for management zone usage. If several rules are specified, the `or` logic applies\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the management zone\n"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ManagementZoneRule:ManagementZoneRule"
                    },
                    "description": "A list of rules for management zone usage. Each rule is evaluated independently of all other rules\n"
                },
                "unknowns": {
                    "type": "string",
                    "description": "allows for configuring properties that are not explicitly supported by the current version of this provider\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ManagementZone resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the management zone\n"
                    },
                    "dimensionalRules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/dynatrace:index/ManagementZoneDimensionalRule:ManagementZoneDimensionalRule"
                        },
                        "description": "A list of dimensional data rules for management zone usage. If several rules are specified, the `or` logic applies\n"
                    },
                    "entitySelectorBasedRules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/dynatrace:index/ManagementZoneEntitySelectorBasedRule:ManagementZoneEntitySelectorBasedRule"
                        },
                        "description": "A list of entity-selector based rules for management zone usage. If several rules are specified, the `or` logic applies\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the management zone\n"
                    },
                    "rules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/dynatrace:index/ManagementZoneRule:ManagementZoneRule"
                        },
                        "description": "A list of rules for management zone usage. Each rule is evaluated independently of all other rules\n"
                    },
                    "unknowns": {
                        "type": "string",
                        "description": "allows for configuring properties that are not explicitly supported by the current version of this provider\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/managementZoneV2:ManagementZoneV2": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description\n"
                },
                "legacyId": {
                    "type": "string",
                    "description": "The ID of this setting when referred to by the Config REST API V1\n"
                },
                "name": {
                    "type": "string",
                    "description": "**Be careful when renaming** - if there are policies that are referencing this Management zone, they will need to be\nadapted to the new name!\n"
                },
                "rules": {
                    "$ref": "#/types/dynatrace:index/ManagementZoneV2Rules:ManagementZoneV2Rules",
                    "description": "Rules\n"
                }
            },
            "required": [
                "legacyId",
                "name"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description\n"
                },
                "legacyId": {
                    "type": "string",
                    "description": "The ID of this setting when referred to by the Config REST API V1\n"
                },
                "name": {
                    "type": "string",
                    "description": "**Be careful when renaming** - if there are policies that are referencing this Management zone, they will need to be\nadapted to the new name!\n"
                },
                "rules": {
                    "$ref": "#/types/dynatrace:index/ManagementZoneV2Rules:ManagementZoneV2Rules",
                    "description": "Rules\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ManagementZoneV2 resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description\n"
                    },
                    "legacyId": {
                        "type": "string",
                        "description": "The ID of this setting when referred to by the Config REST API V1\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "**Be careful when renaming** - if there are policies that are referencing this Management zone, they will need to be\nadapted to the new name!\n"
                    },
                    "rules": {
                        "$ref": "#/types/dynatrace:index/ManagementZoneV2Rules:ManagementZoneV2Rules",
                        "description": "Rules\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/metricEvents:MetricEvents": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "eventEntityDimensionKey": {
                    "type": "string",
                    "description": "Controls the preferred entity type used for triggered events.\n"
                },
                "eventTemplate": {
                    "$ref": "#/types/dynatrace:index/MetricEventsEventTemplate:MetricEventsEventTemplate",
                    "description": "Event template\n"
                },
                "legacyId": {
                    "type": "string",
                    "description": "Config id\n"
                },
                "modelProperties": {
                    "$ref": "#/types/dynatrace:index/MetricEventsModelProperties:MetricEventsModelProperties",
                    "description": "Monitoring strategy\n"
                },
                "queryDefinition": {
                    "$ref": "#/types/dynatrace:index/MetricEventsQueryDefinition:MetricEventsQueryDefinition",
                    "description": "Query definition\n"
                },
                "summary": {
                    "type": "string",
                    "description": "The textual summary of the metric event entry\n"
                }
            },
            "required": [
                "enabled",
                "eventTemplate",
                "legacyId",
                "modelProperties",
                "queryDefinition",
                "summary"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "eventEntityDimensionKey": {
                    "type": "string",
                    "description": "Controls the preferred entity type used for triggered events.\n"
                },
                "eventTemplate": {
                    "$ref": "#/types/dynatrace:index/MetricEventsEventTemplate:MetricEventsEventTemplate",
                    "description": "Event template\n"
                },
                "legacyId": {
                    "type": "string",
                    "description": "Config id\n"
                },
                "modelProperties": {
                    "$ref": "#/types/dynatrace:index/MetricEventsModelProperties:MetricEventsModelProperties",
                    "description": "Monitoring strategy\n"
                },
                "queryDefinition": {
                    "$ref": "#/types/dynatrace:index/MetricEventsQueryDefinition:MetricEventsQueryDefinition",
                    "description": "Query definition\n"
                },
                "summary": {
                    "type": "string",
                    "description": "The textual summary of the metric event entry\n"
                }
            },
            "requiredInputs": [
                "enabled",
                "eventTemplate",
                "modelProperties",
                "queryDefinition",
                "summary"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MetricEvents resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                    },
                    "eventEntityDimensionKey": {
                        "type": "string",
                        "description": "Controls the preferred entity type used for triggered events.\n"
                    },
                    "eventTemplate": {
                        "$ref": "#/types/dynatrace:index/MetricEventsEventTemplate:MetricEventsEventTemplate",
                        "description": "Event template\n"
                    },
                    "legacyId": {
                        "type": "string",
                        "description": "Config id\n"
                    },
                    "modelProperties": {
                        "$ref": "#/types/dynatrace:index/MetricEventsModelProperties:MetricEventsModelProperties",
                        "description": "Monitoring strategy\n"
                    },
                    "queryDefinition": {
                        "$ref": "#/types/dynatrace:index/MetricEventsQueryDefinition:MetricEventsQueryDefinition",
                        "description": "Query definition\n"
                    },
                    "summary": {
                        "type": "string",
                        "description": "The textual summary of the metric event entry\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/metricMetadata:MetricMetadata": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description\n"
                },
                "dimensions": {
                    "$ref": "#/types/dynatrace:index/MetricMetadataDimensions:MetricMetadataDimensions",
                    "description": "Define metadata per metric dimension.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name\n"
                },
                "metricId": {
                    "type": "string",
                    "description": "The scope of this setting (metric)\n"
                },
                "metricProperties": {
                    "$ref": "#/types/dynatrace:index/MetricMetadataMetricProperties:MetricMetadataMetricProperties",
                    "description": "Metric properties\n"
                },
                "sourceEntityType": {
                    "type": "string",
                    "description": "Specifies which entity dimension should be used as the primary dimension. The property can only be configured for\nmetrics ingested with the Metrics API.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags\n"
                },
                "unit": {
                    "type": "string",
                    "description": "Unit\n"
                },
                "unitDisplayFormat": {
                    "type": "string",
                    "description": "The raw value is stored in bits or bytes. The user interface can display it in these numeral systems: Binary: 1 MiB =\n1024 KiB = 1,048,576 bytes Decimal: 1 MB = 1000 kB = 1,000,000 bytes If not set, the decimal system is used.\n"
                }
            },
            "required": [
                "metricId",
                "unit"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description\n"
                },
                "dimensions": {
                    "$ref": "#/types/dynatrace:index/MetricMetadataDimensions:MetricMetadataDimensions",
                    "description": "Define metadata per metric dimension.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name\n"
                },
                "metricId": {
                    "type": "string",
                    "description": "The scope of this setting (metric)\n",
                    "willReplaceOnChanges": true
                },
                "metricProperties": {
                    "$ref": "#/types/dynatrace:index/MetricMetadataMetricProperties:MetricMetadataMetricProperties",
                    "description": "Metric properties\n"
                },
                "sourceEntityType": {
                    "type": "string",
                    "description": "Specifies which entity dimension should be used as the primary dimension. The property can only be configured for\nmetrics ingested with the Metrics API.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags\n"
                },
                "unit": {
                    "type": "string",
                    "description": "Unit\n"
                },
                "unitDisplayFormat": {
                    "type": "string",
                    "description": "The raw value is stored in bits or bytes. The user interface can display it in these numeral systems: Binary: 1 MiB =\n1024 KiB = 1,048,576 bytes Decimal: 1 MB = 1000 kB = 1,000,000 bytes If not set, the decimal system is used.\n"
                }
            },
            "requiredInputs": [
                "metricId",
                "unit"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MetricMetadata resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description\n"
                    },
                    "dimensions": {
                        "$ref": "#/types/dynatrace:index/MetricMetadataDimensions:MetricMetadataDimensions",
                        "description": "Define metadata per metric dimension.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Display name\n"
                    },
                    "metricId": {
                        "type": "string",
                        "description": "The scope of this setting (metric)\n",
                        "willReplaceOnChanges": true
                    },
                    "metricProperties": {
                        "$ref": "#/types/dynatrace:index/MetricMetadataMetricProperties:MetricMetadataMetricProperties",
                        "description": "Metric properties\n"
                    },
                    "sourceEntityType": {
                        "type": "string",
                        "description": "Specifies which entity dimension should be used as the primary dimension. The property can only be configured for\nmetrics ingested with the Metrics API.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags\n"
                    },
                    "unit": {
                        "type": "string",
                        "description": "Unit\n"
                    },
                    "unitDisplayFormat": {
                        "type": "string",
                        "description": "The raw value is stored in bits or bytes. The user interface can display it in these numeral systems: Binary: 1 MiB =\n1024 KiB = 1,048,576 bytes Decimal: 1 MB = 1000 kB = 1,000,000 bytes If not set, the decimal system is used.\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/metricQuery:MetricQuery": {
            "properties": {
                "metricId": {
                    "type": "string",
                    "description": "The scope of this setting (metric)\n"
                },
                "metricSelector": {
                    "type": "string",
                    "description": "Query\n"
                }
            },
            "required": [
                "metricId",
                "metricSelector"
            ],
            "inputProperties": {
                "metricId": {
                    "type": "string",
                    "description": "The scope of this setting (metric)\n",
                    "willReplaceOnChanges": true
                },
                "metricSelector": {
                    "type": "string",
                    "description": "Query\n"
                }
            },
            "requiredInputs": [
                "metricId",
                "metricSelector"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MetricQuery resources.\n",
                "properties": {
                    "metricId": {
                        "type": "string",
                        "description": "The scope of this setting (metric)\n",
                        "willReplaceOnChanges": true
                    },
                    "metricSelector": {
                        "type": "string",
                        "description": "Query\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/mgmzPermission:MgmzPermission": {
            "properties": {
                "environment": {
                    "type": "string",
                    "description": "The UUID of the environment\n"
                },
                "group": {
                    "type": "string",
                    "description": "The ID of the group the permissions are valid for. You may refer to the id of a resource `dynatrace_user_group` here\n"
                },
                "managementZone": {
                    "type": "string",
                    "description": "The ID of the management zone the permissions are valid for. When referring to resource `dynatrace_management_zone_v2`\nor data source `dynatrace_management_zone` you need to refer to the attribute `legacy_id`.\n"
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The permissions to assign for that management zone. Allowed values are `DEMO_USER`, `LOG_VIEWER`,\n`MANAGE_SECURITY_PROBLEMS`, `MANAGE_SETTINGS`, `REPLAY_SESSION_DATA`, `REPLAY_SESSION_DATA_WITHOUT_MASKING`, `VIEWER`,\n`VIEW_SENSITIVE_REQUEST_DATA`\n"
                }
            },
            "required": [
                "environment",
                "group",
                "managementZone",
                "permissions"
            ],
            "inputProperties": {
                "environment": {
                    "type": "string",
                    "description": "The UUID of the environment\n"
                },
                "group": {
                    "type": "string",
                    "description": "The ID of the group the permissions are valid for. You may refer to the id of a resource `dynatrace_user_group` here\n"
                },
                "managementZone": {
                    "type": "string",
                    "description": "The ID of the management zone the permissions are valid for. When referring to resource `dynatrace_management_zone_v2`\nor data source `dynatrace_management_zone` you need to refer to the attribute `legacy_id`.\n"
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The permissions to assign for that management zone. Allowed values are `DEMO_USER`, `LOG_VIEWER`,\n`MANAGE_SECURITY_PROBLEMS`, `MANAGE_SETTINGS`, `REPLAY_SESSION_DATA`, `REPLAY_SESSION_DATA_WITHOUT_MASKING`, `VIEWER`,\n`VIEW_SENSITIVE_REQUEST_DATA`\n"
                }
            },
            "requiredInputs": [
                "environment",
                "group",
                "managementZone",
                "permissions"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MgmzPermission resources.\n",
                "properties": {
                    "environment": {
                        "type": "string",
                        "description": "The UUID of the environment\n"
                    },
                    "group": {
                        "type": "string",
                        "description": "The ID of the group the permissions are valid for. You may refer to the id of a resource `dynatrace_user_group` here\n"
                    },
                    "managementZone": {
                        "type": "string",
                        "description": "The ID of the management zone the permissions are valid for. When referring to resource `dynatrace_management_zone_v2`\nor data source `dynatrace_management_zone` you need to refer to the attribute `legacy_id`.\n"
                    },
                    "permissions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The permissions to assign for that management zone. Allowed values are `DEMO_USER`, `LOG_VIEWER`,\n`MANAGE_SECURITY_PROBLEMS`, `MANAGE_SETTINGS`, `REPLAY_SESSION_DATA`, `REPLAY_SESSION_DATA_WITHOUT_MASKING`, `VIEWER`,\n`VIEW_SENSITIVE_REQUEST_DATA`\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/mobileAppAnomalies:MobileAppAnomalies": {
            "properties": {
                "errorRateIncrease": {
                    "$ref": "#/types/dynatrace:index/MobileAppAnomaliesErrorRateIncrease:MobileAppAnomaliesErrorRateIncrease",
                    "description": "Error rate increase\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of this setting (DEVICE_APPLICATION_METHOD, MOBILE_APPLICATION). Omit this property if you want to cover the\nwhole environment.\n"
                },
                "slowUserActions": {
                    "$ref": "#/types/dynatrace:index/MobileAppAnomaliesSlowUserActions:MobileAppAnomaliesSlowUserActions",
                    "description": "Slow user actions\n"
                },
                "unexpectedHighLoad": {
                    "$ref": "#/types/dynatrace:index/MobileAppAnomaliesUnexpectedHighLoad:MobileAppAnomaliesUnexpectedHighLoad",
                    "description": "Unexpected high load\n"
                },
                "unexpectedLowLoad": {
                    "$ref": "#/types/dynatrace:index/MobileAppAnomaliesUnexpectedLowLoad:MobileAppAnomaliesUnexpectedLowLoad",
                    "description": "Unexpected low load\n"
                }
            },
            "required": [
                "errorRateIncrease",
                "slowUserActions",
                "unexpectedHighLoad",
                "unexpectedLowLoad"
            ],
            "inputProperties": {
                "errorRateIncrease": {
                    "$ref": "#/types/dynatrace:index/MobileAppAnomaliesErrorRateIncrease:MobileAppAnomaliesErrorRateIncrease",
                    "description": "Error rate increase\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of this setting (DEVICE_APPLICATION_METHOD, MOBILE_APPLICATION). Omit this property if you want to cover the\nwhole environment.\n",
                    "willReplaceOnChanges": true
                },
                "slowUserActions": {
                    "$ref": "#/types/dynatrace:index/MobileAppAnomaliesSlowUserActions:MobileAppAnomaliesSlowUserActions",
                    "description": "Slow user actions\n"
                },
                "unexpectedHighLoad": {
                    "$ref": "#/types/dynatrace:index/MobileAppAnomaliesUnexpectedHighLoad:MobileAppAnomaliesUnexpectedHighLoad",
                    "description": "Unexpected high load\n"
                },
                "unexpectedLowLoad": {
                    "$ref": "#/types/dynatrace:index/MobileAppAnomaliesUnexpectedLowLoad:MobileAppAnomaliesUnexpectedLowLoad",
                    "description": "Unexpected low load\n"
                }
            },
            "requiredInputs": [
                "errorRateIncrease",
                "slowUserActions",
                "unexpectedHighLoad",
                "unexpectedLowLoad"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MobileAppAnomalies resources.\n",
                "properties": {
                    "errorRateIncrease": {
                        "$ref": "#/types/dynatrace:index/MobileAppAnomaliesErrorRateIncrease:MobileAppAnomaliesErrorRateIncrease",
                        "description": "Error rate increase\n"
                    },
                    "scope": {
                        "type": "string",
                        "description": "The scope of this setting (DEVICE_APPLICATION_METHOD, MOBILE_APPLICATION). Omit this property if you want to cover the\nwhole environment.\n",
                        "willReplaceOnChanges": true
                    },
                    "slowUserActions": {
                        "$ref": "#/types/dynatrace:index/MobileAppAnomaliesSlowUserActions:MobileAppAnomaliesSlowUserActions",
                        "description": "Slow user actions\n"
                    },
                    "unexpectedHighLoad": {
                        "$ref": "#/types/dynatrace:index/MobileAppAnomaliesUnexpectedHighLoad:MobileAppAnomaliesUnexpectedHighLoad",
                        "description": "Unexpected high load\n"
                    },
                    "unexpectedLowLoad": {
                        "$ref": "#/types/dynatrace:index/MobileAppAnomaliesUnexpectedLowLoad:MobileAppAnomaliesUnexpectedLowLoad",
                        "description": "Unexpected low load\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/mobileAppCrashRate:MobileAppCrashRate": {
            "properties": {
                "applicationId": {
                    "type": "string",
                    "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.\n"
                },
                "crashRateIncrease": {
                    "$ref": "#/types/dynatrace:index/MobileAppCrashRateCrashRateIncrease:MobileAppCrashRateCrashRateIncrease",
                    "description": "Crash rate increase\n"
                }
            },
            "required": [
                "crashRateIncrease"
            ],
            "inputProperties": {
                "applicationId": {
                    "type": "string",
                    "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.\n",
                    "willReplaceOnChanges": true
                },
                "crashRateIncrease": {
                    "$ref": "#/types/dynatrace:index/MobileAppCrashRateCrashRateIncrease:MobileAppCrashRateCrashRateIncrease",
                    "description": "Crash rate increase\n"
                }
            },
            "requiredInputs": [
                "crashRateIncrease"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MobileAppCrashRate resources.\n",
                "properties": {
                    "applicationId": {
                        "type": "string",
                        "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.\n",
                        "willReplaceOnChanges": true
                    },
                    "crashRateIncrease": {
                        "$ref": "#/types/dynatrace:index/MobileAppCrashRateCrashRateIncrease:MobileAppCrashRateCrashRateIncrease",
                        "description": "Crash rate increase\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/mobileAppEnablement:MobileAppEnablement": {
            "properties": {
                "applicationId": {
                    "type": "string",
                    "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.\n"
                },
                "rum": {
                    "$ref": "#/types/dynatrace:index/MobileAppEnablementRum:MobileAppEnablementRum",
                    "description": "(Field has overlap with `dynatrace_mobile_application`) Capture and analyze all user actions within your application.\nEnable [Real User Monitoring (RUM)](https://dt-url.net/1n2b0prq) to monitor and improve your application's performance,\nidentify errors, and gain insight into your user's behavior and experience.\n"
                },
                "sessionReplay": {
                    "$ref": "#/types/dynatrace:index/MobileAppEnablementSessionReplay:MobileAppEnablementSessionReplay",
                    "description": "(Field has overlap with `dynatrace_mobile_application`) [Session Replay on crashes](https://dt-url.net/session-replay)\ngives you additional context for crash analysis in the form of video-like screen recordings that replay user actions\nimmediately preceding a detected crash, while providing [best-in-class security and data\nprotection](https://dt-url.net/b303zxj).\n"
                }
            },
            "required": [
                "rum",
                "sessionReplay"
            ],
            "inputProperties": {
                "applicationId": {
                    "type": "string",
                    "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.\n",
                    "willReplaceOnChanges": true
                },
                "rum": {
                    "$ref": "#/types/dynatrace:index/MobileAppEnablementRum:MobileAppEnablementRum",
                    "description": "(Field has overlap with `dynatrace_mobile_application`) Capture and analyze all user actions within your application.\nEnable [Real User Monitoring (RUM)](https://dt-url.net/1n2b0prq) to monitor and improve your application's performance,\nidentify errors, and gain insight into your user's behavior and experience.\n"
                },
                "sessionReplay": {
                    "$ref": "#/types/dynatrace:index/MobileAppEnablementSessionReplay:MobileAppEnablementSessionReplay",
                    "description": "(Field has overlap with `dynatrace_mobile_application`) [Session Replay on crashes](https://dt-url.net/session-replay)\ngives you additional context for crash analysis in the form of video-like screen recordings that replay user actions\nimmediately preceding a detected crash, while providing [best-in-class security and data\nprotection](https://dt-url.net/b303zxj).\n"
                }
            },
            "requiredInputs": [
                "rum",
                "sessionReplay"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MobileAppEnablement resources.\n",
                "properties": {
                    "applicationId": {
                        "type": "string",
                        "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.\n",
                        "willReplaceOnChanges": true
                    },
                    "rum": {
                        "$ref": "#/types/dynatrace:index/MobileAppEnablementRum:MobileAppEnablementRum",
                        "description": "(Field has overlap with `dynatrace_mobile_application`) Capture and analyze all user actions within your application.\nEnable [Real User Monitoring (RUM)](https://dt-url.net/1n2b0prq) to monitor and improve your application's performance,\nidentify errors, and gain insight into your user's behavior and experience.\n"
                    },
                    "sessionReplay": {
                        "$ref": "#/types/dynatrace:index/MobileAppEnablementSessionReplay:MobileAppEnablementSessionReplay",
                        "description": "(Field has overlap with `dynatrace_mobile_application`) [Session Replay on crashes](https://dt-url.net/session-replay)\ngives you additional context for crash analysis in the form of video-like screen recordings that replay user actions\nimmediately preceding a detected crash, while providing [best-in-class security and data\nprotection](https://dt-url.net/b303zxj).\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/mobileAppKeyPerformance:MobileAppKeyPerformance": {
            "properties": {
                "frustratingIfReportedOrWebRequestError": {
                    "type": "boolean",
                    "description": "Treat user actions with reported errors or web request errors as erroneous and rate their performance as Frustrating.\nTurn off this setting if errors should not affect the Apdex rate.\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of this setting (DEVICE_APPLICATION_METHOD, MOBILE_APPLICATION, CUSTOM_APPLICATION)\n"
                },
                "thresholds": {
                    "$ref": "#/types/dynatrace:index/MobileAppKeyPerformanceThresholds:MobileAppKeyPerformanceThresholds",
                    "description": "no documentation available\n"
                }
            },
            "required": [
                "frustratingIfReportedOrWebRequestError",
                "scope",
                "thresholds"
            ],
            "inputProperties": {
                "frustratingIfReportedOrWebRequestError": {
                    "type": "boolean",
                    "description": "Treat user actions with reported errors or web request errors as erroneous and rate their performance as Frustrating.\nTurn off this setting if errors should not affect the Apdex rate.\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of this setting (DEVICE_APPLICATION_METHOD, MOBILE_APPLICATION, CUSTOM_APPLICATION)\n",
                    "willReplaceOnChanges": true
                },
                "thresholds": {
                    "$ref": "#/types/dynatrace:index/MobileAppKeyPerformanceThresholds:MobileAppKeyPerformanceThresholds",
                    "description": "no documentation available\n"
                }
            },
            "requiredInputs": [
                "frustratingIfReportedOrWebRequestError",
                "scope",
                "thresholds"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MobileAppKeyPerformance resources.\n",
                "properties": {
                    "frustratingIfReportedOrWebRequestError": {
                        "type": "boolean",
                        "description": "Treat user actions with reported errors or web request errors as erroneous and rate their performance as Frustrating.\nTurn off this setting if errors should not affect the Apdex rate.\n"
                    },
                    "scope": {
                        "type": "string",
                        "description": "The scope of this setting (DEVICE_APPLICATION_METHOD, MOBILE_APPLICATION, CUSTOM_APPLICATION)\n",
                        "willReplaceOnChanges": true
                    },
                    "thresholds": {
                        "$ref": "#/types/dynatrace:index/MobileAppKeyPerformanceThresholds:MobileAppKeyPerformanceThresholds",
                        "description": "no documentation available\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/mobileAppRequestErrors:MobileAppRequestErrors": {
            "properties": {
                "errorRules": {
                    "$ref": "#/types/dynatrace:index/MobileAppRequestErrorsErrorRules:MobileAppRequestErrorsErrorRules",
                    "description": "no documentation available\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of this setting (MOBILE_APPLICATION, CUSTOM_APPLICATION)\n"
                }
            },
            "required": [
                "scope"
            ],
            "inputProperties": {
                "errorRules": {
                    "$ref": "#/types/dynatrace:index/MobileAppRequestErrorsErrorRules:MobileAppRequestErrorsErrorRules",
                    "description": "no documentation available\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of this setting (MOBILE_APPLICATION, CUSTOM_APPLICATION)\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "scope"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MobileAppRequestErrors resources.\n",
                "properties": {
                    "errorRules": {
                        "$ref": "#/types/dynatrace:index/MobileAppRequestErrorsErrorRules:MobileAppRequestErrorsErrorRules",
                        "description": "no documentation available\n"
                    },
                    "scope": {
                        "type": "string",
                        "description": "The scope of this setting (MOBILE_APPLICATION, CUSTOM_APPLICATION)\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/mobileApplication:MobileApplication": {
            "properties": {
                "apdex": {
                    "$ref": "#/types/dynatrace:index/MobileApplicationApdex:MobileApplicationApdex",
                    "description": "Apdex configuration of a mobile application. A duration less than the **tolerable** threshold is considered satisfied\n"
                },
                "applicationId": {
                    "type": "string",
                    "description": "The UUID of the application. It is used only by OneAgent to send data to Dynatrace. If not specified it will get\ngenerated.\n"
                },
                "applicationType": {
                    "type": "string",
                    "description": "The type of the application. Either `CUSTOM_APPLICATION` or `MOBILE_APPLICATION`.\n"
                },
                "beaconEndpointType": {
                    "type": "string",
                    "description": "The type of the beacon endpoint. Possible values are `CLUSTER_ACTIVE_GATE`, `ENVIRONMENT_ACTIVE_GATE` and\n`INSTRUMENTED_WEB_SERVER`.\n"
                },
                "beaconEndpointUrl": {
                    "type": "string",
                    "description": "The URL of the beacon endpoint. Only applicable when the **beacon_endpoint_type** is set to `ENVIRONMENT_ACTIVE_GATE` or\n`INSTRUMENTED_WEB_SERVER`\n"
                },
                "iconType": {
                    "type": "string",
                    "description": "Custom application icon. Mobile apps always use the mobile device icon, so this icon can only be set for custom apps.\n"
                },
                "keyUserActions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "User Action names to be flagged as Key User Actions\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the application\n"
                },
                "optInMode": {
                    "type": "boolean",
                    "description": "The opt-in mode is enabled (`true`) or disabled (`false`)\n"
                },
                "properties": {
                    "$ref": "#/types/dynatrace:index/MobileApplicationProperties:MobileApplicationProperties",
                    "description": "User Action and Session Properties\n"
                },
                "sessionReplay": {
                    "type": "boolean",
                    "description": "(Field has overlap with `dynatrace_mobile_app_enablement`) The session replay is enabled (`true`) or disabled (`false`).\n"
                },
                "sessionReplayOnCrash": {
                    "type": "boolean",
                    "description": "The session replay on crash is enabled (`true`) or disabled (`false`). Enabling requires both **sessionReplayEnabled**\nand **optInModeEnabled** values set to `true`.\n"
                },
                "userSessionPercentage": {
                    "type": "integer",
                    "description": "(Field has overlap with `dynatrace_mobile_app_enablement` for mobile and `dynatrace_custom_app_enablement` for custom\napps) The percentage of user sessions to be analyzed\n"
                }
            },
            "required": [
                "apdex",
                "beaconEndpointType",
                "name"
            ],
            "inputProperties": {
                "apdex": {
                    "$ref": "#/types/dynatrace:index/MobileApplicationApdex:MobileApplicationApdex",
                    "description": "Apdex configuration of a mobile application. A duration less than the **tolerable** threshold is considered satisfied\n"
                },
                "applicationId": {
                    "type": "string",
                    "description": "The UUID of the application. It is used only by OneAgent to send data to Dynatrace. If not specified it will get\ngenerated.\n"
                },
                "applicationType": {
                    "type": "string",
                    "description": "The type of the application. Either `CUSTOM_APPLICATION` or `MOBILE_APPLICATION`.\n"
                },
                "beaconEndpointType": {
                    "type": "string",
                    "description": "The type of the beacon endpoint. Possible values are `CLUSTER_ACTIVE_GATE`, `ENVIRONMENT_ACTIVE_GATE` and\n`INSTRUMENTED_WEB_SERVER`.\n"
                },
                "beaconEndpointUrl": {
                    "type": "string",
                    "description": "The URL of the beacon endpoint. Only applicable when the **beacon_endpoint_type** is set to `ENVIRONMENT_ACTIVE_GATE` or\n`INSTRUMENTED_WEB_SERVER`\n"
                },
                "iconType": {
                    "type": "string",
                    "description": "Custom application icon. Mobile apps always use the mobile device icon, so this icon can only be set for custom apps.\n"
                },
                "keyUserActions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "User Action names to be flagged as Key User Actions\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the application\n"
                },
                "optInMode": {
                    "type": "boolean",
                    "description": "The opt-in mode is enabled (`true`) or disabled (`false`)\n"
                },
                "properties": {
                    "$ref": "#/types/dynatrace:index/MobileApplicationProperties:MobileApplicationProperties",
                    "description": "User Action and Session Properties\n"
                },
                "sessionReplay": {
                    "type": "boolean",
                    "description": "(Field has overlap with `dynatrace_mobile_app_enablement`) The session replay is enabled (`true`) or disabled (`false`).\n"
                },
                "sessionReplayOnCrash": {
                    "type": "boolean",
                    "description": "The session replay on crash is enabled (`true`) or disabled (`false`). Enabling requires both **sessionReplayEnabled**\nand **optInModeEnabled** values set to `true`.\n"
                },
                "userSessionPercentage": {
                    "type": "integer",
                    "description": "(Field has overlap with `dynatrace_mobile_app_enablement` for mobile and `dynatrace_custom_app_enablement` for custom\napps) The percentage of user sessions to be analyzed\n"
                }
            },
            "requiredInputs": [
                "apdex",
                "beaconEndpointType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MobileApplication resources.\n",
                "properties": {
                    "apdex": {
                        "$ref": "#/types/dynatrace:index/MobileApplicationApdex:MobileApplicationApdex",
                        "description": "Apdex configuration of a mobile application. A duration less than the **tolerable** threshold is considered satisfied\n"
                    },
                    "applicationId": {
                        "type": "string",
                        "description": "The UUID of the application. It is used only by OneAgent to send data to Dynatrace. If not specified it will get\ngenerated.\n"
                    },
                    "applicationType": {
                        "type": "string",
                        "description": "The type of the application. Either `CUSTOM_APPLICATION` or `MOBILE_APPLICATION`.\n"
                    },
                    "beaconEndpointType": {
                        "type": "string",
                        "description": "The type of the beacon endpoint. Possible values are `CLUSTER_ACTIVE_GATE`, `ENVIRONMENT_ACTIVE_GATE` and\n`INSTRUMENTED_WEB_SERVER`.\n"
                    },
                    "beaconEndpointUrl": {
                        "type": "string",
                        "description": "The URL of the beacon endpoint. Only applicable when the **beacon_endpoint_type** is set to `ENVIRONMENT_ACTIVE_GATE` or\n`INSTRUMENTED_WEB_SERVER`\n"
                    },
                    "iconType": {
                        "type": "string",
                        "description": "Custom application icon. Mobile apps always use the mobile device icon, so this icon can only be set for custom apps.\n"
                    },
                    "keyUserActions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "User Action names to be flagged as Key User Actions\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the application\n"
                    },
                    "optInMode": {
                        "type": "boolean",
                        "description": "The opt-in mode is enabled (`true`) or disabled (`false`)\n"
                    },
                    "properties": {
                        "$ref": "#/types/dynatrace:index/MobileApplicationProperties:MobileApplicationProperties",
                        "description": "User Action and Session Properties\n"
                    },
                    "sessionReplay": {
                        "type": "boolean",
                        "description": "(Field has overlap with `dynatrace_mobile_app_enablement`) The session replay is enabled (`true`) or disabled (`false`).\n"
                    },
                    "sessionReplayOnCrash": {
                        "type": "boolean",
                        "description": "The session replay on crash is enabled (`true`) or disabled (`false`). Enabling requires both **sessionReplayEnabled**\nand **optInModeEnabled** values set to `true`.\n"
                    },
                    "userSessionPercentage": {
                        "type": "integer",
                        "description": "(Field has overlap with `dynatrace_mobile_app_enablement` for mobile and `dynatrace_custom_app_enablement` for custom\napps) The percentage of user sessions to be analyzed\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/mobileNotifications:MobileNotifications": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                }
            },
            "required": [
                "enabled"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                }
            },
            "requiredInputs": [
                "enabled"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MobileNotifications resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/monitoredTechnologiesApache:MonitoredTechnologiesApache": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "hostId": {
                    "type": "string",
                    "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.\n"
                }
            },
            "required": [
                "enabled"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "hostId": {
                    "type": "string",
                    "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "enabled"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MonitoredTechnologiesApache resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                    },
                    "hostId": {
                        "type": "string",
                        "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/monitoredTechnologiesDotnet:MonitoredTechnologiesDotnet": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "enabledDotNetCore": {
                    "type": "boolean",
                    "description": "Requires Dynatrace OneAgent version 1.117 or later on Windows and version 1.127 or later on Linux and .NET monitoring\nenabled\n"
                },
                "hostId": {
                    "type": "string",
                    "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.\n"
                }
            },
            "required": [
                "enabled"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "enabledDotNetCore": {
                    "type": "boolean",
                    "description": "Requires Dynatrace OneAgent version 1.117 or later on Windows and version 1.127 or later on Linux and .NET monitoring\nenabled\n"
                },
                "hostId": {
                    "type": "string",
                    "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "enabled"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MonitoredTechnologiesDotnet resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                    },
                    "enabledDotNetCore": {
                        "type": "boolean",
                        "description": "Requires Dynatrace OneAgent version 1.117 or later on Windows and version 1.127 or later on Linux and .NET monitoring\nenabled\n"
                    },
                    "hostId": {
                        "type": "string",
                        "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/monitoredTechnologiesGo:MonitoredTechnologiesGo": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "enabledGoStaticMonitoring": {
                    "type": "boolean",
                    "description": "Learn more about the [known limitations for Go static\nmonitoring](https://www.dynatrace.com/support/help/technology-support/application-software/go/support/go-known-limitations#limitations)\n"
                },
                "hostId": {
                    "type": "string",
                    "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.\n"
                }
            },
            "required": [
                "enabled"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "enabledGoStaticMonitoring": {
                    "type": "boolean",
                    "description": "Learn more about the [known limitations for Go static\nmonitoring](https://www.dynatrace.com/support/help/technology-support/application-software/go/support/go-known-limitations#limitations)\n"
                },
                "hostId": {
                    "type": "string",
                    "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "enabled"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MonitoredTechnologiesGo resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                    },
                    "enabledGoStaticMonitoring": {
                        "type": "boolean",
                        "description": "Learn more about the [known limitations for Go static\nmonitoring](https://www.dynatrace.com/support/help/technology-support/application-software/go/support/go-known-limitations#limitations)\n"
                    },
                    "hostId": {
                        "type": "string",
                        "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/monitoredTechnologiesIis:MonitoredTechnologiesIis": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "hostId": {
                    "type": "string",
                    "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.\n"
                }
            },
            "required": [
                "enabled"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "hostId": {
                    "type": "string",
                    "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "enabled"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MonitoredTechnologiesIis resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                    },
                    "hostId": {
                        "type": "string",
                        "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/monitoredTechnologiesJava:MonitoredTechnologiesJava": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "hostId": {
                    "type": "string",
                    "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.\n"
                }
            },
            "required": [
                "enabled"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "hostId": {
                    "type": "string",
                    "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "enabled"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MonitoredTechnologiesJava resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                    },
                    "hostId": {
                        "type": "string",
                        "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/monitoredTechnologiesNginx:MonitoredTechnologiesNginx": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "hostId": {
                    "type": "string",
                    "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.\n"
                }
            },
            "required": [
                "enabled"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "hostId": {
                    "type": "string",
                    "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "enabled"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MonitoredTechnologiesNginx resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                    },
                    "hostId": {
                        "type": "string",
                        "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/monitoredTechnologiesNodejs:MonitoredTechnologiesNodejs": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "hostId": {
                    "type": "string",
                    "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.\n"
                }
            },
            "required": [
                "enabled"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "hostId": {
                    "type": "string",
                    "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "enabled"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MonitoredTechnologiesNodejs resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                    },
                    "hostId": {
                        "type": "string",
                        "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/monitoredTechnologiesOpentracing:MonitoredTechnologiesOpentracing": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "hostId": {
                    "type": "string",
                    "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.\n"
                }
            },
            "required": [
                "enabled"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "hostId": {
                    "type": "string",
                    "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "enabled"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MonitoredTechnologiesOpentracing resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                    },
                    "hostId": {
                        "type": "string",
                        "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/monitoredTechnologiesPhp:MonitoredTechnologiesPhp": {
            "properties": {
                "enablePhpCliServer": {
                    "type": "boolean",
                    "description": "Requires enabled PHP monitoring and Dynatrace OneAgent version 1.261 or later\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "enabledFastCgi": {
                    "type": "boolean",
                    "description": "Requires PHP monitoring enabled and from Dynatrace OneAgent version 1.191 it's ignored and permanently enabled\n"
                },
                "hostId": {
                    "type": "string",
                    "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.\n"
                }
            },
            "required": [
                "enabled"
            ],
            "inputProperties": {
                "enablePhpCliServer": {
                    "type": "boolean",
                    "description": "Requires enabled PHP monitoring and Dynatrace OneAgent version 1.261 or later\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "enabledFastCgi": {
                    "type": "boolean",
                    "description": "Requires PHP monitoring enabled and from Dynatrace OneAgent version 1.191 it's ignored and permanently enabled\n"
                },
                "hostId": {
                    "type": "string",
                    "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "enabled"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MonitoredTechnologiesPhp resources.\n",
                "properties": {
                    "enablePhpCliServer": {
                        "type": "boolean",
                        "description": "Requires enabled PHP monitoring and Dynatrace OneAgent version 1.261 or later\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                    },
                    "enabledFastCgi": {
                        "type": "boolean",
                        "description": "Requires PHP monitoring enabled and from Dynatrace OneAgent version 1.191 it's ignored and permanently enabled\n"
                    },
                    "hostId": {
                        "type": "string",
                        "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/monitoredTechnologiesVarnish:MonitoredTechnologiesVarnish": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "hostId": {
                    "type": "string",
                    "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.\n"
                }
            },
            "required": [
                "enabled"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "hostId": {
                    "type": "string",
                    "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "enabled"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MonitoredTechnologiesVarnish resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                    },
                    "hostId": {
                        "type": "string",
                        "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/monitoredTechnologiesWsmb:MonitoredTechnologiesWsmb": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "hostId": {
                    "type": "string",
                    "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.\n"
                }
            },
            "required": [
                "enabled"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "hostId": {
                    "type": "string",
                    "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "enabled"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MonitoredTechnologiesWsmb resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                    },
                    "hostId": {
                        "type": "string",
                        "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/mutedRequests:MutedRequests": {
            "properties": {
                "mutedRequestNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Muted request names\n"
                },
                "serviceId": {
                    "type": "string",
                    "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.\n"
                }
            },
            "required": [
                "serviceId"
            ],
            "inputProperties": {
                "mutedRequestNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Muted request names\n"
                },
                "serviceId": {
                    "type": "string",
                    "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "serviceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MutedRequests resources.\n",
                "properties": {
                    "mutedRequestNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Muted request names\n"
                    },
                    "serviceId": {
                        "type": "string",
                        "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/nettracer:Nettracer": {
            "properties": {
                "netTracer": {
                    "type": "boolean",
                    "description": "When disabled, OneAgent won't use NetTracer to collect network data from containers. Disabled by default. Applies only\nto Linux hosts. Requires OneAgent 1.231+.\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.\n"
                }
            },
            "required": [
                "netTracer"
            ],
            "inputProperties": {
                "netTracer": {
                    "type": "boolean",
                    "description": "When disabled, OneAgent won't use NetTracer to collect network data from containers. Disabled by default. Applies only\nto Linux hosts. Requires OneAgent 1.231+.\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "netTracer"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Nettracer resources.\n",
                "properties": {
                    "netTracer": {
                        "type": "boolean",
                        "description": "When disabled, OneAgent won't use NetTracer to collect network data from containers. Disabled by default. Applies only\nto Linux hosts. Requires OneAgent 1.231+.\n"
                    },
                    "scope": {
                        "type": "string",
                        "description": "The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/networkTraffic:NetworkTraffic": {
            "properties": {
                "excludeIp": {
                    "$ref": "#/types/dynatrace:index/NetworkTrafficExcludeIp:NetworkTrafficExcludeIp",
                    "description": "Providing a host IP address, you will exclude network traffic only in calculating connectivity (other metrics will still\nbe calculated).\n"
                },
                "excludeNic": {
                    "$ref": "#/types/dynatrace:index/NetworkTrafficExcludeNic:NetworkTrafficExcludeNic",
                    "description": "Selecting a network interface, you will exclude all network traffic on that interface from being monitored. You can\nselect from the list below what to not monitor, or input it manually using the \"other one\" option.\n"
                },
                "hostId": {
                    "type": "string",
                    "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.\n"
                }
            },
            "required": [
                "hostId"
            ],
            "inputProperties": {
                "excludeIp": {
                    "$ref": "#/types/dynatrace:index/NetworkTrafficExcludeIp:NetworkTrafficExcludeIp",
                    "description": "Providing a host IP address, you will exclude network traffic only in calculating connectivity (other metrics will still\nbe calculated).\n"
                },
                "excludeNic": {
                    "$ref": "#/types/dynatrace:index/NetworkTrafficExcludeNic:NetworkTrafficExcludeNic",
                    "description": "Selecting a network interface, you will exclude all network traffic on that interface from being monitored. You can\nselect from the list below what to not monitor, or input it manually using the \"other one\" option.\n"
                },
                "hostId": {
                    "type": "string",
                    "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "hostId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NetworkTraffic resources.\n",
                "properties": {
                    "excludeIp": {
                        "$ref": "#/types/dynatrace:index/NetworkTrafficExcludeIp:NetworkTrafficExcludeIp",
                        "description": "Providing a host IP address, you will exclude network traffic only in calculating connectivity (other metrics will still\nbe calculated).\n"
                    },
                    "excludeNic": {
                        "$ref": "#/types/dynatrace:index/NetworkTrafficExcludeNic:NetworkTrafficExcludeNic",
                        "description": "Selecting a network interface, you will exclude all network traffic on that interface from being monitored. You can\nselect from the list below what to not monitor, or input it manually using the \"other one\" option.\n"
                    },
                    "hostId": {
                        "type": "string",
                        "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/networkZone:NetworkZone": {
            "properties": {
                "alternativeZones": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of alternative network zones.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A short description of the network zone\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the network zone cannot be modified once created. Dynatrace stores the field in lowercase, allowed characters:\nalphanumeric, hyphen, underscore, dot\n"
                },
                "numOfConfiguredActivegates": {
                    "type": "integer",
                    "description": "The number of ActiveGates in the network zone.\n"
                },
                "numOfConfiguredOneagents": {
                    "type": "integer",
                    "description": "The number of OneAgents that are configured to use the network zone as primary.\n"
                },
                "numOfOneagentsFromOtherZones": {
                    "type": "integer",
                    "description": "The number of OneAgents from other network zones that are using ActiveGates in the network zone.\n"
                },
                "numOfOneagentsUsing": {
                    "type": "integer",
                    "description": "The number of OneAgents that are using ActiveGates in the network zone.\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "alternativeZones": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of alternative network zones.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A short description of the network zone\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the network zone cannot be modified once created. Dynatrace stores the field in lowercase, allowed characters:\nalphanumeric, hyphen, underscore, dot\n"
                },
                "numOfConfiguredActivegates": {
                    "type": "integer",
                    "description": "The number of ActiveGates in the network zone.\n"
                },
                "numOfConfiguredOneagents": {
                    "type": "integer",
                    "description": "The number of OneAgents that are configured to use the network zone as primary.\n"
                },
                "numOfOneagentsFromOtherZones": {
                    "type": "integer",
                    "description": "The number of OneAgents from other network zones that are using ActiveGates in the network zone.\n"
                },
                "numOfOneagentsUsing": {
                    "type": "integer",
                    "description": "The number of OneAgents that are using ActiveGates in the network zone.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NetworkZone resources.\n",
                "properties": {
                    "alternativeZones": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of alternative network zones.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A short description of the network zone\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the network zone cannot be modified once created. Dynatrace stores the field in lowercase, allowed characters:\nalphanumeric, hyphen, underscore, dot\n"
                    },
                    "numOfConfiguredActivegates": {
                        "type": "integer",
                        "description": "The number of ActiveGates in the network zone.\n"
                    },
                    "numOfConfiguredOneagents": {
                        "type": "integer",
                        "description": "The number of OneAgents that are configured to use the network zone as primary.\n"
                    },
                    "numOfOneagentsFromOtherZones": {
                        "type": "integer",
                        "description": "The number of OneAgents from other network zones that are using ActiveGates in the network zone.\n"
                    },
                    "numOfOneagentsUsing": {
                        "type": "integer",
                        "description": "The number of OneAgents that are using ActiveGates in the network zone.\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/networkZones:NetworkZones": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Network Zones are enabled (`true`) or disabled (`false`)\n"
                }
            },
            "required": [
                "enabled"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Network Zones are enabled (`true`) or disabled (`false`)\n"
                }
            },
            "requiredInputs": [
                "enabled"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NetworkZones resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Network Zones are enabled (`true`) or disabled (`false`)\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/notification:Notification": {
            "properties": {
                "ansibleTower": {
                    "$ref": "#/types/dynatrace:index/NotificationAnsibleTower:NotificationAnsibleTower",
                    "description": "Configuration for Ansible Tower Notification\n"
                },
                "config": {
                    "$ref": "#/types/dynatrace:index/NotificationConfig:NotificationConfig",
                    "description": "Configuration for Generic Notification\n"
                },
                "email": {
                    "$ref": "#/types/dynatrace:index/NotificationEmail:NotificationEmail",
                    "description": "Configuration for Email Notification\n"
                },
                "jira": {
                    "$ref": "#/types/dynatrace:index/NotificationJira:NotificationJira",
                    "description": "Configuration for Jira Notification\n"
                },
                "opsGenie": {
                    "$ref": "#/types/dynatrace:index/NotificationOpsGenie:NotificationOpsGenie",
                    "description": "Configuration for OpsGenie Notification\n"
                },
                "pagerDuty": {
                    "$ref": "#/types/dynatrace:index/NotificationPagerDuty:NotificationPagerDuty",
                    "description": "Configuration for PagerDuty Notification\n"
                },
                "serviceNow": {
                    "$ref": "#/types/dynatrace:index/NotificationServiceNow:NotificationServiceNow",
                    "description": "Configuration for ServiceNow Notification\n"
                },
                "slack": {
                    "$ref": "#/types/dynatrace:index/NotificationSlack:NotificationSlack",
                    "description": "Configuration for Slack Notification\n"
                },
                "trello": {
                    "$ref": "#/types/dynatrace:index/NotificationTrello:NotificationTrello",
                    "description": "Configuration for Trello Notification\n"
                },
                "victorOps": {
                    "$ref": "#/types/dynatrace:index/NotificationVictorOps:NotificationVictorOps",
                    "description": "Configuration for VictorOps Notification\n"
                },
                "webHook": {
                    "$ref": "#/types/dynatrace:index/NotificationWebHook:NotificationWebHook",
                    "description": "Configuration for WebHook Notification\n"
                },
                "xmatters": {
                    "$ref": "#/types/dynatrace:index/NotificationXmatters:NotificationXmatters",
                    "description": "Configuration for XMatters Notification\n"
                }
            },
            "inputProperties": {
                "ansibleTower": {
                    "$ref": "#/types/dynatrace:index/NotificationAnsibleTower:NotificationAnsibleTower",
                    "description": "Configuration for Ansible Tower Notification\n"
                },
                "config": {
                    "$ref": "#/types/dynatrace:index/NotificationConfig:NotificationConfig",
                    "description": "Configuration for Generic Notification\n"
                },
                "email": {
                    "$ref": "#/types/dynatrace:index/NotificationEmail:NotificationEmail",
                    "description": "Configuration for Email Notification\n"
                },
                "jira": {
                    "$ref": "#/types/dynatrace:index/NotificationJira:NotificationJira",
                    "description": "Configuration for Jira Notification\n"
                },
                "opsGenie": {
                    "$ref": "#/types/dynatrace:index/NotificationOpsGenie:NotificationOpsGenie",
                    "description": "Configuration for OpsGenie Notification\n"
                },
                "pagerDuty": {
                    "$ref": "#/types/dynatrace:index/NotificationPagerDuty:NotificationPagerDuty",
                    "description": "Configuration for PagerDuty Notification\n"
                },
                "serviceNow": {
                    "$ref": "#/types/dynatrace:index/NotificationServiceNow:NotificationServiceNow",
                    "description": "Configuration for ServiceNow Notification\n"
                },
                "slack": {
                    "$ref": "#/types/dynatrace:index/NotificationSlack:NotificationSlack",
                    "description": "Configuration for Slack Notification\n"
                },
                "trello": {
                    "$ref": "#/types/dynatrace:index/NotificationTrello:NotificationTrello",
                    "description": "Configuration for Trello Notification\n"
                },
                "victorOps": {
                    "$ref": "#/types/dynatrace:index/NotificationVictorOps:NotificationVictorOps",
                    "description": "Configuration for VictorOps Notification\n"
                },
                "webHook": {
                    "$ref": "#/types/dynatrace:index/NotificationWebHook:NotificationWebHook",
                    "description": "Configuration for WebHook Notification\n"
                },
                "xmatters": {
                    "$ref": "#/types/dynatrace:index/NotificationXmatters:NotificationXmatters",
                    "description": "Configuration for XMatters Notification\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Notification resources.\n",
                "properties": {
                    "ansibleTower": {
                        "$ref": "#/types/dynatrace:index/NotificationAnsibleTower:NotificationAnsibleTower",
                        "description": "Configuration for Ansible Tower Notification\n"
                    },
                    "config": {
                        "$ref": "#/types/dynatrace:index/NotificationConfig:NotificationConfig",
                        "description": "Configuration for Generic Notification\n"
                    },
                    "email": {
                        "$ref": "#/types/dynatrace:index/NotificationEmail:NotificationEmail",
                        "description": "Configuration for Email Notification\n"
                    },
                    "jira": {
                        "$ref": "#/types/dynatrace:index/NotificationJira:NotificationJira",
                        "description": "Configuration for Jira Notification\n"
                    },
                    "opsGenie": {
                        "$ref": "#/types/dynatrace:index/NotificationOpsGenie:NotificationOpsGenie",
                        "description": "Configuration for OpsGenie Notification\n"
                    },
                    "pagerDuty": {
                        "$ref": "#/types/dynatrace:index/NotificationPagerDuty:NotificationPagerDuty",
                        "description": "Configuration for PagerDuty Notification\n"
                    },
                    "serviceNow": {
                        "$ref": "#/types/dynatrace:index/NotificationServiceNow:NotificationServiceNow",
                        "description": "Configuration for ServiceNow Notification\n"
                    },
                    "slack": {
                        "$ref": "#/types/dynatrace:index/NotificationSlack:NotificationSlack",
                        "description": "Configuration for Slack Notification\n"
                    },
                    "trello": {
                        "$ref": "#/types/dynatrace:index/NotificationTrello:NotificationTrello",
                        "description": "Configuration for Trello Notification\n"
                    },
                    "victorOps": {
                        "$ref": "#/types/dynatrace:index/NotificationVictorOps:NotificationVictorOps",
                        "description": "Configuration for VictorOps Notification\n"
                    },
                    "webHook": {
                        "$ref": "#/types/dynatrace:index/NotificationWebHook:NotificationWebHook",
                        "description": "Configuration for WebHook Notification\n"
                    },
                    "xmatters": {
                        "$ref": "#/types/dynatrace:index/NotificationXmatters:NotificationXmatters",
                        "description": "Configuration for XMatters Notification\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/oneagentDefaultVersion:OneagentDefaultVersion": {
            "properties": {
                "defaultVersion": {
                    "type": "string",
                    "description": "Default version\n"
                },
                "revision": {
                    "type": "string",
                    "description": "Revision\n"
                }
            },
            "required": [
                "defaultVersion"
            ],
            "inputProperties": {
                "defaultVersion": {
                    "type": "string",
                    "description": "Default version\n"
                },
                "revision": {
                    "type": "string",
                    "description": "Revision\n"
                }
            },
            "requiredInputs": [
                "defaultVersion"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering OneagentDefaultVersion resources.\n",
                "properties": {
                    "defaultVersion": {
                        "type": "string",
                        "description": "Default version\n"
                    },
                    "revision": {
                        "type": "string",
                        "description": "Revision\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/oneagentFeatures:OneagentFeatures": {
            "properties": {
                "_restore_": {
                    "type": "string",
                    "description": "Used internally by the terraform provider. Do not populate\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "forcible": {
                    "type": "boolean",
                    "description": "Activate this feature also in OneAgents only fulfilling the minimum Opt-In version\n"
                },
                "instrumentation": {
                    "type": "boolean",
                    "description": "Instrumentation enabled (change needs a process restart)\n"
                },
                "key": {
                    "type": "string",
                    "description": "Feature\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of this setting (PROCESS_GROUP_INSTANCE, PROCESS_GROUP). Omit this property if you want to cover the whole\nenvironment.\n"
                }
            },
            "required": [
                "_restore_",
                "enabled",
                "key"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "forcible": {
                    "type": "boolean",
                    "description": "Activate this feature also in OneAgents only fulfilling the minimum Opt-In version\n"
                },
                "instrumentation": {
                    "type": "boolean",
                    "description": "Instrumentation enabled (change needs a process restart)\n"
                },
                "key": {
                    "type": "string",
                    "description": "Feature\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of this setting (PROCESS_GROUP_INSTANCE, PROCESS_GROUP). Omit this property if you want to cover the whole\nenvironment.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "enabled",
                "key"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering OneagentFeatures resources.\n",
                "properties": {
                    "_restore_": {
                        "type": "string",
                        "description": "Used internally by the terraform provider. Do not populate\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                    },
                    "forcible": {
                        "type": "boolean",
                        "description": "Activate this feature also in OneAgents only fulfilling the minimum Opt-In version\n"
                    },
                    "instrumentation": {
                        "type": "boolean",
                        "description": "Instrumentation enabled (change needs a process restart)\n"
                    },
                    "key": {
                        "type": "string",
                        "description": "Feature\n"
                    },
                    "scope": {
                        "type": "string",
                        "description": "The scope of this setting (PROCESS_GROUP_INSTANCE, PROCESS_GROUP). Omit this property if you want to cover the whole\nenvironment.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/oneagentSideMasking:OneagentSideMasking": {
            "properties": {
                "isEmailMaskingEnabled": {
                    "type": "boolean",
                    "description": "Exclude email addresses from URLs\n"
                },
                "isFinancialMaskingEnabled": {
                    "type": "boolean",
                    "description": "Exclude IBANs and payment card numbers from URLs\n"
                },
                "isNumbersMaskingEnabled": {
                    "type": "boolean",
                    "description": "Exclude hexadecimal IDs and consecutive numbers above 5 digits from URLs\n"
                },
                "isQueryMaskingEnabled": {
                    "type": "boolean",
                    "description": "Exclude query parameters from URLs and web requests\n"
                },
                "processGroupId": {
                    "type": "string",
                    "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.\n"
                }
            },
            "required": [
                "isEmailMaskingEnabled",
                "isFinancialMaskingEnabled",
                "isNumbersMaskingEnabled",
                "isQueryMaskingEnabled"
            ],
            "inputProperties": {
                "isEmailMaskingEnabled": {
                    "type": "boolean",
                    "description": "Exclude email addresses from URLs\n"
                },
                "isFinancialMaskingEnabled": {
                    "type": "boolean",
                    "description": "Exclude IBANs and payment card numbers from URLs\n"
                },
                "isNumbersMaskingEnabled": {
                    "type": "boolean",
                    "description": "Exclude hexadecimal IDs and consecutive numbers above 5 digits from URLs\n"
                },
                "isQueryMaskingEnabled": {
                    "type": "boolean",
                    "description": "Exclude query parameters from URLs and web requests\n"
                },
                "processGroupId": {
                    "type": "string",
                    "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.\n"
                }
            },
            "requiredInputs": [
                "isEmailMaskingEnabled",
                "isFinancialMaskingEnabled",
                "isNumbersMaskingEnabled",
                "isQueryMaskingEnabled"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering OneagentSideMasking resources.\n",
                "properties": {
                    "isEmailMaskingEnabled": {
                        "type": "boolean",
                        "description": "Exclude email addresses from URLs\n"
                    },
                    "isFinancialMaskingEnabled": {
                        "type": "boolean",
                        "description": "Exclude IBANs and payment card numbers from URLs\n"
                    },
                    "isNumbersMaskingEnabled": {
                        "type": "boolean",
                        "description": "Exclude hexadecimal IDs and consecutive numbers above 5 digits from URLs\n"
                    },
                    "isQueryMaskingEnabled": {
                        "type": "boolean",
                        "description": "Exclude query parameters from URLs and web requests\n"
                    },
                    "processGroupId": {
                        "type": "string",
                        "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/oneagentUpdates:OneagentUpdates": {
            "properties": {
                "maintenanceWindows": {
                    "$ref": "#/types/dynatrace:index/OneagentUpdatesMaintenanceWindows:OneagentUpdatesMaintenanceWindows",
                    "description": "Maintenance windows\n"
                },
                "revision": {
                    "type": "string",
                    "description": "Revision\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.\n"
                },
                "targetVersion": {
                    "type": "string",
                    "description": "Target version\n"
                },
                "updateMode": {
                    "type": "string",
                    "description": "Possible Values: `AUTOMATIC`, `AUTOMATIC_DURING_MW`, `MANUAL`\n"
                }
            },
            "required": [
                "updateMode"
            ],
            "inputProperties": {
                "maintenanceWindows": {
                    "$ref": "#/types/dynatrace:index/OneagentUpdatesMaintenanceWindows:OneagentUpdatesMaintenanceWindows",
                    "description": "Maintenance windows\n"
                },
                "revision": {
                    "type": "string",
                    "description": "Revision\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.\n",
                    "willReplaceOnChanges": true
                },
                "targetVersion": {
                    "type": "string",
                    "description": "Target version\n"
                },
                "updateMode": {
                    "type": "string",
                    "description": "Possible Values: `AUTOMATIC`, `AUTOMATIC_DURING_MW`, `MANUAL`\n"
                }
            },
            "requiredInputs": [
                "updateMode"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering OneagentUpdates resources.\n",
                "properties": {
                    "maintenanceWindows": {
                        "$ref": "#/types/dynatrace:index/OneagentUpdatesMaintenanceWindows:OneagentUpdatesMaintenanceWindows",
                        "description": "Maintenance windows\n"
                    },
                    "revision": {
                        "type": "string",
                        "description": "Revision\n"
                    },
                    "scope": {
                        "type": "string",
                        "description": "The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.\n",
                        "willReplaceOnChanges": true
                    },
                    "targetVersion": {
                        "type": "string",
                        "description": "Target version\n"
                    },
                    "updateMode": {
                        "type": "string",
                        "description": "Possible Values: `AUTOMATIC`, `AUTOMATIC_DURING_MW`, `MANUAL`\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/opentelemetryMetrics:OpentelemetryMetrics": {
            "properties": {
                "additionalAttributes": {
                    "$ref": "#/types/dynatrace:index/OpentelemetryMetricsAdditionalAttributes:OpentelemetryMetricsAdditionalAttributes",
                    "description": "When enabled, the attributes defined in the list below will be added as dimensions to ingested OTLP metrics if they are\npresent in the OpenTelemetry resource or in the instrumentation scope. **Notes:** * Modifying this setting (renaming,\ndisabling or removing attributes) will cause the metric to change. This may have an impact on existing dashboards,\nevents and alerts that make use of these dimensions. In this case, they will need to be updated manually. * Dynatrace\ndoes not recommend changing/removing the attributes starting with \"dt.\". Dynatrace leverages these attributes to [Enrich\nmetrics](https://www.dynatrace.com/support/help/extend-dynatrace/extend-metrics/reference/enrich-metrics).\n"
                },
                "additionalAttributesToDimensionEnabled": {
                    "type": "boolean",
                    "description": "Add the resource and scope attributes configured below as dimensions\n"
                },
                "meterNameToDimensionEnabled": {
                    "type": "boolean",
                    "description": "When enabled, the Meter name (also referred to as InstrumentationScope or InstrumentationLibrary in OpenTelemetry SDKs)\nand version will be added as dimensions (`otel.scope.name` and `otel.scope.version`) to ingested OTLP metrics. **Note:**\nModifying this setting will cause the metric to change. This may have an impact on existing dashboards, events and\nalerts that make use of these dimensions. In this case, they will need to be updated manually\n"
                },
                "mode": {
                    "type": "string",
                    "description": "Specifies whether the given attributes to enable (`additional_attributes`) and the attributes to drop\n(`to_drop_attributes`) will get applied explicitly (`EXPLICIT`) or additive (`ADDITIVE`). Default behavior is `EXPLICIT`\n- in which case it is recommended to have just ONE instance of this resource With mode `ADDITIVE` you're able to have\nmultiple instances of this resource within the same Terraform Module. **Note:** Using `ADDITIVE` and `EXPLICIT` at the\nsame time within differnt resource instances will lead to unexpected results.\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of this setting (environment-default). Omit this property if you want to cover the whole environment.\n"
                },
                "toDropAttributes": {
                    "$ref": "#/types/dynatrace:index/OpentelemetryMetricsToDropAttributes:OpentelemetryMetricsToDropAttributes",
                    "description": "The attributes defined in the list below will be dropped from all ingested OTLP metrics. Upon ingest, the *Allow list:\nresource and scope attributes* above is applied first. Then, the *Deny list: all attributes* below is applied. The deny\nlist therefore applies to all attributes from all sources (data points, scope and resource). **Notes:** * Modifying this\nsetting (adding, renaming, disabling or removing attributes) will cause the metric to change. This may have an impact on\nexisting dashboards, events and alerts that make use of these dimensions. In this case, they will need to be updated\nmanually. * Dynatrace does not recommend including attributes starting with \"dt.\" to the deny list. Dynatrace leverages\nthese attributes to [Enrich\nmetrics](https://www.dynatrace.com/support/help/extend-dynatrace/extend-metrics/reference/enrich-metrics).\n"
                }
            },
            "required": [
                "additionalAttributesToDimensionEnabled",
                "meterNameToDimensionEnabled"
            ],
            "inputProperties": {
                "additionalAttributes": {
                    "$ref": "#/types/dynatrace:index/OpentelemetryMetricsAdditionalAttributes:OpentelemetryMetricsAdditionalAttributes",
                    "description": "When enabled, the attributes defined in the list below will be added as dimensions to ingested OTLP metrics if they are\npresent in the OpenTelemetry resource or in the instrumentation scope. **Notes:** * Modifying this setting (renaming,\ndisabling or removing attributes) will cause the metric to change. This may have an impact on existing dashboards,\nevents and alerts that make use of these dimensions. In this case, they will need to be updated manually. * Dynatrace\ndoes not recommend changing/removing the attributes starting with \"dt.\". Dynatrace leverages these attributes to [Enrich\nmetrics](https://www.dynatrace.com/support/help/extend-dynatrace/extend-metrics/reference/enrich-metrics).\n"
                },
                "additionalAttributesToDimensionEnabled": {
                    "type": "boolean",
                    "description": "Add the resource and scope attributes configured below as dimensions\n"
                },
                "meterNameToDimensionEnabled": {
                    "type": "boolean",
                    "description": "When enabled, the Meter name (also referred to as InstrumentationScope or InstrumentationLibrary in OpenTelemetry SDKs)\nand version will be added as dimensions (`otel.scope.name` and `otel.scope.version`) to ingested OTLP metrics. **Note:**\nModifying this setting will cause the metric to change. This may have an impact on existing dashboards, events and\nalerts that make use of these dimensions. In this case, they will need to be updated manually\n"
                },
                "mode": {
                    "type": "string",
                    "description": "Specifies whether the given attributes to enable (`additional_attributes`) and the attributes to drop\n(`to_drop_attributes`) will get applied explicitly (`EXPLICIT`) or additive (`ADDITIVE`). Default behavior is `EXPLICIT`\n- in which case it is recommended to have just ONE instance of this resource With mode `ADDITIVE` you're able to have\nmultiple instances of this resource within the same Terraform Module. **Note:** Using `ADDITIVE` and `EXPLICIT` at the\nsame time within differnt resource instances will lead to unexpected results.\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of this setting (environment-default). Omit this property if you want to cover the whole environment.\n"
                },
                "toDropAttributes": {
                    "$ref": "#/types/dynatrace:index/OpentelemetryMetricsToDropAttributes:OpentelemetryMetricsToDropAttributes",
                    "description": "The attributes defined in the list below will be dropped from all ingested OTLP metrics. Upon ingest, the *Allow list:\nresource and scope attributes* above is applied first. Then, the *Deny list: all attributes* below is applied. The deny\nlist therefore applies to all attributes from all sources (data points, scope and resource). **Notes:** * Modifying this\nsetting (adding, renaming, disabling or removing attributes) will cause the metric to change. This may have an impact on\nexisting dashboards, events and alerts that make use of these dimensions. In this case, they will need to be updated\nmanually. * Dynatrace does not recommend including attributes starting with \"dt.\" to the deny list. Dynatrace leverages\nthese attributes to [Enrich\nmetrics](https://www.dynatrace.com/support/help/extend-dynatrace/extend-metrics/reference/enrich-metrics).\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering OpentelemetryMetrics resources.\n",
                "properties": {
                    "additionalAttributes": {
                        "$ref": "#/types/dynatrace:index/OpentelemetryMetricsAdditionalAttributes:OpentelemetryMetricsAdditionalAttributes",
                        "description": "When enabled, the attributes defined in the list below will be added as dimensions to ingested OTLP metrics if they are\npresent in the OpenTelemetry resource or in the instrumentation scope. **Notes:** * Modifying this setting (renaming,\ndisabling or removing attributes) will cause the metric to change. This may have an impact on existing dashboards,\nevents and alerts that make use of these dimensions. In this case, they will need to be updated manually. * Dynatrace\ndoes not recommend changing/removing the attributes starting with \"dt.\". Dynatrace leverages these attributes to [Enrich\nmetrics](https://www.dynatrace.com/support/help/extend-dynatrace/extend-metrics/reference/enrich-metrics).\n"
                    },
                    "additionalAttributesToDimensionEnabled": {
                        "type": "boolean",
                        "description": "Add the resource and scope attributes configured below as dimensions\n"
                    },
                    "meterNameToDimensionEnabled": {
                        "type": "boolean",
                        "description": "When enabled, the Meter name (also referred to as InstrumentationScope or InstrumentationLibrary in OpenTelemetry SDKs)\nand version will be added as dimensions (`otel.scope.name` and `otel.scope.version`) to ingested OTLP metrics. **Note:**\nModifying this setting will cause the metric to change. This may have an impact on existing dashboards, events and\nalerts that make use of these dimensions. In this case, they will need to be updated manually\n"
                    },
                    "mode": {
                        "type": "string",
                        "description": "Specifies whether the given attributes to enable (`additional_attributes`) and the attributes to drop\n(`to_drop_attributes`) will get applied explicitly (`EXPLICIT`) or additive (`ADDITIVE`). Default behavior is `EXPLICIT`\n- in which case it is recommended to have just ONE instance of this resource With mode `ADDITIVE` you're able to have\nmultiple instances of this resource within the same Terraform Module. **Note:** Using `ADDITIVE` and `EXPLICIT` at the\nsame time within differnt resource instances will lead to unexpected results.\n"
                    },
                    "scope": {
                        "type": "string",
                        "description": "The scope of this setting (environment-default). Omit this property if you want to cover the whole environment.\n"
                    },
                    "toDropAttributes": {
                        "$ref": "#/types/dynatrace:index/OpentelemetryMetricsToDropAttributes:OpentelemetryMetricsToDropAttributes",
                        "description": "The attributes defined in the list below will be dropped from all ingested OTLP metrics. Upon ingest, the *Allow list:\nresource and scope attributes* above is applied first. Then, the *Deny list: all attributes* below is applied. The deny\nlist therefore applies to all attributes from all sources (data points, scope and resource). **Notes:** * Modifying this\nsetting (adding, renaming, disabling or removing attributes) will cause the metric to change. This may have an impact on\nexisting dashboards, events and alerts that make use of these dimensions. In this case, they will need to be updated\nmanually. * Dynatrace does not recommend including attributes starting with \"dt.\" to the deny list. Dynatrace leverages\nthese attributes to [Enrich\nmetrics](https://www.dynatrace.com/support/help/extend-dynatrace/extend-metrics/reference/enrich-metrics).\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/opsGenieNotification:OpsGenieNotification": {
            "properties": {
                "active": {
                    "type": "boolean",
                    "description": "The configuration is enabled (`true`) or disabled (`false`)\n"
                },
                "apiKey": {
                    "type": "string",
                    "description": "The API key to access OpsGenie\n",
                    "secret": true
                },
                "domain": {
                    "type": "string",
                    "description": "The region domain of the OpsGenie\n"
                },
                "legacyId": {
                    "type": "string",
                    "description": "The ID of these settings when referred to from resources requiring the REST API V1 keys\n"
                },
                "message": {
                    "type": "string",
                    "description": "The content of the message. You can use the following placeholders: * `{ProblemID}`: The display number of the reported\nproblem. * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of\nthe problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`. * `{ProblemSeverity}`: The [severity\nlevel](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`,\n`ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`. * `{ProblemTitle}`: A short description of the\nproblem\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the notification configuration\n"
                },
                "profile": {
                    "type": "string",
                    "description": "The ID of the associated alerting profile\n"
                }
            },
            "required": [
                "active",
                "domain",
                "legacyId",
                "message",
                "name",
                "profile"
            ],
            "inputProperties": {
                "active": {
                    "type": "boolean",
                    "description": "The configuration is enabled (`true`) or disabled (`false`)\n"
                },
                "apiKey": {
                    "type": "string",
                    "description": "The API key to access OpsGenie\n",
                    "secret": true
                },
                "domain": {
                    "type": "string",
                    "description": "The region domain of the OpsGenie\n"
                },
                "legacyId": {
                    "type": "string",
                    "description": "The ID of these settings when referred to from resources requiring the REST API V1 keys\n"
                },
                "message": {
                    "type": "string",
                    "description": "The content of the message. You can use the following placeholders: * `{ProblemID}`: The display number of the reported\nproblem. * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of\nthe problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`. * `{ProblemSeverity}`: The [severity\nlevel](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`,\n`ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`. * `{ProblemTitle}`: A short description of the\nproblem\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the notification configuration\n"
                },
                "profile": {
                    "type": "string",
                    "description": "The ID of the associated alerting profile\n"
                }
            },
            "requiredInputs": [
                "active",
                "domain",
                "message",
                "profile"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering OpsGenieNotification resources.\n",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "description": "The configuration is enabled (`true`) or disabled (`false`)\n"
                    },
                    "apiKey": {
                        "type": "string",
                        "description": "The API key to access OpsGenie\n",
                        "secret": true
                    },
                    "domain": {
                        "type": "string",
                        "description": "The region domain of the OpsGenie\n"
                    },
                    "legacyId": {
                        "type": "string",
                        "description": "The ID of these settings when referred to from resources requiring the REST API V1 keys\n"
                    },
                    "message": {
                        "type": "string",
                        "description": "The content of the message. You can use the following placeholders: * `{ProblemID}`: The display number of the reported\nproblem. * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of\nthe problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`. * `{ProblemSeverity}`: The [severity\nlevel](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`,\n`ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`. * `{ProblemTitle}`: A short description of the\nproblem\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the notification configuration\n"
                    },
                    "profile": {
                        "type": "string",
                        "description": "The ID of the associated alerting profile\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/osServices:OsServices": {
            "properties": {
                "alertActivationDuration": {
                    "type": "integer",
                    "description": "The number of **10-second measurement cycles** before alerting is triggered\n"
                },
                "alerting": {
                    "type": "boolean",
                    "description": "Toggle the switch in order to enable or disable alerting for this policy\n"
                },
                "detectionConditionsLinux": {
                    "$ref": "#/types/dynatrace:index/OsServicesDetectionConditionsLinux:OsServicesDetectionConditionsLinux",
                    "description": "Detection rules\n"
                },
                "detectionConditionsWindows": {
                    "$ref": "#/types/dynatrace:index/OsServicesDetectionConditionsWindows:OsServicesDetectionConditionsWindows",
                    "description": "Detection rules\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "insertAfter": {
                    "type": "string",
                    "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                },
                "metadata": {
                    "$ref": "#/types/dynatrace:index/OsServicesMetadata:OsServicesMetadata",
                    "description": "Set of additional key-value properties to be attached to the triggered event.\n"
                },
                "monitoring": {
                    "type": "boolean",
                    "description": "Toggle the switch in order to enable or disable availability metric monitoring for this policy. Availability metrics\nproduce custom metrics. Refer to [documentation](https://dt-url.net/vl03xzk) for consumption examples. Each monitored\nservice consumes one custom metric.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Rule name\n"
                },
                "notInstalledAlerting": {
                    "type": "boolean",
                    "description": "By default, Dynatrace does not alert if the service is not installed. Toggle the switch to enable or disable this\nfeature\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.\n"
                },
                "statusConditionLinux": {
                    "type": "string",
                    "description": "This string has to match a required format. See [OS services monitoring](https://dt-url.net/vl03xzk). - `$eq(failed)`\n– Matches services that are in failed state. Available logic operations: - `$not($eq(active))` – Matches services\nwith state different from active. - `$or($eq(inactive),$eq(failed))` – Matches services that are either in inactive or\nfailed state. Use one of the following values as a parameter for this condition: - `reloading` - `activating` -\n`deactivating` - `failed` - `inactive` - `active`\n"
                },
                "statusConditionWindows": {
                    "type": "string",
                    "description": "This string has to match a required format. See [OS services monitoring](https://dt-url.net/vl03xzk). - `$eq(paused)`\n– Matches services that are in paused state. Available logic operations: - `$not($eq(paused))` – Matches services\nthat are in state different from paused. - `$or($eq(paused),$eq(running))` – Matches services that are either in\npaused or running state. Use one of the following values as a parameter for this condition: - `running` - `stopped` -\n`start_pending` - `stop_pending` - `continue_pending` - `pause_pending` - `paused`\n"
                },
                "system": {
                    "type": "string",
                    "description": "Possible Values: `LINUX`, `WINDOWS`\n"
                }
            },
            "required": [
                "alerting",
                "enabled",
                "insertAfter",
                "monitoring",
                "name",
                "system"
            ],
            "inputProperties": {
                "alertActivationDuration": {
                    "type": "integer",
                    "description": "The number of **10-second measurement cycles** before alerting is triggered\n"
                },
                "alerting": {
                    "type": "boolean",
                    "description": "Toggle the switch in order to enable or disable alerting for this policy\n"
                },
                "detectionConditionsLinux": {
                    "$ref": "#/types/dynatrace:index/OsServicesDetectionConditionsLinux:OsServicesDetectionConditionsLinux",
                    "description": "Detection rules\n"
                },
                "detectionConditionsWindows": {
                    "$ref": "#/types/dynatrace:index/OsServicesDetectionConditionsWindows:OsServicesDetectionConditionsWindows",
                    "description": "Detection rules\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "insertAfter": {
                    "type": "string",
                    "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                },
                "metadata": {
                    "$ref": "#/types/dynatrace:index/OsServicesMetadata:OsServicesMetadata",
                    "description": "Set of additional key-value properties to be attached to the triggered event.\n"
                },
                "monitoring": {
                    "type": "boolean",
                    "description": "Toggle the switch in order to enable or disable availability metric monitoring for this policy. Availability metrics\nproduce custom metrics. Refer to [documentation](https://dt-url.net/vl03xzk) for consumption examples. Each monitored\nservice consumes one custom metric.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Rule name\n"
                },
                "notInstalledAlerting": {
                    "type": "boolean",
                    "description": "By default, Dynatrace does not alert if the service is not installed. Toggle the switch to enable or disable this\nfeature\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.\n",
                    "willReplaceOnChanges": true
                },
                "statusConditionLinux": {
                    "type": "string",
                    "description": "This string has to match a required format. See [OS services monitoring](https://dt-url.net/vl03xzk). - `$eq(failed)`\n– Matches services that are in failed state. Available logic operations: - `$not($eq(active))` – Matches services\nwith state different from active. - `$or($eq(inactive),$eq(failed))` – Matches services that are either in inactive or\nfailed state. Use one of the following values as a parameter for this condition: - `reloading` - `activating` -\n`deactivating` - `failed` - `inactive` - `active`\n"
                },
                "statusConditionWindows": {
                    "type": "string",
                    "description": "This string has to match a required format. See [OS services monitoring](https://dt-url.net/vl03xzk). - `$eq(paused)`\n– Matches services that are in paused state. Available logic operations: - `$not($eq(paused))` – Matches services\nthat are in state different from paused. - `$or($eq(paused),$eq(running))` – Matches services that are either in\npaused or running state. Use one of the following values as a parameter for this condition: - `running` - `stopped` -\n`start_pending` - `stop_pending` - `continue_pending` - `pause_pending` - `paused`\n"
                },
                "system": {
                    "type": "string",
                    "description": "Possible Values: `LINUX`, `WINDOWS`\n"
                }
            },
            "requiredInputs": [
                "alerting",
                "enabled",
                "monitoring",
                "system"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering OsServices resources.\n",
                "properties": {
                    "alertActivationDuration": {
                        "type": "integer",
                        "description": "The number of **10-second measurement cycles** before alerting is triggered\n"
                    },
                    "alerting": {
                        "type": "boolean",
                        "description": "Toggle the switch in order to enable or disable alerting for this policy\n"
                    },
                    "detectionConditionsLinux": {
                        "$ref": "#/types/dynatrace:index/OsServicesDetectionConditionsLinux:OsServicesDetectionConditionsLinux",
                        "description": "Detection rules\n"
                    },
                    "detectionConditionsWindows": {
                        "$ref": "#/types/dynatrace:index/OsServicesDetectionConditionsWindows:OsServicesDetectionConditionsWindows",
                        "description": "Detection rules\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                    },
                    "insertAfter": {
                        "type": "string",
                        "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                    },
                    "metadata": {
                        "$ref": "#/types/dynatrace:index/OsServicesMetadata:OsServicesMetadata",
                        "description": "Set of additional key-value properties to be attached to the triggered event.\n"
                    },
                    "monitoring": {
                        "type": "boolean",
                        "description": "Toggle the switch in order to enable or disable availability metric monitoring for this policy. Availability metrics\nproduce custom metrics. Refer to [documentation](https://dt-url.net/vl03xzk) for consumption examples. Each monitored\nservice consumes one custom metric.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Rule name\n"
                    },
                    "notInstalledAlerting": {
                        "type": "boolean",
                        "description": "By default, Dynatrace does not alert if the service is not installed. Toggle the switch to enable or disable this\nfeature\n"
                    },
                    "scope": {
                        "type": "string",
                        "description": "The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.\n",
                        "willReplaceOnChanges": true
                    },
                    "statusConditionLinux": {
                        "type": "string",
                        "description": "This string has to match a required format. See [OS services monitoring](https://dt-url.net/vl03xzk). - `$eq(failed)`\n– Matches services that are in failed state. Available logic operations: - `$not($eq(active))` – Matches services\nwith state different from active. - `$or($eq(inactive),$eq(failed))` – Matches services that are either in inactive or\nfailed state. Use one of the following values as a parameter for this condition: - `reloading` - `activating` -\n`deactivating` - `failed` - `inactive` - `active`\n"
                    },
                    "statusConditionWindows": {
                        "type": "string",
                        "description": "This string has to match a required format. See [OS services monitoring](https://dt-url.net/vl03xzk). - `$eq(paused)`\n– Matches services that are in paused state. Available logic operations: - `$not($eq(paused))` – Matches services\nthat are in state different from paused. - `$or($eq(paused),$eq(running))` – Matches services that are either in\npaused or running state. Use one of the following values as a parameter for this condition: - `running` - `stopped` -\n`start_pending` - `stop_pending` - `continue_pending` - `pause_pending` - `paused`\n"
                    },
                    "system": {
                        "type": "string",
                        "description": "Possible Values: `LINUX`, `WINDOWS`\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/ownershipConfig:OwnershipConfig": {
            "properties": {
                "ownershipIdentifiers": {
                    "$ref": "#/types/dynatrace:index/OwnershipConfigOwnershipIdentifiers:OwnershipConfigOwnershipIdentifiers",
                    "description": "Tags and metadata are key-value pairs. Define keys for tags and metadata that are considered for ownership. If a tag or\nany metadata starts with a key defined below, the value of the tag or metadata is considered a team identifier.\n"
                }
            },
            "required": [
                "ownershipIdentifiers"
            ],
            "inputProperties": {
                "ownershipIdentifiers": {
                    "$ref": "#/types/dynatrace:index/OwnershipConfigOwnershipIdentifiers:OwnershipConfigOwnershipIdentifiers",
                    "description": "Tags and metadata are key-value pairs. Define keys for tags and metadata that are considered for ownership. If a tag or\nany metadata starts with a key defined below, the value of the tag or metadata is considered a team identifier.\n"
                }
            },
            "requiredInputs": [
                "ownershipIdentifiers"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering OwnershipConfig resources.\n",
                "properties": {
                    "ownershipIdentifiers": {
                        "$ref": "#/types/dynatrace:index/OwnershipConfigOwnershipIdentifiers:OwnershipConfigOwnershipIdentifiers",
                        "description": "Tags and metadata are key-value pairs. Define keys for tags and metadata that are considered for ownership. If a tag or\nany metadata starts with a key defined below, the value of the tag or metadata is considered a team identifier.\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/ownershipTeams:OwnershipTeams": {
            "properties": {
                "additionalInformation": {
                    "$ref": "#/types/dynatrace:index/OwnershipTeamsAdditionalInformation:OwnershipTeamsAdditionalInformation",
                    "description": "Define key/value pairs that further describe this team — for example, cost center, solution type, or business unit\nassignments.\n"
                },
                "contactDetails": {
                    "$ref": "#/types/dynatrace:index/OwnershipTeamsContactDetails:OwnershipTeamsContactDetails",
                    "description": "Define options for messaging integration or other means of contacting this team.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description\n"
                },
                "externalId": {
                    "type": "string",
                    "description": "This field should only be used for the automation purpose when importing team information.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "The team identifier is used to reference the team from any entity in Dynatrace. If you are using Kubernetes labels, keep\nin mind the 63 character limit that they enforce.\n"
                },
                "links": {
                    "$ref": "#/types/dynatrace:index/OwnershipTeamsLinks:OwnershipTeamsLinks",
                    "description": "Include links to online resources where information relevant to this team’s responsibilities can be found.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Team name\n"
                },
                "responsibilities": {
                    "$ref": "#/types/dynatrace:index/OwnershipTeamsResponsibilities:OwnershipTeamsResponsibilities",
                    "description": "Turn on all responsibility assignments that apply to this team.\n"
                },
                "supplementaryIdentifiers": {
                    "$ref": "#/types/dynatrace:index/OwnershipTeamsSupplementaryIdentifiers:OwnershipTeamsSupplementaryIdentifiers",
                    "description": "The supplementary team identifiers can be optionally used in addition to the main team identifier to reference this team\nfrom any entity in Dynatrace. Up to 3 supplementary identifiers are supported.\n"
                }
            },
            "required": [
                "identifier",
                "name",
                "responsibilities"
            ],
            "inputProperties": {
                "additionalInformation": {
                    "$ref": "#/types/dynatrace:index/OwnershipTeamsAdditionalInformation:OwnershipTeamsAdditionalInformation",
                    "description": "Define key/value pairs that further describe this team — for example, cost center, solution type, or business unit\nassignments.\n"
                },
                "contactDetails": {
                    "$ref": "#/types/dynatrace:index/OwnershipTeamsContactDetails:OwnershipTeamsContactDetails",
                    "description": "Define options for messaging integration or other means of contacting this team.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description\n"
                },
                "externalId": {
                    "type": "string",
                    "description": "This field should only be used for the automation purpose when importing team information.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "The team identifier is used to reference the team from any entity in Dynatrace. If you are using Kubernetes labels, keep\nin mind the 63 character limit that they enforce.\n"
                },
                "links": {
                    "$ref": "#/types/dynatrace:index/OwnershipTeamsLinks:OwnershipTeamsLinks",
                    "description": "Include links to online resources where information relevant to this team’s responsibilities can be found.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Team name\n"
                },
                "responsibilities": {
                    "$ref": "#/types/dynatrace:index/OwnershipTeamsResponsibilities:OwnershipTeamsResponsibilities",
                    "description": "Turn on all responsibility assignments that apply to this team.\n"
                },
                "supplementaryIdentifiers": {
                    "$ref": "#/types/dynatrace:index/OwnershipTeamsSupplementaryIdentifiers:OwnershipTeamsSupplementaryIdentifiers",
                    "description": "The supplementary team identifiers can be optionally used in addition to the main team identifier to reference this team\nfrom any entity in Dynatrace. Up to 3 supplementary identifiers are supported.\n"
                }
            },
            "requiredInputs": [
                "identifier",
                "responsibilities"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering OwnershipTeams resources.\n",
                "properties": {
                    "additionalInformation": {
                        "$ref": "#/types/dynatrace:index/OwnershipTeamsAdditionalInformation:OwnershipTeamsAdditionalInformation",
                        "description": "Define key/value pairs that further describe this team — for example, cost center, solution type, or business unit\nassignments.\n"
                    },
                    "contactDetails": {
                        "$ref": "#/types/dynatrace:index/OwnershipTeamsContactDetails:OwnershipTeamsContactDetails",
                        "description": "Define options for messaging integration or other means of contacting this team.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description\n"
                    },
                    "externalId": {
                        "type": "string",
                        "description": "This field should only be used for the automation purpose when importing team information.\n"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "The team identifier is used to reference the team from any entity in Dynatrace. If you are using Kubernetes labels, keep\nin mind the 63 character limit that they enforce.\n"
                    },
                    "links": {
                        "$ref": "#/types/dynatrace:index/OwnershipTeamsLinks:OwnershipTeamsLinks",
                        "description": "Include links to online resources where information relevant to this team’s responsibilities can be found.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Team name\n"
                    },
                    "responsibilities": {
                        "$ref": "#/types/dynatrace:index/OwnershipTeamsResponsibilities:OwnershipTeamsResponsibilities",
                        "description": "Turn on all responsibility assignments that apply to this team.\n"
                    },
                    "supplementaryIdentifiers": {
                        "$ref": "#/types/dynatrace:index/OwnershipTeamsSupplementaryIdentifiers:OwnershipTeamsSupplementaryIdentifiers",
                        "description": "The supplementary team identifiers can be optionally used in addition to the main team identifier to reference this team\nfrom any entity in Dynatrace. Up to 3 supplementary identifiers are supported.\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/pagerDutyNotification:PagerDutyNotification": {
            "properties": {
                "account": {
                    "type": "string",
                    "description": "The name of the PagerDuty account\n"
                },
                "active": {
                    "type": "boolean",
                    "description": "The configuration is enabled (`true`) or disabled (`false`)\n"
                },
                "apiKey": {
                    "type": "string",
                    "description": "The API key to access PagerDuty\n",
                    "secret": true
                },
                "legacyId": {
                    "type": "string",
                    "description": "The ID of these settings when referred to from resources requiring the REST API V1 keys\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the notification configuration\n"
                },
                "profile": {
                    "type": "string",
                    "description": "The ID of the associated alerting profile\n"
                },
                "service": {
                    "type": "string",
                    "description": "The name of the PagerDuty Service\n"
                }
            },
            "required": [
                "account",
                "active",
                "legacyId",
                "name",
                "profile",
                "service"
            ],
            "inputProperties": {
                "account": {
                    "type": "string",
                    "description": "The name of the PagerDuty account\n"
                },
                "active": {
                    "type": "boolean",
                    "description": "The configuration is enabled (`true`) or disabled (`false`)\n"
                },
                "apiKey": {
                    "type": "string",
                    "description": "The API key to access PagerDuty\n",
                    "secret": true
                },
                "legacyId": {
                    "type": "string",
                    "description": "The ID of these settings when referred to from resources requiring the REST API V1 keys\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the notification configuration\n"
                },
                "profile": {
                    "type": "string",
                    "description": "The ID of the associated alerting profile\n"
                },
                "service": {
                    "type": "string",
                    "description": "The name of the PagerDuty Service\n"
                }
            },
            "requiredInputs": [
                "account",
                "active",
                "profile",
                "service"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PagerDutyNotification resources.\n",
                "properties": {
                    "account": {
                        "type": "string",
                        "description": "The name of the PagerDuty account\n"
                    },
                    "active": {
                        "type": "boolean",
                        "description": "The configuration is enabled (`true`) or disabled (`false`)\n"
                    },
                    "apiKey": {
                        "type": "string",
                        "description": "The API key to access PagerDuty\n",
                        "secret": true
                    },
                    "legacyId": {
                        "type": "string",
                        "description": "The ID of these settings when referred to from resources requiring the REST API V1 keys\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the notification configuration\n"
                    },
                    "profile": {
                        "type": "string",
                        "description": "The ID of the associated alerting profile\n"
                    },
                    "service": {
                        "type": "string",
                        "description": "The name of the PagerDuty Service\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/pgAlerting:PgAlerting": {
            "properties": {
                "alertingMode": {
                    "type": "string",
                    "description": "Possible Values: `ON_INSTANCE_COUNT_VIOLATION`, `ON_PGI_UNAVAILABILITY`\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enable (`true`) or disable (`false`) process group availability monitoring\n"
                },
                "minimumInstanceThreshold": {
                    "type": "integer",
                    "description": "Open a new problem if the number of active process instances in the group is fewer than X\n"
                },
                "processGroup": {
                    "type": "string",
                    "description": "The process group ID for availability monitoring\n"
                }
            },
            "required": [
                "enabled",
                "processGroup"
            ],
            "inputProperties": {
                "alertingMode": {
                    "type": "string",
                    "description": "Possible Values: `ON_INSTANCE_COUNT_VIOLATION`, `ON_PGI_UNAVAILABILITY`\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enable (`true`) or disable (`false`) process group availability monitoring\n"
                },
                "minimumInstanceThreshold": {
                    "type": "integer",
                    "description": "Open a new problem if the number of active process instances in the group is fewer than X\n"
                },
                "processGroup": {
                    "type": "string",
                    "description": "The process group ID for availability monitoring\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "enabled",
                "processGroup"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PgAlerting resources.\n",
                "properties": {
                    "alertingMode": {
                        "type": "string",
                        "description": "Possible Values: `ON_INSTANCE_COUNT_VIOLATION`, `ON_PGI_UNAVAILABILITY`\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable (`true`) or disable (`false`) process group availability monitoring\n"
                    },
                    "minimumInstanceThreshold": {
                        "type": "integer",
                        "description": "Open a new problem if the number of active process instances in the group is fewer than X\n"
                    },
                    "processGroup": {
                        "type": "string",
                        "description": "The process group ID for availability monitoring\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/pgAnomalies:PgAnomalies": {
            "properties": {
                "availability": {
                    "$ref": "#/types/dynatrace:index/PgAnomaliesAvailability:PgAnomaliesAvailability",
                    "description": "Configuration of the availability monitoring for the process group.\n"
                },
                "pgId": {
                    "type": "string",
                    "description": "The ID of the process group\n"
                }
            },
            "required": [
                "pgId"
            ],
            "inputProperties": {
                "availability": {
                    "$ref": "#/types/dynatrace:index/PgAnomaliesAvailability:PgAnomaliesAvailability",
                    "description": "Configuration of the availability monitoring for the process group.\n"
                },
                "pgId": {
                    "type": "string",
                    "description": "The ID of the process group\n"
                }
            },
            "requiredInputs": [
                "pgId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PgAnomalies resources.\n",
                "properties": {
                    "availability": {
                        "$ref": "#/types/dynatrace:index/PgAnomaliesAvailability:PgAnomaliesAvailability",
                        "description": "Configuration of the availability monitoring for the process group.\n"
                    },
                    "pgId": {
                        "type": "string",
                        "description": "The ID of the process group\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/platformBucket:PlatformBucket": {
            "properties": {
                "displayName": {
                    "type": "string",
                    "description": "The name of the bucket definition when visualized within the UI\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name / id of the bucket definition\n"
                },
                "retention": {
                    "type": "integer",
                    "description": "The retention of stored data in days\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the bucket definition. Usually has the value `active` unless an update or delete is currently happening\n"
                },
                "table": {
                    "type": "string",
                    "description": "The table the bucket definition applies to. Possible values are `logs`, `spans`, `events` and `bizevents`. Changing this\nattribute will result in deleting and re-creating the bucket definition\n"
                }
            },
            "required": [
                "name",
                "retention",
                "status",
                "table"
            ],
            "inputProperties": {
                "displayName": {
                    "type": "string",
                    "description": "The name of the bucket definition when visualized within the UI\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name / id of the bucket definition\n",
                    "willReplaceOnChanges": true
                },
                "retention": {
                    "type": "integer",
                    "description": "The retention of stored data in days\n"
                },
                "table": {
                    "type": "string",
                    "description": "The table the bucket definition applies to. Possible values are `logs`, `spans`, `events` and `bizevents`. Changing this\nattribute will result in deleting and re-creating the bucket definition\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "retention",
                "table"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PlatformBucket resources.\n",
                "properties": {
                    "displayName": {
                        "type": "string",
                        "description": "The name of the bucket definition when visualized within the UI\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name / id of the bucket definition\n",
                        "willReplaceOnChanges": true
                    },
                    "retention": {
                        "type": "integer",
                        "description": "The retention of stored data in days\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the bucket definition. Usually has the value `active` unless an update or delete is currently happening\n"
                    },
                    "table": {
                        "type": "string",
                        "description": "The table the bucket definition applies to. Possible values are `logs`, `spans`, `events` and `bizevents`. Changing this\nattribute will result in deleting and re-creating the bucket definition\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/policy:Policy": {
            "properties": {
                "cluster": {
                    "type": "string",
                    "description": "The UUID of the cluster in case the policy should be applied to all environments of this cluster.\n"
                },
                "description": {
                    "type": "string",
                    "description": "An optional description text for the policy\n"
                },
                "environment": {
                    "type": "string",
                    "description": "The ID of the environment if the policy should be applied to a specific environment\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the policy\n"
                },
                "statementQuery": {
                    "type": "string",
                    "description": "The Statement Query of the policy\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags for this policy\n"
                }
            },
            "required": [
                "name",
                "statementQuery"
            ],
            "inputProperties": {
                "cluster": {
                    "type": "string",
                    "description": "The UUID of the cluster in case the policy should be applied to all environments of this cluster.\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "An optional description text for the policy\n"
                },
                "environment": {
                    "type": "string",
                    "description": "The ID of the environment if the policy should be applied to a specific environment\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The name of the policy\n"
                },
                "statementQuery": {
                    "type": "string",
                    "description": "The Statement Query of the policy\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags for this policy\n"
                }
            },
            "requiredInputs": [
                "statementQuery"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Policy resources.\n",
                "properties": {
                    "cluster": {
                        "type": "string",
                        "description": "The UUID of the cluster in case the policy should be applied to all environments of this cluster.\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "An optional description text for the policy\n"
                    },
                    "environment": {
                        "type": "string",
                        "description": "The ID of the environment if the policy should be applied to a specific environment\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the policy\n"
                    },
                    "statementQuery": {
                        "type": "string",
                        "description": "The Statement Query of the policy\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags for this policy\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/policyBindings:PolicyBindings": {
            "properties": {
                "cluster": {
                    "type": "string",
                    "description": "The UUID of the cluster. The attribute `policies` must contain ONLY policies defined for that cluster.\n"
                },
                "environment": {
                    "type": "string",
                    "description": "The ID of the environment (https://\u003cenvironmentid\u003e.live.dynatrace.com). The attribute `policies` must contain ONLY\npolicies defined for that environment.\n"
                },
                "group": {
                    "type": "string",
                    "description": "The name of the policy\n"
                },
                "policies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of IDs referring to policies bound to that group. It's not possible to mix policies here that are defined for\ndifferent scopes (different clusters or environments) than specified via attributes `cluster` or `environment`.\n"
                }
            },
            "required": [
                "group",
                "policies"
            ],
            "inputProperties": {
                "cluster": {
                    "type": "string",
                    "description": "The UUID of the cluster. The attribute `policies` must contain ONLY policies defined for that cluster.\n",
                    "willReplaceOnChanges": true
                },
                "environment": {
                    "type": "string",
                    "description": "The ID of the environment (https://\u003cenvironmentid\u003e.live.dynatrace.com). The attribute `policies` must contain ONLY\npolicies defined for that environment.\n",
                    "willReplaceOnChanges": true
                },
                "group": {
                    "type": "string",
                    "description": "The name of the policy\n",
                    "willReplaceOnChanges": true
                },
                "policies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of IDs referring to policies bound to that group. It's not possible to mix policies here that are defined for\ndifferent scopes (different clusters or environments) than specified via attributes `cluster` or `environment`.\n"
                }
            },
            "requiredInputs": [
                "group",
                "policies"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PolicyBindings resources.\n",
                "properties": {
                    "cluster": {
                        "type": "string",
                        "description": "The UUID of the cluster. The attribute `policies` must contain ONLY policies defined for that cluster.\n",
                        "willReplaceOnChanges": true
                    },
                    "environment": {
                        "type": "string",
                        "description": "The ID of the environment (https://\u003cenvironmentid\u003e.live.dynatrace.com). The attribute `policies` must contain ONLY\npolicies defined for that environment.\n",
                        "willReplaceOnChanges": true
                    },
                    "group": {
                        "type": "string",
                        "description": "The name of the policy\n",
                        "willReplaceOnChanges": true
                    },
                    "policies": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of IDs referring to policies bound to that group. It's not possible to mix policies here that are defined for\ndifferent scopes (different clusters or environments) than specified via attributes `cluster` or `environment`.\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/processAvailability:ProcessAvailability": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "insertAfter": {
                    "type": "string",
                    "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                },
                "metadata": {
                    "$ref": "#/types/dynatrace:index/ProcessAvailabilityMetadata:ProcessAvailabilityMetadata",
                    "description": "Set of additional key-value properties to be attached to the triggered event.\n"
                },
                "minimumProcesses": {
                    "type": "integer",
                    "description": "Specify a minimum number of processes matching the monitoring rule. If it's not satisfied, an alert will open.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Monitoring rule name\n"
                },
                "operatingSystems": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Select the operating systems on which the monitoring rule should be applied.\n"
                },
                "rules": {
                    "$ref": "#/types/dynatrace:index/ProcessAvailabilityRules:ProcessAvailabilityRules",
                    "description": "Define process detection rules by selecting a process property and a condition. Each monitoring rule can have multiple\ndetection rules associated with it.\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.\n"
                }
            },
            "required": [
                "enabled",
                "insertAfter",
                "name"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "insertAfter": {
                    "type": "string",
                    "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                },
                "metadata": {
                    "$ref": "#/types/dynatrace:index/ProcessAvailabilityMetadata:ProcessAvailabilityMetadata",
                    "description": "Set of additional key-value properties to be attached to the triggered event.\n"
                },
                "minimumProcesses": {
                    "type": "integer",
                    "description": "Specify a minimum number of processes matching the monitoring rule. If it's not satisfied, an alert will open.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Monitoring rule name\n"
                },
                "operatingSystems": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Select the operating systems on which the monitoring rule should be applied.\n"
                },
                "rules": {
                    "$ref": "#/types/dynatrace:index/ProcessAvailabilityRules:ProcessAvailabilityRules",
                    "description": "Define process detection rules by selecting a process property and a condition. Each monitoring rule can have multiple\ndetection rules associated with it.\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "enabled"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProcessAvailability resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                    },
                    "insertAfter": {
                        "type": "string",
                        "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                    },
                    "metadata": {
                        "$ref": "#/types/dynatrace:index/ProcessAvailabilityMetadata:ProcessAvailabilityMetadata",
                        "description": "Set of additional key-value properties to be attached to the triggered event.\n"
                    },
                    "minimumProcesses": {
                        "type": "integer",
                        "description": "Specify a minimum number of processes matching the monitoring rule. If it's not satisfied, an alert will open.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Monitoring rule name\n"
                    },
                    "operatingSystems": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Select the operating systems on which the monitoring rule should be applied.\n"
                    },
                    "rules": {
                        "$ref": "#/types/dynatrace:index/ProcessAvailabilityRules:ProcessAvailabilityRules",
                        "description": "Define process detection rules by selecting a process property and a condition. Each monitoring rule can have multiple\ndetection rules associated with it.\n"
                    },
                    "scope": {
                        "type": "string",
                        "description": "The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/processGroupDetection:ProcessGroupDetection": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "groupExtraction": {
                    "$ref": "#/types/dynatrace:index/ProcessGroupDetectionGroupExtraction:ProcessGroupDetectionGroupExtraction",
                    "description": "You can define the properties that should be used to identify your process groups.\n"
                },
                "insertAfter": {
                    "type": "string",
                    "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                },
                "instanceExtraction": {
                    "$ref": "#/types/dynatrace:index/ProcessGroupDetectionInstanceExtraction:ProcessGroupDetectionInstanceExtraction",
                    "description": "You can define the properties that should be used to identify your process instances.\n"
                },
                "processDetection": {
                    "$ref": "#/types/dynatrace:index/ProcessGroupDetectionProcessDetection:ProcessGroupDetectionProcessDetection",
                    "description": "Apply this rule to processes where the selected property contains the specified string.\n"
                }
            },
            "required": [
                "enabled",
                "groupExtraction",
                "insertAfter",
                "processDetection"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "groupExtraction": {
                    "$ref": "#/types/dynatrace:index/ProcessGroupDetectionGroupExtraction:ProcessGroupDetectionGroupExtraction",
                    "description": "You can define the properties that should be used to identify your process groups.\n"
                },
                "insertAfter": {
                    "type": "string",
                    "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                },
                "instanceExtraction": {
                    "$ref": "#/types/dynatrace:index/ProcessGroupDetectionInstanceExtraction:ProcessGroupDetectionInstanceExtraction",
                    "description": "You can define the properties that should be used to identify your process instances.\n"
                },
                "processDetection": {
                    "$ref": "#/types/dynatrace:index/ProcessGroupDetectionProcessDetection:ProcessGroupDetectionProcessDetection",
                    "description": "Apply this rule to processes where the selected property contains the specified string.\n"
                }
            },
            "requiredInputs": [
                "enabled",
                "groupExtraction",
                "processDetection"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProcessGroupDetection resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                    },
                    "groupExtraction": {
                        "$ref": "#/types/dynatrace:index/ProcessGroupDetectionGroupExtraction:ProcessGroupDetectionGroupExtraction",
                        "description": "You can define the properties that should be used to identify your process groups.\n"
                    },
                    "insertAfter": {
                        "type": "string",
                        "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                    },
                    "instanceExtraction": {
                        "$ref": "#/types/dynatrace:index/ProcessGroupDetectionInstanceExtraction:ProcessGroupDetectionInstanceExtraction",
                        "description": "You can define the properties that should be used to identify your process instances.\n"
                    },
                    "processDetection": {
                        "$ref": "#/types/dynatrace:index/ProcessGroupDetectionProcessDetection:ProcessGroupDetectionProcessDetection",
                        "description": "Apply this rule to processes where the selected property contains the specified string.\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/processGroupDetectionFlags:ProcessGroupDetectionFlags": {
            "properties": {
                "addNodeJsScriptName": {
                    "type": "boolean",
                    "description": "In older versions, Node.js applications were distinguished based on their directory name, omitting the script name.\nChanging this setting may change the general handling of Node.js process groups. Leave unchanged if in doubt.\n"
                },
                "autoDetectCassandraClusters": {
                    "type": "boolean",
                    "description": "Enabling this flag will detect separate Cassandra process groups based on the configured Cassandra cluster name.\n"
                },
                "autoDetectSpringBoot": {
                    "type": "boolean",
                    "description": "Enabling this flag will detect Spring Boot process groups based on command line and applications' configuration files.\n"
                },
                "autoDetectTibcoContainerEditionEngines": {
                    "type": "boolean",
                    "description": "Enabling this flag will detect separate TIBCO BusinessWorks process groups per engine property file.\n"
                },
                "autoDetectTibcoEngines": {
                    "type": "boolean",
                    "description": "Enabling this flag will detect separate TIBCO BusinessWorks process groups per engine property file.\n"
                },
                "autoDetectWebMethodsIntegrationServer": {
                    "type": "boolean",
                    "description": "Enabling this flag will detect webMethods Integration Server including specific properties like install root and product\nname.\n"
                },
                "autoDetectWebSphereLibertyApplication": {
                    "type": "boolean",
                    "description": "Enabling this flag will detect separate WebSphere Liberty process groups based on java command line.\n"
                },
                "groupIbmmqbyInstanceName": {
                    "type": "boolean",
                    "description": "Enable to group and separately analyze the processes of each IBM MQ Queue manager instance. Each process group receives\na unique name based on the queue manager instance name.\n"
                },
                "identifyJbossServerBySystemProperty": {
                    "type": "boolean",
                    "description": "Enabling this flag will detect the JBoss server name from the system property jboss.server.name=\u003cserver-name\u003e, only if\n-D[Server:\u003cserver-name\u003e] is not set.\n"
                },
                "ignoreUniqueIdentifiers": {
                    "type": "boolean",
                    "description": "To determine the unique identity of each detected process, and to generate a unique name for each detected process,\nDynatrace evaluates the name of the directory that each process binary is contained within. For application containers\nlike Tomcat and JBoss, Dynatrace evaluates important directories like CATALINA_HOME and JBOSS_HOME for this information.\nIn some automated deployment scenarios such directory names are updated automatically with new version numbers, build\nnumbers, dates, or GUIDs. Enable this setting to ensure that automated directory name changes don't result in Dynatrace\nregistering pre-existing processes as new processes.\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.\n"
                },
                "shortLivedProcessesMonitoring": {
                    "type": "boolean",
                    "description": "Enable to monitor CPU and memory usage of short lived processes, otherwise being lost by traditional monitoring.\nDisabling this flag blocks passing data to cluster only, it does not stop data collection and has no effect on\nperformance.\n"
                },
                "splitOracleDatabasePg": {
                    "type": "boolean",
                    "description": "Enable to group and separately analyze the processes of each Oracle DB. Each process group receives a unique name based\non the Oracle DB SID.\n"
                },
                "splitOracleListenerPg": {
                    "type": "boolean",
                    "description": "Enable to group and separately analyze the processes of each Oracle Listener. Each process group receives a unique name\nbased on the Oracle Listener name.\n"
                },
                "useCatalinaBase": {
                    "type": "boolean",
                    "description": "By default, Tomcat clusters are identified and named based on the CATALINA_HOME directory name. This setting results in\nthe use of the CATALINA_BASE directory name to identify multiple Tomcat nodes within each Tomcat cluster. If this\nsetting is not enabled, each CATALINA_HOME+CATALINA_BASE combination will be considered a separate Tomcat cluster. In\nother words, Tomcat clusters can't have multiple nodes on a single host.\n"
                },
                "useDockerContainerName": {
                    "type": "boolean",
                    "description": "By default, Dynatrace uses image names as identifiers for individual process groups, with one process-group instance per\nhost. Normally Docker container names can't serve as stable identifiers of process group instances because they are\nvariable and auto-generated. You can however manually assign proper container names to their Docker instances. Such\nmanually-assigned container names can serve as reliable process-group instance identifiers. This flag instructs\nDynatrace to use Docker-provided names to distinguish between multiple instances of the same image. If this flag is not\napplied and you run multiple containers of the same image on the same host, the resulting processes will be consolidated\ninto a single process view. Use this flag with caution!\n"
                }
            },
            "required": [
                "addNodeJsScriptName",
                "autoDetectCassandraClusters",
                "autoDetectSpringBoot",
                "autoDetectTibcoContainerEditionEngines",
                "autoDetectTibcoEngines",
                "autoDetectWebMethodsIntegrationServer",
                "autoDetectWebSphereLibertyApplication",
                "groupIbmmqbyInstanceName",
                "identifyJbossServerBySystemProperty",
                "ignoreUniqueIdentifiers",
                "shortLivedProcessesMonitoring",
                "splitOracleDatabasePg",
                "splitOracleListenerPg",
                "useCatalinaBase",
                "useDockerContainerName"
            ],
            "inputProperties": {
                "addNodeJsScriptName": {
                    "type": "boolean",
                    "description": "In older versions, Node.js applications were distinguished based on their directory name, omitting the script name.\nChanging this setting may change the general handling of Node.js process groups. Leave unchanged if in doubt.\n"
                },
                "autoDetectCassandraClusters": {
                    "type": "boolean",
                    "description": "Enabling this flag will detect separate Cassandra process groups based on the configured Cassandra cluster name.\n"
                },
                "autoDetectSpringBoot": {
                    "type": "boolean",
                    "description": "Enabling this flag will detect Spring Boot process groups based on command line and applications' configuration files.\n"
                },
                "autoDetectTibcoContainerEditionEngines": {
                    "type": "boolean",
                    "description": "Enabling this flag will detect separate TIBCO BusinessWorks process groups per engine property file.\n"
                },
                "autoDetectTibcoEngines": {
                    "type": "boolean",
                    "description": "Enabling this flag will detect separate TIBCO BusinessWorks process groups per engine property file.\n"
                },
                "autoDetectWebMethodsIntegrationServer": {
                    "type": "boolean",
                    "description": "Enabling this flag will detect webMethods Integration Server including specific properties like install root and product\nname.\n"
                },
                "autoDetectWebSphereLibertyApplication": {
                    "type": "boolean",
                    "description": "Enabling this flag will detect separate WebSphere Liberty process groups based on java command line.\n"
                },
                "groupIbmmqbyInstanceName": {
                    "type": "boolean",
                    "description": "Enable to group and separately analyze the processes of each IBM MQ Queue manager instance. Each process group receives\na unique name based on the queue manager instance name.\n"
                },
                "identifyJbossServerBySystemProperty": {
                    "type": "boolean",
                    "description": "Enabling this flag will detect the JBoss server name from the system property jboss.server.name=\u003cserver-name\u003e, only if\n-D[Server:\u003cserver-name\u003e] is not set.\n"
                },
                "ignoreUniqueIdentifiers": {
                    "type": "boolean",
                    "description": "To determine the unique identity of each detected process, and to generate a unique name for each detected process,\nDynatrace evaluates the name of the directory that each process binary is contained within. For application containers\nlike Tomcat and JBoss, Dynatrace evaluates important directories like CATALINA_HOME and JBOSS_HOME for this information.\nIn some automated deployment scenarios such directory names are updated automatically with new version numbers, build\nnumbers, dates, or GUIDs. Enable this setting to ensure that automated directory name changes don't result in Dynatrace\nregistering pre-existing processes as new processes.\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.\n",
                    "willReplaceOnChanges": true
                },
                "shortLivedProcessesMonitoring": {
                    "type": "boolean",
                    "description": "Enable to monitor CPU and memory usage of short lived processes, otherwise being lost by traditional monitoring.\nDisabling this flag blocks passing data to cluster only, it does not stop data collection and has no effect on\nperformance.\n"
                },
                "splitOracleDatabasePg": {
                    "type": "boolean",
                    "description": "Enable to group and separately analyze the processes of each Oracle DB. Each process group receives a unique name based\non the Oracle DB SID.\n"
                },
                "splitOracleListenerPg": {
                    "type": "boolean",
                    "description": "Enable to group and separately analyze the processes of each Oracle Listener. Each process group receives a unique name\nbased on the Oracle Listener name.\n"
                },
                "useCatalinaBase": {
                    "type": "boolean",
                    "description": "By default, Tomcat clusters are identified and named based on the CATALINA_HOME directory name. This setting results in\nthe use of the CATALINA_BASE directory name to identify multiple Tomcat nodes within each Tomcat cluster. If this\nsetting is not enabled, each CATALINA_HOME+CATALINA_BASE combination will be considered a separate Tomcat cluster. In\nother words, Tomcat clusters can't have multiple nodes on a single host.\n"
                },
                "useDockerContainerName": {
                    "type": "boolean",
                    "description": "By default, Dynatrace uses image names as identifiers for individual process groups, with one process-group instance per\nhost. Normally Docker container names can't serve as stable identifiers of process group instances because they are\nvariable and auto-generated. You can however manually assign proper container names to their Docker instances. Such\nmanually-assigned container names can serve as reliable process-group instance identifiers. This flag instructs\nDynatrace to use Docker-provided names to distinguish between multiple instances of the same image. If this flag is not\napplied and you run multiple containers of the same image on the same host, the resulting processes will be consolidated\ninto a single process view. Use this flag with caution!\n"
                }
            },
            "requiredInputs": [
                "addNodeJsScriptName",
                "autoDetectCassandraClusters",
                "autoDetectSpringBoot",
                "autoDetectTibcoContainerEditionEngines",
                "autoDetectTibcoEngines",
                "autoDetectWebMethodsIntegrationServer",
                "autoDetectWebSphereLibertyApplication",
                "groupIbmmqbyInstanceName",
                "identifyJbossServerBySystemProperty",
                "ignoreUniqueIdentifiers",
                "shortLivedProcessesMonitoring",
                "splitOracleDatabasePg",
                "splitOracleListenerPg",
                "useCatalinaBase",
                "useDockerContainerName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProcessGroupDetectionFlags resources.\n",
                "properties": {
                    "addNodeJsScriptName": {
                        "type": "boolean",
                        "description": "In older versions, Node.js applications were distinguished based on their directory name, omitting the script name.\nChanging this setting may change the general handling of Node.js process groups. Leave unchanged if in doubt.\n"
                    },
                    "autoDetectCassandraClusters": {
                        "type": "boolean",
                        "description": "Enabling this flag will detect separate Cassandra process groups based on the configured Cassandra cluster name.\n"
                    },
                    "autoDetectSpringBoot": {
                        "type": "boolean",
                        "description": "Enabling this flag will detect Spring Boot process groups based on command line and applications' configuration files.\n"
                    },
                    "autoDetectTibcoContainerEditionEngines": {
                        "type": "boolean",
                        "description": "Enabling this flag will detect separate TIBCO BusinessWorks process groups per engine property file.\n"
                    },
                    "autoDetectTibcoEngines": {
                        "type": "boolean",
                        "description": "Enabling this flag will detect separate TIBCO BusinessWorks process groups per engine property file.\n"
                    },
                    "autoDetectWebMethodsIntegrationServer": {
                        "type": "boolean",
                        "description": "Enabling this flag will detect webMethods Integration Server including specific properties like install root and product\nname.\n"
                    },
                    "autoDetectWebSphereLibertyApplication": {
                        "type": "boolean",
                        "description": "Enabling this flag will detect separate WebSphere Liberty process groups based on java command line.\n"
                    },
                    "groupIbmmqbyInstanceName": {
                        "type": "boolean",
                        "description": "Enable to group and separately analyze the processes of each IBM MQ Queue manager instance. Each process group receives\na unique name based on the queue manager instance name.\n"
                    },
                    "identifyJbossServerBySystemProperty": {
                        "type": "boolean",
                        "description": "Enabling this flag will detect the JBoss server name from the system property jboss.server.name=\u003cserver-name\u003e, only if\n-D[Server:\u003cserver-name\u003e] is not set.\n"
                    },
                    "ignoreUniqueIdentifiers": {
                        "type": "boolean",
                        "description": "To determine the unique identity of each detected process, and to generate a unique name for each detected process,\nDynatrace evaluates the name of the directory that each process binary is contained within. For application containers\nlike Tomcat and JBoss, Dynatrace evaluates important directories like CATALINA_HOME and JBOSS_HOME for this information.\nIn some automated deployment scenarios such directory names are updated automatically with new version numbers, build\nnumbers, dates, or GUIDs. Enable this setting to ensure that automated directory name changes don't result in Dynatrace\nregistering pre-existing processes as new processes.\n"
                    },
                    "scope": {
                        "type": "string",
                        "description": "The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.\n",
                        "willReplaceOnChanges": true
                    },
                    "shortLivedProcessesMonitoring": {
                        "type": "boolean",
                        "description": "Enable to monitor CPU and memory usage of short lived processes, otherwise being lost by traditional monitoring.\nDisabling this flag blocks passing data to cluster only, it does not stop data collection and has no effect on\nperformance.\n"
                    },
                    "splitOracleDatabasePg": {
                        "type": "boolean",
                        "description": "Enable to group and separately analyze the processes of each Oracle DB. Each process group receives a unique name based\non the Oracle DB SID.\n"
                    },
                    "splitOracleListenerPg": {
                        "type": "boolean",
                        "description": "Enable to group and separately analyze the processes of each Oracle Listener. Each process group receives a unique name\nbased on the Oracle Listener name.\n"
                    },
                    "useCatalinaBase": {
                        "type": "boolean",
                        "description": "By default, Tomcat clusters are identified and named based on the CATALINA_HOME directory name. This setting results in\nthe use of the CATALINA_BASE directory name to identify multiple Tomcat nodes within each Tomcat cluster. If this\nsetting is not enabled, each CATALINA_HOME+CATALINA_BASE combination will be considered a separate Tomcat cluster. In\nother words, Tomcat clusters can't have multiple nodes on a single host.\n"
                    },
                    "useDockerContainerName": {
                        "type": "boolean",
                        "description": "By default, Dynatrace uses image names as identifiers for individual process groups, with one process-group instance per\nhost. Normally Docker container names can't serve as stable identifiers of process group instances because they are\nvariable and auto-generated. You can however manually assign proper container names to their Docker instances. Such\nmanually-assigned container names can serve as reliable process-group instance identifiers. This flag instructs\nDynatrace to use Docker-provided names to distinguish between multiple instances of the same image. If this flag is not\napplied and you run multiple containers of the same image on the same host, the resulting processes will be consolidated\ninto a single process view. Use this flag with caution!\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/processGroupMonitoring:ProcessGroupMonitoring": {
            "properties": {
                "monitoringState": {
                    "type": "string",
                    "description": "Possible Values: `DEFAULT`, `MONITORING_OFF`, `MONITORING_ON`\n"
                },
                "processGroupId": {
                    "type": "string",
                    "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.\n"
                }
            },
            "required": [
                "monitoringState",
                "processGroupId"
            ],
            "inputProperties": {
                "monitoringState": {
                    "type": "string",
                    "description": "Possible Values: `DEFAULT`, `MONITORING_OFF`, `MONITORING_ON`\n"
                },
                "processGroupId": {
                    "type": "string",
                    "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "monitoringState",
                "processGroupId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProcessGroupMonitoring resources.\n",
                "properties": {
                    "monitoringState": {
                        "type": "string",
                        "description": "Possible Values: `DEFAULT`, `MONITORING_OFF`, `MONITORING_ON`\n"
                    },
                    "processGroupId": {
                        "type": "string",
                        "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/processGroupRum:ProcessGroupRum": {
            "properties": {
                "enable": {
                    "type": "boolean",
                    "description": "Allows OneAgent to: * automatically inject the RUM JavaScript tag into each page delivered by this process group *\nprovide the necessary info to correlate RUM data with server-side PurePaths * forward beacons to the cluster * deliver\nthe monitoring code\n"
                },
                "processGroupId": {
                    "type": "string",
                    "description": "The scope of this setting - PROCESS_GROUP-XXXXXXXXXXXXXXXX\n"
                }
            },
            "required": [
                "enable",
                "processGroupId"
            ],
            "inputProperties": {
                "enable": {
                    "type": "boolean",
                    "description": "Allows OneAgent to: * automatically inject the RUM JavaScript tag into each page delivered by this process group *\nprovide the necessary info to correlate RUM data with server-side PurePaths * forward beacons to the cluster * deliver\nthe monitoring code\n"
                },
                "processGroupId": {
                    "type": "string",
                    "description": "The scope of this setting - PROCESS_GROUP-XXXXXXXXXXXXXXXX\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "enable",
                "processGroupId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProcessGroupRum resources.\n",
                "properties": {
                    "enable": {
                        "type": "boolean",
                        "description": "Allows OneAgent to: * automatically inject the RUM JavaScript tag into each page delivered by this process group *\nprovide the necessary info to correlate RUM data with server-side PurePaths * forward beacons to the cluster * deliver\nthe monitoring code\n"
                    },
                    "processGroupId": {
                        "type": "string",
                        "description": "The scope of this setting - PROCESS_GROUP-XXXXXXXXXXXXXXXX\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/processGroupSimpleDetection:ProcessGroupSimpleDetection": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "groupIdentifier": {
                    "type": "string",
                    "description": "If Dynatrace detects this property at startup of a process, it will use its value to identify process groups more\ngranular.\n"
                },
                "insertAfter": {
                    "type": "string",
                    "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                },
                "instanceIdentifier": {
                    "type": "string",
                    "description": "Use a variable to identify instances within a process group. The type of variable is the same as selected in 'Property\nsource'.\n"
                },
                "processType": {
                    "type": "string",
                    "description": "Note: Not all types can be detected at startup.\n"
                },
                "ruleType": {
                    "type": "string",
                    "description": "Possible Values: `Prop`, `Env`\n"
                }
            },
            "required": [
                "enabled",
                "groupIdentifier",
                "insertAfter",
                "instanceIdentifier",
                "ruleType"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "groupIdentifier": {
                    "type": "string",
                    "description": "If Dynatrace detects this property at startup of a process, it will use its value to identify process groups more\ngranular.\n"
                },
                "insertAfter": {
                    "type": "string",
                    "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                },
                "instanceIdentifier": {
                    "type": "string",
                    "description": "Use a variable to identify instances within a process group. The type of variable is the same as selected in 'Property\nsource'.\n"
                },
                "processType": {
                    "type": "string",
                    "description": "Note: Not all types can be detected at startup.\n"
                },
                "ruleType": {
                    "type": "string",
                    "description": "Possible Values: `Prop`, `Env`\n"
                }
            },
            "requiredInputs": [
                "enabled",
                "groupIdentifier",
                "instanceIdentifier",
                "ruleType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProcessGroupSimpleDetection resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                    },
                    "groupIdentifier": {
                        "type": "string",
                        "description": "If Dynatrace detects this property at startup of a process, it will use its value to identify process groups more\ngranular.\n"
                    },
                    "insertAfter": {
                        "type": "string",
                        "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                    },
                    "instanceIdentifier": {
                        "type": "string",
                        "description": "Use a variable to identify instances within a process group. The type of variable is the same as selected in 'Property\nsource'.\n"
                    },
                    "processType": {
                        "type": "string",
                        "description": "Note: Not all types can be detected at startup.\n"
                    },
                    "ruleType": {
                        "type": "string",
                        "description": "Possible Values: `Prop`, `Env`\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/processMonitoring:ProcessMonitoring": {
            "properties": {
                "autoMonitoring": {
                    "type": "boolean",
                    "description": "By disabling automatic deep monitoring the Dynatrace OneAgent will only deep monitor processes that are covered by a\nrespective deep monitoring rule or where monitoring is enabled explicitly. Disabling only works if all installed Agents\nhave version 1.123 or higher. With automatic monitoring enabled, you can create rules that define exceptions to\nautomatic process detection and monitoring. With automatic monitoring disabled, you can define rules that identify\nspecific processes that should be monitored. Rules are applied in the order listed in the custom and built-in process\nmonitoring rules settings. This means that you can construct complex operations for fine-grain control over the\nprocesses that are monitored in your environment. For example, you might define an inclusion rule that’s followed by\nan exclusion rule covering the same process. Once created, monitoring rules can be enabled/disabled at any time. The\nrules will only take effect after restart of the processes in question. Alternatively, you can disable automatic\nmonitoring entirely and instead define \"Include\" rules for those processes you want to monitor.\n"
                },
                "hostGroupId": {
                    "type": "string",
                    "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.\n"
                }
            },
            "required": [
                "autoMonitoring"
            ],
            "inputProperties": {
                "autoMonitoring": {
                    "type": "boolean",
                    "description": "By disabling automatic deep monitoring the Dynatrace OneAgent will only deep monitor processes that are covered by a\nrespective deep monitoring rule or where monitoring is enabled explicitly. Disabling only works if all installed Agents\nhave version 1.123 or higher. With automatic monitoring enabled, you can create rules that define exceptions to\nautomatic process detection and monitoring. With automatic monitoring disabled, you can define rules that identify\nspecific processes that should be monitored. Rules are applied in the order listed in the custom and built-in process\nmonitoring rules settings. This means that you can construct complex operations for fine-grain control over the\nprocesses that are monitored in your environment. For example, you might define an inclusion rule that’s followed by\nan exclusion rule covering the same process. Once created, monitoring rules can be enabled/disabled at any time. The\nrules will only take effect after restart of the processes in question. Alternatively, you can disable automatic\nmonitoring entirely and instead define \"Include\" rules for those processes you want to monitor.\n"
                },
                "hostGroupId": {
                    "type": "string",
                    "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "autoMonitoring"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProcessMonitoring resources.\n",
                "properties": {
                    "autoMonitoring": {
                        "type": "boolean",
                        "description": "By disabling automatic deep monitoring the Dynatrace OneAgent will only deep monitor processes that are covered by a\nrespective deep monitoring rule or where monitoring is enabled explicitly. Disabling only works if all installed Agents\nhave version 1.123 or higher. With automatic monitoring enabled, you can create rules that define exceptions to\nautomatic process detection and monitoring. With automatic monitoring disabled, you can define rules that identify\nspecific processes that should be monitored. Rules are applied in the order listed in the custom and built-in process\nmonitoring rules settings. This means that you can construct complex operations for fine-grain control over the\nprocesses that are monitored in your environment. For example, you might define an inclusion rule that’s followed by\nan exclusion rule covering the same process. Once created, monitoring rules can be enabled/disabled at any time. The\nrules will only take effect after restart of the processes in question. Alternatively, you can disable automatic\nmonitoring entirely and instead define \"Include\" rules for those processes you want to monitor.\n"
                    },
                    "hostGroupId": {
                        "type": "string",
                        "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/processMonitoringRule:ProcessMonitoringRule": {
            "properties": {
                "condition": {
                    "$ref": "#/types/dynatrace:index/ProcessMonitoringRuleCondition:ProcessMonitoringRuleCondition",
                    "description": "Condition\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "hostGroupId": {
                    "type": "string",
                    "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope\n"
                },
                "insertAfter": {
                    "type": "string",
                    "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                },
                "mode": {
                    "type": "string",
                    "description": "Possible Values: `MONITORING_ON`, `MONITORING_OFF`\n"
                }
            },
            "required": [
                "condition",
                "enabled",
                "insertAfter",
                "mode"
            ],
            "inputProperties": {
                "condition": {
                    "$ref": "#/types/dynatrace:index/ProcessMonitoringRuleCondition:ProcessMonitoringRuleCondition",
                    "description": "Condition\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "hostGroupId": {
                    "type": "string",
                    "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope\n",
                    "willReplaceOnChanges": true
                },
                "insertAfter": {
                    "type": "string",
                    "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                },
                "mode": {
                    "type": "string",
                    "description": "Possible Values: `MONITORING_ON`, `MONITORING_OFF`\n"
                }
            },
            "requiredInputs": [
                "condition",
                "enabled",
                "mode"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProcessMonitoringRule resources.\n",
                "properties": {
                    "condition": {
                        "$ref": "#/types/dynatrace:index/ProcessMonitoringRuleCondition:ProcessMonitoringRuleCondition",
                        "description": "Condition\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                    },
                    "hostGroupId": {
                        "type": "string",
                        "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope\n",
                        "willReplaceOnChanges": true
                    },
                    "insertAfter": {
                        "type": "string",
                        "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                    },
                    "mode": {
                        "type": "string",
                        "description": "Possible Values: `MONITORING_ON`, `MONITORING_OFF`\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/processVisibility:ProcessVisibility": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "maxProcesses": {
                    "type": "integer",
                    "description": "The maximum amount of processes that host may report is **100**\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.\n"
                }
            },
            "required": [
                "enabled",
                "maxProcesses"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "maxProcesses": {
                    "type": "integer",
                    "description": "The maximum amount of processes that host may report is **100**\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "enabled",
                "maxProcesses"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProcessVisibility resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                    },
                    "maxProcesses": {
                        "type": "integer",
                        "description": "The maximum amount of processes that host may report is **100**\n"
                    },
                    "scope": {
                        "type": "string",
                        "description": "The scope of this setting (HOST, HOST_GROUP). Omit this property if you want to cover the whole environment.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/processgroupNaming:ProcessgroupNaming": {
            "properties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ProcessgroupNamingCondition:ProcessgroupNamingCondition"
                    },
                    "description": "A list of matching conditions of the rule. The rule applies only if **all** conditions are fulfilled\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "The rule is enabled (`true`) or disabled (`false`)\n"
                },
                "format": {
                    "type": "string",
                    "description": "The name to be assigned to matching entities. You can use the following placeholders here: *\n`{AwsAutoScalingGroup:Name}` * `{AwsAvailabilityZone:Name}` * `{AwsElasticLoadBalancer:Name}` *\n`{AwsRelationalDatabaseService:DBName}` * `{AwsRelationalDatabaseService:Endpoint}` *\n`{AwsRelationalDatabaseService:Engine}` * `{AwsRelationalDatabaseService:InstanceClass}` *\n`{AwsRelationalDatabaseService:Name}` * `{AwsRelationalDatabaseService:Port}` * `{AzureRegion:Name}` *\n`{AzureScaleSet:Name}` * `{AzureVm:Name}` * `{CloudFoundryOrganization:Name}` * `{CustomDevice:DetectedName}` *\n`{CustomDevice:DnsName}` * `{CustomDevice:IpAddress}` * `{CustomDevice:Port}` *\n`{DockerContainerGroupInstance:ContainerName}` * `{DockerContainerGroupInstance:FullImageName}` *\n`{DockerContainerGroupInstance:ImageVersion}` * `{DockerContainerGroupInstance:StrippedImageName}` *\n`{ESXIHost:HardwareModel}` * `{ESXIHost:HardwareVendor}` * `{ESXIHost:Name}` * `{ESXIHost:ProductName}` *\n`{ESXIHost:ProductVersion}` * `{Ec2Instance:AmiId}` * `{Ec2Instance:BeanstalkEnvironmentName}` *\n`{Ec2Instance:InstanceId}` * `{Ec2Instance:InstanceType}` * `{Ec2Instance:LocalHostName}` * `{Ec2Instance:Name}` *\n`{Ec2Instance:PublicHostName}` * `{Ec2Instance:SecurityGroup}` * `{GoogleComputeInstance:Id}` *\n`{GoogleComputeInstance:IpAddresses}` * `{GoogleComputeInstance:MachineType}` * `{GoogleComputeInstance:Name}` *\n`{GoogleComputeInstance:ProjectId}` * `{GoogleComputeInstance:Project}` * `{Host:AWSNameTag}` *\n`{Host:AixLogicalCpuCount}` * `{Host:AzureHostName}` * `{Host:AzureSiteName}` * `{Host:BoshDeploymentId}` *\n`{Host:BoshInstanceId}` * `{Host:BoshInstanceName}` * `{Host:BoshName}` * `{Host:BoshStemcellVersion}` *\n`{Host:CpuCores}` * `{Host:DetectedName}` * `{Host:Environment:AppName}` * `{Host:Environment:BoshReleaseVersion}` *\n`{Host:Environment:Environment}` * `{Host:Environment:Link}` * `{Host:Environment:Organization}` *\n`{Host:Environment:Owner}` * `{Host:Environment:Support}` * `{Host:IpAddress}` * `{Host:LogicalCpuCores}` *\n`{Host:OneAgentCustomHostName}` * `{Host:OperatingSystemVersion}` * `{Host:PaasMemoryLimit}` * `{HostGroup:Name}` *\n`{KubernetesCluster:Name}` * `{KubernetesNode:DetectedName}` * `{OpenstackAvailabilityZone:Name}` *\n`{OpenstackZone:Name}` * `{OpenstackComputeNode:Name}` * `{OpenstackProject:Name}` * `{OpenstackVm:InstanceType}` *\n`{OpenstackVm:Name}` * `{OpenstackVm:SecurityGroup}` * `{ProcessGroup:AmazonECRImageAccountId}` *\n`{ProcessGroup:AmazonECRImageRegion}` * `{ProcessGroup:AmazonECSCluster}` * `{ProcessGroup:AmazonECSContainerName}` *\n`{ProcessGroup:AmazonECSFamily}` * `{ProcessGroup:AmazonECSRevision}` * `{ProcessGroup:AmazonLambdaFunctionName}` *\n`{ProcessGroup:AmazonRegion}` * `{ProcessGroup:ApacheConfigPath}` * `{ProcessGroup:ApacheSparkMasterIpAddress}` *\n`{ProcessGroup:AspDotNetCoreApplicationPath}` * `{ProcessGroup:AspDotNetCoreApplicationPath}` *\n`{ProcessGroup:AzureHostName}` * `{ProcessGroup:AzureSiteName}` * `{ProcessGroup:CassandraClusterName}` *\n`{ProcessGroup:CatalinaBase}` * `{ProcessGroup:CatalinaHome}` * `{ProcessGroup:CloudFoundryAppId}` *\n`{ProcessGroup:CloudFoundryAppName}` * `{ProcessGroup:CloudFoundryInstanceIndex}` * `{ProcessGroup:CloudFoundrySpaceId}`\n* `{ProcessGroup:CloudFoundrySpaceName}` * `{ProcessGroup:ColdFusionJvmConfigFile}` *\n`{ProcessGroup:ColdFusionServiceName}` * `{ProcessGroup:CommandLineArgs}` * `{ProcessGroup:DetectedName}` *\n`{ProcessGroup:DotNetCommandPath}` * `{ProcessGroup:DotNetCommand}` * `{ProcessGroup:DotNetClusterId}` *\n`{ProcessGroup:DotNetNodeId}` * `{ProcessGroup:ElasticsearchClusterName}` * `{ProcessGroup:ElasticsearchNodeName}` *\n`{ProcessGroup:EquinoxConfigPath}` * `{ProcessGroup:ExeName}` * `{ProcessGroup:ExePath}` *\n`{ProcessGroup:GlassFishDomainName}` * `{ProcessGroup:GlassFishInstanceName}` * `{ProcessGroup:GoogleAppEngineInstance}`\n* `{ProcessGroup:GoogleAppEngineService}` * `{ProcessGroup:GoogleCloudProject}` * `{ProcessGroup:HybrisBinDirectory}` *\n`{ProcessGroup:HybrisConfigDirectory}` * `{ProcessGroup:HybrisConfigDirectory}` * `{ProcessGroup:HybrisDataDirectory}` *\n`{ProcessGroup:IBMCicsRegion}` * `{ProcessGroup:IBMCtgName}` * `{ProcessGroup:IBMImsConnectRegion}` *\n`{ProcessGroup:IBMImsControlRegion}` * `{ProcessGroup:IBMImsMessageProcessingRegion}` *\n`{ProcessGroup:IBMImsSoapGwName}` * `{ProcessGroup:IBMIntegrationNodeName}` * `{ProcessGroup:IBMIntegrationServerName}`\n* `{ProcessGroup:IISAppPool}` * `{ProcessGroup:IISRoleName}` * `{ProcessGroup:JbossHome}` * `{ProcessGroup:JbossMode}` *\n`{ProcessGroup:JbossServerName}` * `{ProcessGroup:JavaJarFile}` * `{ProcessGroup:JavaJarPath}` *\n`{ProcessGroup:JavaMainCLass}` * `{ProcessGroup:KubernetesBasePodName}` * `{ProcessGroup:KubernetesContainerName}` *\n`{ProcessGroup:KubernetesFullPodName}` * `{ProcessGroup:KubernetesNamespace}` * `{ProcessGroup:KubernetesPodUid}` *\n`{ProcessGroup:MssqlInstanceName}` * `{ProcessGroup:NodeJsAppBaseDirectory}` * `{ProcessGroup:NodeJsAppName}` *\n`{ProcessGroup:NodeJsScriptName}` * `{ProcessGroup:OracleSid}` * `{ProcessGroup:PHPScriptPath}` *\n`{ProcessGroup:PHPWorkingDirectory}` * `{ProcessGroup:Ports}` * `{ProcessGroup:RubyAppRootPath}` *\n`{ProcessGroup:RubyScriptPath}` * `{ProcessGroup:SoftwareAGInstallRoot}` *\n`{ProcessGroup:SoftwareAGProductPropertyName}` * `{ProcessGroup:SpringBootAppName}` *\n`{ProcessGroup:SpringBootProfileName}` * `{ProcessGroup:SpringBootStartupClass}` *\n`{ProcessGroup:TIBCOBusinessWorksAppNodeName}` * `{ProcessGroup:TIBCOBusinessWorksAppSpaceName}` *\n`{ProcessGroup:TIBCOBusinessWorksCeAppName}` * `{ProcessGroup:TIBCOBusinessWorksCeVersion}` *\n`{ProcessGroup:TIBCOBusinessWorksDomainName}` * `{ProcessGroup:TIBCOBusinessWorksEnginePropertyFilePath}` *\n`{ProcessGroup:TIBCOBusinessWorksEnginePropertyFile}` * `{ProcessGroup:TIBCOBusinessWorksHome}` *\n`{ProcessGroup:VarnishInstanceName}` * `{ProcessGroup:WebLogicClusterName}` * `{ProcessGroup:WebLogicDomainName}` *\n`{ProcessGroup:WebLogicHome}` * `{ProcessGroup:WebLogicName}` * `{ProcessGroup:WebSphereCellName}` *\n`{ProcessGroup:WebSphereClusterName}` * `{ProcessGroup:WebSphereNodeName}` * `{ProcessGroup:WebSphereServerName}` *\n`{ProcessGroup:ActorSystem}` * `{Service:STGServerName}` * `{Service:DatabaseHostName}` * `{Service:DatabaseName}` *\n`{Service:DatabaseVendor}` * `{Service:DetectedName}` * `{Service:EndpointPath}` * `{Service:EndpointPathGatewayUrl}` *\n`{Service:IIBApplicationName}` * `{Service:MessageListenerClassName}` * `{Service:Port}` * `{Service:PublicDomainName}`\n* `{Service:RemoteEndpoint}` * `{Service:RemoteName}` * `{Service:WebApplicationId}` * `{Service:WebContextRoot}` *\n`{Service:WebServerName}` * `{Service:WebServiceNamespace}` * `{Service:WebServiceName}` * `{VmwareDatacenter:Name}` *\n`{VmwareVm:Name}\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the rule\n"
                },
                "unknowns": {
                    "type": "string",
                    "description": "allows for configuring properties that are not explicitly supported by the current version of this provider\n"
                }
            },
            "required": [
                "enabled",
                "format",
                "name"
            ],
            "inputProperties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ProcessgroupNamingCondition:ProcessgroupNamingCondition"
                    },
                    "description": "A list of matching conditions of the rule. The rule applies only if **all** conditions are fulfilled\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "The rule is enabled (`true`) or disabled (`false`)\n"
                },
                "format": {
                    "type": "string",
                    "description": "The name to be assigned to matching entities. You can use the following placeholders here: *\n`{AwsAutoScalingGroup:Name}` * `{AwsAvailabilityZone:Name}` * `{AwsElasticLoadBalancer:Name}` *\n`{AwsRelationalDatabaseService:DBName}` * `{AwsRelationalDatabaseService:Endpoint}` *\n`{AwsRelationalDatabaseService:Engine}` * `{AwsRelationalDatabaseService:InstanceClass}` *\n`{AwsRelationalDatabaseService:Name}` * `{AwsRelationalDatabaseService:Port}` * `{AzureRegion:Name}` *\n`{AzureScaleSet:Name}` * `{AzureVm:Name}` * `{CloudFoundryOrganization:Name}` * `{CustomDevice:DetectedName}` *\n`{CustomDevice:DnsName}` * `{CustomDevice:IpAddress}` * `{CustomDevice:Port}` *\n`{DockerContainerGroupInstance:ContainerName}` * `{DockerContainerGroupInstance:FullImageName}` *\n`{DockerContainerGroupInstance:ImageVersion}` * `{DockerContainerGroupInstance:StrippedImageName}` *\n`{ESXIHost:HardwareModel}` * `{ESXIHost:HardwareVendor}` * `{ESXIHost:Name}` * `{ESXIHost:ProductName}` *\n`{ESXIHost:ProductVersion}` * `{Ec2Instance:AmiId}` * `{Ec2Instance:BeanstalkEnvironmentName}` *\n`{Ec2Instance:InstanceId}` * `{Ec2Instance:InstanceType}` * `{Ec2Instance:LocalHostName}` * `{Ec2Instance:Name}` *\n`{Ec2Instance:PublicHostName}` * `{Ec2Instance:SecurityGroup}` * `{GoogleComputeInstance:Id}` *\n`{GoogleComputeInstance:IpAddresses}` * `{GoogleComputeInstance:MachineType}` * `{GoogleComputeInstance:Name}` *\n`{GoogleComputeInstance:ProjectId}` * `{GoogleComputeInstance:Project}` * `{Host:AWSNameTag}` *\n`{Host:AixLogicalCpuCount}` * `{Host:AzureHostName}` * `{Host:AzureSiteName}` * `{Host:BoshDeploymentId}` *\n`{Host:BoshInstanceId}` * `{Host:BoshInstanceName}` * `{Host:BoshName}` * `{Host:BoshStemcellVersion}` *\n`{Host:CpuCores}` * `{Host:DetectedName}` * `{Host:Environment:AppName}` * `{Host:Environment:BoshReleaseVersion}` *\n`{Host:Environment:Environment}` * `{Host:Environment:Link}` * `{Host:Environment:Organization}` *\n`{Host:Environment:Owner}` * `{Host:Environment:Support}` * `{Host:IpAddress}` * `{Host:LogicalCpuCores}` *\n`{Host:OneAgentCustomHostName}` * `{Host:OperatingSystemVersion}` * `{Host:PaasMemoryLimit}` * `{HostGroup:Name}` *\n`{KubernetesCluster:Name}` * `{KubernetesNode:DetectedName}` * `{OpenstackAvailabilityZone:Name}` *\n`{OpenstackZone:Name}` * `{OpenstackComputeNode:Name}` * `{OpenstackProject:Name}` * `{OpenstackVm:InstanceType}` *\n`{OpenstackVm:Name}` * `{OpenstackVm:SecurityGroup}` * `{ProcessGroup:AmazonECRImageAccountId}` *\n`{ProcessGroup:AmazonECRImageRegion}` * `{ProcessGroup:AmazonECSCluster}` * `{ProcessGroup:AmazonECSContainerName}` *\n`{ProcessGroup:AmazonECSFamily}` * `{ProcessGroup:AmazonECSRevision}` * `{ProcessGroup:AmazonLambdaFunctionName}` *\n`{ProcessGroup:AmazonRegion}` * `{ProcessGroup:ApacheConfigPath}` * `{ProcessGroup:ApacheSparkMasterIpAddress}` *\n`{ProcessGroup:AspDotNetCoreApplicationPath}` * `{ProcessGroup:AspDotNetCoreApplicationPath}` *\n`{ProcessGroup:AzureHostName}` * `{ProcessGroup:AzureSiteName}` * `{ProcessGroup:CassandraClusterName}` *\n`{ProcessGroup:CatalinaBase}` * `{ProcessGroup:CatalinaHome}` * `{ProcessGroup:CloudFoundryAppId}` *\n`{ProcessGroup:CloudFoundryAppName}` * `{ProcessGroup:CloudFoundryInstanceIndex}` * `{ProcessGroup:CloudFoundrySpaceId}`\n* `{ProcessGroup:CloudFoundrySpaceName}` * `{ProcessGroup:ColdFusionJvmConfigFile}` *\n`{ProcessGroup:ColdFusionServiceName}` * `{ProcessGroup:CommandLineArgs}` * `{ProcessGroup:DetectedName}` *\n`{ProcessGroup:DotNetCommandPath}` * `{ProcessGroup:DotNetCommand}` * `{ProcessGroup:DotNetClusterId}` *\n`{ProcessGroup:DotNetNodeId}` * `{ProcessGroup:ElasticsearchClusterName}` * `{ProcessGroup:ElasticsearchNodeName}` *\n`{ProcessGroup:EquinoxConfigPath}` * `{ProcessGroup:ExeName}` * `{ProcessGroup:ExePath}` *\n`{ProcessGroup:GlassFishDomainName}` * `{ProcessGroup:GlassFishInstanceName}` * `{ProcessGroup:GoogleAppEngineInstance}`\n* `{ProcessGroup:GoogleAppEngineService}` * `{ProcessGroup:GoogleCloudProject}` * `{ProcessGroup:HybrisBinDirectory}` *\n`{ProcessGroup:HybrisConfigDirectory}` * `{ProcessGroup:HybrisConfigDirectory}` * `{ProcessGroup:HybrisDataDirectory}` *\n`{ProcessGroup:IBMCicsRegion}` * `{ProcessGroup:IBMCtgName}` * `{ProcessGroup:IBMImsConnectRegion}` *\n`{ProcessGroup:IBMImsControlRegion}` * `{ProcessGroup:IBMImsMessageProcessingRegion}` *\n`{ProcessGroup:IBMImsSoapGwName}` * `{ProcessGroup:IBMIntegrationNodeName}` * `{ProcessGroup:IBMIntegrationServerName}`\n* `{ProcessGroup:IISAppPool}` * `{ProcessGroup:IISRoleName}` * `{ProcessGroup:JbossHome}` * `{ProcessGroup:JbossMode}` *\n`{ProcessGroup:JbossServerName}` * `{ProcessGroup:JavaJarFile}` * `{ProcessGroup:JavaJarPath}` *\n`{ProcessGroup:JavaMainCLass}` * `{ProcessGroup:KubernetesBasePodName}` * `{ProcessGroup:KubernetesContainerName}` *\n`{ProcessGroup:KubernetesFullPodName}` * `{ProcessGroup:KubernetesNamespace}` * `{ProcessGroup:KubernetesPodUid}` *\n`{ProcessGroup:MssqlInstanceName}` * `{ProcessGroup:NodeJsAppBaseDirectory}` * `{ProcessGroup:NodeJsAppName}` *\n`{ProcessGroup:NodeJsScriptName}` * `{ProcessGroup:OracleSid}` * `{ProcessGroup:PHPScriptPath}` *\n`{ProcessGroup:PHPWorkingDirectory}` * `{ProcessGroup:Ports}` * `{ProcessGroup:RubyAppRootPath}` *\n`{ProcessGroup:RubyScriptPath}` * `{ProcessGroup:SoftwareAGInstallRoot}` *\n`{ProcessGroup:SoftwareAGProductPropertyName}` * `{ProcessGroup:SpringBootAppName}` *\n`{ProcessGroup:SpringBootProfileName}` * `{ProcessGroup:SpringBootStartupClass}` *\n`{ProcessGroup:TIBCOBusinessWorksAppNodeName}` * `{ProcessGroup:TIBCOBusinessWorksAppSpaceName}` *\n`{ProcessGroup:TIBCOBusinessWorksCeAppName}` * `{ProcessGroup:TIBCOBusinessWorksCeVersion}` *\n`{ProcessGroup:TIBCOBusinessWorksDomainName}` * `{ProcessGroup:TIBCOBusinessWorksEnginePropertyFilePath}` *\n`{ProcessGroup:TIBCOBusinessWorksEnginePropertyFile}` * `{ProcessGroup:TIBCOBusinessWorksHome}` *\n`{ProcessGroup:VarnishInstanceName}` * `{ProcessGroup:WebLogicClusterName}` * `{ProcessGroup:WebLogicDomainName}` *\n`{ProcessGroup:WebLogicHome}` * `{ProcessGroup:WebLogicName}` * `{ProcessGroup:WebSphereCellName}` *\n`{ProcessGroup:WebSphereClusterName}` * `{ProcessGroup:WebSphereNodeName}` * `{ProcessGroup:WebSphereServerName}` *\n`{ProcessGroup:ActorSystem}` * `{Service:STGServerName}` * `{Service:DatabaseHostName}` * `{Service:DatabaseName}` *\n`{Service:DatabaseVendor}` * `{Service:DetectedName}` * `{Service:EndpointPath}` * `{Service:EndpointPathGatewayUrl}` *\n`{Service:IIBApplicationName}` * `{Service:MessageListenerClassName}` * `{Service:Port}` * `{Service:PublicDomainName}`\n* `{Service:RemoteEndpoint}` * `{Service:RemoteName}` * `{Service:WebApplicationId}` * `{Service:WebContextRoot}` *\n`{Service:WebServerName}` * `{Service:WebServiceNamespace}` * `{Service:WebServiceName}` * `{VmwareDatacenter:Name}` *\n`{VmwareVm:Name}\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the rule\n"
                },
                "unknowns": {
                    "type": "string",
                    "description": "allows for configuring properties that are not explicitly supported by the current version of this provider\n"
                }
            },
            "requiredInputs": [
                "enabled",
                "format"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProcessgroupNaming resources.\n",
                "properties": {
                    "conditions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/dynatrace:index/ProcessgroupNamingCondition:ProcessgroupNamingCondition"
                        },
                        "description": "A list of matching conditions of the rule. The rule applies only if **all** conditions are fulfilled\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "The rule is enabled (`true`) or disabled (`false`)\n"
                    },
                    "format": {
                        "type": "string",
                        "description": "The name to be assigned to matching entities. You can use the following placeholders here: *\n`{AwsAutoScalingGroup:Name}` * `{AwsAvailabilityZone:Name}` * `{AwsElasticLoadBalancer:Name}` *\n`{AwsRelationalDatabaseService:DBName}` * `{AwsRelationalDatabaseService:Endpoint}` *\n`{AwsRelationalDatabaseService:Engine}` * `{AwsRelationalDatabaseService:InstanceClass}` *\n`{AwsRelationalDatabaseService:Name}` * `{AwsRelationalDatabaseService:Port}` * `{AzureRegion:Name}` *\n`{AzureScaleSet:Name}` * `{AzureVm:Name}` * `{CloudFoundryOrganization:Name}` * `{CustomDevice:DetectedName}` *\n`{CustomDevice:DnsName}` * `{CustomDevice:IpAddress}` * `{CustomDevice:Port}` *\n`{DockerContainerGroupInstance:ContainerName}` * `{DockerContainerGroupInstance:FullImageName}` *\n`{DockerContainerGroupInstance:ImageVersion}` * `{DockerContainerGroupInstance:StrippedImageName}` *\n`{ESXIHost:HardwareModel}` * `{ESXIHost:HardwareVendor}` * `{ESXIHost:Name}` * `{ESXIHost:ProductName}` *\n`{ESXIHost:ProductVersion}` * `{Ec2Instance:AmiId}` * `{Ec2Instance:BeanstalkEnvironmentName}` *\n`{Ec2Instance:InstanceId}` * `{Ec2Instance:InstanceType}` * `{Ec2Instance:LocalHostName}` * `{Ec2Instance:Name}` *\n`{Ec2Instance:PublicHostName}` * `{Ec2Instance:SecurityGroup}` * `{GoogleComputeInstance:Id}` *\n`{GoogleComputeInstance:IpAddresses}` * `{GoogleComputeInstance:MachineType}` * `{GoogleComputeInstance:Name}` *\n`{GoogleComputeInstance:ProjectId}` * `{GoogleComputeInstance:Project}` * `{Host:AWSNameTag}` *\n`{Host:AixLogicalCpuCount}` * `{Host:AzureHostName}` * `{Host:AzureSiteName}` * `{Host:BoshDeploymentId}` *\n`{Host:BoshInstanceId}` * `{Host:BoshInstanceName}` * `{Host:BoshName}` * `{Host:BoshStemcellVersion}` *\n`{Host:CpuCores}` * `{Host:DetectedName}` * `{Host:Environment:AppName}` * `{Host:Environment:BoshReleaseVersion}` *\n`{Host:Environment:Environment}` * `{Host:Environment:Link}` * `{Host:Environment:Organization}` *\n`{Host:Environment:Owner}` * `{Host:Environment:Support}` * `{Host:IpAddress}` * `{Host:LogicalCpuCores}` *\n`{Host:OneAgentCustomHostName}` * `{Host:OperatingSystemVersion}` * `{Host:PaasMemoryLimit}` * `{HostGroup:Name}` *\n`{KubernetesCluster:Name}` * `{KubernetesNode:DetectedName}` * `{OpenstackAvailabilityZone:Name}` *\n`{OpenstackZone:Name}` * `{OpenstackComputeNode:Name}` * `{OpenstackProject:Name}` * `{OpenstackVm:InstanceType}` *\n`{OpenstackVm:Name}` * `{OpenstackVm:SecurityGroup}` * `{ProcessGroup:AmazonECRImageAccountId}` *\n`{ProcessGroup:AmazonECRImageRegion}` * `{ProcessGroup:AmazonECSCluster}` * `{ProcessGroup:AmazonECSContainerName}` *\n`{ProcessGroup:AmazonECSFamily}` * `{ProcessGroup:AmazonECSRevision}` * `{ProcessGroup:AmazonLambdaFunctionName}` *\n`{ProcessGroup:AmazonRegion}` * `{ProcessGroup:ApacheConfigPath}` * `{ProcessGroup:ApacheSparkMasterIpAddress}` *\n`{ProcessGroup:AspDotNetCoreApplicationPath}` * `{ProcessGroup:AspDotNetCoreApplicationPath}` *\n`{ProcessGroup:AzureHostName}` * `{ProcessGroup:AzureSiteName}` * `{ProcessGroup:CassandraClusterName}` *\n`{ProcessGroup:CatalinaBase}` * `{ProcessGroup:CatalinaHome}` * `{ProcessGroup:CloudFoundryAppId}` *\n`{ProcessGroup:CloudFoundryAppName}` * `{ProcessGroup:CloudFoundryInstanceIndex}` * `{ProcessGroup:CloudFoundrySpaceId}`\n* `{ProcessGroup:CloudFoundrySpaceName}` * `{ProcessGroup:ColdFusionJvmConfigFile}` *\n`{ProcessGroup:ColdFusionServiceName}` * `{ProcessGroup:CommandLineArgs}` * `{ProcessGroup:DetectedName}` *\n`{ProcessGroup:DotNetCommandPath}` * `{ProcessGroup:DotNetCommand}` * `{ProcessGroup:DotNetClusterId}` *\n`{ProcessGroup:DotNetNodeId}` * `{ProcessGroup:ElasticsearchClusterName}` * `{ProcessGroup:ElasticsearchNodeName}` *\n`{ProcessGroup:EquinoxConfigPath}` * `{ProcessGroup:ExeName}` * `{ProcessGroup:ExePath}` *\n`{ProcessGroup:GlassFishDomainName}` * `{ProcessGroup:GlassFishInstanceName}` * `{ProcessGroup:GoogleAppEngineInstance}`\n* `{ProcessGroup:GoogleAppEngineService}` * `{ProcessGroup:GoogleCloudProject}` * `{ProcessGroup:HybrisBinDirectory}` *\n`{ProcessGroup:HybrisConfigDirectory}` * `{ProcessGroup:HybrisConfigDirectory}` * `{ProcessGroup:HybrisDataDirectory}` *\n`{ProcessGroup:IBMCicsRegion}` * `{ProcessGroup:IBMCtgName}` * `{ProcessGroup:IBMImsConnectRegion}` *\n`{ProcessGroup:IBMImsControlRegion}` * `{ProcessGroup:IBMImsMessageProcessingRegion}` *\n`{ProcessGroup:IBMImsSoapGwName}` * `{ProcessGroup:IBMIntegrationNodeName}` * `{ProcessGroup:IBMIntegrationServerName}`\n* `{ProcessGroup:IISAppPool}` * `{ProcessGroup:IISRoleName}` * `{ProcessGroup:JbossHome}` * `{ProcessGroup:JbossMode}` *\n`{ProcessGroup:JbossServerName}` * `{ProcessGroup:JavaJarFile}` * `{ProcessGroup:JavaJarPath}` *\n`{ProcessGroup:JavaMainCLass}` * `{ProcessGroup:KubernetesBasePodName}` * `{ProcessGroup:KubernetesContainerName}` *\n`{ProcessGroup:KubernetesFullPodName}` * `{ProcessGroup:KubernetesNamespace}` * `{ProcessGroup:KubernetesPodUid}` *\n`{ProcessGroup:MssqlInstanceName}` * `{ProcessGroup:NodeJsAppBaseDirectory}` * `{ProcessGroup:NodeJsAppName}` *\n`{ProcessGroup:NodeJsScriptName}` * `{ProcessGroup:OracleSid}` * `{ProcessGroup:PHPScriptPath}` *\n`{ProcessGroup:PHPWorkingDirectory}` * `{ProcessGroup:Ports}` * `{ProcessGroup:RubyAppRootPath}` *\n`{ProcessGroup:RubyScriptPath}` * `{ProcessGroup:SoftwareAGInstallRoot}` *\n`{ProcessGroup:SoftwareAGProductPropertyName}` * `{ProcessGroup:SpringBootAppName}` *\n`{ProcessGroup:SpringBootProfileName}` * `{ProcessGroup:SpringBootStartupClass}` *\n`{ProcessGroup:TIBCOBusinessWorksAppNodeName}` * `{ProcessGroup:TIBCOBusinessWorksAppSpaceName}` *\n`{ProcessGroup:TIBCOBusinessWorksCeAppName}` * `{ProcessGroup:TIBCOBusinessWorksCeVersion}` *\n`{ProcessGroup:TIBCOBusinessWorksDomainName}` * `{ProcessGroup:TIBCOBusinessWorksEnginePropertyFilePath}` *\n`{ProcessGroup:TIBCOBusinessWorksEnginePropertyFile}` * `{ProcessGroup:TIBCOBusinessWorksHome}` *\n`{ProcessGroup:VarnishInstanceName}` * `{ProcessGroup:WebLogicClusterName}` * `{ProcessGroup:WebLogicDomainName}` *\n`{ProcessGroup:WebLogicHome}` * `{ProcessGroup:WebLogicName}` * `{ProcessGroup:WebSphereCellName}` *\n`{ProcessGroup:WebSphereClusterName}` * `{ProcessGroup:WebSphereNodeName}` * `{ProcessGroup:WebSphereServerName}` *\n`{ProcessGroup:ActorSystem}` * `{Service:STGServerName}` * `{Service:DatabaseHostName}` * `{Service:DatabaseName}` *\n`{Service:DatabaseVendor}` * `{Service:DetectedName}` * `{Service:EndpointPath}` * `{Service:EndpointPathGatewayUrl}` *\n`{Service:IIBApplicationName}` * `{Service:MessageListenerClassName}` * `{Service:Port}` * `{Service:PublicDomainName}`\n* `{Service:RemoteEndpoint}` * `{Service:RemoteName}` * `{Service:WebApplicationId}` * `{Service:WebContextRoot}` *\n`{Service:WebServerName}` * `{Service:WebServiceNamespace}` * `{Service:WebServiceName}` * `{VmwareDatacenter:Name}` *\n`{VmwareVm:Name}\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the rule\n"
                    },
                    "unknowns": {
                        "type": "string",
                        "description": "allows for configuring properties that are not explicitly supported by the current version of this provider\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/queueManager:QueueManager": {
            "properties": {
                "aliasQueues": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/QueueManagerAliasQueue:QueueManagerAliasQueue"
                    },
                    "description": "The alias queues in the queue manager\n"
                },
                "clusterQueues": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/QueueManagerClusterQueue:QueueManagerClusterQueue"
                    },
                    "description": "The alias queues in the queue manager\n"
                },
                "clusters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Name of the cluster(s) this queue manager is part of\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the queue manager\n"
                },
                "remoteQueues": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/QueueManagerRemoteQueue:QueueManagerRemoteQueue"
                    },
                    "description": "The alias queues in the queue manager\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "aliasQueues": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/QueueManagerAliasQueue:QueueManagerAliasQueue"
                    },
                    "description": "The alias queues in the queue manager\n"
                },
                "clusterQueues": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/QueueManagerClusterQueue:QueueManagerClusterQueue"
                    },
                    "description": "The alias queues in the queue manager\n"
                },
                "clusters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Name of the cluster(s) this queue manager is part of\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the queue manager\n"
                },
                "remoteQueues": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/QueueManagerRemoteQueue:QueueManagerRemoteQueue"
                    },
                    "description": "The alias queues in the queue manager\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering QueueManager resources.\n",
                "properties": {
                    "aliasQueues": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/dynatrace:index/QueueManagerAliasQueue:QueueManagerAliasQueue"
                        },
                        "description": "The alias queues in the queue manager\n"
                    },
                    "clusterQueues": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/dynatrace:index/QueueManagerClusterQueue:QueueManagerClusterQueue"
                        },
                        "description": "The alias queues in the queue manager\n"
                    },
                    "clusters": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Name of the cluster(s) this queue manager is part of\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the queue manager\n"
                    },
                    "remoteQueues": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/dynatrace:index/QueueManagerRemoteQueue:QueueManagerRemoteQueue"
                        },
                        "description": "The alias queues in the queue manager\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/queueSharingGroups:QueueSharingGroups": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Queue sharing group name\n"
                },
                "queueManagers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Queue managers\n"
                },
                "sharedQueues": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Shared queues\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "Queue sharing group name\n"
                },
                "queueManagers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Queue managers\n"
                },
                "sharedQueues": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Shared queues\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering QueueSharingGroups resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Queue sharing group name\n"
                    },
                    "queueManagers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Queue managers\n"
                    },
                    "sharedQueues": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Shared queues\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/remoteEnvironments:RemoteEnvironments": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name\n"
                },
                "networkScope": {
                    "type": "string",
                    "description": "Possible Values: `CLUSTER`, `EXTERNAL`, `INTERNAL`\n"
                },
                "token": {
                    "type": "string",
                    "description": "Provide a valid token created on the remote environment.\n",
                    "secret": true
                },
                "uri": {
                    "type": "string",
                    "description": "Specify the full URI to the remote environment. Your local environment will have to be able to connect this URI on a\nnetwork level.\n"
                }
            },
            "required": [
                "name",
                "networkScope",
                "token",
                "uri"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "Name\n"
                },
                "networkScope": {
                    "type": "string",
                    "description": "Possible Values: `CLUSTER`, `EXTERNAL`, `INTERNAL`\n"
                },
                "token": {
                    "type": "string",
                    "description": "Provide a valid token created on the remote environment.\n",
                    "secret": true
                },
                "uri": {
                    "type": "string",
                    "description": "Specify the full URI to the remote environment. Your local environment will have to be able to connect this URI on a\nnetwork level.\n"
                }
            },
            "requiredInputs": [
                "networkScope",
                "token",
                "uri"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RemoteEnvironments resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name\n"
                    },
                    "networkScope": {
                        "type": "string",
                        "description": "Possible Values: `CLUSTER`, `EXTERNAL`, `INTERNAL`\n"
                    },
                    "token": {
                        "type": "string",
                        "description": "Provide a valid token created on the remote environment.\n",
                        "secret": true
                    },
                    "uri": {
                        "type": "string",
                        "description": "Specify the full URI to the remote environment. Your local environment will have to be able to connect this URI on a\nnetwork level.\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/requestAttribute:RequestAttribute": {
            "properties": {
                "aggregation": {
                    "type": "string",
                    "description": "Aggregation type for the request values\n"
                },
                "confidential": {
                    "type": "boolean",
                    "description": "Confidential data flag. Set `true` to treat the captured data as confidential\n"
                },
                "dataSources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/RequestAttributeDataSource:RequestAttributeDataSource"
                    },
                    "description": "The list of data sources\n"
                },
                "dataType": {
                    "type": "string",
                    "description": "The data type of the request attribute\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "The request attribute is enabled (`true`) or disabled (`false`)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the request attribute\n"
                },
                "normalization": {
                    "type": "string",
                    "description": "String values transformation. If the **dataType** is not `string`, set the `Original` here\n"
                },
                "skipPersonalDataMasking": {
                    "type": "boolean",
                    "description": "Personal data masking flag. Set `true` to skip masking. Warning: This will potentially access personalized data\n"
                },
                "unknowns": {
                    "type": "string",
                    "description": "allows for configuring properties that are not explicitly supported by the current version of this provider\n"
                }
            },
            "required": [
                "aggregation",
                "dataType",
                "name",
                "normalization"
            ],
            "inputProperties": {
                "aggregation": {
                    "type": "string",
                    "description": "Aggregation type for the request values\n"
                },
                "confidential": {
                    "type": "boolean",
                    "description": "Confidential data flag. Set `true` to treat the captured data as confidential\n"
                },
                "dataSources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/RequestAttributeDataSource:RequestAttributeDataSource"
                    },
                    "description": "The list of data sources\n"
                },
                "dataType": {
                    "type": "string",
                    "description": "The data type of the request attribute\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "The request attribute is enabled (`true`) or disabled (`false`)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the request attribute\n"
                },
                "normalization": {
                    "type": "string",
                    "description": "String values transformation. If the **dataType** is not `string`, set the `Original` here\n"
                },
                "skipPersonalDataMasking": {
                    "type": "boolean",
                    "description": "Personal data masking flag. Set `true` to skip masking. Warning: This will potentially access personalized data\n"
                },
                "unknowns": {
                    "type": "string",
                    "description": "allows for configuring properties that are not explicitly supported by the current version of this provider\n"
                }
            },
            "requiredInputs": [
                "aggregation",
                "dataType",
                "normalization"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RequestAttribute resources.\n",
                "properties": {
                    "aggregation": {
                        "type": "string",
                        "description": "Aggregation type for the request values\n"
                    },
                    "confidential": {
                        "type": "boolean",
                        "description": "Confidential data flag. Set `true` to treat the captured data as confidential\n"
                    },
                    "dataSources": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/dynatrace:index/RequestAttributeDataSource:RequestAttributeDataSource"
                        },
                        "description": "The list of data sources\n"
                    },
                    "dataType": {
                        "type": "string",
                        "description": "The data type of the request attribute\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "The request attribute is enabled (`true`) or disabled (`false`)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the request attribute\n"
                    },
                    "normalization": {
                        "type": "string",
                        "description": "String values transformation. If the **dataType** is not `string`, set the `Original` here\n"
                    },
                    "skipPersonalDataMasking": {
                        "type": "boolean",
                        "description": "Personal data masking flag. Set `true` to skip masking. Warning: This will potentially access personalized data\n"
                    },
                    "unknowns": {
                        "type": "string",
                        "description": "allows for configuring properties that are not explicitly supported by the current version of this provider\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/requestNaming:RequestNaming": {
            "properties": {
                "conditions": {
                    "$ref": "#/types/dynatrace:index/RequestNamingConditions:RequestNamingConditions",
                    "description": "The set of conditions for the request naming rule usage. You can specify several conditions. The request has to match\n**all** the specified conditions for the rule to trigger\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "The rule is enabled (`true`) or disabled (`false`)\n"
                },
                "managementZones": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies the management zones for which this rule should be applied\n"
                },
                "namingPattern": {
                    "type": "string",
                    "description": "The name to be assigned to matching requests\n"
                },
                "placeholders": {
                    "$ref": "#/types/dynatrace:index/RequestNamingPlaceholders:RequestNamingPlaceholders",
                    "description": "The list of custom placeholders to be used in the naming pattern. It enables you to extract a request attribute value or\nother request attribute and use it in the request naming pattern.\n"
                },
                "unknowns": {
                    "type": "string",
                    "description": "allows for configuring properties that are not explicitly supported by the current version of this provider\n"
                }
            },
            "required": [
                "conditions",
                "namingPattern"
            ],
            "inputProperties": {
                "conditions": {
                    "$ref": "#/types/dynatrace:index/RequestNamingConditions:RequestNamingConditions",
                    "description": "The set of conditions for the request naming rule usage. You can specify several conditions. The request has to match\n**all** the specified conditions for the rule to trigger\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "The rule is enabled (`true`) or disabled (`false`)\n"
                },
                "managementZones": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies the management zones for which this rule should be applied\n"
                },
                "namingPattern": {
                    "type": "string",
                    "description": "The name to be assigned to matching requests\n"
                },
                "placeholders": {
                    "$ref": "#/types/dynatrace:index/RequestNamingPlaceholders:RequestNamingPlaceholders",
                    "description": "The list of custom placeholders to be used in the naming pattern. It enables you to extract a request attribute value or\nother request attribute and use it in the request naming pattern.\n"
                },
                "unknowns": {
                    "type": "string",
                    "description": "allows for configuring properties that are not explicitly supported by the current version of this provider\n"
                }
            },
            "requiredInputs": [
                "conditions",
                "namingPattern"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RequestNaming resources.\n",
                "properties": {
                    "conditions": {
                        "$ref": "#/types/dynatrace:index/RequestNamingConditions:RequestNamingConditions",
                        "description": "The set of conditions for the request naming rule usage. You can specify several conditions. The request has to match\n**all** the specified conditions for the rule to trigger\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "The rule is enabled (`true`) or disabled (`false`)\n"
                    },
                    "managementZones": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Specifies the management zones for which this rule should be applied\n"
                    },
                    "namingPattern": {
                        "type": "string",
                        "description": "The name to be assigned to matching requests\n"
                    },
                    "placeholders": {
                        "$ref": "#/types/dynatrace:index/RequestNamingPlaceholders:RequestNamingPlaceholders",
                        "description": "The list of custom placeholders to be used in the naming pattern. It enables you to extract a request attribute value or\nother request attribute and use it in the request naming pattern.\n"
                    },
                    "unknowns": {
                        "type": "string",
                        "description": "allows for configuring properties that are not explicitly supported by the current version of this provider\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/requestNamings:RequestNamings": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The IDs of the request namings in the order they should be taken into consideration\n"
                }
            },
            "inputProperties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The IDs of the request namings in the order they should be taken into consideration\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RequestNamings resources.\n",
                "properties": {
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The IDs of the request namings in the order they should be taken into consideration\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/resourceAttributes:ResourceAttributes": {
            "properties": {
                "keys": {
                    "$ref": "#/types/dynatrace:index/ResourceAttributesKeys:ResourceAttributesKeys",
                    "description": "Attribute key allow-list\n"
                }
            },
            "inputProperties": {
                "keys": {
                    "$ref": "#/types/dynatrace:index/ResourceAttributesKeys:ResourceAttributesKeys",
                    "description": "Attribute key allow-list\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ResourceAttributes resources.\n",
                "properties": {
                    "keys": {
                        "$ref": "#/types/dynatrace:index/ResourceAttributesKeys:ResourceAttributesKeys",
                        "description": "Attribute key allow-list\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/rumAdvancedCorrelation:RumAdvancedCorrelation": {
            "properties": {
                "matcher": {
                    "type": "string",
                    "description": "Possible Values: `CONTAINS`, `ENDS_WITH`, `EQUALS`, `STARTS_WITH`\n"
                },
                "pattern": {
                    "type": "string",
                    "description": "Pattern\n"
                }
            },
            "required": [
                "matcher",
                "pattern"
            ],
            "inputProperties": {
                "matcher": {
                    "type": "string",
                    "description": "Possible Values: `CONTAINS`, `ENDS_WITH`, `EQUALS`, `STARTS_WITH`\n"
                },
                "pattern": {
                    "type": "string",
                    "description": "Pattern\n"
                }
            },
            "requiredInputs": [
                "matcher",
                "pattern"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RumAdvancedCorrelation resources.\n",
                "properties": {
                    "matcher": {
                        "type": "string",
                        "description": "Possible Values: `CONTAINS`, `ENDS_WITH`, `EQUALS`, `STARTS_WITH`\n"
                    },
                    "pattern": {
                        "type": "string",
                        "description": "Pattern\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/rumHostHeaders:RumHostHeaders": {
            "properties": {
                "headerName": {
                    "type": "string",
                    "description": "HTTP header format\n"
                },
                "insertAfter": {
                    "type": "string",
                    "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                }
            },
            "required": [
                "headerName",
                "insertAfter"
            ],
            "inputProperties": {
                "headerName": {
                    "type": "string",
                    "description": "HTTP header format\n"
                },
                "insertAfter": {
                    "type": "string",
                    "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                }
            },
            "requiredInputs": [
                "headerName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RumHostHeaders resources.\n",
                "properties": {
                    "headerName": {
                        "type": "string",
                        "description": "HTTP header format\n"
                    },
                    "insertAfter": {
                        "type": "string",
                        "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/rumIpDetermination:RumIpDetermination": {
            "properties": {
                "headerName": {
                    "type": "string",
                    "description": "Client IP header name\n"
                },
                "insertAfter": {
                    "type": "string",
                    "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                }
            },
            "required": [
                "headerName",
                "insertAfter"
            ],
            "inputProperties": {
                "headerName": {
                    "type": "string",
                    "description": "Client IP header name\n"
                },
                "insertAfter": {
                    "type": "string",
                    "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                }
            },
            "requiredInputs": [
                "headerName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RumIpDetermination resources.\n",
                "properties": {
                    "headerName": {
                        "type": "string",
                        "description": "Client IP header name\n"
                    },
                    "insertAfter": {
                        "type": "string",
                        "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/rumIpLocations:RumIpLocations": {
            "properties": {
                "city": {
                    "type": "string",
                    "description": "The city name of the location.\n"
                },
                "countryCode": {
                    "type": "string",
                    "description": "The country code of the location. Use the alpha-2 code of the [ISO 3166-2 standard](https://dt-url.net/iso3166-2), (for\nexample, `AT` for Austria or `PL` for Poland).\n"
                },
                "ip": {
                    "type": "string",
                    "description": "Single IP or IP range start address\n"
                },
                "ipTo": {
                    "type": "string",
                    "description": "IP range end\n"
                },
                "latitude": {
                    "type": "number",
                    "description": "Latitude\n"
                },
                "longitude": {
                    "type": "number",
                    "description": "Longitude\n"
                },
                "regionCode": {
                    "type": "string",
                    "description": "The region code of the location. For the [USA](https://dt-url.net/iso3166us) or [Canada](https://dt-url.net/iso3166ca)\nuse ISO 3166-2 state codes without `US-` or `CA-` prefix. For the rest of the world use [FIPS 10-4\ncodes](https://dt-url.net/fipscodes) without country prefix.\n"
                }
            },
            "required": [
                "countryCode",
                "ip"
            ],
            "inputProperties": {
                "city": {
                    "type": "string",
                    "description": "The city name of the location.\n"
                },
                "countryCode": {
                    "type": "string",
                    "description": "The country code of the location. Use the alpha-2 code of the [ISO 3166-2 standard](https://dt-url.net/iso3166-2), (for\nexample, `AT` for Austria or `PL` for Poland).\n"
                },
                "ip": {
                    "type": "string",
                    "description": "Single IP or IP range start address\n"
                },
                "ipTo": {
                    "type": "string",
                    "description": "IP range end\n"
                },
                "latitude": {
                    "type": "number",
                    "description": "Latitude\n"
                },
                "longitude": {
                    "type": "number",
                    "description": "Longitude\n"
                },
                "regionCode": {
                    "type": "string",
                    "description": "The region code of the location. For the [USA](https://dt-url.net/iso3166us) or [Canada](https://dt-url.net/iso3166ca)\nuse ISO 3166-2 state codes without `US-` or `CA-` prefix. For the rest of the world use [FIPS 10-4\ncodes](https://dt-url.net/fipscodes) without country prefix.\n"
                }
            },
            "requiredInputs": [
                "countryCode",
                "ip"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RumIpLocations resources.\n",
                "properties": {
                    "city": {
                        "type": "string",
                        "description": "The city name of the location.\n"
                    },
                    "countryCode": {
                        "type": "string",
                        "description": "The country code of the location. Use the alpha-2 code of the [ISO 3166-2 standard](https://dt-url.net/iso3166-2), (for\nexample, `AT` for Austria or `PL` for Poland).\n"
                    },
                    "ip": {
                        "type": "string",
                        "description": "Single IP or IP range start address\n"
                    },
                    "ipTo": {
                        "type": "string",
                        "description": "IP range end\n"
                    },
                    "latitude": {
                        "type": "number",
                        "description": "Latitude\n"
                    },
                    "longitude": {
                        "type": "number",
                        "description": "Longitude\n"
                    },
                    "regionCode": {
                        "type": "string",
                        "description": "The region code of the location. For the [USA](https://dt-url.net/iso3166us) or [Canada](https://dt-url.net/iso3166ca)\nuse ISO 3166-2 state codes without `US-` or `CA-` prefix. For the rest of the world use [FIPS 10-4\ncodes](https://dt-url.net/fipscodes) without country prefix.\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/rumOverloadPrevention:RumOverloadPrevention": {
            "properties": {
                "overloadPreventionLimit": {
                    "type": "integer",
                    "description": "Once this limit is reached, Dynatrace [throttles the number of captured user sessions](https://dt-url.net/fm3v0p7g).\n"
                }
            },
            "required": [
                "overloadPreventionLimit"
            ],
            "inputProperties": {
                "overloadPreventionLimit": {
                    "type": "integer",
                    "description": "Once this limit is reached, Dynatrace [throttles the number of captured user sessions](https://dt-url.net/fm3v0p7g).\n"
                }
            },
            "requiredInputs": [
                "overloadPreventionLimit"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RumOverloadPrevention resources.\n",
                "properties": {
                    "overloadPreventionLimit": {
                        "type": "integer",
                        "description": "Once this limit is reached, Dynatrace [throttles the number of captured user sessions](https://dt-url.net/fm3v0p7g).\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/rumProviderBreakdown:RumProviderBreakdown": {
            "properties": {
                "domainNamePatternList": {
                    "$ref": "#/types/dynatrace:index/RumProviderBreakdownDomainNamePatternList:RumProviderBreakdownDomainNamePatternList",
                    "description": "Domain name pattern\n"
                },
                "iconUrl": {
                    "type": "string",
                    "description": "Specify an URL for the provider's brand icon\n"
                },
                "insertAfter": {
                    "type": "string",
                    "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                },
                "reportPublicImprovement": {
                    "type": "boolean",
                    "description": "Send the patterns of this provider to Dynatrace to help us improve 3rd-party detection.\n"
                },
                "resourceName": {
                    "type": "string",
                    "description": "Resource name\n"
                },
                "resourceType": {
                    "type": "string",
                    "description": "Possible Values: `FirstParty`, `ThirdParty`, `Cdn`\n"
                }
            },
            "required": [
                "domainNamePatternList",
                "insertAfter",
                "reportPublicImprovement",
                "resourceName",
                "resourceType"
            ],
            "inputProperties": {
                "domainNamePatternList": {
                    "$ref": "#/types/dynatrace:index/RumProviderBreakdownDomainNamePatternList:RumProviderBreakdownDomainNamePatternList",
                    "description": "Domain name pattern\n"
                },
                "iconUrl": {
                    "type": "string",
                    "description": "Specify an URL for the provider's brand icon\n"
                },
                "insertAfter": {
                    "type": "string",
                    "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                },
                "reportPublicImprovement": {
                    "type": "boolean",
                    "description": "Send the patterns of this provider to Dynatrace to help us improve 3rd-party detection.\n"
                },
                "resourceName": {
                    "type": "string",
                    "description": "Resource name\n"
                },
                "resourceType": {
                    "type": "string",
                    "description": "Possible Values: `FirstParty`, `ThirdParty`, `Cdn`\n"
                }
            },
            "requiredInputs": [
                "domainNamePatternList",
                "reportPublicImprovement",
                "resourceName",
                "resourceType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RumProviderBreakdown resources.\n",
                "properties": {
                    "domainNamePatternList": {
                        "$ref": "#/types/dynatrace:index/RumProviderBreakdownDomainNamePatternList:RumProviderBreakdownDomainNamePatternList",
                        "description": "Domain name pattern\n"
                    },
                    "iconUrl": {
                        "type": "string",
                        "description": "Specify an URL for the provider's brand icon\n"
                    },
                    "insertAfter": {
                        "type": "string",
                        "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                    },
                    "reportPublicImprovement": {
                        "type": "boolean",
                        "description": "Send the patterns of this provider to Dynatrace to help us improve 3rd-party detection.\n"
                    },
                    "resourceName": {
                        "type": "string",
                        "description": "Resource name\n"
                    },
                    "resourceType": {
                        "type": "string",
                        "description": "Possible Values: `FirstParty`, `ThirdParty`, `Cdn`\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/serviceAnomalies:ServiceAnomalies": {
            "properties": {
                "failureRates": {
                    "$ref": "#/types/dynatrace:index/ServiceAnomaliesFailureRates:ServiceAnomaliesFailureRates",
                    "description": "Configuration of failure rate increase detection. Detecting failure rate increases will be disabled if this block is\nomitted.\n"
                },
                "load": {
                    "$ref": "#/types/dynatrace:index/ServiceAnomaliesLoad:ServiceAnomaliesLoad",
                    "description": "The configuration of load spikes detection. Detecting load spikes will be disabled if this block is omitted.\n"
                },
                "loadDrops": {
                    "$ref": "#/types/dynatrace:index/ServiceAnomaliesLoadDrops:ServiceAnomaliesLoadDrops",
                    "description": "The configuration of load drops detection. Detecting load drops will be disabled if this block is omitted.\n"
                },
                "responseTimes": {
                    "$ref": "#/types/dynatrace:index/ServiceAnomaliesResponseTimes:ServiceAnomaliesResponseTimes",
                    "description": "Configuration of response time degradation detection. Detecting response time degradation will be disabled if this block\nis omitted.\n"
                }
            },
            "inputProperties": {
                "failureRates": {
                    "$ref": "#/types/dynatrace:index/ServiceAnomaliesFailureRates:ServiceAnomaliesFailureRates",
                    "description": "Configuration of failure rate increase detection. Detecting failure rate increases will be disabled if this block is\nomitted.\n"
                },
                "load": {
                    "$ref": "#/types/dynatrace:index/ServiceAnomaliesLoad:ServiceAnomaliesLoad",
                    "description": "The configuration of load spikes detection. Detecting load spikes will be disabled if this block is omitted.\n"
                },
                "loadDrops": {
                    "$ref": "#/types/dynatrace:index/ServiceAnomaliesLoadDrops:ServiceAnomaliesLoadDrops",
                    "description": "The configuration of load drops detection. Detecting load drops will be disabled if this block is omitted.\n"
                },
                "responseTimes": {
                    "$ref": "#/types/dynatrace:index/ServiceAnomaliesResponseTimes:ServiceAnomaliesResponseTimes",
                    "description": "Configuration of response time degradation detection. Detecting response time degradation will be disabled if this block\nis omitted.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceAnomalies resources.\n",
                "properties": {
                    "failureRates": {
                        "$ref": "#/types/dynatrace:index/ServiceAnomaliesFailureRates:ServiceAnomaliesFailureRates",
                        "description": "Configuration of failure rate increase detection. Detecting failure rate increases will be disabled if this block is\nomitted.\n"
                    },
                    "load": {
                        "$ref": "#/types/dynatrace:index/ServiceAnomaliesLoad:ServiceAnomaliesLoad",
                        "description": "The configuration of load spikes detection. Detecting load spikes will be disabled if this block is omitted.\n"
                    },
                    "loadDrops": {
                        "$ref": "#/types/dynatrace:index/ServiceAnomaliesLoadDrops:ServiceAnomaliesLoadDrops",
                        "description": "The configuration of load drops detection. Detecting load drops will be disabled if this block is omitted.\n"
                    },
                    "responseTimes": {
                        "$ref": "#/types/dynatrace:index/ServiceAnomaliesResponseTimes:ServiceAnomaliesResponseTimes",
                        "description": "Configuration of response time degradation detection. Detecting response time degradation will be disabled if this block\nis omitted.\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/serviceAnomaliesV2:ServiceAnomaliesV2": {
            "properties": {
                "failureRate": {
                    "$ref": "#/types/dynatrace:index/ServiceAnomaliesV2FailureRate:ServiceAnomaliesV2FailureRate",
                    "description": "Failure rate\n"
                },
                "loadDrops": {
                    "$ref": "#/types/dynatrace:index/ServiceAnomaliesV2LoadDrops:ServiceAnomaliesV2LoadDrops",
                    "description": "Alert if the observed load is lower than the expected load by a specified margin for a specified amount of time:\n"
                },
                "loadSpikes": {
                    "$ref": "#/types/dynatrace:index/ServiceAnomaliesV2LoadSpikes:ServiceAnomaliesV2LoadSpikes",
                    "description": "Alert if the observed load exceeds the expected load by a specified margin for a specified amount of time:\n"
                },
                "responseTime": {
                    "$ref": "#/types/dynatrace:index/ServiceAnomaliesV2ResponseTime:ServiceAnomaliesV2ResponseTime",
                    "description": "Response time\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of this setting (SERVICE_METHOD, SERVICE, HOST_GROUP). Omit this property if you want to cover the whole\nenvironment.\n"
                }
            },
            "required": [
                "failureRate",
                "loadDrops",
                "loadSpikes",
                "responseTime"
            ],
            "inputProperties": {
                "failureRate": {
                    "$ref": "#/types/dynatrace:index/ServiceAnomaliesV2FailureRate:ServiceAnomaliesV2FailureRate",
                    "description": "Failure rate\n"
                },
                "loadDrops": {
                    "$ref": "#/types/dynatrace:index/ServiceAnomaliesV2LoadDrops:ServiceAnomaliesV2LoadDrops",
                    "description": "Alert if the observed load is lower than the expected load by a specified margin for a specified amount of time:\n"
                },
                "loadSpikes": {
                    "$ref": "#/types/dynatrace:index/ServiceAnomaliesV2LoadSpikes:ServiceAnomaliesV2LoadSpikes",
                    "description": "Alert if the observed load exceeds the expected load by a specified margin for a specified amount of time:\n"
                },
                "responseTime": {
                    "$ref": "#/types/dynatrace:index/ServiceAnomaliesV2ResponseTime:ServiceAnomaliesV2ResponseTime",
                    "description": "Response time\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of this setting (SERVICE_METHOD, SERVICE, HOST_GROUP). Omit this property if you want to cover the whole\nenvironment.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "failureRate",
                "loadDrops",
                "loadSpikes",
                "responseTime"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceAnomaliesV2 resources.\n",
                "properties": {
                    "failureRate": {
                        "$ref": "#/types/dynatrace:index/ServiceAnomaliesV2FailureRate:ServiceAnomaliesV2FailureRate",
                        "description": "Failure rate\n"
                    },
                    "loadDrops": {
                        "$ref": "#/types/dynatrace:index/ServiceAnomaliesV2LoadDrops:ServiceAnomaliesV2LoadDrops",
                        "description": "Alert if the observed load is lower than the expected load by a specified margin for a specified amount of time:\n"
                    },
                    "loadSpikes": {
                        "$ref": "#/types/dynatrace:index/ServiceAnomaliesV2LoadSpikes:ServiceAnomaliesV2LoadSpikes",
                        "description": "Alert if the observed load exceeds the expected load by a specified margin for a specified amount of time:\n"
                    },
                    "responseTime": {
                        "$ref": "#/types/dynatrace:index/ServiceAnomaliesV2ResponseTime:ServiceAnomaliesV2ResponseTime",
                        "description": "Response time\n"
                    },
                    "scope": {
                        "type": "string",
                        "description": "The scope of this setting (SERVICE_METHOD, SERVICE, HOST_GROUP). Omit this property if you want to cover the whole\nenvironment.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/serviceExternalWebRequest:ServiceExternalWebRequest": {
            "properties": {
                "conditions": {
                    "$ref": "#/types/dynatrace:index/ServiceExternalWebRequestConditions:ServiceExternalWebRequestConditions",
                    "description": "A list of conditions necessary for the rule to take effect. If multiple conditions are specified, they must **all**\nmatch a Request for the rule to apply. If there is no condition at all, the rule is always applied. Conditions are\nevaluated against attributes, but do not modify them.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "idContributors": {
                    "$ref": "#/types/dynatrace:index/ServiceExternalWebRequestIdContributors:ServiceExternalWebRequestIdContributors",
                    "description": "Contributors to the Service Identifier calculation. All of the Contributors except for the port are always applied. You\ncan exclude the port contribution by disabling the switch.\n"
                },
                "insertAfter": {
                    "type": "string",
                    "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                },
                "managementZones": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Define a management zone of the process group for which this service detection rule should be created. Note: in case of\nexternal requests/services the PG might not always be known. See [here](https://dt-url.net/9i03b79)\n"
                },
                "name": {
                    "type": "string",
                    "description": "Rule name\n"
                }
            },
            "required": [
                "enabled",
                "idContributors",
                "insertAfter",
                "name"
            ],
            "inputProperties": {
                "conditions": {
                    "$ref": "#/types/dynatrace:index/ServiceExternalWebRequestConditions:ServiceExternalWebRequestConditions",
                    "description": "A list of conditions necessary for the rule to take effect. If multiple conditions are specified, they must **all**\nmatch a Request for the rule to apply. If there is no condition at all, the rule is always applied. Conditions are\nevaluated against attributes, but do not modify them.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "idContributors": {
                    "$ref": "#/types/dynatrace:index/ServiceExternalWebRequestIdContributors:ServiceExternalWebRequestIdContributors",
                    "description": "Contributors to the Service Identifier calculation. All of the Contributors except for the port are always applied. You\ncan exclude the port contribution by disabling the switch.\n"
                },
                "insertAfter": {
                    "type": "string",
                    "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                },
                "managementZones": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Define a management zone of the process group for which this service detection rule should be created. Note: in case of\nexternal requests/services the PG might not always be known. See [here](https://dt-url.net/9i03b79)\n"
                },
                "name": {
                    "type": "string",
                    "description": "Rule name\n"
                }
            },
            "requiredInputs": [
                "enabled",
                "idContributors"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceExternalWebRequest resources.\n",
                "properties": {
                    "conditions": {
                        "$ref": "#/types/dynatrace:index/ServiceExternalWebRequestConditions:ServiceExternalWebRequestConditions",
                        "description": "A list of conditions necessary for the rule to take effect. If multiple conditions are specified, they must **all**\nmatch a Request for the rule to apply. If there is no condition at all, the rule is always applied. Conditions are\nevaluated against attributes, but do not modify them.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                    },
                    "idContributors": {
                        "$ref": "#/types/dynatrace:index/ServiceExternalWebRequestIdContributors:ServiceExternalWebRequestIdContributors",
                        "description": "Contributors to the Service Identifier calculation. All of the Contributors except for the port are always applied. You\ncan exclude the port contribution by disabling the switch.\n"
                    },
                    "insertAfter": {
                        "type": "string",
                        "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                    },
                    "managementZones": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Define a management zone of the process group for which this service detection rule should be created. Note: in case of\nexternal requests/services the PG might not always be known. See [here](https://dt-url.net/9i03b79)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Rule name\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/serviceExternalWebService:ServiceExternalWebService": {
            "properties": {
                "conditions": {
                    "$ref": "#/types/dynatrace:index/ServiceExternalWebServiceConditions:ServiceExternalWebServiceConditions",
                    "description": "A list of conditions necessary for the rule to take effect. If multiple conditions are specified, they must **all**\nmatch a Request for the rule to apply. If there is no condition at all, the rule is always applied. Conditions are\nevaluated against attributes, but do not modify them.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "idContributors": {
                    "$ref": "#/types/dynatrace:index/ServiceExternalWebServiceIdContributors:ServiceExternalWebServiceIdContributors",
                    "description": "Contributors to the Service Identifier calculation. URL path is always applied as an Id Contributor. You can exclude the\nport contribution by disabling the switch.\n"
                },
                "insertAfter": {
                    "type": "string",
                    "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                },
                "managementZones": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Define a management zone of the process group for which this service detection rule should be created. Note: in case of\nexternal requests/services the PG might not always be known. See [here](https://dt-url.net/9i03b79)\n"
                },
                "name": {
                    "type": "string",
                    "description": "Rule name\n"
                }
            },
            "required": [
                "enabled",
                "idContributors",
                "insertAfter",
                "name"
            ],
            "inputProperties": {
                "conditions": {
                    "$ref": "#/types/dynatrace:index/ServiceExternalWebServiceConditions:ServiceExternalWebServiceConditions",
                    "description": "A list of conditions necessary for the rule to take effect. If multiple conditions are specified, they must **all**\nmatch a Request for the rule to apply. If there is no condition at all, the rule is always applied. Conditions are\nevaluated against attributes, but do not modify them.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "idContributors": {
                    "$ref": "#/types/dynatrace:index/ServiceExternalWebServiceIdContributors:ServiceExternalWebServiceIdContributors",
                    "description": "Contributors to the Service Identifier calculation. URL path is always applied as an Id Contributor. You can exclude the\nport contribution by disabling the switch.\n"
                },
                "insertAfter": {
                    "type": "string",
                    "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                },
                "managementZones": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Define a management zone of the process group for which this service detection rule should be created. Note: in case of\nexternal requests/services the PG might not always be known. See [here](https://dt-url.net/9i03b79)\n"
                },
                "name": {
                    "type": "string",
                    "description": "Rule name\n"
                }
            },
            "requiredInputs": [
                "enabled",
                "idContributors"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceExternalWebService resources.\n",
                "properties": {
                    "conditions": {
                        "$ref": "#/types/dynatrace:index/ServiceExternalWebServiceConditions:ServiceExternalWebServiceConditions",
                        "description": "A list of conditions necessary for the rule to take effect. If multiple conditions are specified, they must **all**\nmatch a Request for the rule to apply. If there is no condition at all, the rule is always applied. Conditions are\nevaluated against attributes, but do not modify them.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                    },
                    "idContributors": {
                        "$ref": "#/types/dynatrace:index/ServiceExternalWebServiceIdContributors:ServiceExternalWebServiceIdContributors",
                        "description": "Contributors to the Service Identifier calculation. URL path is always applied as an Id Contributor. You can exclude the\nport contribution by disabling the switch.\n"
                    },
                    "insertAfter": {
                        "type": "string",
                        "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                    },
                    "managementZones": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Define a management zone of the process group for which this service detection rule should be created. Note: in case of\nexternal requests/services the PG might not always be known. See [here](https://dt-url.net/9i03b79)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Rule name\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/serviceFailure:ServiceFailure": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "exceptionRules": {
                    "$ref": "#/types/dynatrace:index/ServiceFailureExceptionRules:ServiceFailureExceptionRules",
                    "description": "Customize failure detection for specific exceptions and errors\n"
                },
                "serviceId": {
                    "type": "string",
                    "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.\n"
                }
            },
            "required": [
                "enabled",
                "serviceId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "exceptionRules": {
                    "$ref": "#/types/dynatrace:index/ServiceFailureExceptionRules:ServiceFailureExceptionRules",
                    "description": "Customize failure detection for specific exceptions and errors\n"
                },
                "serviceId": {
                    "type": "string",
                    "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "enabled",
                "serviceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceFailure resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                    },
                    "exceptionRules": {
                        "$ref": "#/types/dynatrace:index/ServiceFailureExceptionRules:ServiceFailureExceptionRules",
                        "description": "Customize failure detection for specific exceptions and errors\n"
                    },
                    "serviceId": {
                        "type": "string",
                        "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/serviceFullWebRequest:ServiceFullWebRequest": {
            "properties": {
                "conditions": {
                    "$ref": "#/types/dynatrace:index/ServiceFullWebRequestConditions:ServiceFullWebRequestConditions",
                    "description": "A list of conditions necessary for the rule to take effect. If multiple conditions are specified, they must **all**\nmatch a Request for the rule to apply. If there is no condition at all, the rule is always applied. Conditions are\nevaluated against attributes, but do not modify them.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "idContributors": {
                    "$ref": "#/types/dynatrace:index/ServiceFullWebRequestIdContributors:ServiceFullWebRequestIdContributors",
                    "description": "Contributors to the Service Identifier calculation. All of the Contributors are always applied.\n"
                },
                "insertAfter": {
                    "type": "string",
                    "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                },
                "managementZones": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Define a management zone of the process group for which this service detection rule should be created.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Rule name\n"
                }
            },
            "required": [
                "enabled",
                "idContributors",
                "insertAfter",
                "name"
            ],
            "inputProperties": {
                "conditions": {
                    "$ref": "#/types/dynatrace:index/ServiceFullWebRequestConditions:ServiceFullWebRequestConditions",
                    "description": "A list of conditions necessary for the rule to take effect. If multiple conditions are specified, they must **all**\nmatch a Request for the rule to apply. If there is no condition at all, the rule is always applied. Conditions are\nevaluated against attributes, but do not modify them.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "idContributors": {
                    "$ref": "#/types/dynatrace:index/ServiceFullWebRequestIdContributors:ServiceFullWebRequestIdContributors",
                    "description": "Contributors to the Service Identifier calculation. All of the Contributors are always applied.\n"
                },
                "insertAfter": {
                    "type": "string",
                    "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                },
                "managementZones": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Define a management zone of the process group for which this service detection rule should be created.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Rule name\n"
                }
            },
            "requiredInputs": [
                "enabled",
                "idContributors"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceFullWebRequest resources.\n",
                "properties": {
                    "conditions": {
                        "$ref": "#/types/dynatrace:index/ServiceFullWebRequestConditions:ServiceFullWebRequestConditions",
                        "description": "A list of conditions necessary for the rule to take effect. If multiple conditions are specified, they must **all**\nmatch a Request for the rule to apply. If there is no condition at all, the rule is always applied. Conditions are\nevaluated against attributes, but do not modify them.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                    },
                    "idContributors": {
                        "$ref": "#/types/dynatrace:index/ServiceFullWebRequestIdContributors:ServiceFullWebRequestIdContributors",
                        "description": "Contributors to the Service Identifier calculation. All of the Contributors are always applied.\n"
                    },
                    "insertAfter": {
                        "type": "string",
                        "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                    },
                    "managementZones": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Define a management zone of the process group for which this service detection rule should be created.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Rule name\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/serviceFullWebService:ServiceFullWebService": {
            "properties": {
                "conditions": {
                    "$ref": "#/types/dynatrace:index/ServiceFullWebServiceConditions:ServiceFullWebServiceConditions",
                    "description": "A list of conditions necessary for the rule to take effect. If multiple conditions are specified, they must **all**\nmatch a Request for the rule to apply. If there is no condition at all, the rule is always applied. Conditions are\nevaluated against attributes, but do not modify them.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "idContributors": {
                    "$ref": "#/types/dynatrace:index/ServiceFullWebServiceIdContributors:ServiceFullWebServiceIdContributors",
                    "description": "Contributors to the Service Identifier calculation. All of the Contributors are always applied.\n"
                },
                "insertAfter": {
                    "type": "string",
                    "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                },
                "managementZones": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Define a management zone of the process group for which this service detection rule should be created.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Rule name\n"
                }
            },
            "required": [
                "enabled",
                "idContributors",
                "insertAfter",
                "name"
            ],
            "inputProperties": {
                "conditions": {
                    "$ref": "#/types/dynatrace:index/ServiceFullWebServiceConditions:ServiceFullWebServiceConditions",
                    "description": "A list of conditions necessary for the rule to take effect. If multiple conditions are specified, they must **all**\nmatch a Request for the rule to apply. If there is no condition at all, the rule is always applied. Conditions are\nevaluated against attributes, but do not modify them.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "idContributors": {
                    "$ref": "#/types/dynatrace:index/ServiceFullWebServiceIdContributors:ServiceFullWebServiceIdContributors",
                    "description": "Contributors to the Service Identifier calculation. All of the Contributors are always applied.\n"
                },
                "insertAfter": {
                    "type": "string",
                    "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                },
                "managementZones": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Define a management zone of the process group for which this service detection rule should be created.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Rule name\n"
                }
            },
            "requiredInputs": [
                "enabled",
                "idContributors"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceFullWebService resources.\n",
                "properties": {
                    "conditions": {
                        "$ref": "#/types/dynatrace:index/ServiceFullWebServiceConditions:ServiceFullWebServiceConditions",
                        "description": "A list of conditions necessary for the rule to take effect. If multiple conditions are specified, they must **all**\nmatch a Request for the rule to apply. If there is no condition at all, the rule is always applied. Conditions are\nevaluated against attributes, but do not modify them.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                    },
                    "idContributors": {
                        "$ref": "#/types/dynatrace:index/ServiceFullWebServiceIdContributors:ServiceFullWebServiceIdContributors",
                        "description": "Contributors to the Service Identifier calculation. All of the Contributors are always applied.\n"
                    },
                    "insertAfter": {
                        "type": "string",
                        "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                    },
                    "managementZones": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Define a management zone of the process group for which this service detection rule should be created.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Rule name\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/serviceHttpFailure:ServiceHttpFailure": {
            "properties": {
                "brokenLinks": {
                    "$ref": "#/types/dynatrace:index/ServiceHttpFailureBrokenLinks:ServiceHttpFailureBrokenLinks",
                    "description": "HTTP 404 response codes are thrown when a web server can't find a certain page. 404s are classified as broken links on\nthe client side and therefore aren't considered to be service failures. By enabling this setting, you can have 404s\ntreated as server-side service failures.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "httpResponseCodes": {
                    "$ref": "#/types/dynatrace:index/ServiceHttpFailureHttpResponseCodes:ServiceHttpFailureHttpResponseCodes",
                    "description": "HTTP response codes\n"
                },
                "serviceId": {
                    "type": "string",
                    "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.\n"
                }
            },
            "required": [
                "enabled",
                "serviceId"
            ],
            "inputProperties": {
                "brokenLinks": {
                    "$ref": "#/types/dynatrace:index/ServiceHttpFailureBrokenLinks:ServiceHttpFailureBrokenLinks",
                    "description": "HTTP 404 response codes are thrown when a web server can't find a certain page. 404s are classified as broken links on\nthe client side and therefore aren't considered to be service failures. By enabling this setting, you can have 404s\ntreated as server-side service failures.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "httpResponseCodes": {
                    "$ref": "#/types/dynatrace:index/ServiceHttpFailureHttpResponseCodes:ServiceHttpFailureHttpResponseCodes",
                    "description": "HTTP response codes\n"
                },
                "serviceId": {
                    "type": "string",
                    "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "enabled",
                "serviceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceHttpFailure resources.\n",
                "properties": {
                    "brokenLinks": {
                        "$ref": "#/types/dynatrace:index/ServiceHttpFailureBrokenLinks:ServiceHttpFailureBrokenLinks",
                        "description": "HTTP 404 response codes are thrown when a web server can't find a certain page. 404s are classified as broken links on\nthe client side and therefore aren't considered to be service failures. By enabling this setting, you can have 404s\ntreated as server-side service failures.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                    },
                    "httpResponseCodes": {
                        "$ref": "#/types/dynatrace:index/ServiceHttpFailureHttpResponseCodes:ServiceHttpFailureHttpResponseCodes",
                        "description": "HTTP response codes\n"
                    },
                    "serviceId": {
                        "type": "string",
                        "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/serviceNaming:ServiceNaming": {
            "properties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ServiceNamingCondition:ServiceNamingCondition"
                    },
                    "description": "A list of matching conditions of the rule. The rule applies only if **all** conditions are fulfilled\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "The rule is enabled (`true`) or disabled (`false`)\n"
                },
                "format": {
                    "type": "string",
                    "description": "The name to be assigned to matching entities. You can use the following placeholders here: *\n`{AwsAutoScalingGroup:Name}` * `{AwsAvailabilityZone:Name}` * `{AwsElasticLoadBalancer:Name}` *\n`{AwsRelationalDatabaseService:DBName}` * `{AwsRelationalDatabaseService:Endpoint}` *\n`{AwsRelationalDatabaseService:Engine}` * `{AwsRelationalDatabaseService:InstanceClass}` *\n`{AwsRelationalDatabaseService:Name}` * `{AwsRelationalDatabaseService:Port}` * `{AzureRegion:Name}` *\n`{AzureScaleSet:Name}` * `{AzureVm:Name}` * `{CloudFoundryOrganization:Name}` * `{CustomDevice:DetectedName}` *\n`{CustomDevice:DnsName}` * `{CustomDevice:IpAddress}` * `{CustomDevice:Port}` *\n`{DockerContainerGroupInstance:ContainerName}` * `{DockerContainerGroupInstance:FullImageName}` *\n`{DockerContainerGroupInstance:ImageVersion}` * `{DockerContainerGroupInstance:StrippedImageName}` *\n`{ESXIHost:HardwareModel}` * `{ESXIHost:HardwareVendor}` * `{ESXIHost:Name}` * `{ESXIHost:ProductName}` *\n`{ESXIHost:ProductVersion}` * `{Ec2Instance:AmiId}` * `{Ec2Instance:BeanstalkEnvironmentName}` *\n`{Ec2Instance:InstanceId}` * `{Ec2Instance:InstanceType}` * `{Ec2Instance:LocalHostName}` * `{Ec2Instance:Name}` *\n`{Ec2Instance:PublicHostName}` * `{Ec2Instance:SecurityGroup}` * `{GoogleComputeInstance:Id}` *\n`{GoogleComputeInstance:IpAddresses}` * `{GoogleComputeInstance:MachineType}` * `{GoogleComputeInstance:Name}` *\n`{GoogleComputeInstance:ProjectId}` * `{GoogleComputeInstance:Project}` * `{Host:AWSNameTag}` *\n`{Host:AixLogicalCpuCount}` * `{Host:AzureHostName}` * `{Host:AzureSiteName}` * `{Host:BoshDeploymentId}` *\n`{Host:BoshInstanceId}` * `{Host:BoshInstanceName}` * `{Host:BoshName}` * `{Host:BoshStemcellVersion}` *\n`{Host:CpuCores}` * `{Host:DetectedName}` * `{Host:Environment:AppName}` * `{Host:Environment:BoshReleaseVersion}` *\n`{Host:Environment:Environment}` * `{Host:Environment:Link}` * `{Host:Environment:Organization}` *\n`{Host:Environment:Owner}` * `{Host:Environment:Support}` * `{Host:IpAddress}` * `{Host:LogicalCpuCores}` *\n`{Host:OneAgentCustomHostName}` * `{Host:OperatingSystemVersion}` * `{Host:PaasMemoryLimit}` * `{HostGroup:Name}` *\n`{KubernetesCluster:Name}` * `{KubernetesNode:DetectedName}` * `{OpenstackAvailabilityZone:Name}` *\n`{OpenstackZone:Name}` * `{OpenstackComputeNode:Name}` * `{OpenstackProject:Name}` * `{OpenstackVm:InstanceType}` *\n`{OpenstackVm:Name}` * `{OpenstackVm:SecurityGroup}` * `{ProcessGroup:AmazonECRImageAccountId}` *\n`{ProcessGroup:AmazonECRImageRegion}` * `{ProcessGroup:AmazonECSCluster}` * `{ProcessGroup:AmazonECSContainerName}` *\n`{ProcessGroup:AmazonECSFamily}` * `{ProcessGroup:AmazonECSRevision}` * `{ProcessGroup:AmazonLambdaFunctionName}` *\n`{ProcessGroup:AmazonRegion}` * `{ProcessGroup:ApacheConfigPath}` * `{ProcessGroup:ApacheSparkMasterIpAddress}` *\n`{ProcessGroup:AspDotNetCoreApplicationPath}` * `{ProcessGroup:AspDotNetCoreApplicationPath}` *\n`{ProcessGroup:AzureHostName}` * `{ProcessGroup:AzureSiteName}` * `{ProcessGroup:CassandraClusterName}` *\n`{ProcessGroup:CatalinaBase}` * `{ProcessGroup:CatalinaHome}` * `{ProcessGroup:CloudFoundryAppId}` *\n`{ProcessGroup:CloudFoundryAppName}` * `{ProcessGroup:CloudFoundryInstanceIndex}` * `{ProcessGroup:CloudFoundrySpaceId}`\n* `{ProcessGroup:CloudFoundrySpaceName}` * `{ProcessGroup:ColdFusionJvmConfigFile}` *\n`{ProcessGroup:ColdFusionServiceName}` * `{ProcessGroup:CommandLineArgs}` * `{ProcessGroup:DetectedName}` *\n`{ProcessGroup:DotNetCommandPath}` * `{ProcessGroup:DotNetCommand}` * `{ProcessGroup:DotNetClusterId}` *\n`{ProcessGroup:DotNetNodeId}` * `{ProcessGroup:ElasticsearchClusterName}` * `{ProcessGroup:ElasticsearchNodeName}` *\n`{ProcessGroup:EquinoxConfigPath}` * `{ProcessGroup:ExeName}` * `{ProcessGroup:ExePath}` *\n`{ProcessGroup:GlassFishDomainName}` * `{ProcessGroup:GlassFishInstanceName}` * `{ProcessGroup:GoogleAppEngineInstance}`\n* `{ProcessGroup:GoogleAppEngineService}` * `{ProcessGroup:GoogleCloudProject}` * `{ProcessGroup:HybrisBinDirectory}` *\n`{ProcessGroup:HybrisConfigDirectory}` * `{ProcessGroup:HybrisConfigDirectory}` * `{ProcessGroup:HybrisDataDirectory}` *\n`{ProcessGroup:IBMCicsRegion}` * `{ProcessGroup:IBMCtgName}` * `{ProcessGroup:IBMImsConnectRegion}` *\n`{ProcessGroup:IBMImsControlRegion}` * `{ProcessGroup:IBMImsMessageProcessingRegion}` *\n`{ProcessGroup:IBMImsSoapGwName}` * `{ProcessGroup:IBMIntegrationNodeName}` * `{ProcessGroup:IBMIntegrationServerName}`\n* `{ProcessGroup:IISAppPool}` * `{ProcessGroup:IISRoleName}` * `{ProcessGroup:JbossHome}` * `{ProcessGroup:JbossMode}` *\n`{ProcessGroup:JbossServerName}` * `{ProcessGroup:JavaJarFile}` * `{ProcessGroup:JavaJarPath}` *\n`{ProcessGroup:JavaMainCLass}` * `{ProcessGroup:KubernetesBasePodName}` * `{ProcessGroup:KubernetesContainerName}` *\n`{ProcessGroup:KubernetesFullPodName}` * `{ProcessGroup:KubernetesNamespace}` * `{ProcessGroup:KubernetesPodUid}` *\n`{ProcessGroup:MssqlInstanceName}` * `{ProcessGroup:NodeJsAppBaseDirectory}` * `{ProcessGroup:NodeJsAppName}` *\n`{ProcessGroup:NodeJsScriptName}` * `{ProcessGroup:OracleSid}` * `{ProcessGroup:PHPScriptPath}` *\n`{ProcessGroup:PHPWorkingDirectory}` * `{ProcessGroup:Ports}` * `{ProcessGroup:RubyAppRootPath}` *\n`{ProcessGroup:RubyScriptPath}` * `{ProcessGroup:SoftwareAGInstallRoot}` *\n`{ProcessGroup:SoftwareAGProductPropertyName}` * `{ProcessGroup:SpringBootAppName}` *\n`{ProcessGroup:SpringBootProfileName}` * `{ProcessGroup:SpringBootStartupClass}` *\n`{ProcessGroup:TIBCOBusinessWorksAppNodeName}` * `{ProcessGroup:TIBCOBusinessWorksAppSpaceName}` *\n`{ProcessGroup:TIBCOBusinessWorksCeAppName}` * `{ProcessGroup:TIBCOBusinessWorksCeVersion}` *\n`{ProcessGroup:TIBCOBusinessWorksDomainName}` * `{ProcessGroup:TIBCOBusinessWorksEnginePropertyFilePath}` *\n`{ProcessGroup:TIBCOBusinessWorksEnginePropertyFile}` * `{ProcessGroup:TIBCOBusinessWorksHome}` *\n`{ProcessGroup:VarnishInstanceName}` * `{ProcessGroup:WebLogicClusterName}` * `{ProcessGroup:WebLogicDomainName}` *\n`{ProcessGroup:WebLogicHome}` * `{ProcessGroup:WebLogicName}` * `{ProcessGroup:WebSphereCellName}` *\n`{ProcessGroup:WebSphereClusterName}` * `{ProcessGroup:WebSphereNodeName}` * `{ProcessGroup:WebSphereServerName}` *\n`{ProcessGroup:ActorSystem}` * `{Service:STGServerName}` * `{Service:DatabaseHostName}` * `{Service:DatabaseName}` *\n`{Service:DatabaseVendor}` * `{Service:DetectedName}` * `{Service:EndpointPath}` * `{Service:EndpointPathGatewayUrl}` *\n`{Service:IIBApplicationName}` * `{Service:MessageListenerClassName}` * `{Service:Port}` * `{Service:PublicDomainName}`\n* `{Service:RemoteEndpoint}` * `{Service:RemoteName}` * `{Service:WebApplicationId}` * `{Service:WebContextRoot}` *\n`{Service:WebServerName}` * `{Service:WebServiceNamespace}` * `{Service:WebServiceName}` * `{VmwareDatacenter:Name}` *\n`{VmwareVm:Name}\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the rule\n"
                },
                "unknowns": {
                    "type": "string",
                    "description": "allows for configuring properties that are not explicitly supported by the current version of this provider\n"
                }
            },
            "required": [
                "enabled",
                "format",
                "name"
            ],
            "inputProperties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/ServiceNamingCondition:ServiceNamingCondition"
                    },
                    "description": "A list of matching conditions of the rule. The rule applies only if **all** conditions are fulfilled\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "The rule is enabled (`true`) or disabled (`false`)\n"
                },
                "format": {
                    "type": "string",
                    "description": "The name to be assigned to matching entities. You can use the following placeholders here: *\n`{AwsAutoScalingGroup:Name}` * `{AwsAvailabilityZone:Name}` * `{AwsElasticLoadBalancer:Name}` *\n`{AwsRelationalDatabaseService:DBName}` * `{AwsRelationalDatabaseService:Endpoint}` *\n`{AwsRelationalDatabaseService:Engine}` * `{AwsRelationalDatabaseService:InstanceClass}` *\n`{AwsRelationalDatabaseService:Name}` * `{AwsRelationalDatabaseService:Port}` * `{AzureRegion:Name}` *\n`{AzureScaleSet:Name}` * `{AzureVm:Name}` * `{CloudFoundryOrganization:Name}` * `{CustomDevice:DetectedName}` *\n`{CustomDevice:DnsName}` * `{CustomDevice:IpAddress}` * `{CustomDevice:Port}` *\n`{DockerContainerGroupInstance:ContainerName}` * `{DockerContainerGroupInstance:FullImageName}` *\n`{DockerContainerGroupInstance:ImageVersion}` * `{DockerContainerGroupInstance:StrippedImageName}` *\n`{ESXIHost:HardwareModel}` * `{ESXIHost:HardwareVendor}` * `{ESXIHost:Name}` * `{ESXIHost:ProductName}` *\n`{ESXIHost:ProductVersion}` * `{Ec2Instance:AmiId}` * `{Ec2Instance:BeanstalkEnvironmentName}` *\n`{Ec2Instance:InstanceId}` * `{Ec2Instance:InstanceType}` * `{Ec2Instance:LocalHostName}` * `{Ec2Instance:Name}` *\n`{Ec2Instance:PublicHostName}` * `{Ec2Instance:SecurityGroup}` * `{GoogleComputeInstance:Id}` *\n`{GoogleComputeInstance:IpAddresses}` * `{GoogleComputeInstance:MachineType}` * `{GoogleComputeInstance:Name}` *\n`{GoogleComputeInstance:ProjectId}` * `{GoogleComputeInstance:Project}` * `{Host:AWSNameTag}` *\n`{Host:AixLogicalCpuCount}` * `{Host:AzureHostName}` * `{Host:AzureSiteName}` * `{Host:BoshDeploymentId}` *\n`{Host:BoshInstanceId}` * `{Host:BoshInstanceName}` * `{Host:BoshName}` * `{Host:BoshStemcellVersion}` *\n`{Host:CpuCores}` * `{Host:DetectedName}` * `{Host:Environment:AppName}` * `{Host:Environment:BoshReleaseVersion}` *\n`{Host:Environment:Environment}` * `{Host:Environment:Link}` * `{Host:Environment:Organization}` *\n`{Host:Environment:Owner}` * `{Host:Environment:Support}` * `{Host:IpAddress}` * `{Host:LogicalCpuCores}` *\n`{Host:OneAgentCustomHostName}` * `{Host:OperatingSystemVersion}` * `{Host:PaasMemoryLimit}` * `{HostGroup:Name}` *\n`{KubernetesCluster:Name}` * `{KubernetesNode:DetectedName}` * `{OpenstackAvailabilityZone:Name}` *\n`{OpenstackZone:Name}` * `{OpenstackComputeNode:Name}` * `{OpenstackProject:Name}` * `{OpenstackVm:InstanceType}` *\n`{OpenstackVm:Name}` * `{OpenstackVm:SecurityGroup}` * `{ProcessGroup:AmazonECRImageAccountId}` *\n`{ProcessGroup:AmazonECRImageRegion}` * `{ProcessGroup:AmazonECSCluster}` * `{ProcessGroup:AmazonECSContainerName}` *\n`{ProcessGroup:AmazonECSFamily}` * `{ProcessGroup:AmazonECSRevision}` * `{ProcessGroup:AmazonLambdaFunctionName}` *\n`{ProcessGroup:AmazonRegion}` * `{ProcessGroup:ApacheConfigPath}` * `{ProcessGroup:ApacheSparkMasterIpAddress}` *\n`{ProcessGroup:AspDotNetCoreApplicationPath}` * `{ProcessGroup:AspDotNetCoreApplicationPath}` *\n`{ProcessGroup:AzureHostName}` * `{ProcessGroup:AzureSiteName}` * `{ProcessGroup:CassandraClusterName}` *\n`{ProcessGroup:CatalinaBase}` * `{ProcessGroup:CatalinaHome}` * `{ProcessGroup:CloudFoundryAppId}` *\n`{ProcessGroup:CloudFoundryAppName}` * `{ProcessGroup:CloudFoundryInstanceIndex}` * `{ProcessGroup:CloudFoundrySpaceId}`\n* `{ProcessGroup:CloudFoundrySpaceName}` * `{ProcessGroup:ColdFusionJvmConfigFile}` *\n`{ProcessGroup:ColdFusionServiceName}` * `{ProcessGroup:CommandLineArgs}` * `{ProcessGroup:DetectedName}` *\n`{ProcessGroup:DotNetCommandPath}` * `{ProcessGroup:DotNetCommand}` * `{ProcessGroup:DotNetClusterId}` *\n`{ProcessGroup:DotNetNodeId}` * `{ProcessGroup:ElasticsearchClusterName}` * `{ProcessGroup:ElasticsearchNodeName}` *\n`{ProcessGroup:EquinoxConfigPath}` * `{ProcessGroup:ExeName}` * `{ProcessGroup:ExePath}` *\n`{ProcessGroup:GlassFishDomainName}` * `{ProcessGroup:GlassFishInstanceName}` * `{ProcessGroup:GoogleAppEngineInstance}`\n* `{ProcessGroup:GoogleAppEngineService}` * `{ProcessGroup:GoogleCloudProject}` * `{ProcessGroup:HybrisBinDirectory}` *\n`{ProcessGroup:HybrisConfigDirectory}` * `{ProcessGroup:HybrisConfigDirectory}` * `{ProcessGroup:HybrisDataDirectory}` *\n`{ProcessGroup:IBMCicsRegion}` * `{ProcessGroup:IBMCtgName}` * `{ProcessGroup:IBMImsConnectRegion}` *\n`{ProcessGroup:IBMImsControlRegion}` * `{ProcessGroup:IBMImsMessageProcessingRegion}` *\n`{ProcessGroup:IBMImsSoapGwName}` * `{ProcessGroup:IBMIntegrationNodeName}` * `{ProcessGroup:IBMIntegrationServerName}`\n* `{ProcessGroup:IISAppPool}` * `{ProcessGroup:IISRoleName}` * `{ProcessGroup:JbossHome}` * `{ProcessGroup:JbossMode}` *\n`{ProcessGroup:JbossServerName}` * `{ProcessGroup:JavaJarFile}` * `{ProcessGroup:JavaJarPath}` *\n`{ProcessGroup:JavaMainCLass}` * `{ProcessGroup:KubernetesBasePodName}` * `{ProcessGroup:KubernetesContainerName}` *\n`{ProcessGroup:KubernetesFullPodName}` * `{ProcessGroup:KubernetesNamespace}` * `{ProcessGroup:KubernetesPodUid}` *\n`{ProcessGroup:MssqlInstanceName}` * `{ProcessGroup:NodeJsAppBaseDirectory}` * `{ProcessGroup:NodeJsAppName}` *\n`{ProcessGroup:NodeJsScriptName}` * `{ProcessGroup:OracleSid}` * `{ProcessGroup:PHPScriptPath}` *\n`{ProcessGroup:PHPWorkingDirectory}` * `{ProcessGroup:Ports}` * `{ProcessGroup:RubyAppRootPath}` *\n`{ProcessGroup:RubyScriptPath}` * `{ProcessGroup:SoftwareAGInstallRoot}` *\n`{ProcessGroup:SoftwareAGProductPropertyName}` * `{ProcessGroup:SpringBootAppName}` *\n`{ProcessGroup:SpringBootProfileName}` * `{ProcessGroup:SpringBootStartupClass}` *\n`{ProcessGroup:TIBCOBusinessWorksAppNodeName}` * `{ProcessGroup:TIBCOBusinessWorksAppSpaceName}` *\n`{ProcessGroup:TIBCOBusinessWorksCeAppName}` * `{ProcessGroup:TIBCOBusinessWorksCeVersion}` *\n`{ProcessGroup:TIBCOBusinessWorksDomainName}` * `{ProcessGroup:TIBCOBusinessWorksEnginePropertyFilePath}` *\n`{ProcessGroup:TIBCOBusinessWorksEnginePropertyFile}` * `{ProcessGroup:TIBCOBusinessWorksHome}` *\n`{ProcessGroup:VarnishInstanceName}` * `{ProcessGroup:WebLogicClusterName}` * `{ProcessGroup:WebLogicDomainName}` *\n`{ProcessGroup:WebLogicHome}` * `{ProcessGroup:WebLogicName}` * `{ProcessGroup:WebSphereCellName}` *\n`{ProcessGroup:WebSphereClusterName}` * `{ProcessGroup:WebSphereNodeName}` * `{ProcessGroup:WebSphereServerName}` *\n`{ProcessGroup:ActorSystem}` * `{Service:STGServerName}` * `{Service:DatabaseHostName}` * `{Service:DatabaseName}` *\n`{Service:DatabaseVendor}` * `{Service:DetectedName}` * `{Service:EndpointPath}` * `{Service:EndpointPathGatewayUrl}` *\n`{Service:IIBApplicationName}` * `{Service:MessageListenerClassName}` * `{Service:Port}` * `{Service:PublicDomainName}`\n* `{Service:RemoteEndpoint}` * `{Service:RemoteName}` * `{Service:WebApplicationId}` * `{Service:WebContextRoot}` *\n`{Service:WebServerName}` * `{Service:WebServiceNamespace}` * `{Service:WebServiceName}` * `{VmwareDatacenter:Name}` *\n`{VmwareVm:Name}\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the rule\n"
                },
                "unknowns": {
                    "type": "string",
                    "description": "allows for configuring properties that are not explicitly supported by the current version of this provider\n"
                }
            },
            "requiredInputs": [
                "enabled",
                "format"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceNaming resources.\n",
                "properties": {
                    "conditions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/dynatrace:index/ServiceNamingCondition:ServiceNamingCondition"
                        },
                        "description": "A list of matching conditions of the rule. The rule applies only if **all** conditions are fulfilled\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "The rule is enabled (`true`) or disabled (`false`)\n"
                    },
                    "format": {
                        "type": "string",
                        "description": "The name to be assigned to matching entities. You can use the following placeholders here: *\n`{AwsAutoScalingGroup:Name}` * `{AwsAvailabilityZone:Name}` * `{AwsElasticLoadBalancer:Name}` *\n`{AwsRelationalDatabaseService:DBName}` * `{AwsRelationalDatabaseService:Endpoint}` *\n`{AwsRelationalDatabaseService:Engine}` * `{AwsRelationalDatabaseService:InstanceClass}` *\n`{AwsRelationalDatabaseService:Name}` * `{AwsRelationalDatabaseService:Port}` * `{AzureRegion:Name}` *\n`{AzureScaleSet:Name}` * `{AzureVm:Name}` * `{CloudFoundryOrganization:Name}` * `{CustomDevice:DetectedName}` *\n`{CustomDevice:DnsName}` * `{CustomDevice:IpAddress}` * `{CustomDevice:Port}` *\n`{DockerContainerGroupInstance:ContainerName}` * `{DockerContainerGroupInstance:FullImageName}` *\n`{DockerContainerGroupInstance:ImageVersion}` * `{DockerContainerGroupInstance:StrippedImageName}` *\n`{ESXIHost:HardwareModel}` * `{ESXIHost:HardwareVendor}` * `{ESXIHost:Name}` * `{ESXIHost:ProductName}` *\n`{ESXIHost:ProductVersion}` * `{Ec2Instance:AmiId}` * `{Ec2Instance:BeanstalkEnvironmentName}` *\n`{Ec2Instance:InstanceId}` * `{Ec2Instance:InstanceType}` * `{Ec2Instance:LocalHostName}` * `{Ec2Instance:Name}` *\n`{Ec2Instance:PublicHostName}` * `{Ec2Instance:SecurityGroup}` * `{GoogleComputeInstance:Id}` *\n`{GoogleComputeInstance:IpAddresses}` * `{GoogleComputeInstance:MachineType}` * `{GoogleComputeInstance:Name}` *\n`{GoogleComputeInstance:ProjectId}` * `{GoogleComputeInstance:Project}` * `{Host:AWSNameTag}` *\n`{Host:AixLogicalCpuCount}` * `{Host:AzureHostName}` * `{Host:AzureSiteName}` * `{Host:BoshDeploymentId}` *\n`{Host:BoshInstanceId}` * `{Host:BoshInstanceName}` * `{Host:BoshName}` * `{Host:BoshStemcellVersion}` *\n`{Host:CpuCores}` * `{Host:DetectedName}` * `{Host:Environment:AppName}` * `{Host:Environment:BoshReleaseVersion}` *\n`{Host:Environment:Environment}` * `{Host:Environment:Link}` * `{Host:Environment:Organization}` *\n`{Host:Environment:Owner}` * `{Host:Environment:Support}` * `{Host:IpAddress}` * `{Host:LogicalCpuCores}` *\n`{Host:OneAgentCustomHostName}` * `{Host:OperatingSystemVersion}` * `{Host:PaasMemoryLimit}` * `{HostGroup:Name}` *\n`{KubernetesCluster:Name}` * `{KubernetesNode:DetectedName}` * `{OpenstackAvailabilityZone:Name}` *\n`{OpenstackZone:Name}` * `{OpenstackComputeNode:Name}` * `{OpenstackProject:Name}` * `{OpenstackVm:InstanceType}` *\n`{OpenstackVm:Name}` * `{OpenstackVm:SecurityGroup}` * `{ProcessGroup:AmazonECRImageAccountId}` *\n`{ProcessGroup:AmazonECRImageRegion}` * `{ProcessGroup:AmazonECSCluster}` * `{ProcessGroup:AmazonECSContainerName}` *\n`{ProcessGroup:AmazonECSFamily}` * `{ProcessGroup:AmazonECSRevision}` * `{ProcessGroup:AmazonLambdaFunctionName}` *\n`{ProcessGroup:AmazonRegion}` * `{ProcessGroup:ApacheConfigPath}` * `{ProcessGroup:ApacheSparkMasterIpAddress}` *\n`{ProcessGroup:AspDotNetCoreApplicationPath}` * `{ProcessGroup:AspDotNetCoreApplicationPath}` *\n`{ProcessGroup:AzureHostName}` * `{ProcessGroup:AzureSiteName}` * `{ProcessGroup:CassandraClusterName}` *\n`{ProcessGroup:CatalinaBase}` * `{ProcessGroup:CatalinaHome}` * `{ProcessGroup:CloudFoundryAppId}` *\n`{ProcessGroup:CloudFoundryAppName}` * `{ProcessGroup:CloudFoundryInstanceIndex}` * `{ProcessGroup:CloudFoundrySpaceId}`\n* `{ProcessGroup:CloudFoundrySpaceName}` * `{ProcessGroup:ColdFusionJvmConfigFile}` *\n`{ProcessGroup:ColdFusionServiceName}` * `{ProcessGroup:CommandLineArgs}` * `{ProcessGroup:DetectedName}` *\n`{ProcessGroup:DotNetCommandPath}` * `{ProcessGroup:DotNetCommand}` * `{ProcessGroup:DotNetClusterId}` *\n`{ProcessGroup:DotNetNodeId}` * `{ProcessGroup:ElasticsearchClusterName}` * `{ProcessGroup:ElasticsearchNodeName}` *\n`{ProcessGroup:EquinoxConfigPath}` * `{ProcessGroup:ExeName}` * `{ProcessGroup:ExePath}` *\n`{ProcessGroup:GlassFishDomainName}` * `{ProcessGroup:GlassFishInstanceName}` * `{ProcessGroup:GoogleAppEngineInstance}`\n* `{ProcessGroup:GoogleAppEngineService}` * `{ProcessGroup:GoogleCloudProject}` * `{ProcessGroup:HybrisBinDirectory}` *\n`{ProcessGroup:HybrisConfigDirectory}` * `{ProcessGroup:HybrisConfigDirectory}` * `{ProcessGroup:HybrisDataDirectory}` *\n`{ProcessGroup:IBMCicsRegion}` * `{ProcessGroup:IBMCtgName}` * `{ProcessGroup:IBMImsConnectRegion}` *\n`{ProcessGroup:IBMImsControlRegion}` * `{ProcessGroup:IBMImsMessageProcessingRegion}` *\n`{ProcessGroup:IBMImsSoapGwName}` * `{ProcessGroup:IBMIntegrationNodeName}` * `{ProcessGroup:IBMIntegrationServerName}`\n* `{ProcessGroup:IISAppPool}` * `{ProcessGroup:IISRoleName}` * `{ProcessGroup:JbossHome}` * `{ProcessGroup:JbossMode}` *\n`{ProcessGroup:JbossServerName}` * `{ProcessGroup:JavaJarFile}` * `{ProcessGroup:JavaJarPath}` *\n`{ProcessGroup:JavaMainCLass}` * `{ProcessGroup:KubernetesBasePodName}` * `{ProcessGroup:KubernetesContainerName}` *\n`{ProcessGroup:KubernetesFullPodName}` * `{ProcessGroup:KubernetesNamespace}` * `{ProcessGroup:KubernetesPodUid}` *\n`{ProcessGroup:MssqlInstanceName}` * `{ProcessGroup:NodeJsAppBaseDirectory}` * `{ProcessGroup:NodeJsAppName}` *\n`{ProcessGroup:NodeJsScriptName}` * `{ProcessGroup:OracleSid}` * `{ProcessGroup:PHPScriptPath}` *\n`{ProcessGroup:PHPWorkingDirectory}` * `{ProcessGroup:Ports}` * `{ProcessGroup:RubyAppRootPath}` *\n`{ProcessGroup:RubyScriptPath}` * `{ProcessGroup:SoftwareAGInstallRoot}` *\n`{ProcessGroup:SoftwareAGProductPropertyName}` * `{ProcessGroup:SpringBootAppName}` *\n`{ProcessGroup:SpringBootProfileName}` * `{ProcessGroup:SpringBootStartupClass}` *\n`{ProcessGroup:TIBCOBusinessWorksAppNodeName}` * `{ProcessGroup:TIBCOBusinessWorksAppSpaceName}` *\n`{ProcessGroup:TIBCOBusinessWorksCeAppName}` * `{ProcessGroup:TIBCOBusinessWorksCeVersion}` *\n`{ProcessGroup:TIBCOBusinessWorksDomainName}` * `{ProcessGroup:TIBCOBusinessWorksEnginePropertyFilePath}` *\n`{ProcessGroup:TIBCOBusinessWorksEnginePropertyFile}` * `{ProcessGroup:TIBCOBusinessWorksHome}` *\n`{ProcessGroup:VarnishInstanceName}` * `{ProcessGroup:WebLogicClusterName}` * `{ProcessGroup:WebLogicDomainName}` *\n`{ProcessGroup:WebLogicHome}` * `{ProcessGroup:WebLogicName}` * `{ProcessGroup:WebSphereCellName}` *\n`{ProcessGroup:WebSphereClusterName}` * `{ProcessGroup:WebSphereNodeName}` * `{ProcessGroup:WebSphereServerName}` *\n`{ProcessGroup:ActorSystem}` * `{Service:STGServerName}` * `{Service:DatabaseHostName}` * `{Service:DatabaseName}` *\n`{Service:DatabaseVendor}` * `{Service:DetectedName}` * `{Service:EndpointPath}` * `{Service:EndpointPathGatewayUrl}` *\n`{Service:IIBApplicationName}` * `{Service:MessageListenerClassName}` * `{Service:Port}` * `{Service:PublicDomainName}`\n* `{Service:RemoteEndpoint}` * `{Service:RemoteName}` * `{Service:WebApplicationId}` * `{Service:WebContextRoot}` *\n`{Service:WebServerName}` * `{Service:WebServiceNamespace}` * `{Service:WebServiceName}` * `{VmwareDatacenter:Name}` *\n`{VmwareVm:Name}\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the rule\n"
                    },
                    "unknowns": {
                        "type": "string",
                        "description": "allows for configuring properties that are not explicitly supported by the current version of this provider\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/serviceNowNotification:ServiceNowNotification": {
            "properties": {
                "active": {
                    "type": "boolean",
                    "description": "The configuration is enabled (`true`) or disabled (`false`)\n"
                },
                "events": {
                    "type": "boolean",
                    "description": "Send events into ServiceNow ITOM\n"
                },
                "formatProblemDetailsAsText": {
                    "type": "boolean",
                    "description": "Use text format for problem details instead of HTML.\n"
                },
                "incidents": {
                    "type": "boolean",
                    "description": "Send incidents into ServiceNow ITSM\n"
                },
                "instance": {
                    "type": "string",
                    "description": "The ServiceNow instance identifier. It refers to the first part of your own ServiceNow URL. This field is mutually\nexclusive with the **url** field. You can only use one of them\n"
                },
                "legacyId": {
                    "type": "string",
                    "description": "The ID of these settings when referred to from resources requiring the REST API V1 keys\n"
                },
                "message": {
                    "type": "string",
                    "description": "The content of the ServiceNow description. You can use the following placeholders: * `{ImpactedEntity}`: The entity\nimpacted by the problem or *X* impacted entities. * `{PID}`: The ID of the reported problem. * `{ProblemDetailsHTML}`:\nAll problem event details, including root cause, as an HTML-formatted string. * `{ProblemID}`: The display number of the\nreported problem. * `{ProblemImpact}`: The [impact\nlevel](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are\n`APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`. * `{ProblemSeverity}`: The [severity\nlevel](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`,\n`ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`. * `{ProblemTitle}`: A short description of the\nproblem. * `{ProblemURL}`: The URL of the problem within Dynatrace. * `{State}`: The state of the problem. Possible\nvalues are `OPEN` and `RESOLVED`. * `{Tags}`: The list of tags that are defined for all impacted entities, separated by\ncommas\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the notification configuration\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password to the ServiceNow account\n",
                    "secret": true
                },
                "profile": {
                    "type": "string",
                    "description": "The ID of the associated alerting profile\n"
                },
                "url": {
                    "type": "string",
                    "description": "The URL of the on-premise ServiceNow installation. This field is mutually exclusive with the **instance** field. You can\nonly use one of them\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username of the ServiceNow account. Make sure that your user account has the `rest_service`, `web_request_admin`,\nand `x_dynat_ruxit.Integration` roles\n"
                }
            },
            "required": [
                "active",
                "incidents",
                "legacyId",
                "message",
                "name",
                "profile",
                "username"
            ],
            "inputProperties": {
                "active": {
                    "type": "boolean",
                    "description": "The configuration is enabled (`true`) or disabled (`false`)\n"
                },
                "events": {
                    "type": "boolean",
                    "description": "Send events into ServiceNow ITOM\n"
                },
                "formatProblemDetailsAsText": {
                    "type": "boolean",
                    "description": "Use text format for problem details instead of HTML.\n"
                },
                "incidents": {
                    "type": "boolean",
                    "description": "Send incidents into ServiceNow ITSM\n"
                },
                "instance": {
                    "type": "string",
                    "description": "The ServiceNow instance identifier. It refers to the first part of your own ServiceNow URL. This field is mutually\nexclusive with the **url** field. You can only use one of them\n"
                },
                "legacyId": {
                    "type": "string",
                    "description": "The ID of these settings when referred to from resources requiring the REST API V1 keys\n"
                },
                "message": {
                    "type": "string",
                    "description": "The content of the ServiceNow description. You can use the following placeholders: * `{ImpactedEntity}`: The entity\nimpacted by the problem or *X* impacted entities. * `{PID}`: The ID of the reported problem. * `{ProblemDetailsHTML}`:\nAll problem event details, including root cause, as an HTML-formatted string. * `{ProblemID}`: The display number of the\nreported problem. * `{ProblemImpact}`: The [impact\nlevel](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are\n`APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`. * `{ProblemSeverity}`: The [severity\nlevel](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`,\n`ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`. * `{ProblemTitle}`: A short description of the\nproblem. * `{ProblemURL}`: The URL of the problem within Dynatrace. * `{State}`: The state of the problem. Possible\nvalues are `OPEN` and `RESOLVED`. * `{Tags}`: The list of tags that are defined for all impacted entities, separated by\ncommas\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the notification configuration\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password to the ServiceNow account\n",
                    "secret": true
                },
                "profile": {
                    "type": "string",
                    "description": "The ID of the associated alerting profile\n"
                },
                "url": {
                    "type": "string",
                    "description": "The URL of the on-premise ServiceNow installation. This field is mutually exclusive with the **instance** field. You can\nonly use one of them\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username of the ServiceNow account. Make sure that your user account has the `rest_service`, `web_request_admin`,\nand `x_dynat_ruxit.Integration` roles\n"
                }
            },
            "requiredInputs": [
                "active",
                "incidents",
                "message",
                "profile",
                "username"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceNowNotification resources.\n",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "description": "The configuration is enabled (`true`) or disabled (`false`)\n"
                    },
                    "events": {
                        "type": "boolean",
                        "description": "Send events into ServiceNow ITOM\n"
                    },
                    "formatProblemDetailsAsText": {
                        "type": "boolean",
                        "description": "Use text format for problem details instead of HTML.\n"
                    },
                    "incidents": {
                        "type": "boolean",
                        "description": "Send incidents into ServiceNow ITSM\n"
                    },
                    "instance": {
                        "type": "string",
                        "description": "The ServiceNow instance identifier. It refers to the first part of your own ServiceNow URL. This field is mutually\nexclusive with the **url** field. You can only use one of them\n"
                    },
                    "legacyId": {
                        "type": "string",
                        "description": "The ID of these settings when referred to from resources requiring the REST API V1 keys\n"
                    },
                    "message": {
                        "type": "string",
                        "description": "The content of the ServiceNow description. You can use the following placeholders: * `{ImpactedEntity}`: The entity\nimpacted by the problem or *X* impacted entities. * `{PID}`: The ID of the reported problem. * `{ProblemDetailsHTML}`:\nAll problem event details, including root cause, as an HTML-formatted string. * `{ProblemID}`: The display number of the\nreported problem. * `{ProblemImpact}`: The [impact\nlevel](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are\n`APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`. * `{ProblemSeverity}`: The [severity\nlevel](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`,\n`ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`. * `{ProblemTitle}`: A short description of the\nproblem. * `{ProblemURL}`: The URL of the problem within Dynatrace. * `{State}`: The state of the problem. Possible\nvalues are `OPEN` and `RESOLVED`. * `{Tags}`: The list of tags that are defined for all impacted entities, separated by\ncommas\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the notification configuration\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "The password to the ServiceNow account\n",
                        "secret": true
                    },
                    "profile": {
                        "type": "string",
                        "description": "The ID of the associated alerting profile\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "The URL of the on-premise ServiceNow installation. This field is mutually exclusive with the **instance** field. You can\nonly use one of them\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "The username of the ServiceNow account. Make sure that your user account has the `rest_service`, `web_request_admin`,\nand `x_dynat_ruxit.Integration` roles\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/sessionReplayResourceCapture:SessionReplayResourceCapture": {
            "properties": {
                "applicationId": {
                    "type": "string",
                    "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.\n"
                },
                "enableResourceCapturing": {
                    "type": "boolean",
                    "description": "(Field has overlap with `dynatrace_web_application`) When turned on, all CSS resources from all sessions are captured.\nFor details, see [Resource capture](https://dt-url.net/sr-resource-capturing).\n"
                },
                "resourceCaptureUrlExclusionPatternLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(Field has overlap with `dynatrace_web_application`) Add exclusion rules to avoid the capture of resources from certain\npages.\n"
                }
            },
            "required": [
                "enableResourceCapturing"
            ],
            "inputProperties": {
                "applicationId": {
                    "type": "string",
                    "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.\n",
                    "willReplaceOnChanges": true
                },
                "enableResourceCapturing": {
                    "type": "boolean",
                    "description": "(Field has overlap with `dynatrace_web_application`) When turned on, all CSS resources from all sessions are captured.\nFor details, see [Resource capture](https://dt-url.net/sr-resource-capturing).\n"
                },
                "resourceCaptureUrlExclusionPatternLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(Field has overlap with `dynatrace_web_application`) Add exclusion rules to avoid the capture of resources from certain\npages.\n"
                }
            },
            "requiredInputs": [
                "enableResourceCapturing"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SessionReplayResourceCapture resources.\n",
                "properties": {
                    "applicationId": {
                        "type": "string",
                        "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.\n",
                        "willReplaceOnChanges": true
                    },
                    "enableResourceCapturing": {
                        "type": "boolean",
                        "description": "(Field has overlap with `dynatrace_web_application`) When turned on, all CSS resources from all sessions are captured.\nFor details, see [Resource capture](https://dt-url.net/sr-resource-capturing).\n"
                    },
                    "resourceCaptureUrlExclusionPatternLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(Field has overlap with `dynatrace_web_application`) Add exclusion rules to avoid the capture of resources from certain\npages.\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/sessionReplayWebPrivacy:SessionReplayWebPrivacy": {
            "properties": {
                "applicationId": {
                    "type": "string",
                    "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.\n"
                },
                "enableOptInMode": {
                    "type": "boolean",
                    "description": "(Field has overlap with `dynatrace_application_data_privacy`) When [Session Replay opt-in\nmode](https://dt-url.net/sr-opt-in-mode) is turned on, Session Replay is deactivated until explicitly activated via an\nAPI call.\n"
                },
                "maskingPresets": {
                    "$ref": "#/types/dynatrace:index/SessionReplayWebPrivacyMaskingPresets:SessionReplayWebPrivacyMaskingPresets",
                    "description": "(Field has overlap with `dynatrace_application_data_privacy`) To protect your end users' privacy, select or customize\n[predefined masking options](https://dt-url.net/sr-masking-preset-options) that suit your content recording and playback\nrequirements.\n"
                },
                "urlExclusionPatternLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(Field has overlap with `dynatrace_application_data_privacy`) Exclude webpages or views from Session Replay recording by\nadding [URL exclusion rules](https://dt-url.net/sr-url-exclusion)\n"
                }
            },
            "required": [
                "enableOptInMode",
                "maskingPresets"
            ],
            "inputProperties": {
                "applicationId": {
                    "type": "string",
                    "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.\n",
                    "willReplaceOnChanges": true
                },
                "enableOptInMode": {
                    "type": "boolean",
                    "description": "(Field has overlap with `dynatrace_application_data_privacy`) When [Session Replay opt-in\nmode](https://dt-url.net/sr-opt-in-mode) is turned on, Session Replay is deactivated until explicitly activated via an\nAPI call.\n"
                },
                "maskingPresets": {
                    "$ref": "#/types/dynatrace:index/SessionReplayWebPrivacyMaskingPresets:SessionReplayWebPrivacyMaskingPresets",
                    "description": "(Field has overlap with `dynatrace_application_data_privacy`) To protect your end users' privacy, select or customize\n[predefined masking options](https://dt-url.net/sr-masking-preset-options) that suit your content recording and playback\nrequirements.\n"
                },
                "urlExclusionPatternLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(Field has overlap with `dynatrace_application_data_privacy`) Exclude webpages or views from Session Replay recording by\nadding [URL exclusion rules](https://dt-url.net/sr-url-exclusion)\n"
                }
            },
            "requiredInputs": [
                "enableOptInMode",
                "maskingPresets"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SessionReplayWebPrivacy resources.\n",
                "properties": {
                    "applicationId": {
                        "type": "string",
                        "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.\n",
                        "willReplaceOnChanges": true
                    },
                    "enableOptInMode": {
                        "type": "boolean",
                        "description": "(Field has overlap with `dynatrace_application_data_privacy`) When [Session Replay opt-in\nmode](https://dt-url.net/sr-opt-in-mode) is turned on, Session Replay is deactivated until explicitly activated via an\nAPI call.\n"
                    },
                    "maskingPresets": {
                        "$ref": "#/types/dynatrace:index/SessionReplayWebPrivacyMaskingPresets:SessionReplayWebPrivacyMaskingPresets",
                        "description": "(Field has overlap with `dynatrace_application_data_privacy`) To protect your end users' privacy, select or customize\n[predefined masking options](https://dt-url.net/sr-masking-preset-options) that suit your content recording and playback\nrequirements.\n"
                    },
                    "urlExclusionPatternLists": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(Field has overlap with `dynatrace_application_data_privacy`) Exclude webpages or views from Session Replay recording by\nadding [URL exclusion rules](https://dt-url.net/sr-url-exclusion)\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/siteReliabilityGuardian:SiteReliabilityGuardian": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name\n"
                },
                "objectives": {
                    "$ref": "#/types/dynatrace:index/SiteReliabilityGuardianObjectives:SiteReliabilityGuardianObjectives",
                    "description": "Objectives\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Define key/value pairs that further describe this guardian.\n"
                },
                "variables": {
                    "$ref": "#/types/dynatrace:index/SiteReliabilityGuardianVariables:SiteReliabilityGuardianVariables",
                    "description": "Define variables for dynamically defining DQL queries\n"
                }
            },
            "required": [
                "name",
                "objectives"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name\n"
                },
                "objectives": {
                    "$ref": "#/types/dynatrace:index/SiteReliabilityGuardianObjectives:SiteReliabilityGuardianObjectives",
                    "description": "Objectives\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Define key/value pairs that further describe this guardian.\n"
                },
                "variables": {
                    "$ref": "#/types/dynatrace:index/SiteReliabilityGuardianVariables:SiteReliabilityGuardianVariables",
                    "description": "Define variables for dynamically defining DQL queries\n"
                }
            },
            "requiredInputs": [
                "objectives"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SiteReliabilityGuardian resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name\n"
                    },
                    "objectives": {
                        "$ref": "#/types/dynatrace:index/SiteReliabilityGuardianObjectives:SiteReliabilityGuardianObjectives",
                        "description": "Objectives\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Define key/value pairs that further describe this guardian.\n"
                    },
                    "variables": {
                        "$ref": "#/types/dynatrace:index/SiteReliabilityGuardianVariables:SiteReliabilityGuardianVariables",
                        "description": "Define variables for dynamically defining DQL queries\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/slackNotification:SlackNotification": {
            "properties": {
                "active": {
                    "type": "boolean",
                    "description": "The configuration is enabled (`true`) or disabled (`false`)\n"
                },
                "channel": {
                    "type": "string",
                    "description": "The channel (for example, `#general`) or the user (for example, `@john.smith`) to send the message to\n"
                },
                "legacyId": {
                    "type": "string",
                    "description": "The ID of these settings when referred to from resources requiring the REST API V1 keys\n"
                },
                "message": {
                    "type": "string",
                    "description": "The content of the message. You can use the following placeholders: * `{ImpactedEntity}`: The entity impacted by the\nproblem or *X* impacted entities. * `{PID}`: The ID of the reported problem. * `{ProblemDetailsText}`: All problem event\ndetails, including root cause, as a text-formatted string. * `{ProblemID}`: The display number of the reported problem.\n* `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the\nproblem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`. * `{ProblemSeverity}`: The [severity\nlevel](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`,\n`ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`. * `{ProblemTitle}`: A short description of the\nproblem. * `{ProblemURL}`: The URL of the problem within Dynatrace. * `{State}`: The state of the problem. Possible\nvalues are `OPEN` and `RESOLVED`. * `{Tags}`: The list of tags that are defined for all impacted entities, separated by\ncommas\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the notification configuration\n"
                },
                "profile": {
                    "type": "string",
                    "description": "The ID of the associated alerting profile\n"
                },
                "url": {
                    "type": "string",
                    "description": "The URL of the Slack WebHook. This is confidential information, therefore GET requests return this field with the `null`\nvalue, and it is optional for PUT requests\n",
                    "secret": true
                }
            },
            "required": [
                "active",
                "channel",
                "legacyId",
                "message",
                "name",
                "profile",
                "url"
            ],
            "inputProperties": {
                "active": {
                    "type": "boolean",
                    "description": "The configuration is enabled (`true`) or disabled (`false`)\n"
                },
                "channel": {
                    "type": "string",
                    "description": "The channel (for example, `#general`) or the user (for example, `@john.smith`) to send the message to\n"
                },
                "legacyId": {
                    "type": "string",
                    "description": "The ID of these settings when referred to from resources requiring the REST API V1 keys\n"
                },
                "message": {
                    "type": "string",
                    "description": "The content of the message. You can use the following placeholders: * `{ImpactedEntity}`: The entity impacted by the\nproblem or *X* impacted entities. * `{PID}`: The ID of the reported problem. * `{ProblemDetailsText}`: All problem event\ndetails, including root cause, as a text-formatted string. * `{ProblemID}`: The display number of the reported problem.\n* `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the\nproblem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`. * `{ProblemSeverity}`: The [severity\nlevel](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`,\n`ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`. * `{ProblemTitle}`: A short description of the\nproblem. * `{ProblemURL}`: The URL of the problem within Dynatrace. * `{State}`: The state of the problem. Possible\nvalues are `OPEN` and `RESOLVED`. * `{Tags}`: The list of tags that are defined for all impacted entities, separated by\ncommas\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the notification configuration\n"
                },
                "profile": {
                    "type": "string",
                    "description": "The ID of the associated alerting profile\n"
                },
                "url": {
                    "type": "string",
                    "description": "The URL of the Slack WebHook. This is confidential information, therefore GET requests return this field with the `null`\nvalue, and it is optional for PUT requests\n",
                    "secret": true
                }
            },
            "requiredInputs": [
                "active",
                "channel",
                "message",
                "profile",
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SlackNotification resources.\n",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "description": "The configuration is enabled (`true`) or disabled (`false`)\n"
                    },
                    "channel": {
                        "type": "string",
                        "description": "The channel (for example, `#general`) or the user (for example, `@john.smith`) to send the message to\n"
                    },
                    "legacyId": {
                        "type": "string",
                        "description": "The ID of these settings when referred to from resources requiring the REST API V1 keys\n"
                    },
                    "message": {
                        "type": "string",
                        "description": "The content of the message. You can use the following placeholders: * `{ImpactedEntity}`: The entity impacted by the\nproblem or *X* impacted entities. * `{PID}`: The ID of the reported problem. * `{ProblemDetailsText}`: All problem event\ndetails, including root cause, as a text-formatted string. * `{ProblemID}`: The display number of the reported problem.\n* `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the\nproblem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`. * `{ProblemSeverity}`: The [severity\nlevel](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`,\n`ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`. * `{ProblemTitle}`: A short description of the\nproblem. * `{ProblemURL}`: The URL of the problem within Dynatrace. * `{State}`: The state of the problem. Possible\nvalues are `OPEN` and `RESOLVED`. * `{Tags}`: The list of tags that are defined for all impacted entities, separated by\ncommas\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the notification configuration\n"
                    },
                    "profile": {
                        "type": "string",
                        "description": "The ID of the associated alerting profile\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "The URL of the Slack WebHook. This is confidential information, therefore GET requests return this field with the `null`\nvalue, and it is optional for PUT requests\n",
                        "secret": true
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/slo:Slo": {
            "properties": {
                "denominator": {
                    "type": "string",
                    "description": "The total count metric (the denominator in rate calculation)\n"
                },
                "description": {
                    "type": "string",
                    "description": "The custom description of the SLO (optional)\n"
                },
                "disabled": {
                    "type": "boolean",
                    "description": "The SLO is enabled (`false`) or disabled (`true`)\n"
                },
                "errorBudgetBurnRate": {
                    "$ref": "#/types/dynatrace:index/SloErrorBudgetBurnRate:SloErrorBudgetBurnRate",
                    "description": "Error budget burn rate configuration of a service-level objective (SLO).\n"
                },
                "evaluation": {
                    "type": "string",
                    "description": "The evaluation type of the SLO. Currently only `AGGREGATE` is supported\n"
                },
                "filter": {
                    "type": "string",
                    "description": "The entity filter for the SLO evaluation. Use the [syntax of entity selector](https://dt-url.net/entityselector)\n"
                },
                "metricExpression": {
                    "type": "string",
                    "description": "The percentage-based metric expression for the calculation of the SLO\n"
                },
                "metricName": {
                    "type": "string",
                    "description": "The name that is used to create SLO func metrics keys. Once created, metric name cannot be changed.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the rule\n"
                },
                "numerator": {
                    "type": "string",
                    "description": "The metric for the count of successes (the numerator in rate calculation)\n",
                    "deprecationMessage": "`numerator` and `denominator` have been replaced by `metric_expression`"
                },
                "rate": {
                    "type": "string",
                    "description": "The percentage-based metric for the calculation of the SLO\n"
                },
                "target": {
                    "type": "number",
                    "description": "The target value of the SLO\n"
                },
                "timeframe": {
                    "type": "string",
                    "description": "The timeframe for the SLO evaluation. Use the syntax of the global timeframe selector\n"
                },
                "warning": {
                    "type": "number",
                    "description": "The warning value of the SLO. At warning state the SLO is still fulfilled but is getting close to failure\n"
                }
            },
            "required": [
                "evaluation",
                "name",
                "target",
                "timeframe",
                "warning"
            ],
            "inputProperties": {
                "denominator": {
                    "type": "string",
                    "description": "The total count metric (the denominator in rate calculation)\n"
                },
                "description": {
                    "type": "string",
                    "description": "The custom description of the SLO (optional)\n"
                },
                "disabled": {
                    "type": "boolean",
                    "description": "The SLO is enabled (`false`) or disabled (`true`)\n"
                },
                "errorBudgetBurnRate": {
                    "$ref": "#/types/dynatrace:index/SloErrorBudgetBurnRate:SloErrorBudgetBurnRate",
                    "description": "Error budget burn rate configuration of a service-level objective (SLO).\n"
                },
                "evaluation": {
                    "type": "string",
                    "description": "The evaluation type of the SLO. Currently only `AGGREGATE` is supported\n"
                },
                "filter": {
                    "type": "string",
                    "description": "The entity filter for the SLO evaluation. Use the [syntax of entity selector](https://dt-url.net/entityselector)\n"
                },
                "metricExpression": {
                    "type": "string",
                    "description": "The percentage-based metric expression for the calculation of the SLO\n"
                },
                "metricName": {
                    "type": "string",
                    "description": "The name that is used to create SLO func metrics keys. Once created, metric name cannot be changed.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the rule\n"
                },
                "numerator": {
                    "type": "string",
                    "description": "The metric for the count of successes (the numerator in rate calculation)\n",
                    "deprecationMessage": "`numerator` and `denominator` have been replaced by `metric_expression`"
                },
                "rate": {
                    "type": "string",
                    "description": "The percentage-based metric for the calculation of the SLO\n"
                },
                "target": {
                    "type": "number",
                    "description": "The target value of the SLO\n"
                },
                "timeframe": {
                    "type": "string",
                    "description": "The timeframe for the SLO evaluation. Use the syntax of the global timeframe selector\n"
                },
                "warning": {
                    "type": "number",
                    "description": "The warning value of the SLO. At warning state the SLO is still fulfilled but is getting close to failure\n"
                }
            },
            "requiredInputs": [
                "evaluation",
                "target",
                "timeframe",
                "warning"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Slo resources.\n",
                "properties": {
                    "denominator": {
                        "type": "string",
                        "description": "The total count metric (the denominator in rate calculation)\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The custom description of the SLO (optional)\n"
                    },
                    "disabled": {
                        "type": "boolean",
                        "description": "The SLO is enabled (`false`) or disabled (`true`)\n"
                    },
                    "errorBudgetBurnRate": {
                        "$ref": "#/types/dynatrace:index/SloErrorBudgetBurnRate:SloErrorBudgetBurnRate",
                        "description": "Error budget burn rate configuration of a service-level objective (SLO).\n"
                    },
                    "evaluation": {
                        "type": "string",
                        "description": "The evaluation type of the SLO. Currently only `AGGREGATE` is supported\n"
                    },
                    "filter": {
                        "type": "string",
                        "description": "The entity filter for the SLO evaluation. Use the [syntax of entity selector](https://dt-url.net/entityselector)\n"
                    },
                    "metricExpression": {
                        "type": "string",
                        "description": "The percentage-based metric expression for the calculation of the SLO\n"
                    },
                    "metricName": {
                        "type": "string",
                        "description": "The name that is used to create SLO func metrics keys. Once created, metric name cannot be changed.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the rule\n"
                    },
                    "numerator": {
                        "type": "string",
                        "description": "The metric for the count of successes (the numerator in rate calculation)\n",
                        "deprecationMessage": "`numerator` and `denominator` have been replaced by `metric_expression`"
                    },
                    "rate": {
                        "type": "string",
                        "description": "The percentage-based metric for the calculation of the SLO\n"
                    },
                    "target": {
                        "type": "number",
                        "description": "The target value of the SLO\n"
                    },
                    "timeframe": {
                        "type": "string",
                        "description": "The timeframe for the SLO evaluation. Use the syntax of the global timeframe selector\n"
                    },
                    "warning": {
                        "type": "number",
                        "description": "The warning value of the SLO. At warning state the SLO is still fulfilled but is getting close to failure\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/sloNormalization:SloNormalization": {
            "properties": {
                "normalize": {
                    "type": "boolean",
                    "description": "When set to true, the error budget left will be shown in percent of the total error budget. For more details see [SLO\nnormalization help](https://dt-url.net/slo-normalize-error-budget).\n"
                }
            },
            "required": [
                "normalize"
            ],
            "inputProperties": {
                "normalize": {
                    "type": "boolean",
                    "description": "When set to true, the error budget left will be shown in percent of the total error budget. For more details see [SLO\nnormalization help](https://dt-url.net/slo-normalize-error-budget).\n"
                }
            },
            "requiredInputs": [
                "normalize"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SloNormalization resources.\n",
                "properties": {
                    "normalize": {
                        "type": "boolean",
                        "description": "When set to true, the error budget left will be shown in percent of the total error budget. For more details see [SLO\nnormalization help](https://dt-url.net/slo-normalize-error-budget).\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/sloV2:SloV2": {
            "properties": {
                "customDescription": {
                    "type": "string",
                    "description": "The description of the SLO\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "errorBudgetBurnRate": {
                    "$ref": "#/types/dynatrace:index/SloV2ErrorBudgetBurnRate:SloV2ErrorBudgetBurnRate",
                    "description": "### Error budget burn rate\n"
                },
                "evaluationType": {
                    "type": "string",
                    "description": "Possible Values: `AGGREGATE`\n"
                },
                "evaluationWindow": {
                    "type": "string",
                    "description": "Define the timeframe during which the SLO is to be evaluated. For the timeframe you can enter expressions like -1h (last\nhour), -1w (last week) or complex expressions like -2d to now (last two days), -1d/d to now/d (beginning of yesterday to\nbeginning of today).\n"
                },
                "filter": {
                    "type": "string",
                    "description": "Set a filter parameter (entitySelector) on any GET call to evaluate this SLO against specific services only (for\nexample, type(\"SERVICE\")). For details, see the [Entity Selector documentation](https://dt-url.net/entityselector).\n"
                },
                "legacyId": {
                    "type": "string",
                    "description": "The ID of this setting when referred to by the Config REST API V1\n"
                },
                "metricExpression": {
                    "type": "string",
                    "description": "For details, see the [Metrics page](/ui/metrics \"Metrics page\").\n"
                },
                "metricName": {
                    "type": "string",
                    "description": "Metric name\n"
                },
                "name": {
                    "type": "string",
                    "description": "SLO name\n"
                },
                "targetSuccess": {
                    "type": "number",
                    "description": "Set the target value of the SLO. A percentage below this value indicates a failure.\n"
                },
                "targetWarning": {
                    "type": "number",
                    "description": "Set the warning value of the SLO. At the warning state the SLO is fulfilled. However, it is getting close to a failure.\n"
                }
            },
            "required": [
                "enabled",
                "errorBudgetBurnRate",
                "evaluationType",
                "evaluationWindow",
                "filter",
                "legacyId",
                "metricExpression",
                "metricName",
                "name",
                "targetSuccess",
                "targetWarning"
            ],
            "inputProperties": {
                "customDescription": {
                    "type": "string",
                    "description": "The description of the SLO\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "errorBudgetBurnRate": {
                    "$ref": "#/types/dynatrace:index/SloV2ErrorBudgetBurnRate:SloV2ErrorBudgetBurnRate",
                    "description": "### Error budget burn rate\n"
                },
                "evaluationType": {
                    "type": "string",
                    "description": "Possible Values: `AGGREGATE`\n"
                },
                "evaluationWindow": {
                    "type": "string",
                    "description": "Define the timeframe during which the SLO is to be evaluated. For the timeframe you can enter expressions like -1h (last\nhour), -1w (last week) or complex expressions like -2d to now (last two days), -1d/d to now/d (beginning of yesterday to\nbeginning of today).\n"
                },
                "filter": {
                    "type": "string",
                    "description": "Set a filter parameter (entitySelector) on any GET call to evaluate this SLO against specific services only (for\nexample, type(\"SERVICE\")). For details, see the [Entity Selector documentation](https://dt-url.net/entityselector).\n"
                },
                "legacyId": {
                    "type": "string",
                    "description": "The ID of this setting when referred to by the Config REST API V1\n"
                },
                "metricExpression": {
                    "type": "string",
                    "description": "For details, see the [Metrics page](/ui/metrics \"Metrics page\").\n"
                },
                "metricName": {
                    "type": "string",
                    "description": "Metric name\n"
                },
                "name": {
                    "type": "string",
                    "description": "SLO name\n"
                },
                "targetSuccess": {
                    "type": "number",
                    "description": "Set the target value of the SLO. A percentage below this value indicates a failure.\n"
                },
                "targetWarning": {
                    "type": "number",
                    "description": "Set the warning value of the SLO. At the warning state the SLO is fulfilled. However, it is getting close to a failure.\n"
                }
            },
            "requiredInputs": [
                "enabled",
                "errorBudgetBurnRate",
                "evaluationType",
                "evaluationWindow",
                "filter",
                "metricExpression",
                "targetSuccess",
                "targetWarning"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SloV2 resources.\n",
                "properties": {
                    "customDescription": {
                        "type": "string",
                        "description": "The description of the SLO\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                    },
                    "errorBudgetBurnRate": {
                        "$ref": "#/types/dynatrace:index/SloV2ErrorBudgetBurnRate:SloV2ErrorBudgetBurnRate",
                        "description": "### Error budget burn rate\n"
                    },
                    "evaluationType": {
                        "type": "string",
                        "description": "Possible Values: `AGGREGATE`\n"
                    },
                    "evaluationWindow": {
                        "type": "string",
                        "description": "Define the timeframe during which the SLO is to be evaluated. For the timeframe you can enter expressions like -1h (last\nhour), -1w (last week) or complex expressions like -2d to now (last two days), -1d/d to now/d (beginning of yesterday to\nbeginning of today).\n"
                    },
                    "filter": {
                        "type": "string",
                        "description": "Set a filter parameter (entitySelector) on any GET call to evaluate this SLO against specific services only (for\nexample, type(\"SERVICE\")). For details, see the [Entity Selector documentation](https://dt-url.net/entityselector).\n"
                    },
                    "legacyId": {
                        "type": "string",
                        "description": "The ID of this setting when referred to by the Config REST API V1\n"
                    },
                    "metricExpression": {
                        "type": "string",
                        "description": "For details, see the [Metrics page](/ui/metrics \"Metrics page\").\n"
                    },
                    "metricName": {
                        "type": "string",
                        "description": "Metric name\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "SLO name\n"
                    },
                    "targetSuccess": {
                        "type": "number",
                        "description": "Set the target value of the SLO. A percentage below this value indicates a failure.\n"
                    },
                    "targetWarning": {
                        "type": "number",
                        "description": "Set the warning value of the SLO. At the warning state the SLO is fulfilled. However, it is getting close to a failure.\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/spanAttribute:SpanAttribute": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Key of the span attribute to store\n"
                },
                "masking": {
                    "type": "string",
                    "description": "Possible Values: `MASK_ENTIRE_VALUE`, `MASK_ONLY_CONFIDENTIAL_DATA`, `NOT_MASKED`\n"
                },
                "persistent": {
                    "type": "boolean",
                    "description": "Prevents the Span Attribute from getting deleted when running `terraform destroy` - to be used for Span Attributes that\nare defined by default on every Dynatrace environment.\n"
                }
            },
            "required": [
                "key",
                "masking",
                "persistent"
            ],
            "inputProperties": {
                "key": {
                    "type": "string",
                    "description": "Key of the span attribute to store\n"
                },
                "masking": {
                    "type": "string",
                    "description": "Possible Values: `MASK_ENTIRE_VALUE`, `MASK_ONLY_CONFIDENTIAL_DATA`, `NOT_MASKED`\n"
                },
                "persistent": {
                    "type": "boolean",
                    "description": "Prevents the Span Attribute from getting deleted when running `terraform destroy` - to be used for Span Attributes that\nare defined by default on every Dynatrace environment.\n"
                }
            },
            "requiredInputs": [
                "key",
                "masking"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SpanAttribute resources.\n",
                "properties": {
                    "key": {
                        "type": "string",
                        "description": "Key of the span attribute to store\n"
                    },
                    "masking": {
                        "type": "string",
                        "description": "Possible Values: `MASK_ENTIRE_VALUE`, `MASK_ONLY_CONFIDENTIAL_DATA`, `NOT_MASKED`\n"
                    },
                    "persistent": {
                        "type": "boolean",
                        "description": "Prevents the Span Attribute from getting deleted when running `terraform destroy` - to be used for Span Attributes that\nare defined by default on every Dynatrace environment.\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/spanCaptureRule:SpanCaptureRule": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "Whether to create an entry point or not\n"
                },
                "insertAfter": {
                    "type": "string",
                    "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                },
                "matches": {
                    "$ref": "#/types/dynatrace:index/SpanCaptureRuleMatches:SpanCaptureRuleMatches",
                    "description": "Matching strategies for the Span\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the rule\n"
                }
            },
            "required": [
                "action",
                "insertAfter",
                "matches",
                "name"
            ],
            "inputProperties": {
                "action": {
                    "type": "string",
                    "description": "Whether to create an entry point or not\n"
                },
                "insertAfter": {
                    "type": "string",
                    "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                },
                "matches": {
                    "$ref": "#/types/dynatrace:index/SpanCaptureRuleMatches:SpanCaptureRuleMatches",
                    "description": "Matching strategies for the Span\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the rule\n"
                }
            },
            "requiredInputs": [
                "action",
                "matches"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SpanCaptureRule resources.\n",
                "properties": {
                    "action": {
                        "type": "string",
                        "description": "Whether to create an entry point or not\n"
                    },
                    "insertAfter": {
                        "type": "string",
                        "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                    },
                    "matches": {
                        "$ref": "#/types/dynatrace:index/SpanCaptureRuleMatches:SpanCaptureRuleMatches",
                        "description": "Matching strategies for the Span\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the rule\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/spanContextPropagation:SpanContextPropagation": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "Whether to create an entry point or not\n"
                },
                "insertAfter": {
                    "type": "string",
                    "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                },
                "matches": {
                    "$ref": "#/types/dynatrace:index/SpanContextPropagationMatches:SpanContextPropagationMatches",
                    "description": "Matching strategies for the Span\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the rule\n"
                }
            },
            "required": [
                "action",
                "insertAfter",
                "matches",
                "name"
            ],
            "inputProperties": {
                "action": {
                    "type": "string",
                    "description": "Whether to create an entry point or not\n"
                },
                "insertAfter": {
                    "type": "string",
                    "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                },
                "matches": {
                    "$ref": "#/types/dynatrace:index/SpanContextPropagationMatches:SpanContextPropagationMatches",
                    "description": "Matching strategies for the Span\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the rule\n"
                }
            },
            "requiredInputs": [
                "action",
                "matches"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SpanContextPropagation resources.\n",
                "properties": {
                    "action": {
                        "type": "string",
                        "description": "Whether to create an entry point or not\n"
                    },
                    "insertAfter": {
                        "type": "string",
                        "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                    },
                    "matches": {
                        "$ref": "#/types/dynatrace:index/SpanContextPropagationMatches:SpanContextPropagationMatches",
                        "description": "Matching strategies for the Span\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the rule\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/spanEntryPoint:SpanEntryPoint": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "Whether to create an entry point or not\n"
                },
                "insertAfter": {
                    "type": "string",
                    "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                },
                "matches": {
                    "$ref": "#/types/dynatrace:index/SpanEntryPointMatches:SpanEntryPointMatches",
                    "description": "Matching strategies for the Span\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the rule\n"
                }
            },
            "required": [
                "action",
                "insertAfter",
                "matches",
                "name"
            ],
            "inputProperties": {
                "action": {
                    "type": "string",
                    "description": "Whether to create an entry point or not\n"
                },
                "insertAfter": {
                    "type": "string",
                    "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                },
                "matches": {
                    "$ref": "#/types/dynatrace:index/SpanEntryPointMatches:SpanEntryPointMatches",
                    "description": "Matching strategies for the Span\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the rule\n"
                }
            },
            "requiredInputs": [
                "action",
                "matches"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SpanEntryPoint resources.\n",
                "properties": {
                    "action": {
                        "type": "string",
                        "description": "Whether to create an entry point or not\n"
                    },
                    "insertAfter": {
                        "type": "string",
                        "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                    },
                    "matches": {
                        "$ref": "#/types/dynatrace:index/SpanEntryPointMatches:SpanEntryPointMatches",
                        "description": "Matching strategies for the Span\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the rule\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/spanEvents:SpanEvents": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Key of the span event attribute to store\n"
                },
                "masking": {
                    "type": "string",
                    "description": "Possible Values: `MASK_ENTIRE_VALUE`, `MASK_ONLY_CONFIDENTIAL_DATA`, `NOT_MASKED`\n"
                }
            },
            "required": [
                "key",
                "masking"
            ],
            "inputProperties": {
                "key": {
                    "type": "string",
                    "description": "Key of the span event attribute to store\n"
                },
                "masking": {
                    "type": "string",
                    "description": "Possible Values: `MASK_ENTIRE_VALUE`, `MASK_ONLY_CONFIDENTIAL_DATA`, `NOT_MASKED`\n"
                }
            },
            "requiredInputs": [
                "key",
                "masking"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SpanEvents resources.\n",
                "properties": {
                    "key": {
                        "type": "string",
                        "description": "Key of the span event attribute to store\n"
                    },
                    "masking": {
                        "type": "string",
                        "description": "Possible Values: `MASK_ENTIRE_VALUE`, `MASK_ONLY_CONFIDENTIAL_DATA`, `NOT_MASKED`\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/syntheticAvailability:SyntheticAvailability": {
            "properties": {
                "excludeMaintenanceWindows": {
                    "type": "boolean",
                    "description": "Exclude periods with maintenance windows from availability calculation\n"
                }
            },
            "required": [
                "excludeMaintenanceWindows"
            ],
            "inputProperties": {
                "excludeMaintenanceWindows": {
                    "type": "boolean",
                    "description": "Exclude periods with maintenance windows from availability calculation\n"
                }
            },
            "requiredInputs": [
                "excludeMaintenanceWindows"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SyntheticAvailability resources.\n",
                "properties": {
                    "excludeMaintenanceWindows": {
                        "type": "boolean",
                        "description": "Exclude periods with maintenance windows from availability calculation\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/syntheticLocation:SyntheticLocation": {
            "properties": {
                "autoUpdateChromium": {
                    "type": "boolean",
                    "description": "Auto upgrade of Chromium is enabled (`true`) or disabled (`false`)\n"
                },
                "availabilityLocationOutage": {
                    "type": "boolean",
                    "description": "The alerting of location outage is enabled (`true`) or disabled (`false`)\n"
                },
                "availabilityNodeOutage": {
                    "type": "boolean",
                    "description": "The alerting of node outage is enabled (`true`) or disabled (`false`). If enabled, the outage of *any* node in the\nlocation triggers an alert\n"
                },
                "availabilityNotificationsEnabled": {
                    "type": "boolean",
                    "description": "The notifications of location and node outage is enabled (`true`) or disabled (`false`)\n"
                },
                "city": {
                    "type": "string",
                    "description": "The city of the location\n"
                },
                "countryCode": {
                    "type": "string",
                    "description": "The country code of the location. Use the alpha-2 code of the [ISO 3166-2 standard](https://dt-url.net/iso3166-2), (for\nexample, `AT` for Austria or `PL` for Poland)\n"
                },
                "deploymentType": {
                    "type": "string",
                    "description": "The deployment type of the location: * `STANDARD`: The location is deployed on Windows or Linux. * `KUBERNETES`: The\nlocation is deployed on Kubernetes\n"
                },
                "latitude": {
                    "type": "number",
                    "description": "The latitude of the location in `DDD.dddd` format\n"
                },
                "locationNodeOutageDelayInMinutes": {
                    "type": "integer",
                    "description": "Alert if the location or node outage lasts longer than *X* minutes. Only applicable when\n**availability_location_outage** or **availability_node_outage** is set to `true`\n"
                },
                "longitude": {
                    "type": "number",
                    "description": "The longitude of the location in `DDD.dddd` format\n"
                },
                "maxActiveGateCount": {
                    "type": "integer",
                    "description": "The maximum number of Active Gates required for that location. Not required when `deployment_type` is set to `STANDARD`\n"
                },
                "minActiveGateCount": {
                    "type": "integer",
                    "description": "The minimum number of Active Gates required for that location. Not required when `deployment_type` is set to `STANDARD`\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the location\n"
                },
                "nodeSize": {
                    "type": "string",
                    "description": "Possible values: `UNSUPPORTED`, `XS`, `S` and `M`. Not required when `deployment_type` is set to `STANDARD`.\n"
                },
                "nodes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of synthetic nodes belonging to the location. You can retrieve the list of available nodes with the [GET all\nnodes](https://dt-url.net/miy3rpl) call\n"
                },
                "regionCode": {
                    "type": "string",
                    "description": "The region code of the location. For the [USA](https://dt-url.net/iso3166us) or [Canada](https://dt-url.net/iso3166ca)\nuse ISO 3166-2 state codes (without `US-` or `CA-` prefix), for example, `VA` for Virginia or `OR` for Oregon. For the\nrest of the world use [FIPS 10-4 codes](https://dt-url.net/fipscodes)\n"
                }
            },
            "required": [
                "latitude",
                "longitude",
                "name"
            ],
            "inputProperties": {
                "autoUpdateChromium": {
                    "type": "boolean",
                    "description": "Auto upgrade of Chromium is enabled (`true`) or disabled (`false`)\n"
                },
                "availabilityLocationOutage": {
                    "type": "boolean",
                    "description": "The alerting of location outage is enabled (`true`) or disabled (`false`)\n"
                },
                "availabilityNodeOutage": {
                    "type": "boolean",
                    "description": "The alerting of node outage is enabled (`true`) or disabled (`false`). If enabled, the outage of *any* node in the\nlocation triggers an alert\n"
                },
                "availabilityNotificationsEnabled": {
                    "type": "boolean",
                    "description": "The notifications of location and node outage is enabled (`true`) or disabled (`false`)\n"
                },
                "city": {
                    "type": "string",
                    "description": "The city of the location\n"
                },
                "countryCode": {
                    "type": "string",
                    "description": "The country code of the location. Use the alpha-2 code of the [ISO 3166-2 standard](https://dt-url.net/iso3166-2), (for\nexample, `AT` for Austria or `PL` for Poland)\n"
                },
                "deploymentType": {
                    "type": "string",
                    "description": "The deployment type of the location: * `STANDARD`: The location is deployed on Windows or Linux. * `KUBERNETES`: The\nlocation is deployed on Kubernetes\n"
                },
                "latitude": {
                    "type": "number",
                    "description": "The latitude of the location in `DDD.dddd` format\n"
                },
                "locationNodeOutageDelayInMinutes": {
                    "type": "integer",
                    "description": "Alert if the location or node outage lasts longer than *X* minutes. Only applicable when\n**availability_location_outage** or **availability_node_outage** is set to `true`\n"
                },
                "longitude": {
                    "type": "number",
                    "description": "The longitude of the location in `DDD.dddd` format\n"
                },
                "maxActiveGateCount": {
                    "type": "integer",
                    "description": "The maximum number of Active Gates required for that location. Not required when `deployment_type` is set to `STANDARD`\n"
                },
                "minActiveGateCount": {
                    "type": "integer",
                    "description": "The minimum number of Active Gates required for that location. Not required when `deployment_type` is set to `STANDARD`\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the location\n"
                },
                "nodeSize": {
                    "type": "string",
                    "description": "Possible values: `UNSUPPORTED`, `XS`, `S` and `M`. Not required when `deployment_type` is set to `STANDARD`.\n"
                },
                "nodes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of synthetic nodes belonging to the location. You can retrieve the list of available nodes with the [GET all\nnodes](https://dt-url.net/miy3rpl) call\n"
                },
                "regionCode": {
                    "type": "string",
                    "description": "The region code of the location. For the [USA](https://dt-url.net/iso3166us) or [Canada](https://dt-url.net/iso3166ca)\nuse ISO 3166-2 state codes (without `US-` or `CA-` prefix), for example, `VA` for Virginia or `OR` for Oregon. For the\nrest of the world use [FIPS 10-4 codes](https://dt-url.net/fipscodes)\n"
                }
            },
            "requiredInputs": [
                "latitude",
                "longitude"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SyntheticLocation resources.\n",
                "properties": {
                    "autoUpdateChromium": {
                        "type": "boolean",
                        "description": "Auto upgrade of Chromium is enabled (`true`) or disabled (`false`)\n"
                    },
                    "availabilityLocationOutage": {
                        "type": "boolean",
                        "description": "The alerting of location outage is enabled (`true`) or disabled (`false`)\n"
                    },
                    "availabilityNodeOutage": {
                        "type": "boolean",
                        "description": "The alerting of node outage is enabled (`true`) or disabled (`false`). If enabled, the outage of *any* node in the\nlocation triggers an alert\n"
                    },
                    "availabilityNotificationsEnabled": {
                        "type": "boolean",
                        "description": "The notifications of location and node outage is enabled (`true`) or disabled (`false`)\n"
                    },
                    "city": {
                        "type": "string",
                        "description": "The city of the location\n"
                    },
                    "countryCode": {
                        "type": "string",
                        "description": "The country code of the location. Use the alpha-2 code of the [ISO 3166-2 standard](https://dt-url.net/iso3166-2), (for\nexample, `AT` for Austria or `PL` for Poland)\n"
                    },
                    "deploymentType": {
                        "type": "string",
                        "description": "The deployment type of the location: * `STANDARD`: The location is deployed on Windows or Linux. * `KUBERNETES`: The\nlocation is deployed on Kubernetes\n"
                    },
                    "latitude": {
                        "type": "number",
                        "description": "The latitude of the location in `DDD.dddd` format\n"
                    },
                    "locationNodeOutageDelayInMinutes": {
                        "type": "integer",
                        "description": "Alert if the location or node outage lasts longer than *X* minutes. Only applicable when\n**availability_location_outage** or **availability_node_outage** is set to `true`\n"
                    },
                    "longitude": {
                        "type": "number",
                        "description": "The longitude of the location in `DDD.dddd` format\n"
                    },
                    "maxActiveGateCount": {
                        "type": "integer",
                        "description": "The maximum number of Active Gates required for that location. Not required when `deployment_type` is set to `STANDARD`\n"
                    },
                    "minActiveGateCount": {
                        "type": "integer",
                        "description": "The minimum number of Active Gates required for that location. Not required when `deployment_type` is set to `STANDARD`\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the location\n"
                    },
                    "nodeSize": {
                        "type": "string",
                        "description": "Possible values: `UNSUPPORTED`, `XS`, `S` and `M`. Not required when `deployment_type` is set to `STANDARD`.\n"
                    },
                    "nodes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of synthetic nodes belonging to the location. You can retrieve the list of available nodes with the [GET all\nnodes](https://dt-url.net/miy3rpl) call\n"
                    },
                    "regionCode": {
                        "type": "string",
                        "description": "The region code of the location. For the [USA](https://dt-url.net/iso3166us) or [Canada](https://dt-url.net/iso3166ca)\nuse ISO 3166-2 state codes (without `US-` or `CA-` prefix), for example, `VA` for Virginia or `OR` for Oregon. For the\nrest of the world use [FIPS 10-4 codes](https://dt-url.net/fipscodes)\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/tokenSettings:TokenSettings": {
            "properties": {
                "newTokenFormat": {
                    "type": "boolean",
                    "description": "Check out this [blog\npost](http://www.dynatrace.com/blog/further-increased-security-of-your-api-tokens-by-automating-token-protection/) to\nfind out more about the new Dynatrace API token format.\n"
                },
                "personalTokens": {
                    "type": "boolean",
                    "description": "Allow users of this environment to generate personal access tokens based on user permissions. Note that existing\npersonal access tokens will become unusable while this setting is disabled.\n"
                }
            },
            "required": [
                "newTokenFormat",
                "personalTokens"
            ],
            "inputProperties": {
                "newTokenFormat": {
                    "type": "boolean",
                    "description": "Check out this [blog\npost](http://www.dynatrace.com/blog/further-increased-security-of-your-api-tokens-by-automating-token-protection/) to\nfind out more about the new Dynatrace API token format.\n"
                },
                "personalTokens": {
                    "type": "boolean",
                    "description": "Allow users of this environment to generate personal access tokens based on user permissions. Note that existing\npersonal access tokens will become unusable while this setting is disabled.\n"
                }
            },
            "requiredInputs": [
                "newTokenFormat",
                "personalTokens"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering TokenSettings resources.\n",
                "properties": {
                    "newTokenFormat": {
                        "type": "boolean",
                        "description": "Check out this [blog\npost](http://www.dynatrace.com/blog/further-increased-security-of-your-api-tokens-by-automating-token-protection/) to\nfind out more about the new Dynatrace API token format.\n"
                    },
                    "personalTokens": {
                        "type": "boolean",
                        "description": "Allow users of this environment to generate personal access tokens based on user permissions. Note that existing\npersonal access tokens will become unusable while this setting is disabled.\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/transactionStartFilters:TransactionStartFilters": {
            "properties": {
                "cicsTerminalTransactionIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "You can use * as wildcard. For example use A* to trace all transaction IDs that start with A.\n"
                },
                "cicsTransactionIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "You can use * as wildcard. For example use A* to trace all transaction IDs that start with A.\n"
                },
                "imsTerminalTransactionIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "You can use * as wildcard. For example use A* to trace all transaction IDs that start with A.\n"
                },
                "imsTransactionIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "You can use * as wildcard. For example use A* to trace all transaction IDs that start with A.\n"
                }
            },
            "inputProperties": {
                "cicsTerminalTransactionIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "You can use * as wildcard. For example use A* to trace all transaction IDs that start with A.\n"
                },
                "cicsTransactionIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "You can use * as wildcard. For example use A* to trace all transaction IDs that start with A.\n"
                },
                "imsTerminalTransactionIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "You can use * as wildcard. For example use A* to trace all transaction IDs that start with A.\n"
                },
                "imsTransactionIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "You can use * as wildcard. For example use A* to trace all transaction IDs that start with A.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering TransactionStartFilters resources.\n",
                "properties": {
                    "cicsTerminalTransactionIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "You can use * as wildcard. For example use A* to trace all transaction IDs that start with A.\n"
                    },
                    "cicsTransactionIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "You can use * as wildcard. For example use A* to trace all transaction IDs that start with A.\n"
                    },
                    "imsTerminalTransactionIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "You can use * as wildcard. For example use A* to trace all transaction IDs that start with A.\n"
                    },
                    "imsTransactionIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "You can use * as wildcard. For example use A* to trace all transaction IDs that start with A.\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/trelloNotification:TrelloNotification": {
            "properties": {
                "active": {
                    "type": "boolean",
                    "description": "The configuration is enabled (`true`) or disabled (`false`)\n"
                },
                "applicationKey": {
                    "type": "string",
                    "description": "The application key for the Trello account\n"
                },
                "authorizationToken": {
                    "type": "string",
                    "description": "The application token for the Trello account\n",
                    "secret": true
                },
                "boardId": {
                    "type": "string",
                    "description": "The Trello board to which the card should be assigned\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Trello card. You can use same placeholders as in card text\n"
                },
                "legacyId": {
                    "type": "string",
                    "description": "The ID of these settings when referred to from resources requiring the REST API V1 keys\n"
                },
                "listId": {
                    "type": "string",
                    "description": "The Trello list to which the card should be assigned\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the notification configuration\n"
                },
                "profile": {
                    "type": "string",
                    "description": "The ID of the associated alerting profile\n"
                },
                "resolvedListId": {
                    "type": "string",
                    "description": "The Trello list to which the card of the resolved problem should be assigned\n"
                },
                "text": {
                    "type": "string",
                    "description": "The text of the generated Trello card. You can use the following placeholders: * `{ImpactedEntity}`: The entity impacted\nby the problem or *X* impacted entities. * `{PID}`: The ID of the reported problem. * `{ProblemDetailsMarkdown}`: All\nproblem event details, including root cause, as a [Markdown-formatted](https://www.markdownguide.org/cheat-sheet/)\nstring. * `{ProblemID}`: The display number of the reported problem. * `{ProblemImpact}`: The [impact\nlevel](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are\n`APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`. * `{ProblemSeverity}`: The [severity\nlevel](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`,\n`ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`. * `{ProblemTitle}`: A short description of the\nproblem. * `{ProblemURL}`: The URL of the problem within Dynatrace. * `{State}`: The state of the problem. Possible\nvalues are `OPEN` and `RESOLVED`. * `{Tags}`: The list of tags that are defined for all impacted entities, separated by\ncommas\n"
                }
            },
            "required": [
                "active",
                "applicationKey",
                "boardId",
                "description",
                "legacyId",
                "listId",
                "name",
                "profile",
                "resolvedListId",
                "text"
            ],
            "inputProperties": {
                "active": {
                    "type": "boolean",
                    "description": "The configuration is enabled (`true`) or disabled (`false`)\n"
                },
                "applicationKey": {
                    "type": "string",
                    "description": "The application key for the Trello account\n"
                },
                "authorizationToken": {
                    "type": "string",
                    "description": "The application token for the Trello account\n",
                    "secret": true
                },
                "boardId": {
                    "type": "string",
                    "description": "The Trello board to which the card should be assigned\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Trello card. You can use same placeholders as in card text\n"
                },
                "legacyId": {
                    "type": "string",
                    "description": "The ID of these settings when referred to from resources requiring the REST API V1 keys\n"
                },
                "listId": {
                    "type": "string",
                    "description": "The Trello list to which the card should be assigned\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the notification configuration\n"
                },
                "profile": {
                    "type": "string",
                    "description": "The ID of the associated alerting profile\n"
                },
                "resolvedListId": {
                    "type": "string",
                    "description": "The Trello list to which the card of the resolved problem should be assigned\n"
                },
                "text": {
                    "type": "string",
                    "description": "The text of the generated Trello card. You can use the following placeholders: * `{ImpactedEntity}`: The entity impacted\nby the problem or *X* impacted entities. * `{PID}`: The ID of the reported problem. * `{ProblemDetailsMarkdown}`: All\nproblem event details, including root cause, as a [Markdown-formatted](https://www.markdownguide.org/cheat-sheet/)\nstring. * `{ProblemID}`: The display number of the reported problem. * `{ProblemImpact}`: The [impact\nlevel](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are\n`APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`. * `{ProblemSeverity}`: The [severity\nlevel](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`,\n`ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`. * `{ProblemTitle}`: A short description of the\nproblem. * `{ProblemURL}`: The URL of the problem within Dynatrace. * `{State}`: The state of the problem. Possible\nvalues are `OPEN` and `RESOLVED`. * `{Tags}`: The list of tags that are defined for all impacted entities, separated by\ncommas\n"
                }
            },
            "requiredInputs": [
                "active",
                "applicationKey",
                "boardId",
                "description",
                "listId",
                "profile",
                "resolvedListId",
                "text"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering TrelloNotification resources.\n",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "description": "The configuration is enabled (`true`) or disabled (`false`)\n"
                    },
                    "applicationKey": {
                        "type": "string",
                        "description": "The application key for the Trello account\n"
                    },
                    "authorizationToken": {
                        "type": "string",
                        "description": "The application token for the Trello account\n",
                        "secret": true
                    },
                    "boardId": {
                        "type": "string",
                        "description": "The Trello board to which the card should be assigned\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the Trello card. You can use same placeholders as in card text\n"
                    },
                    "legacyId": {
                        "type": "string",
                        "description": "The ID of these settings when referred to from resources requiring the REST API V1 keys\n"
                    },
                    "listId": {
                        "type": "string",
                        "description": "The Trello list to which the card should be assigned\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the notification configuration\n"
                    },
                    "profile": {
                        "type": "string",
                        "description": "The ID of the associated alerting profile\n"
                    },
                    "resolvedListId": {
                        "type": "string",
                        "description": "The Trello list to which the card of the resolved problem should be assigned\n"
                    },
                    "text": {
                        "type": "string",
                        "description": "The text of the generated Trello card. You can use the following placeholders: * `{ImpactedEntity}`: The entity impacted\nby the problem or *X* impacted entities. * `{PID}`: The ID of the reported problem. * `{ProblemDetailsMarkdown}`: All\nproblem event details, including root cause, as a [Markdown-formatted](https://www.markdownguide.org/cheat-sheet/)\nstring. * `{ProblemID}`: The display number of the reported problem. * `{ProblemImpact}`: The [impact\nlevel](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are\n`APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`. * `{ProblemSeverity}`: The [severity\nlevel](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`,\n`ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`. * `{ProblemTitle}`: A short description of the\nproblem. * `{ProblemURL}`: The URL of the problem within Dynatrace. * `{State}`: The state of the problem. Possible\nvalues are `OPEN` and `RESOLVED`. * `{Tags}`: The list of tags that are defined for all impacted entities, separated by\ncommas\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/unifiedServicesMetrics:UnifiedServicesMetrics": {
            "properties": {
                "enableEndpointMetrics": {
                    "type": "boolean",
                    "description": "Should metrics be written for endpoints? Please be aware that this setting has billing implications. Check out this\n[documentation](https://dt-url.net/td23cgh) for further details.\n"
                },
                "serviceId": {
                    "type": "string",
                    "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.\n"
                }
            },
            "required": [
                "enableEndpointMetrics"
            ],
            "inputProperties": {
                "enableEndpointMetrics": {
                    "type": "boolean",
                    "description": "Should metrics be written for endpoints? Please be aware that this setting has billing implications. Check out this\n[documentation](https://dt-url.net/td23cgh) for further details.\n"
                },
                "serviceId": {
                    "type": "string",
                    "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "enableEndpointMetrics"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering UnifiedServicesMetrics resources.\n",
                "properties": {
                    "enableEndpointMetrics": {
                        "type": "boolean",
                        "description": "Should metrics be written for endpoints? Please be aware that this setting has billing implications. Check out this\n[documentation](https://dt-url.net/td23cgh) for further details.\n"
                    },
                    "serviceId": {
                        "type": "string",
                        "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/unifiedServicesOpentel:UnifiedServicesOpentel": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                }
            },
            "required": [
                "enabled"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                }
            },
            "requiredInputs": [
                "enabled"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering UnifiedServicesOpentel resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/updateWindows:UpdateWindows": {
            "properties": {
                "dailyRecurrence": {
                    "$ref": "#/types/dynatrace:index/UpdateWindowsDailyRecurrence:UpdateWindowsDailyRecurrence",
                    "description": "no documentation available\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "monthlyRecurrence": {
                    "$ref": "#/types/dynatrace:index/UpdateWindowsMonthlyRecurrence:UpdateWindowsMonthlyRecurrence",
                    "description": "no documentation available\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name\n"
                },
                "onceRecurrence": {
                    "$ref": "#/types/dynatrace:index/UpdateWindowsOnceRecurrence:UpdateWindowsOnceRecurrence",
                    "description": "no documentation available\n"
                },
                "recurrence": {
                    "type": "string",
                    "description": "Possible Values: `MONTHLY`, `ONCE`, `DAILY`, `WEEKLY`\n"
                },
                "weeklyRecurrence": {
                    "$ref": "#/types/dynatrace:index/UpdateWindowsWeeklyRecurrence:UpdateWindowsWeeklyRecurrence",
                    "description": "no documentation available\n"
                }
            },
            "required": [
                "enabled",
                "name",
                "recurrence"
            ],
            "inputProperties": {
                "dailyRecurrence": {
                    "$ref": "#/types/dynatrace:index/UpdateWindowsDailyRecurrence:UpdateWindowsDailyRecurrence",
                    "description": "no documentation available\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "monthlyRecurrence": {
                    "$ref": "#/types/dynatrace:index/UpdateWindowsMonthlyRecurrence:UpdateWindowsMonthlyRecurrence",
                    "description": "no documentation available\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name\n"
                },
                "onceRecurrence": {
                    "$ref": "#/types/dynatrace:index/UpdateWindowsOnceRecurrence:UpdateWindowsOnceRecurrence",
                    "description": "no documentation available\n"
                },
                "recurrence": {
                    "type": "string",
                    "description": "Possible Values: `MONTHLY`, `ONCE`, `DAILY`, `WEEKLY`\n"
                },
                "weeklyRecurrence": {
                    "$ref": "#/types/dynatrace:index/UpdateWindowsWeeklyRecurrence:UpdateWindowsWeeklyRecurrence",
                    "description": "no documentation available\n"
                }
            },
            "requiredInputs": [
                "enabled",
                "recurrence"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering UpdateWindows resources.\n",
                "properties": {
                    "dailyRecurrence": {
                        "$ref": "#/types/dynatrace:index/UpdateWindowsDailyRecurrence:UpdateWindowsDailyRecurrence",
                        "description": "no documentation available\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                    },
                    "monthlyRecurrence": {
                        "$ref": "#/types/dynatrace:index/UpdateWindowsMonthlyRecurrence:UpdateWindowsMonthlyRecurrence",
                        "description": "no documentation available\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name\n"
                    },
                    "onceRecurrence": {
                        "$ref": "#/types/dynatrace:index/UpdateWindowsOnceRecurrence:UpdateWindowsOnceRecurrence",
                        "description": "no documentation available\n"
                    },
                    "recurrence": {
                        "type": "string",
                        "description": "Possible Values: `MONTHLY`, `ONCE`, `DAILY`, `WEEKLY`\n"
                    },
                    "weeklyRecurrence": {
                        "$ref": "#/types/dynatrace:index/UpdateWindowsWeeklyRecurrence:UpdateWindowsWeeklyRecurrence",
                        "description": "no documentation available\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/urlBasedSampling:UrlBasedSampling": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "factor": {
                    "type": "string",
                    "description": "Select the scaling factor for the current sampling rate of the system. Possible values: `IncreaseCapturing128Times`,\n`IncreaseCapturing64Times`, `IncreaseCapturing32Times`, `IncreaseCapturing16Times`, `IncreaseCapturing8Times`,\n`IncreaseCapturing4Times`, `IncreaseCapturing2Times`, `ReduceCapturingByFactor2`, `ReduceCapturingByFactor4`,\n`ReduceCapturingByFactor8`, `ReduceCapturingByFactor16`, `ReduceCapturingByFactor32`, `ReduceCapturingByFactor64`,\n`ReduceCapturingByFactor128`\n"
                },
                "httpMethodAny": {
                    "type": "boolean",
                    "description": "The scaling factor for the defined URL will be applied to any HTTP method.\n"
                },
                "httpMethods": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Possible values: `GET`, `POST`, `PUT`, `DELETE`, `HEAD`, `CONNECT`, `OPTIONS`, `TRACE`, `PATCH`\n"
                },
                "ignore": {
                    "type": "boolean",
                    "description": "The matching URLs will always be ignored, also if Adaptive Traffic Management is not active.\n"
                },
                "insertAfter": {
                    "type": "string",
                    "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path of the URL.\n"
                },
                "pathComparisonType": {
                    "type": "string",
                    "description": "Path comparison condition. Possible values: `EQUALS`, `DOES_NOT_EQUAL`, `CONTAINS`, `DOES_NOT_CONTAIN`, `STARTS_WITH`,\n`DOES_NOT_START_WITH`, `ENDS_WITH`, `DOES_NOT_END_WITH`\n"
                },
                "queryParameters": {
                    "$ref": "#/types/dynatrace:index/UrlBasedSamplingQueryParameters:UrlBasedSamplingQueryParameters",
                    "description": "Add URL parameters in any order. **All** specified parameters must be present in the query of an URL to get a match.\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of this setting (PROCESS_GROUP_INSTANCE, PROCESS_GROUP). Omit this property if you want to cover the whole\nenvironment.\n"
                }
            },
            "required": [
                "enabled",
                "httpMethodAny",
                "ignore",
                "insertAfter",
                "queryParameters"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "factor": {
                    "type": "string",
                    "description": "Select the scaling factor for the current sampling rate of the system. Possible values: `IncreaseCapturing128Times`,\n`IncreaseCapturing64Times`, `IncreaseCapturing32Times`, `IncreaseCapturing16Times`, `IncreaseCapturing8Times`,\n`IncreaseCapturing4Times`, `IncreaseCapturing2Times`, `ReduceCapturingByFactor2`, `ReduceCapturingByFactor4`,\n`ReduceCapturingByFactor8`, `ReduceCapturingByFactor16`, `ReduceCapturingByFactor32`, `ReduceCapturingByFactor64`,\n`ReduceCapturingByFactor128`\n"
                },
                "httpMethodAny": {
                    "type": "boolean",
                    "description": "The scaling factor for the defined URL will be applied to any HTTP method.\n"
                },
                "httpMethods": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Possible values: `GET`, `POST`, `PUT`, `DELETE`, `HEAD`, `CONNECT`, `OPTIONS`, `TRACE`, `PATCH`\n"
                },
                "ignore": {
                    "type": "boolean",
                    "description": "The matching URLs will always be ignored, also if Adaptive Traffic Management is not active.\n"
                },
                "insertAfter": {
                    "type": "string",
                    "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path of the URL.\n"
                },
                "pathComparisonType": {
                    "type": "string",
                    "description": "Path comparison condition. Possible values: `EQUALS`, `DOES_NOT_EQUAL`, `CONTAINS`, `DOES_NOT_CONTAIN`, `STARTS_WITH`,\n`DOES_NOT_START_WITH`, `ENDS_WITH`, `DOES_NOT_END_WITH`\n"
                },
                "queryParameters": {
                    "$ref": "#/types/dynatrace:index/UrlBasedSamplingQueryParameters:UrlBasedSamplingQueryParameters",
                    "description": "Add URL parameters in any order. **All** specified parameters must be present in the query of an URL to get a match.\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of this setting (PROCESS_GROUP_INSTANCE, PROCESS_GROUP). Omit this property if you want to cover the whole\nenvironment.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "enabled",
                "httpMethodAny",
                "ignore",
                "queryParameters"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering UrlBasedSampling resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                    },
                    "factor": {
                        "type": "string",
                        "description": "Select the scaling factor for the current sampling rate of the system. Possible values: `IncreaseCapturing128Times`,\n`IncreaseCapturing64Times`, `IncreaseCapturing32Times`, `IncreaseCapturing16Times`, `IncreaseCapturing8Times`,\n`IncreaseCapturing4Times`, `IncreaseCapturing2Times`, `ReduceCapturingByFactor2`, `ReduceCapturingByFactor4`,\n`ReduceCapturingByFactor8`, `ReduceCapturingByFactor16`, `ReduceCapturingByFactor32`, `ReduceCapturingByFactor64`,\n`ReduceCapturingByFactor128`\n"
                    },
                    "httpMethodAny": {
                        "type": "boolean",
                        "description": "The scaling factor for the defined URL will be applied to any HTTP method.\n"
                    },
                    "httpMethods": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Possible values: `GET`, `POST`, `PUT`, `DELETE`, `HEAD`, `CONNECT`, `OPTIONS`, `TRACE`, `PATCH`\n"
                    },
                    "ignore": {
                        "type": "boolean",
                        "description": "The matching URLs will always be ignored, also if Adaptive Traffic Management is not active.\n"
                    },
                    "insertAfter": {
                        "type": "string",
                        "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                    },
                    "path": {
                        "type": "string",
                        "description": "Path of the URL.\n"
                    },
                    "pathComparisonType": {
                        "type": "string",
                        "description": "Path comparison condition. Possible values: `EQUALS`, `DOES_NOT_EQUAL`, `CONTAINS`, `DOES_NOT_CONTAIN`, `STARTS_WITH`,\n`DOES_NOT_START_WITH`, `ENDS_WITH`, `DOES_NOT_END_WITH`\n"
                    },
                    "queryParameters": {
                        "$ref": "#/types/dynatrace:index/UrlBasedSamplingQueryParameters:UrlBasedSamplingQueryParameters",
                        "description": "Add URL parameters in any order. **All** specified parameters must be present in the query of an URL to get a match.\n"
                    },
                    "scope": {
                        "type": "string",
                        "description": "The scope of this setting (PROCESS_GROUP_INSTANCE, PROCESS_GROUP). Omit this property if you want to cover the whole\nenvironment.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/usabilityAnalytics:UsabilityAnalytics": {
            "properties": {
                "applicationId": {
                    "type": "string",
                    "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.\n"
                },
                "detectRageClicks": {
                    "type": "boolean",
                    "description": "Three or more rapid clicks within the same area of a web page are considered to be rage clicks. Rage clicks commonly\nreflect slow-loading or failed page resources. Rage click counts are compiled for each session and considered in the\n[User Experience Score](https://dt-url.net/39034wt) . With this setting enabled, a rage click count is compiled for each\nmonitored user session.\n"
                }
            },
            "required": [
                "detectRageClicks"
            ],
            "inputProperties": {
                "applicationId": {
                    "type": "string",
                    "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.\n",
                    "willReplaceOnChanges": true
                },
                "detectRageClicks": {
                    "type": "boolean",
                    "description": "Three or more rapid clicks within the same area of a web page are considered to be rage clicks. Rage clicks commonly\nreflect slow-loading or failed page resources. Rage click counts are compiled for each session and considered in the\n[User Experience Score](https://dt-url.net/39034wt) . With this setting enabled, a rage click count is compiled for each\nmonitored user session.\n"
                }
            },
            "requiredInputs": [
                "detectRageClicks"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering UsabilityAnalytics resources.\n",
                "properties": {
                    "applicationId": {
                        "type": "string",
                        "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.\n",
                        "willReplaceOnChanges": true
                    },
                    "detectRageClicks": {
                        "type": "boolean",
                        "description": "Three or more rapid clicks within the same area of a web page are considered to be rage clicks. Rage clicks commonly\nreflect slow-loading or failed page resources. Rage click counts are compiled for each session and considered in the\n[User Experience Score](https://dt-url.net/39034wt) . With this setting enabled, a rage click count is compiled for each\nmonitored user session.\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/user:User": {
            "properties": {
                "email": {
                    "type": "string",
                    "description": "User's email address\n"
                },
                "firstName": {
                    "type": "string",
                    "description": "User's first name\n"
                },
                "groups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of user's user group IDs\n"
                },
                "lastName": {
                    "type": "string",
                    "description": "User's last name\n"
                },
                "userName": {
                    "type": "string",
                    "description": "The User Name\n"
                }
            },
            "required": [
                "email",
                "firstName",
                "lastName",
                "userName"
            ],
            "inputProperties": {
                "email": {
                    "type": "string",
                    "description": "User's email address\n"
                },
                "firstName": {
                    "type": "string",
                    "description": "User's first name\n"
                },
                "groups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of user's user group IDs\n"
                },
                "lastName": {
                    "type": "string",
                    "description": "User's last name\n"
                },
                "userName": {
                    "type": "string",
                    "description": "The User Name\n"
                }
            },
            "requiredInputs": [
                "email",
                "firstName",
                "lastName",
                "userName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering User resources.\n",
                "properties": {
                    "email": {
                        "type": "string",
                        "description": "User's email address\n"
                    },
                    "firstName": {
                        "type": "string",
                        "description": "User's first name\n"
                    },
                    "groups": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of user's user group IDs\n"
                    },
                    "lastName": {
                        "type": "string",
                        "description": "User's last name\n"
                    },
                    "userName": {
                        "type": "string",
                        "description": "The User Name\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/userActionMetrics:UserActionMetrics": {
            "properties": {
                "dimensions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Defines the fields that are used as dimensions. A dimension is a collection of reference information about a metric data\npoint that is of interest to your business. Dimensions are parameters like \"application\", \"type\", \"name\". For example,\nusing \"type\" as a dimension allows you to split chart data based on the user action type.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "filters": {
                    "$ref": "#/types/dynatrace:index/UserActionMetricsFilters:UserActionMetricsFilters",
                    "description": "Defines the filters for the user action. Filters apply at the moment of extracting the data and only sessions that\nsatisfy the filtering criteria will be used to extract the custom metrics. You will not be able to modify these filters\nin the metric data explorer. For example, using \"type equals Xhr\" will give you only data from xhr actions, while\nforcing the rest of user actions of different types to be ignored.\n"
                },
                "metricKey": {
                    "type": "string",
                    "description": "Metric key\n"
                },
                "value": {
                    "$ref": "#/types/dynatrace:index/UserActionMetricsValue:UserActionMetricsValue",
                    "description": "Defines the type of value to be extracted from the user action. When using **user action counter**, the number of user\nactions is counted (similar to count(*) when using USQL). When using **user action field value**, the value of a user\naction field is extracted.\n"
                }
            },
            "required": [
                "enabled",
                "metricKey",
                "value"
            ],
            "inputProperties": {
                "dimensions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Defines the fields that are used as dimensions. A dimension is a collection of reference information about a metric data\npoint that is of interest to your business. Dimensions are parameters like \"application\", \"type\", \"name\". For example,\nusing \"type\" as a dimension allows you to split chart data based on the user action type.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "filters": {
                    "$ref": "#/types/dynatrace:index/UserActionMetricsFilters:UserActionMetricsFilters",
                    "description": "Defines the filters for the user action. Filters apply at the moment of extracting the data and only sessions that\nsatisfy the filtering criteria will be used to extract the custom metrics. You will not be able to modify these filters\nin the metric data explorer. For example, using \"type equals Xhr\" will give you only data from xhr actions, while\nforcing the rest of user actions of different types to be ignored.\n"
                },
                "metricKey": {
                    "type": "string",
                    "description": "Metric key\n"
                },
                "value": {
                    "$ref": "#/types/dynatrace:index/UserActionMetricsValue:UserActionMetricsValue",
                    "description": "Defines the type of value to be extracted from the user action. When using **user action counter**, the number of user\nactions is counted (similar to count(*) when using USQL). When using **user action field value**, the value of a user\naction field is extracted.\n"
                }
            },
            "requiredInputs": [
                "enabled",
                "metricKey",
                "value"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering UserActionMetrics resources.\n",
                "properties": {
                    "dimensions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Defines the fields that are used as dimensions. A dimension is a collection of reference information about a metric data\npoint that is of interest to your business. Dimensions are parameters like \"application\", \"type\", \"name\". For example,\nusing \"type\" as a dimension allows you to split chart data based on the user action type.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                    },
                    "filters": {
                        "$ref": "#/types/dynatrace:index/UserActionMetricsFilters:UserActionMetricsFilters",
                        "description": "Defines the filters for the user action. Filters apply at the moment of extracting the data and only sessions that\nsatisfy the filtering criteria will be used to extract the custom metrics. You will not be able to modify these filters\nin the metric data explorer. For example, using \"type equals Xhr\" will give you only data from xhr actions, while\nforcing the rest of user actions of different types to be ignored.\n"
                    },
                    "metricKey": {
                        "type": "string",
                        "description": "Metric key\n"
                    },
                    "value": {
                        "$ref": "#/types/dynatrace:index/UserActionMetricsValue:UserActionMetricsValue",
                        "description": "Defines the type of value to be extracted from the user action. When using **user action counter**, the number of user\nactions is counted (similar to count(*) when using USQL). When using **user action field value**, the value of a user\naction field is extracted.\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/userExperienceScore:UserExperienceScore": {
            "properties": {
                "considerLastAction": {
                    "type": "boolean",
                    "description": "If last user action in a session is classified as Frustrating, classify the entire session as Frustrating\n"
                },
                "considerRageClick": {
                    "type": "boolean",
                    "description": "Consider rage clicks / rage taps in score calculation\n"
                },
                "maxFrustratedUserActionsThreshold": {
                    "type": "integer",
                    "description": "User experience is considered Frustrating when the selected percentage or more of the user actions in a session are\nrated as Frustrating.\n"
                },
                "minSatisfiedUserActionsThreshold": {
                    "type": "integer",
                    "description": "User experience is considered Satisfying when at least the selected percentage of the user actions in a session are\nrated as Satisfying.\n"
                }
            },
            "required": [
                "considerLastAction",
                "considerRageClick",
                "maxFrustratedUserActionsThreshold",
                "minSatisfiedUserActionsThreshold"
            ],
            "inputProperties": {
                "considerLastAction": {
                    "type": "boolean",
                    "description": "If last user action in a session is classified as Frustrating, classify the entire session as Frustrating\n"
                },
                "considerRageClick": {
                    "type": "boolean",
                    "description": "Consider rage clicks / rage taps in score calculation\n"
                },
                "maxFrustratedUserActionsThreshold": {
                    "type": "integer",
                    "description": "User experience is considered Frustrating when the selected percentage or more of the user actions in a session are\nrated as Frustrating.\n"
                },
                "minSatisfiedUserActionsThreshold": {
                    "type": "integer",
                    "description": "User experience is considered Satisfying when at least the selected percentage of the user actions in a session are\nrated as Satisfying.\n"
                }
            },
            "requiredInputs": [
                "considerLastAction",
                "considerRageClick",
                "maxFrustratedUserActionsThreshold",
                "minSatisfiedUserActionsThreshold"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering UserExperienceScore resources.\n",
                "properties": {
                    "considerLastAction": {
                        "type": "boolean",
                        "description": "If last user action in a session is classified as Frustrating, classify the entire session as Frustrating\n"
                    },
                    "considerRageClick": {
                        "type": "boolean",
                        "description": "Consider rage clicks / rage taps in score calculation\n"
                    },
                    "maxFrustratedUserActionsThreshold": {
                        "type": "integer",
                        "description": "User experience is considered Frustrating when the selected percentage or more of the user actions in a session are\nrated as Frustrating.\n"
                    },
                    "minSatisfiedUserActionsThreshold": {
                        "type": "integer",
                        "description": "User experience is considered Satisfying when at least the selected percentage of the user actions in a session are\nrated as Satisfying.\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/userGroup:UserGroup": {
            "properties": {
                "accessAccount": {
                    "type": "boolean",
                    "description": "If `true`, then the group has the access account rights\n"
                },
                "clusterAdmin": {
                    "type": "boolean",
                    "description": "If `true`, then the group has the cluster administrator rights\n"
                },
                "ldapGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "LDAP group names\n"
                },
                "manageAccount": {
                    "type": "boolean",
                    "description": "If `true`, then the group has the manage account rights\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the user group\n"
                },
                "permissions": {
                    "$ref": "#/types/dynatrace:index/UserGroupPermissions:UserGroupPermissions",
                    "description": "Permissions for environments\n"
                },
                "ssoGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "SSO group names. If defined it's used to map SSO group name to Dynatrace group name, otherwise mapping is done by group\nname\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "accessAccount": {
                    "type": "boolean",
                    "description": "If `true`, then the group has the access account rights\n"
                },
                "clusterAdmin": {
                    "type": "boolean",
                    "description": "If `true`, then the group has the cluster administrator rights\n"
                },
                "ldapGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "LDAP group names\n"
                },
                "manageAccount": {
                    "type": "boolean",
                    "description": "If `true`, then the group has the manage account rights\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the user group\n"
                },
                "permissions": {
                    "$ref": "#/types/dynatrace:index/UserGroupPermissions:UserGroupPermissions",
                    "description": "Permissions for environments\n"
                },
                "ssoGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "SSO group names. If defined it's used to map SSO group name to Dynatrace group name, otherwise mapping is done by group\nname\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering UserGroup resources.\n",
                "properties": {
                    "accessAccount": {
                        "type": "boolean",
                        "description": "If `true`, then the group has the access account rights\n"
                    },
                    "clusterAdmin": {
                        "type": "boolean",
                        "description": "If `true`, then the group has the cluster administrator rights\n"
                    },
                    "ldapGroups": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "LDAP group names\n"
                    },
                    "manageAccount": {
                        "type": "boolean",
                        "description": "If `true`, then the group has the manage account rights\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the user group\n"
                    },
                    "permissions": {
                        "$ref": "#/types/dynatrace:index/UserGroupPermissions:UserGroupPermissions",
                        "description": "Permissions for environments\n"
                    },
                    "ssoGroups": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "SSO group names. If defined it's used to map SSO group name to Dynatrace group name, otherwise mapping is done by group\nname\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/userSessionMetrics:UserSessionMetrics": {
            "properties": {
                "dimensions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Defines the fields that are used as dimensions. A dimension is a collection of reference information about a metric data\npoint that is of interest to your business. Dimensions are parameters like \"browserFamily\", \"userType\", \"country\". For\nexample, using \"userType\" as a dimension allows you to split chart data based on user types.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "filters": {
                    "$ref": "#/types/dynatrace:index/UserSessionMetricsFilters:UserSessionMetricsFilters",
                    "description": "Defines the filters for the user session. Filters apply at the moment of extracting the data and only sessions that\nsatisfy the filtering criteria will be used to extract the custom metrics. You will not be able to modify these filters\nin the metric data explorer. For example, using \"userType equals REAL_USER\" will give you only data from real users,\nwhile forcing the synthetic sessions to be ignored.\n"
                },
                "metricKey": {
                    "type": "string",
                    "description": "Metric key\n"
                },
                "value": {
                    "$ref": "#/types/dynatrace:index/UserSessionMetricsValue:UserSessionMetricsValue",
                    "description": "Defines the type of value to be extracted from the user session. When using **User session counter**, the number of user\nsessions is counted (similar to count(*) when using USQL). When using **User session field value**, the value of a user\nsession field is extracted.\n"
                }
            },
            "required": [
                "enabled",
                "metricKey",
                "value"
            ],
            "inputProperties": {
                "dimensions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Defines the fields that are used as dimensions. A dimension is a collection of reference information about a metric data\npoint that is of interest to your business. Dimensions are parameters like \"browserFamily\", \"userType\", \"country\". For\nexample, using \"userType\" as a dimension allows you to split chart data based on user types.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "filters": {
                    "$ref": "#/types/dynatrace:index/UserSessionMetricsFilters:UserSessionMetricsFilters",
                    "description": "Defines the filters for the user session. Filters apply at the moment of extracting the data and only sessions that\nsatisfy the filtering criteria will be used to extract the custom metrics. You will not be able to modify these filters\nin the metric data explorer. For example, using \"userType equals REAL_USER\" will give you only data from real users,\nwhile forcing the synthetic sessions to be ignored.\n"
                },
                "metricKey": {
                    "type": "string",
                    "description": "Metric key\n"
                },
                "value": {
                    "$ref": "#/types/dynatrace:index/UserSessionMetricsValue:UserSessionMetricsValue",
                    "description": "Defines the type of value to be extracted from the user session. When using **User session counter**, the number of user\nsessions is counted (similar to count(*) when using USQL). When using **User session field value**, the value of a user\nsession field is extracted.\n"
                }
            },
            "requiredInputs": [
                "enabled",
                "metricKey",
                "value"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering UserSessionMetrics resources.\n",
                "properties": {
                    "dimensions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Defines the fields that are used as dimensions. A dimension is a collection of reference information about a metric data\npoint that is of interest to your business. Dimensions are parameters like \"browserFamily\", \"userType\", \"country\". For\nexample, using \"userType\" as a dimension allows you to split chart data based on user types.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                    },
                    "filters": {
                        "$ref": "#/types/dynatrace:index/UserSessionMetricsFilters:UserSessionMetricsFilters",
                        "description": "Defines the filters for the user session. Filters apply at the moment of extracting the data and only sessions that\nsatisfy the filtering criteria will be used to extract the custom metrics. You will not be able to modify these filters\nin the metric data explorer. For example, using \"userType equals REAL_USER\" will give you only data from real users,\nwhile forcing the synthetic sessions to be ignored.\n"
                    },
                    "metricKey": {
                        "type": "string",
                        "description": "Metric key\n"
                    },
                    "value": {
                        "$ref": "#/types/dynatrace:index/UserSessionMetricsValue:UserSessionMetricsValue",
                        "description": "Defines the type of value to be extracted from the user session. When using **User session counter**, the number of user\nsessions is counted (similar to count(*) when using USQL). When using **User session field value**, the value of a user\nsession field is extracted.\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/userSettings:UserSettings": {
            "properties": {
                "autoLanguage": {
                    "type": "boolean",
                    "description": "Language - use browser default\n"
                },
                "autoRegion": {
                    "type": "boolean",
                    "description": "Region - use browser default\n"
                },
                "autoTheme": {
                    "type": "boolean",
                    "description": "Theme - use browser default\n"
                },
                "autoTimezone": {
                    "type": "boolean",
                    "description": "Timezone - use browser default\n"
                },
                "language": {
                    "type": "string",
                    "description": "Possible Values: `En`, `Ja`\n"
                },
                "region": {
                    "type": "string",
                    "description": "Region\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of this setting (user, userdefaults)\n"
                },
                "theme": {
                    "type": "string",
                    "description": "Possible Values: `Dark`, `Light`\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "Timezone\n"
                }
            },
            "required": [
                "autoLanguage",
                "autoRegion",
                "autoTheme",
                "autoTimezone",
                "scope"
            ],
            "inputProperties": {
                "autoLanguage": {
                    "type": "boolean",
                    "description": "Language - use browser default\n"
                },
                "autoRegion": {
                    "type": "boolean",
                    "description": "Region - use browser default\n"
                },
                "autoTheme": {
                    "type": "boolean",
                    "description": "Theme - use browser default\n"
                },
                "autoTimezone": {
                    "type": "boolean",
                    "description": "Timezone - use browser default\n"
                },
                "language": {
                    "type": "string",
                    "description": "Possible Values: `En`, `Ja`\n"
                },
                "region": {
                    "type": "string",
                    "description": "Region\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of this setting (user, userdefaults)\n",
                    "willReplaceOnChanges": true
                },
                "theme": {
                    "type": "string",
                    "description": "Possible Values: `Dark`, `Light`\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "Timezone\n"
                }
            },
            "requiredInputs": [
                "autoLanguage",
                "autoRegion",
                "autoTheme",
                "autoTimezone",
                "scope"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering UserSettings resources.\n",
                "properties": {
                    "autoLanguage": {
                        "type": "boolean",
                        "description": "Language - use browser default\n"
                    },
                    "autoRegion": {
                        "type": "boolean",
                        "description": "Region - use browser default\n"
                    },
                    "autoTheme": {
                        "type": "boolean",
                        "description": "Theme - use browser default\n"
                    },
                    "autoTimezone": {
                        "type": "boolean",
                        "description": "Timezone - use browser default\n"
                    },
                    "language": {
                        "type": "string",
                        "description": "Possible Values: `En`, `Ja`\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "Region\n"
                    },
                    "scope": {
                        "type": "string",
                        "description": "The scope of this setting (user, userdefaults)\n",
                        "willReplaceOnChanges": true
                    },
                    "theme": {
                        "type": "string",
                        "description": "Possible Values: `Dark`, `Light`\n"
                    },
                    "timezone": {
                        "type": "string",
                        "description": "Timezone\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/victorOpsNotification:VictorOpsNotification": {
            "properties": {
                "active": {
                    "type": "boolean",
                    "description": "The configuration is enabled (`true`) or disabled (`false`)\n"
                },
                "apiKey": {
                    "type": "string",
                    "description": "The API key for the target VictorOps account\n",
                    "secret": true
                },
                "legacyId": {
                    "type": "string",
                    "description": "The ID of these settings when referred to from resources requiring the REST API V1 keys\n"
                },
                "message": {
                    "type": "string",
                    "description": "The content of the message. You can use the following placeholders: * `{ImpactedEntity}`: The entity impacted by the\nproblem or *X* impacted entities. * `{ProblemDetailsText}`: All problem event details, including root cause, as a\ntext-formatted string. * `{ProblemID}`: The display number of the reported problem. * `{ProblemImpact}`: The [impact\nlevel](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are\n`APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`. * `{ProblemSeverity}`: The [severity\nlevel](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`,\n`ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`. * `{ProblemTitle}`: A short description of the\nproblem. * `{ProblemURL}`: The URL of the problem within Dynatrace. * `{State}`: The state of the problem. Possible\nvalues are `OPEN` and `RESOLVED`\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the notification configuration\n"
                },
                "profile": {
                    "type": "string",
                    "description": "The ID of the associated alerting profile\n"
                },
                "routingKey": {
                    "type": "string",
                    "description": "The routing key, defining the group to be notified\n"
                }
            },
            "required": [
                "active",
                "legacyId",
                "message",
                "name",
                "profile",
                "routingKey"
            ],
            "inputProperties": {
                "active": {
                    "type": "boolean",
                    "description": "The configuration is enabled (`true`) or disabled (`false`)\n"
                },
                "apiKey": {
                    "type": "string",
                    "description": "The API key for the target VictorOps account\n",
                    "secret": true
                },
                "legacyId": {
                    "type": "string",
                    "description": "The ID of these settings when referred to from resources requiring the REST API V1 keys\n"
                },
                "message": {
                    "type": "string",
                    "description": "The content of the message. You can use the following placeholders: * `{ImpactedEntity}`: The entity impacted by the\nproblem or *X* impacted entities. * `{ProblemDetailsText}`: All problem event details, including root cause, as a\ntext-formatted string. * `{ProblemID}`: The display number of the reported problem. * `{ProblemImpact}`: The [impact\nlevel](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are\n`APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`. * `{ProblemSeverity}`: The [severity\nlevel](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`,\n`ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`. * `{ProblemTitle}`: A short description of the\nproblem. * `{ProblemURL}`: The URL of the problem within Dynatrace. * `{State}`: The state of the problem. Possible\nvalues are `OPEN` and `RESOLVED`\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the notification configuration\n"
                },
                "profile": {
                    "type": "string",
                    "description": "The ID of the associated alerting profile\n"
                },
                "routingKey": {
                    "type": "string",
                    "description": "The routing key, defining the group to be notified\n"
                }
            },
            "requiredInputs": [
                "active",
                "message",
                "profile",
                "routingKey"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VictorOpsNotification resources.\n",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "description": "The configuration is enabled (`true`) or disabled (`false`)\n"
                    },
                    "apiKey": {
                        "type": "string",
                        "description": "The API key for the target VictorOps account\n",
                        "secret": true
                    },
                    "legacyId": {
                        "type": "string",
                        "description": "The ID of these settings when referred to from resources requiring the REST API V1 keys\n"
                    },
                    "message": {
                        "type": "string",
                        "description": "The content of the message. You can use the following placeholders: * `{ImpactedEntity}`: The entity impacted by the\nproblem or *X* impacted entities. * `{ProblemDetailsText}`: All problem event details, including root cause, as a\ntext-formatted string. * `{ProblemID}`: The display number of the reported problem. * `{ProblemImpact}`: The [impact\nlevel](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are\n`APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`. * `{ProblemSeverity}`: The [severity\nlevel](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`,\n`ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`. * `{ProblemTitle}`: A short description of the\nproblem. * `{ProblemURL}`: The URL of the problem within Dynatrace. * `{State}`: The state of the problem. Possible\nvalues are `OPEN` and `RESOLVED`\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the notification configuration\n"
                    },
                    "profile": {
                        "type": "string",
                        "description": "The ID of the associated alerting profile\n"
                    },
                    "routingKey": {
                        "type": "string",
                        "description": "The routing key, defining the group to be notified\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/vmware:Vmware": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "filter": {
                    "type": "string",
                    "description": "This string should have one of the following formats: - $prefix(parameter) - property value starting with 'parameter' -\n$eq(parameter) - property value exactly matching 'parameter' - $suffix(parameter) - property value ends with 'parameter'\n- $contains(parameter) - property value contains 'parameter'\n"
                },
                "ipaddress": {
                    "type": "string",
                    "description": "Specify the IP address or name of the vCenter or standalone ESXi host:\n"
                },
                "label": {
                    "type": "string",
                    "description": "Name this connection\n"
                },
                "password": {
                    "type": "string",
                    "description": "no documentation available\n",
                    "secret": true
                },
                "username": {
                    "type": "string",
                    "description": "Provide user credentials for the vCenter or standalone ESXi host:\n"
                }
            },
            "required": [
                "enabled",
                "ipaddress",
                "label",
                "password",
                "username"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "filter": {
                    "type": "string",
                    "description": "This string should have one of the following formats: - $prefix(parameter) - property value starting with 'parameter' -\n$eq(parameter) - property value exactly matching 'parameter' - $suffix(parameter) - property value ends with 'parameter'\n- $contains(parameter) - property value contains 'parameter'\n"
                },
                "ipaddress": {
                    "type": "string",
                    "description": "Specify the IP address or name of the vCenter or standalone ESXi host:\n"
                },
                "label": {
                    "type": "string",
                    "description": "Name this connection\n"
                },
                "password": {
                    "type": "string",
                    "description": "no documentation available\n",
                    "secret": true
                },
                "username": {
                    "type": "string",
                    "description": "Provide user credentials for the vCenter or standalone ESXi host:\n"
                }
            },
            "requiredInputs": [
                "enabled",
                "ipaddress",
                "label",
                "password",
                "username"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Vmware resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                    },
                    "filter": {
                        "type": "string",
                        "description": "This string should have one of the following formats: - $prefix(parameter) - property value starting with 'parameter' -\n$eq(parameter) - property value exactly matching 'parameter' - $suffix(parameter) - property value ends with 'parameter'\n- $contains(parameter) - property value contains 'parameter'\n"
                    },
                    "ipaddress": {
                        "type": "string",
                        "description": "Specify the IP address or name of the vCenter or standalone ESXi host:\n"
                    },
                    "label": {
                        "type": "string",
                        "description": "Name this connection\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "no documentation available\n",
                        "secret": true
                    },
                    "username": {
                        "type": "string",
                        "description": "Provide user credentials for the vCenter or standalone ESXi host:\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/vmwareAnomalies:VmwareAnomalies": {
            "properties": {
                "droppedPacketsDetection": {
                    "$ref": "#/types/dynatrace:index/VmwareAnomaliesDroppedPacketsDetection:VmwareAnomaliesDroppedPacketsDetection",
                    "description": "no documentation available\n"
                },
                "esxiHighCpuDetection": {
                    "$ref": "#/types/dynatrace:index/VmwareAnomaliesEsxiHighCpuDetection:VmwareAnomaliesEsxiHighCpuDetection",
                    "description": "no documentation available\n"
                },
                "esxiHighMemoryDetection": {
                    "$ref": "#/types/dynatrace:index/VmwareAnomaliesEsxiHighMemoryDetection:VmwareAnomaliesEsxiHighMemoryDetection",
                    "description": "no documentation available\n"
                },
                "guestCpuLimitDetection": {
                    "$ref": "#/types/dynatrace:index/VmwareAnomaliesGuestCpuLimitDetection:VmwareAnomaliesGuestCpuLimitDetection",
                    "description": "no documentation available\n"
                },
                "lowDatastoreSpaceDetection": {
                    "$ref": "#/types/dynatrace:index/VmwareAnomaliesLowDatastoreSpaceDetection:VmwareAnomaliesLowDatastoreSpaceDetection",
                    "description": "no documentation available\n"
                },
                "overloadedStorageDetection": {
                    "$ref": "#/types/dynatrace:index/VmwareAnomaliesOverloadedStorageDetection:VmwareAnomaliesOverloadedStorageDetection",
                    "description": "no documentation available\n"
                },
                "slowPhysicalStorageDetection": {
                    "$ref": "#/types/dynatrace:index/VmwareAnomaliesSlowPhysicalStorageDetection:VmwareAnomaliesSlowPhysicalStorageDetection",
                    "description": "no documentation available\n"
                },
                "undersizedStorageDetection": {
                    "$ref": "#/types/dynatrace:index/VmwareAnomaliesUndersizedStorageDetection:VmwareAnomaliesUndersizedStorageDetection",
                    "description": "no documentation available\n"
                }
            },
            "required": [
                "droppedPacketsDetection",
                "esxiHighCpuDetection",
                "esxiHighMemoryDetection",
                "guestCpuLimitDetection",
                "lowDatastoreSpaceDetection",
                "overloadedStorageDetection",
                "slowPhysicalStorageDetection",
                "undersizedStorageDetection"
            ],
            "inputProperties": {
                "droppedPacketsDetection": {
                    "$ref": "#/types/dynatrace:index/VmwareAnomaliesDroppedPacketsDetection:VmwareAnomaliesDroppedPacketsDetection",
                    "description": "no documentation available\n"
                },
                "esxiHighCpuDetection": {
                    "$ref": "#/types/dynatrace:index/VmwareAnomaliesEsxiHighCpuDetection:VmwareAnomaliesEsxiHighCpuDetection",
                    "description": "no documentation available\n"
                },
                "esxiHighMemoryDetection": {
                    "$ref": "#/types/dynatrace:index/VmwareAnomaliesEsxiHighMemoryDetection:VmwareAnomaliesEsxiHighMemoryDetection",
                    "description": "no documentation available\n"
                },
                "guestCpuLimitDetection": {
                    "$ref": "#/types/dynatrace:index/VmwareAnomaliesGuestCpuLimitDetection:VmwareAnomaliesGuestCpuLimitDetection",
                    "description": "no documentation available\n"
                },
                "lowDatastoreSpaceDetection": {
                    "$ref": "#/types/dynatrace:index/VmwareAnomaliesLowDatastoreSpaceDetection:VmwareAnomaliesLowDatastoreSpaceDetection",
                    "description": "no documentation available\n"
                },
                "overloadedStorageDetection": {
                    "$ref": "#/types/dynatrace:index/VmwareAnomaliesOverloadedStorageDetection:VmwareAnomaliesOverloadedStorageDetection",
                    "description": "no documentation available\n"
                },
                "slowPhysicalStorageDetection": {
                    "$ref": "#/types/dynatrace:index/VmwareAnomaliesSlowPhysicalStorageDetection:VmwareAnomaliesSlowPhysicalStorageDetection",
                    "description": "no documentation available\n"
                },
                "undersizedStorageDetection": {
                    "$ref": "#/types/dynatrace:index/VmwareAnomaliesUndersizedStorageDetection:VmwareAnomaliesUndersizedStorageDetection",
                    "description": "no documentation available\n"
                }
            },
            "requiredInputs": [
                "droppedPacketsDetection",
                "esxiHighCpuDetection",
                "esxiHighMemoryDetection",
                "guestCpuLimitDetection",
                "lowDatastoreSpaceDetection",
                "overloadedStorageDetection",
                "slowPhysicalStorageDetection",
                "undersizedStorageDetection"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VmwareAnomalies resources.\n",
                "properties": {
                    "droppedPacketsDetection": {
                        "$ref": "#/types/dynatrace:index/VmwareAnomaliesDroppedPacketsDetection:VmwareAnomaliesDroppedPacketsDetection",
                        "description": "no documentation available\n"
                    },
                    "esxiHighCpuDetection": {
                        "$ref": "#/types/dynatrace:index/VmwareAnomaliesEsxiHighCpuDetection:VmwareAnomaliesEsxiHighCpuDetection",
                        "description": "no documentation available\n"
                    },
                    "esxiHighMemoryDetection": {
                        "$ref": "#/types/dynatrace:index/VmwareAnomaliesEsxiHighMemoryDetection:VmwareAnomaliesEsxiHighMemoryDetection",
                        "description": "no documentation available\n"
                    },
                    "guestCpuLimitDetection": {
                        "$ref": "#/types/dynatrace:index/VmwareAnomaliesGuestCpuLimitDetection:VmwareAnomaliesGuestCpuLimitDetection",
                        "description": "no documentation available\n"
                    },
                    "lowDatastoreSpaceDetection": {
                        "$ref": "#/types/dynatrace:index/VmwareAnomaliesLowDatastoreSpaceDetection:VmwareAnomaliesLowDatastoreSpaceDetection",
                        "description": "no documentation available\n"
                    },
                    "overloadedStorageDetection": {
                        "$ref": "#/types/dynatrace:index/VmwareAnomaliesOverloadedStorageDetection:VmwareAnomaliesOverloadedStorageDetection",
                        "description": "no documentation available\n"
                    },
                    "slowPhysicalStorageDetection": {
                        "$ref": "#/types/dynatrace:index/VmwareAnomaliesSlowPhysicalStorageDetection:VmwareAnomaliesSlowPhysicalStorageDetection",
                        "description": "no documentation available\n"
                    },
                    "undersizedStorageDetection": {
                        "$ref": "#/types/dynatrace:index/VmwareAnomaliesUndersizedStorageDetection:VmwareAnomaliesUndersizedStorageDetection",
                        "description": "no documentation available\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/vulnerabilityAlerting:VulnerabilityAlerting": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Alerting profile is enabled (`true`) or disabled (`false`)\n"
                },
                "enabledRiskLevels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of risk levels to alert\n"
                },
                "enabledTriggerEvents": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of events to alert\n"
                },
                "managementZone": {
                    "type": "string",
                    "description": "Alert only if the following management zone is affected (optional)\n"
                },
                "name": {
                    "type": "string",
                    "description": "Alerting profile name\n"
                }
            },
            "required": [
                "enabled",
                "name"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Alerting profile is enabled (`true`) or disabled (`false`)\n"
                },
                "enabledRiskLevels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of risk levels to alert\n"
                },
                "enabledTriggerEvents": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of events to alert\n"
                },
                "managementZone": {
                    "type": "string",
                    "description": "Alert only if the following management zone is affected (optional)\n"
                },
                "name": {
                    "type": "string",
                    "description": "Alerting profile name\n"
                }
            },
            "requiredInputs": [
                "enabled"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VulnerabilityAlerting resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Alerting profile is enabled (`true`) or disabled (`false`)\n"
                    },
                    "enabledRiskLevels": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of risk levels to alert\n"
                    },
                    "enabledTriggerEvents": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of events to alert\n"
                    },
                    "managementZone": {
                        "type": "string",
                        "description": "Alert only if the following management zone is affected (optional)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Alerting profile name\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/vulnerabilityCode:VulnerabilityCode": {
            "properties": {
                "criteria": {
                    "$ref": "#/types/dynatrace:index/VulnerabilityCodeCriteria:VulnerabilityCodeCriteria",
                    "description": "Step 1: Define criteria\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "insertAfter": {
                    "type": "string",
                    "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                },
                "metadata": {
                    "$ref": "#/types/dynatrace:index/VulnerabilityCodeMetadata:VulnerabilityCodeMetadata",
                    "description": "Step 3: Leave comment\n"
                },
                "vulnerabilityDetectionControl": {
                    "$ref": "#/types/dynatrace:index/VulnerabilityCodeVulnerabilityDetectionControl:VulnerabilityCodeVulnerabilityDetectionControl",
                    "description": "Step 2: Define code-level vulnerability detection control for chosen criteria\n"
                }
            },
            "required": [
                "enabled",
                "insertAfter",
                "metadata",
                "vulnerabilityDetectionControl"
            ],
            "inputProperties": {
                "criteria": {
                    "$ref": "#/types/dynatrace:index/VulnerabilityCodeCriteria:VulnerabilityCodeCriteria",
                    "description": "Step 1: Define criteria\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "insertAfter": {
                    "type": "string",
                    "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                },
                "metadata": {
                    "$ref": "#/types/dynatrace:index/VulnerabilityCodeMetadata:VulnerabilityCodeMetadata",
                    "description": "Step 3: Leave comment\n"
                },
                "vulnerabilityDetectionControl": {
                    "$ref": "#/types/dynatrace:index/VulnerabilityCodeVulnerabilityDetectionControl:VulnerabilityCodeVulnerabilityDetectionControl",
                    "description": "Step 2: Define code-level vulnerability detection control for chosen criteria\n"
                }
            },
            "requiredInputs": [
                "enabled",
                "metadata",
                "vulnerabilityDetectionControl"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VulnerabilityCode resources.\n",
                "properties": {
                    "criteria": {
                        "$ref": "#/types/dynatrace:index/VulnerabilityCodeCriteria:VulnerabilityCodeCriteria",
                        "description": "Step 1: Define criteria\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                    },
                    "insertAfter": {
                        "type": "string",
                        "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                    },
                    "metadata": {
                        "$ref": "#/types/dynatrace:index/VulnerabilityCodeMetadata:VulnerabilityCodeMetadata",
                        "description": "Step 3: Leave comment\n"
                    },
                    "vulnerabilityDetectionControl": {
                        "$ref": "#/types/dynatrace:index/VulnerabilityCodeVulnerabilityDetectionControl:VulnerabilityCodeVulnerabilityDetectionControl",
                        "description": "Step 2: Define code-level vulnerability detection control for chosen criteria\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/vulnerabilitySettings:VulnerabilitySettings": {
            "properties": {
                "enableCodeLevelVulnerabilityDetection": {
                    "type": "boolean",
                    "description": "Enable Code-level Vulnerability Analytics\n"
                },
                "enableRuntimeVulnerabilityDetection": {
                    "type": "boolean",
                    "description": "Enable Third-party Vulnerability Analytics\n"
                },
                "globalMonitoringModeDotNet": {
                    "type": "string",
                    "description": "(v1.290) Global .NET code-level vulnerability detection control defines the default for all process groups. You can use\nmonitoring rules to override the default for certain process groups.\n"
                },
                "globalMonitoringModeJava": {
                    "type": "string",
                    "description": "Possible Values: `MONITORING_OFF`, `MONITORING_ON`\n"
                },
                "globalMonitoringModeTpv": {
                    "type": "string",
                    "description": "Possible Values: `MONITORING_OFF`, `MONITORING_ON`\n"
                },
                "technologies": {
                    "$ref": "#/types/dynatrace:index/VulnerabilitySettingsTechnologies:VulnerabilitySettingsTechnologies",
                    "description": "Vulnerability Analytics can be enabled/disabled per supported technology.\n"
                }
            },
            "required": [
                "enableCodeLevelVulnerabilityDetection",
                "enableRuntimeVulnerabilityDetection",
                "globalMonitoringModeJava",
                "technologies"
            ],
            "inputProperties": {
                "enableCodeLevelVulnerabilityDetection": {
                    "type": "boolean",
                    "description": "Enable Code-level Vulnerability Analytics\n"
                },
                "enableRuntimeVulnerabilityDetection": {
                    "type": "boolean",
                    "description": "Enable Third-party Vulnerability Analytics\n"
                },
                "globalMonitoringModeDotNet": {
                    "type": "string",
                    "description": "(v1.290) Global .NET code-level vulnerability detection control defines the default for all process groups. You can use\nmonitoring rules to override the default for certain process groups.\n"
                },
                "globalMonitoringModeJava": {
                    "type": "string",
                    "description": "Possible Values: `MONITORING_OFF`, `MONITORING_ON`\n"
                },
                "globalMonitoringModeTpv": {
                    "type": "string",
                    "description": "Possible Values: `MONITORING_OFF`, `MONITORING_ON`\n"
                },
                "technologies": {
                    "$ref": "#/types/dynatrace:index/VulnerabilitySettingsTechnologies:VulnerabilitySettingsTechnologies",
                    "description": "Vulnerability Analytics can be enabled/disabled per supported technology.\n"
                }
            },
            "requiredInputs": [
                "enableCodeLevelVulnerabilityDetection",
                "enableRuntimeVulnerabilityDetection",
                "globalMonitoringModeJava",
                "technologies"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VulnerabilitySettings resources.\n",
                "properties": {
                    "enableCodeLevelVulnerabilityDetection": {
                        "type": "boolean",
                        "description": "Enable Code-level Vulnerability Analytics\n"
                    },
                    "enableRuntimeVulnerabilityDetection": {
                        "type": "boolean",
                        "description": "Enable Third-party Vulnerability Analytics\n"
                    },
                    "globalMonitoringModeDotNet": {
                        "type": "string",
                        "description": "(v1.290) Global .NET code-level vulnerability detection control defines the default for all process groups. You can use\nmonitoring rules to override the default for certain process groups.\n"
                    },
                    "globalMonitoringModeJava": {
                        "type": "string",
                        "description": "Possible Values: `MONITORING_OFF`, `MONITORING_ON`\n"
                    },
                    "globalMonitoringModeTpv": {
                        "type": "string",
                        "description": "Possible Values: `MONITORING_OFF`, `MONITORING_ON`\n"
                    },
                    "technologies": {
                        "$ref": "#/types/dynatrace:index/VulnerabilitySettingsTechnologies:VulnerabilitySettingsTechnologies",
                        "description": "Vulnerability Analytics can be enabled/disabled per supported technology.\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/vulnerabilityThirdParty:VulnerabilityThirdParty": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "insertAfter": {
                    "type": "string",
                    "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                },
                "mode": {
                    "type": "string",
                    "description": "Possible Values: `MONITORING_OFF`, `MONITORING_ON`\n"
                },
                "operator": {
                    "type": "string",
                    "description": "Possible Values: `EQUALS`, `NOT_EQUALS`\n"
                },
                "property": {
                    "type": "string",
                    "description": "Possible Values: `HOST_TAG`, `MANAGEMENT_ZONE`, `PROCESS_TAG`\n"
                },
                "value": {
                    "type": "string",
                    "description": "Condition value\n"
                }
            },
            "required": [
                "enabled",
                "insertAfter",
                "mode",
                "operator",
                "property",
                "value"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                },
                "insertAfter": {
                    "type": "string",
                    "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                },
                "mode": {
                    "type": "string",
                    "description": "Possible Values: `MONITORING_OFF`, `MONITORING_ON`\n"
                },
                "operator": {
                    "type": "string",
                    "description": "Possible Values: `EQUALS`, `NOT_EQUALS`\n"
                },
                "property": {
                    "type": "string",
                    "description": "Possible Values: `HOST_TAG`, `MANAGEMENT_ZONE`, `PROCESS_TAG`\n"
                },
                "value": {
                    "type": "string",
                    "description": "Condition value\n"
                }
            },
            "requiredInputs": [
                "enabled",
                "mode",
                "operator",
                "property",
                "value"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VulnerabilityThirdParty resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "This setting is enabled (`true`) or disabled (`false`)\n"
                    },
                    "insertAfter": {
                        "type": "string",
                        "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                    },
                    "mode": {
                        "type": "string",
                        "description": "Possible Values: `MONITORING_OFF`, `MONITORING_ON`\n"
                    },
                    "operator": {
                        "type": "string",
                        "description": "Possible Values: `EQUALS`, `NOT_EQUALS`\n"
                    },
                    "property": {
                        "type": "string",
                        "description": "Possible Values: `HOST_TAG`, `MANAGEMENT_ZONE`, `PROCESS_TAG`\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "Condition value\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/webAppAnomalies:WebAppAnomalies": {
            "properties": {
                "errorRate": {
                    "$ref": "#/types/dynatrace:index/WebAppAnomaliesErrorRate:WebAppAnomaliesErrorRate",
                    "description": "Error rate\n"
                },
                "responseTime": {
                    "$ref": "#/types/dynatrace:index/WebAppAnomaliesResponseTime:WebAppAnomaliesResponseTime",
                    "description": "Response time\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of this setting (APPLICATION_METHOD, APPLICATION). Omit this property if you want to cover the whole\nenvironment.\n"
                },
                "trafficDrops": {
                    "$ref": "#/types/dynatrace:index/WebAppAnomaliesTrafficDrops:WebAppAnomaliesTrafficDrops",
                    "description": "Detect traffic drops\n"
                },
                "trafficSpikes": {
                    "$ref": "#/types/dynatrace:index/WebAppAnomaliesTrafficSpikes:WebAppAnomaliesTrafficSpikes",
                    "description": "Detect traffic spikes\n"
                }
            },
            "required": [
                "errorRate",
                "responseTime",
                "trafficDrops",
                "trafficSpikes"
            ],
            "inputProperties": {
                "errorRate": {
                    "$ref": "#/types/dynatrace:index/WebAppAnomaliesErrorRate:WebAppAnomaliesErrorRate",
                    "description": "Error rate\n"
                },
                "responseTime": {
                    "$ref": "#/types/dynatrace:index/WebAppAnomaliesResponseTime:WebAppAnomaliesResponseTime",
                    "description": "Response time\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of this setting (APPLICATION_METHOD, APPLICATION). Omit this property if you want to cover the whole\nenvironment.\n",
                    "willReplaceOnChanges": true
                },
                "trafficDrops": {
                    "$ref": "#/types/dynatrace:index/WebAppAnomaliesTrafficDrops:WebAppAnomaliesTrafficDrops",
                    "description": "Detect traffic drops\n"
                },
                "trafficSpikes": {
                    "$ref": "#/types/dynatrace:index/WebAppAnomaliesTrafficSpikes:WebAppAnomaliesTrafficSpikes",
                    "description": "Detect traffic spikes\n"
                }
            },
            "requiredInputs": [
                "errorRate",
                "responseTime",
                "trafficDrops",
                "trafficSpikes"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WebAppAnomalies resources.\n",
                "properties": {
                    "errorRate": {
                        "$ref": "#/types/dynatrace:index/WebAppAnomaliesErrorRate:WebAppAnomaliesErrorRate",
                        "description": "Error rate\n"
                    },
                    "responseTime": {
                        "$ref": "#/types/dynatrace:index/WebAppAnomaliesResponseTime:WebAppAnomaliesResponseTime",
                        "description": "Response time\n"
                    },
                    "scope": {
                        "type": "string",
                        "description": "The scope of this setting (APPLICATION_METHOD, APPLICATION). Omit this property if you want to cover the whole\nenvironment.\n",
                        "willReplaceOnChanges": true
                    },
                    "trafficDrops": {
                        "$ref": "#/types/dynatrace:index/WebAppAnomaliesTrafficDrops:WebAppAnomaliesTrafficDrops",
                        "description": "Detect traffic drops\n"
                    },
                    "trafficSpikes": {
                        "$ref": "#/types/dynatrace:index/WebAppAnomaliesTrafficSpikes:WebAppAnomaliesTrafficSpikes",
                        "description": "Detect traffic spikes\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/webAppBeaconEndpoint:WebAppBeaconEndpoint": {
            "properties": {
                "applicationId": {
                    "type": "string",
                    "description": "The scope of this setting\n"
                },
                "type": {
                    "type": "string",
                    "description": "Possible Values: `ACTIVEGATE`, `DEFAULT_CONFIG`, `ONEAGENT`\n"
                },
                "url": {
                    "type": "string",
                    "description": "You can specify either path segments or an absolute URL.\n"
                },
                "useCors": {
                    "type": "boolean",
                    "description": "Learn more about [sending beacon data via CORS](https://dt-url.net/r7038sa)\n"
                }
            },
            "required": [
                "applicationId",
                "type"
            ],
            "inputProperties": {
                "applicationId": {
                    "type": "string",
                    "description": "The scope of this setting\n"
                },
                "type": {
                    "type": "string",
                    "description": "Possible Values: `ACTIVEGATE`, `DEFAULT_CONFIG`, `ONEAGENT`\n"
                },
                "url": {
                    "type": "string",
                    "description": "You can specify either path segments or an absolute URL.\n"
                },
                "useCors": {
                    "type": "boolean",
                    "description": "Learn more about [sending beacon data via CORS](https://dt-url.net/r7038sa)\n"
                }
            },
            "requiredInputs": [
                "applicationId",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WebAppBeaconEndpoint resources.\n",
                "properties": {
                    "applicationId": {
                        "type": "string",
                        "description": "The scope of this setting\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Possible Values: `ACTIVEGATE`, `DEFAULT_CONFIG`, `ONEAGENT`\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "You can specify either path segments or an absolute URL.\n"
                    },
                    "useCors": {
                        "type": "boolean",
                        "description": "Learn more about [sending beacon data via CORS](https://dt-url.net/r7038sa)\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/webAppBeaconOrigins:WebAppBeaconOrigins": {
            "properties": {
                "matcher": {
                    "type": "string",
                    "description": "Possible Values: `CONTAINS`, `ENDS_WITH`, `EQUALS`, `STARTS_WITH`\n"
                },
                "pattern": {
                    "type": "string",
                    "description": "Pattern\n"
                }
            },
            "required": [
                "matcher",
                "pattern"
            ],
            "inputProperties": {
                "matcher": {
                    "type": "string",
                    "description": "Possible Values: `CONTAINS`, `ENDS_WITH`, `EQUALS`, `STARTS_WITH`\n"
                },
                "pattern": {
                    "type": "string",
                    "description": "Pattern\n"
                }
            },
            "requiredInputs": [
                "matcher",
                "pattern"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WebAppBeaconOrigins resources.\n",
                "properties": {
                    "matcher": {
                        "type": "string",
                        "description": "Possible Values: `CONTAINS`, `ENDS_WITH`, `EQUALS`, `STARTS_WITH`\n"
                    },
                    "pattern": {
                        "type": "string",
                        "description": "Pattern\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/webAppCustomConfigProperties:WebAppCustomConfigProperties": {
            "properties": {
                "applicationId": {
                    "type": "string",
                    "description": "The scope of this setting\n"
                },
                "customProperty": {
                    "type": "string",
                    "description": "Custom configuration property\n"
                }
            },
            "required": [
                "applicationId",
                "customProperty"
            ],
            "inputProperties": {
                "applicationId": {
                    "type": "string",
                    "description": "The scope of this setting\n"
                },
                "customProperty": {
                    "type": "string",
                    "description": "Custom configuration property\n"
                }
            },
            "requiredInputs": [
                "applicationId",
                "customProperty"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WebAppCustomConfigProperties resources.\n",
                "properties": {
                    "applicationId": {
                        "type": "string",
                        "description": "The scope of this setting\n"
                    },
                    "customProperty": {
                        "type": "string",
                        "description": "Custom configuration property\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/webAppCustomErrors:WebAppCustomErrors": {
            "properties": {
                "errorRules": {
                    "$ref": "#/types/dynatrace:index/WebAppCustomErrorsErrorRules:WebAppCustomErrorsErrorRules",
                    "description": "(Field has overlap with `dynatrace_application_error_rules`)\n"
                },
                "ignoreCustomErrorsInApdexCalculation": {
                    "type": "boolean",
                    "description": "(Field has overlap with `dynatrace_application_error_rules`) This setting overrides Apdex settings for individual rules\nlisted below\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of this setting (APPLICATION)\n"
                }
            },
            "required": [
                "ignoreCustomErrorsInApdexCalculation",
                "scope"
            ],
            "inputProperties": {
                "errorRules": {
                    "$ref": "#/types/dynatrace:index/WebAppCustomErrorsErrorRules:WebAppCustomErrorsErrorRules",
                    "description": "(Field has overlap with `dynatrace_application_error_rules`)\n"
                },
                "ignoreCustomErrorsInApdexCalculation": {
                    "type": "boolean",
                    "description": "(Field has overlap with `dynatrace_application_error_rules`) This setting overrides Apdex settings for individual rules\nlisted below\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of this setting (APPLICATION)\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "ignoreCustomErrorsInApdexCalculation",
                "scope"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WebAppCustomErrors resources.\n",
                "properties": {
                    "errorRules": {
                        "$ref": "#/types/dynatrace:index/WebAppCustomErrorsErrorRules:WebAppCustomErrorsErrorRules",
                        "description": "(Field has overlap with `dynatrace_application_error_rules`)\n"
                    },
                    "ignoreCustomErrorsInApdexCalculation": {
                        "type": "boolean",
                        "description": "(Field has overlap with `dynatrace_application_error_rules`) This setting overrides Apdex settings for individual rules\nlisted below\n"
                    },
                    "scope": {
                        "type": "string",
                        "description": "The scope of this setting (APPLICATION)\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/webAppEnablement:WebAppEnablement": {
            "properties": {
                "applicationId": {
                    "type": "string",
                    "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.\n"
                },
                "rum": {
                    "$ref": "#/types/dynatrace:index/WebAppEnablementRum:WebAppEnablementRum",
                    "description": "Capture and analyze all user actions within your application. Enable [Real User Monitoring\n(RUM)](https://dt-url.net/1n2b0prq) to monitor and improve your application's performance, identify errors, and gain\ninsight into your user's behavior and experience.\n"
                },
                "sessionReplay": {
                    "$ref": "#/types/dynatrace:index/WebAppEnablementSessionReplay:WebAppEnablementSessionReplay",
                    "description": "[Session Replay](https://dt-url.net/session-replay) captures all user interactions within your application and replays\nthem in a movie-like experience while providing [best-in-class security and data\nprotection](https://dt-url.net/b303zxj).\n"
                }
            },
            "required": [
                "rum",
                "sessionReplay"
            ],
            "inputProperties": {
                "applicationId": {
                    "type": "string",
                    "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.\n",
                    "willReplaceOnChanges": true
                },
                "rum": {
                    "$ref": "#/types/dynatrace:index/WebAppEnablementRum:WebAppEnablementRum",
                    "description": "Capture and analyze all user actions within your application. Enable [Real User Monitoring\n(RUM)](https://dt-url.net/1n2b0prq) to monitor and improve your application's performance, identify errors, and gain\ninsight into your user's behavior and experience.\n"
                },
                "sessionReplay": {
                    "$ref": "#/types/dynatrace:index/WebAppEnablementSessionReplay:WebAppEnablementSessionReplay",
                    "description": "[Session Replay](https://dt-url.net/session-replay) captures all user interactions within your application and replays\nthem in a movie-like experience while providing [best-in-class security and data\nprotection](https://dt-url.net/b303zxj).\n"
                }
            },
            "requiredInputs": [
                "rum",
                "sessionReplay"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WebAppEnablement resources.\n",
                "properties": {
                    "applicationId": {
                        "type": "string",
                        "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.\n",
                        "willReplaceOnChanges": true
                    },
                    "rum": {
                        "$ref": "#/types/dynatrace:index/WebAppEnablementRum:WebAppEnablementRum",
                        "description": "Capture and analyze all user actions within your application. Enable [Real User Monitoring\n(RUM)](https://dt-url.net/1n2b0prq) to monitor and improve your application's performance, identify errors, and gain\ninsight into your user's behavior and experience.\n"
                    },
                    "sessionReplay": {
                        "$ref": "#/types/dynatrace:index/WebAppEnablementSessionReplay:WebAppEnablementSessionReplay",
                        "description": "[Session Replay](https://dt-url.net/session-replay) captures all user interactions within your application and replays\nthem in a movie-like experience while providing [best-in-class security and data\nprotection](https://dt-url.net/b303zxj).\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/webAppInjectionCookie:WebAppInjectionCookie": {
            "properties": {
                "applicationId": {
                    "type": "string",
                    "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.\n"
                },
                "cookiePlacementDomain": {
                    "type": "string",
                    "description": "Specify an alternative domain for cookies set by Dynatrace. Keep in mind that your browser may not allow placement of\ncookies on certain domains (for example, top-level domains). Before typing a domain name here, confirm that the domain\nwill accept cookies from your browser. For details, see the list of [forbidden top-level\ndomains](https://dt-url.net/9n6b0pfz).\n"
                },
                "sameSiteCookieAttribute": {
                    "type": "string",
                    "description": "Possible Values: `LAX`, `NONE`, `NOTSET`, `STRICT`\n"
                },
                "useSecureCookieAttribute": {
                    "type": "boolean",
                    "description": "If your application is only accessible via SSL, you can add the Secure attribute to all cookies set by Dynatrace. This\nsetting prevents the display of warnings from PCI-compliance security scanners. Be aware that with this setting enabled\nDynatrace correlation of user actions with server-side web requests is only possible over SSL connections.\n"
                }
            },
            "required": [
                "applicationId",
                "sameSiteCookieAttribute",
                "useSecureCookieAttribute"
            ],
            "inputProperties": {
                "applicationId": {
                    "type": "string",
                    "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.\n"
                },
                "cookiePlacementDomain": {
                    "type": "string",
                    "description": "Specify an alternative domain for cookies set by Dynatrace. Keep in mind that your browser may not allow placement of\ncookies on certain domains (for example, top-level domains). Before typing a domain name here, confirm that the domain\nwill accept cookies from your browser. For details, see the list of [forbidden top-level\ndomains](https://dt-url.net/9n6b0pfz).\n"
                },
                "sameSiteCookieAttribute": {
                    "type": "string",
                    "description": "Possible Values: `LAX`, `NONE`, `NOTSET`, `STRICT`\n"
                },
                "useSecureCookieAttribute": {
                    "type": "boolean",
                    "description": "If your application is only accessible via SSL, you can add the Secure attribute to all cookies set by Dynatrace. This\nsetting prevents the display of warnings from PCI-compliance security scanners. Be aware that with this setting enabled\nDynatrace correlation of user actions with server-side web requests is only possible over SSL connections.\n"
                }
            },
            "requiredInputs": [
                "applicationId",
                "sameSiteCookieAttribute",
                "useSecureCookieAttribute"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WebAppInjectionCookie resources.\n",
                "properties": {
                    "applicationId": {
                        "type": "string",
                        "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.\n"
                    },
                    "cookiePlacementDomain": {
                        "type": "string",
                        "description": "Specify an alternative domain for cookies set by Dynatrace. Keep in mind that your browser may not allow placement of\ncookies on certain domains (for example, top-level domains). Before typing a domain name here, confirm that the domain\nwill accept cookies from your browser. For details, see the list of [forbidden top-level\ndomains](https://dt-url.net/9n6b0pfz).\n"
                    },
                    "sameSiteCookieAttribute": {
                        "type": "string",
                        "description": "Possible Values: `LAX`, `NONE`, `NOTSET`, `STRICT`\n"
                    },
                    "useSecureCookieAttribute": {
                        "type": "boolean",
                        "description": "If your application is only accessible via SSL, you can add the Secure attribute to all cookies set by Dynatrace. This\nsetting prevents the display of warnings from PCI-compliance security scanners. Be aware that with this setting enabled\nDynatrace correlation of user actions with server-side web requests is only possible over SSL connections.\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/webAppJavascriptUpdates:WebAppJavascriptUpdates": {
            "properties": {
                "applicationId": {
                    "type": "string",
                    "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.\n"
                },
                "javascriptVersion": {
                    "type": "string",
                    "description": "Possible Values: `CUSTOM`, `LATEST_IE7_10_SUPPORTED`, `LATEST_STABLE`, `PREVIOUS_STABLE`\n"
                }
            },
            "required": [
                "javascriptVersion"
            ],
            "inputProperties": {
                "applicationId": {
                    "type": "string",
                    "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.\n",
                    "willReplaceOnChanges": true
                },
                "javascriptVersion": {
                    "type": "string",
                    "description": "Possible Values: `CUSTOM`, `LATEST_IE7_10_SUPPORTED`, `LATEST_STABLE`, `PREVIOUS_STABLE`\n"
                }
            },
            "requiredInputs": [
                "javascriptVersion"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WebAppJavascriptUpdates resources.\n",
                "properties": {
                    "applicationId": {
                        "type": "string",
                        "description": "The scope of this settings. If the settings should cover the whole environment, just don't specify any scope.\n",
                        "willReplaceOnChanges": true
                    },
                    "javascriptVersion": {
                        "type": "string",
                        "description": "Possible Values: `CUSTOM`, `LATEST_IE7_10_SUPPORTED`, `LATEST_STABLE`, `PREVIOUS_STABLE`\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/webAppJavascriptVersion:WebAppJavascriptVersion": {
            "properties": {
                "customJavascriptVersion": {
                    "type": "string",
                    "description": "Choose custom version\n"
                }
            },
            "inputProperties": {
                "customJavascriptVersion": {
                    "type": "string",
                    "description": "Choose custom version\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WebAppJavascriptVersion resources.\n",
                "properties": {
                    "customJavascriptVersion": {
                        "type": "string",
                        "description": "Choose custom version\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/webAppKeyPerformanceCustom:WebAppKeyPerformanceCustom": {
            "properties": {
                "scope": {
                    "type": "string",
                    "description": "The scope of this setting (APPLICATION_METHOD, APPLICATION)\n"
                },
                "thresholds": {
                    "$ref": "#/types/dynatrace:index/WebAppKeyPerformanceCustomThresholds:WebAppKeyPerformanceCustomThresholds",
                    "description": "User action duration thresholds\n"
                }
            },
            "required": [
                "scope",
                "thresholds"
            ],
            "inputProperties": {
                "scope": {
                    "type": "string",
                    "description": "The scope of this setting (APPLICATION_METHOD, APPLICATION)\n",
                    "willReplaceOnChanges": true
                },
                "thresholds": {
                    "$ref": "#/types/dynatrace:index/WebAppKeyPerformanceCustomThresholds:WebAppKeyPerformanceCustomThresholds",
                    "description": "User action duration thresholds\n"
                }
            },
            "requiredInputs": [
                "scope",
                "thresholds"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WebAppKeyPerformanceCustom resources.\n",
                "properties": {
                    "scope": {
                        "type": "string",
                        "description": "The scope of this setting (APPLICATION_METHOD, APPLICATION)\n",
                        "willReplaceOnChanges": true
                    },
                    "thresholds": {
                        "$ref": "#/types/dynatrace:index/WebAppKeyPerformanceCustomThresholds:WebAppKeyPerformanceCustomThresholds",
                        "description": "User action duration thresholds\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/webAppKeyPerformanceLoad:WebAppKeyPerformanceLoad": {
            "properties": {
                "fallbackThresholds": {
                    "$ref": "#/types/dynatrace:index/WebAppKeyPerformanceLoadFallbackThresholds:WebAppKeyPerformanceLoadFallbackThresholds",
                    "description": "If the selected key performance metric is not detected, the **User action duration** metric is used instead.\n"
                },
                "kpm": {
                    "type": "string",
                    "description": "Possible Values: `CUMULATIVE_LAYOUT_SHIFT`, `DOM_INTERACTIVE`, `FIRST_INPUT_DELAY`, `LARGEST_CONTENTFUL_PAINT`,\n`LOAD_EVENT_END`, `LOAD_EVENT_START`, `RESPONSE_END`, `RESPONSE_START`, `SPEED_INDEX`, `USER_ACTION_DURATION`,\n`VISUALLY_COMPLETE`\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of this setting (APPLICATION_METHOD, APPLICATION)\n"
                },
                "thresholds": {
                    "$ref": "#/types/dynatrace:index/WebAppKeyPerformanceLoadThresholds:WebAppKeyPerformanceLoadThresholds",
                    "description": "Set the Tolerating and Frustrated performance thresholds for this action type.\n"
                }
            },
            "required": [
                "kpm",
                "scope",
                "thresholds"
            ],
            "inputProperties": {
                "fallbackThresholds": {
                    "$ref": "#/types/dynatrace:index/WebAppKeyPerformanceLoadFallbackThresholds:WebAppKeyPerformanceLoadFallbackThresholds",
                    "description": "If the selected key performance metric is not detected, the **User action duration** metric is used instead.\n"
                },
                "kpm": {
                    "type": "string",
                    "description": "Possible Values: `CUMULATIVE_LAYOUT_SHIFT`, `DOM_INTERACTIVE`, `FIRST_INPUT_DELAY`, `LARGEST_CONTENTFUL_PAINT`,\n`LOAD_EVENT_END`, `LOAD_EVENT_START`, `RESPONSE_END`, `RESPONSE_START`, `SPEED_INDEX`, `USER_ACTION_DURATION`,\n`VISUALLY_COMPLETE`\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of this setting (APPLICATION_METHOD, APPLICATION)\n",
                    "willReplaceOnChanges": true
                },
                "thresholds": {
                    "$ref": "#/types/dynatrace:index/WebAppKeyPerformanceLoadThresholds:WebAppKeyPerformanceLoadThresholds",
                    "description": "Set the Tolerating and Frustrated performance thresholds for this action type.\n"
                }
            },
            "requiredInputs": [
                "kpm",
                "scope",
                "thresholds"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WebAppKeyPerformanceLoad resources.\n",
                "properties": {
                    "fallbackThresholds": {
                        "$ref": "#/types/dynatrace:index/WebAppKeyPerformanceLoadFallbackThresholds:WebAppKeyPerformanceLoadFallbackThresholds",
                        "description": "If the selected key performance metric is not detected, the **User action duration** metric is used instead.\n"
                    },
                    "kpm": {
                        "type": "string",
                        "description": "Possible Values: `CUMULATIVE_LAYOUT_SHIFT`, `DOM_INTERACTIVE`, `FIRST_INPUT_DELAY`, `LARGEST_CONTENTFUL_PAINT`,\n`LOAD_EVENT_END`, `LOAD_EVENT_START`, `RESPONSE_END`, `RESPONSE_START`, `SPEED_INDEX`, `USER_ACTION_DURATION`,\n`VISUALLY_COMPLETE`\n"
                    },
                    "scope": {
                        "type": "string",
                        "description": "The scope of this setting (APPLICATION_METHOD, APPLICATION)\n",
                        "willReplaceOnChanges": true
                    },
                    "thresholds": {
                        "$ref": "#/types/dynatrace:index/WebAppKeyPerformanceLoadThresholds:WebAppKeyPerformanceLoadThresholds",
                        "description": "Set the Tolerating and Frustrated performance thresholds for this action type.\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/webAppKeyPerformanceXhr:WebAppKeyPerformanceXhr": {
            "properties": {
                "fallbackThresholds": {
                    "$ref": "#/types/dynatrace:index/WebAppKeyPerformanceXhrFallbackThresholds:WebAppKeyPerformanceXhrFallbackThresholds",
                    "description": "If the selected key performance metric is not detected, the **User action duration** metric is used instead.\n"
                },
                "kpm": {
                    "type": "string",
                    "description": "Possible Values: `RESPONSE_END`, `RESPONSE_START`, `USER_ACTION_DURATION`, `VISUALLY_COMPLETE`\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of this setting (APPLICATION_METHOD, APPLICATION)\n"
                },
                "thresholds": {
                    "$ref": "#/types/dynatrace:index/WebAppKeyPerformanceXhrThresholds:WebAppKeyPerformanceXhrThresholds",
                    "description": "Set the Tolerating and Frustrated performance thresholds for this action type.\n"
                }
            },
            "required": [
                "kpm",
                "scope",
                "thresholds"
            ],
            "inputProperties": {
                "fallbackThresholds": {
                    "$ref": "#/types/dynatrace:index/WebAppKeyPerformanceXhrFallbackThresholds:WebAppKeyPerformanceXhrFallbackThresholds",
                    "description": "If the selected key performance metric is not detected, the **User action duration** metric is used instead.\n"
                },
                "kpm": {
                    "type": "string",
                    "description": "Possible Values: `RESPONSE_END`, `RESPONSE_START`, `USER_ACTION_DURATION`, `VISUALLY_COMPLETE`\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of this setting (APPLICATION_METHOD, APPLICATION)\n",
                    "willReplaceOnChanges": true
                },
                "thresholds": {
                    "$ref": "#/types/dynatrace:index/WebAppKeyPerformanceXhrThresholds:WebAppKeyPerformanceXhrThresholds",
                    "description": "Set the Tolerating and Frustrated performance thresholds for this action type.\n"
                }
            },
            "requiredInputs": [
                "kpm",
                "scope",
                "thresholds"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WebAppKeyPerformanceXhr resources.\n",
                "properties": {
                    "fallbackThresholds": {
                        "$ref": "#/types/dynatrace:index/WebAppKeyPerformanceXhrFallbackThresholds:WebAppKeyPerformanceXhrFallbackThresholds",
                        "description": "If the selected key performance metric is not detected, the **User action duration** metric is used instead.\n"
                    },
                    "kpm": {
                        "type": "string",
                        "description": "Possible Values: `RESPONSE_END`, `RESPONSE_START`, `USER_ACTION_DURATION`, `VISUALLY_COMPLETE`\n"
                    },
                    "scope": {
                        "type": "string",
                        "description": "The scope of this setting (APPLICATION_METHOD, APPLICATION)\n",
                        "willReplaceOnChanges": true
                    },
                    "thresholds": {
                        "$ref": "#/types/dynatrace:index/WebAppKeyPerformanceXhrThresholds:WebAppKeyPerformanceXhrThresholds",
                        "description": "Set the Tolerating and Frustrated performance thresholds for this action type.\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/webAppRequestErrors:WebAppRequestErrors": {
            "properties": {
                "errorRules": {
                    "$ref": "#/types/dynatrace:index/WebAppRequestErrorsErrorRules:WebAppRequestErrorsErrorRules",
                    "description": "(Field has overlap with `dynatrace_application_error_rules`)\n"
                },
                "ignoreRequestErrorsInApdexCalculation": {
                    "type": "boolean",
                    "description": "(Field has overlap with `dynatrace_application_error_rules`) This setting overrides Apdex settings for individual rules\nlisted below\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of this setting (APPLICATION)\n"
                }
            },
            "required": [
                "ignoreRequestErrorsInApdexCalculation",
                "scope"
            ],
            "inputProperties": {
                "errorRules": {
                    "$ref": "#/types/dynatrace:index/WebAppRequestErrorsErrorRules:WebAppRequestErrorsErrorRules",
                    "description": "(Field has overlap with `dynatrace_application_error_rules`)\n"
                },
                "ignoreRequestErrorsInApdexCalculation": {
                    "type": "boolean",
                    "description": "(Field has overlap with `dynatrace_application_error_rules`) This setting overrides Apdex settings for individual rules\nlisted below\n"
                },
                "scope": {
                    "type": "string",
                    "description": "The scope of this setting (APPLICATION)\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "ignoreRequestErrorsInApdexCalculation",
                "scope"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WebAppRequestErrors resources.\n",
                "properties": {
                    "errorRules": {
                        "$ref": "#/types/dynatrace:index/WebAppRequestErrorsErrorRules:WebAppRequestErrorsErrorRules",
                        "description": "(Field has overlap with `dynatrace_application_error_rules`)\n"
                    },
                    "ignoreRequestErrorsInApdexCalculation": {
                        "type": "boolean",
                        "description": "(Field has overlap with `dynatrace_application_error_rules`) This setting overrides Apdex settings for individual rules\nlisted below\n"
                    },
                    "scope": {
                        "type": "string",
                        "description": "The scope of this setting (APPLICATION)\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/webAppResourceCleanup:WebAppResourceCleanup": {
            "properties": {
                "insertAfter": {
                    "type": "string",
                    "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                },
                "name": {
                    "type": "string",
                    "description": "For example: *Mask journeyId*\n"
                },
                "regularExpression": {
                    "type": "string",
                    "description": "For example: `(.*)(journeyId=)-?\\d+(.*)`\n"
                },
                "replaceWith": {
                    "type": "string",
                    "description": "For example: `$1$2\\*$3`\n"
                }
            },
            "required": [
                "insertAfter",
                "name",
                "regularExpression",
                "replaceWith"
            ],
            "inputProperties": {
                "insertAfter": {
                    "type": "string",
                    "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                },
                "name": {
                    "type": "string",
                    "description": "For example: *Mask journeyId*\n"
                },
                "regularExpression": {
                    "type": "string",
                    "description": "For example: `(.*)(journeyId=)-?\\d+(.*)`\n"
                },
                "replaceWith": {
                    "type": "string",
                    "description": "For example: `$1$2\\*$3`\n"
                }
            },
            "requiredInputs": [
                "regularExpression",
                "replaceWith"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WebAppResourceCleanup resources.\n",
                "properties": {
                    "insertAfter": {
                        "type": "string",
                        "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "For example: *Mask journeyId*\n"
                    },
                    "regularExpression": {
                        "type": "string",
                        "description": "For example: `(.*)(journeyId=)-?\\d+(.*)`\n"
                    },
                    "replaceWith": {
                        "type": "string",
                        "description": "For example: `$1$2\\*$3`\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/webAppResourceTypes:WebAppResourceTypes": {
            "properties": {
                "insertAfter": {
                    "type": "string",
                    "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                },
                "primaryResourceType": {
                    "type": "string",
                    "description": "Possible Values: `CSS`, `IMAGE`, `OTHER`, `SCRIPT`\n"
                },
                "regularExpression": {
                    "type": "string",
                    "description": "The regular expression to detect the resource.\n"
                },
                "secondaryResourceType": {
                    "type": "string",
                    "description": "The secondary type of the resource.\n"
                }
            },
            "required": [
                "insertAfter",
                "primaryResourceType",
                "regularExpression"
            ],
            "inputProperties": {
                "insertAfter": {
                    "type": "string",
                    "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                },
                "primaryResourceType": {
                    "type": "string",
                    "description": "Possible Values: `CSS`, `IMAGE`, `OTHER`, `SCRIPT`\n"
                },
                "regularExpression": {
                    "type": "string",
                    "description": "The regular expression to detect the resource.\n"
                },
                "secondaryResourceType": {
                    "type": "string",
                    "description": "The secondary type of the resource.\n"
                }
            },
            "requiredInputs": [
                "primaryResourceType",
                "regularExpression"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WebAppResourceTypes resources.\n",
                "properties": {
                    "insertAfter": {
                        "type": "string",
                        "description": "Because this resource allows for ordering you may specify the ID of the resource instance that comes before this\ninstance regarding order. If not specified when creating the setting will be added to the end of the list. If not\nspecified during update the order will remain untouched\n"
                    },
                    "primaryResourceType": {
                        "type": "string",
                        "description": "Possible Values: `CSS`, `IMAGE`, `OTHER`, `SCRIPT`\n"
                    },
                    "regularExpression": {
                        "type": "string",
                        "description": "The regular expression to detect the resource.\n"
                    },
                    "secondaryResourceType": {
                        "type": "string",
                        "description": "The secondary type of the resource.\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/webApplication:WebApplication": {
            "properties": {
                "conversionGoals": {
                    "$ref": "#/types/dynatrace:index/WebApplicationConversionGoals:WebApplicationConversionGoals",
                    "description": "A list of conversion goals of the application\n"
                },
                "costControlUserSessionPercentage": {
                    "type": "integer",
                    "description": "(Field has overlap with `dynatrace_web_app_enablement`) Analize *X*% of user sessions\n"
                },
                "customActionApdexSettings": {
                    "$ref": "#/types/dynatrace:index/WebApplicationCustomActionApdexSettings:WebApplicationCustomActionApdexSettings",
                    "description": "Defines the Custom Action Apdex settings of an application\n"
                },
                "keyUserActions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/WebApplicationKeyUserAction:WebApplicationKeyUserAction"
                    },
                    "description": "User Action names to be flagged as Key User Actions\n",
                    "deprecationMessage": "Configuring Key User Actions within `dynatrace_web_application` is discouraged. Use the dedicated resource `dynatrace_key_user_action` instead."
                },
                "loadActionApdexSettings": {
                    "$ref": "#/types/dynatrace:index/WebApplicationLoadActionApdexSettings:WebApplicationLoadActionApdexSettings",
                    "description": "Defines the Load Action Apdex settings of an application\n"
                },
                "loadActionKeyPerformanceMetric": {
                    "type": "string",
                    "description": "The key performance metric of load actions. Possible values are `ACTION_DURATION`, `CUMULATIVE_LAYOUT_SHIFT`,\n`DOM_INTERACTIVE`, `FIRST_INPUT_DELAY`, `LARGEST_CONTENTFUL_PAINT`, `LOAD_EVENT_END`, `LOAD_EVENT_START`,\n`RESPONSE_END`, `RESPONSE_START`, `SPEED_INDEX` and `VISUALLY_COMPLETE`\n"
                },
                "metaDataCaptureSettings": {
                    "$ref": "#/types/dynatrace:index/WebApplicationMetaDataCaptureSettings:WebApplicationMetaDataCaptureSettings",
                    "description": "Java script agent meta data capture settings\n"
                },
                "monitoringSettings": {
                    "$ref": "#/types/dynatrace:index/WebApplicationMonitoringSettings:WebApplicationMonitoringSettings",
                    "description": "Real user monitoring settings\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the web application, displayed in the UI\n"
                },
                "realUserMonitoringEnabled": {
                    "type": "boolean",
                    "description": "(Field has overlap with `dynatrace_web_app_enablement`) Real user monitoring enabled/disabled\n"
                },
                "sessionReplayConfig": {
                    "$ref": "#/types/dynatrace:index/WebApplicationSessionReplayConfig:WebApplicationSessionReplayConfig",
                    "description": "Settings regarding Session Replay\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the web application. Possible values are `AUTO_INJECTED`, `BROWSER_EXTENSION_INJECTED` and\n`MANUALLY_INJECTED`\n"
                },
                "urlInjectionPattern": {
                    "type": "string",
                    "description": "URL injection pattern for manual web application\n"
                },
                "userActionAndSessionProperties": {
                    "$ref": "#/types/dynatrace:index/WebApplicationUserActionAndSessionProperties:WebApplicationUserActionAndSessionProperties",
                    "description": "User action and session properties settings\n"
                },
                "userActionNamingSettings": {
                    "$ref": "#/types/dynatrace:index/WebApplicationUserActionNamingSettings:WebApplicationUserActionNamingSettings",
                    "description": "The settings of user action naming\n"
                },
                "userTags": {
                    "$ref": "#/types/dynatrace:index/WebApplicationUserTags:WebApplicationUserTags",
                    "description": "User tags settings\n"
                },
                "waterfallSettings": {
                    "$ref": "#/types/dynatrace:index/WebApplicationWaterfallSettings:WebApplicationWaterfallSettings",
                    "description": "These settings influence the monitoring data you receive for 3rd party, CDN, and 1st party resources\n"
                },
                "xhrActionApdexSettings": {
                    "$ref": "#/types/dynatrace:index/WebApplicationXhrActionApdexSettings:WebApplicationXhrActionApdexSettings",
                    "description": "Defines the XHR Action Apdex settings of an application\n"
                },
                "xhrActionKeyPerformanceMetric": {
                    "type": "string",
                    "description": "The key performance metric of XHR actions. Possible values are `ACTION_DURATION`, `RESPONSE_END`, `RESPONSE_START` and\n`VISUALLY_COMPLETE`.\n"
                }
            },
            "required": [
                "costControlUserSessionPercentage",
                "customActionApdexSettings",
                "loadActionApdexSettings",
                "loadActionKeyPerformanceMetric",
                "monitoringSettings",
                "name",
                "sessionReplayConfig",
                "type",
                "waterfallSettings",
                "xhrActionApdexSettings",
                "xhrActionKeyPerformanceMetric"
            ],
            "inputProperties": {
                "conversionGoals": {
                    "$ref": "#/types/dynatrace:index/WebApplicationConversionGoals:WebApplicationConversionGoals",
                    "description": "A list of conversion goals of the application\n"
                },
                "costControlUserSessionPercentage": {
                    "type": "integer",
                    "description": "(Field has overlap with `dynatrace_web_app_enablement`) Analize *X*% of user sessions\n"
                },
                "customActionApdexSettings": {
                    "$ref": "#/types/dynatrace:index/WebApplicationCustomActionApdexSettings:WebApplicationCustomActionApdexSettings",
                    "description": "Defines the Custom Action Apdex settings of an application\n"
                },
                "keyUserActions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/dynatrace:index/WebApplicationKeyUserAction:WebApplicationKeyUserAction"
                    },
                    "description": "User Action names to be flagged as Key User Actions\n",
                    "deprecationMessage": "Configuring Key User Actions within `dynatrace_web_application` is discouraged. Use the dedicated resource `dynatrace_key_user_action` instead."
                },
                "loadActionApdexSettings": {
                    "$ref": "#/types/dynatrace:index/WebApplicationLoadActionApdexSettings:WebApplicationLoadActionApdexSettings",
                    "description": "Defines the Load Action Apdex settings of an application\n"
                },
                "loadActionKeyPerformanceMetric": {
                    "type": "string",
                    "description": "The key performance metric of load actions. Possible values are `ACTION_DURATION`, `CUMULATIVE_LAYOUT_SHIFT`,\n`DOM_INTERACTIVE`, `FIRST_INPUT_DELAY`, `LARGEST_CONTENTFUL_PAINT`, `LOAD_EVENT_END`, `LOAD_EVENT_START`,\n`RESPONSE_END`, `RESPONSE_START`, `SPEED_INDEX` and `VISUALLY_COMPLETE`\n"
                },
                "metaDataCaptureSettings": {
                    "$ref": "#/types/dynatrace:index/WebApplicationMetaDataCaptureSettings:WebApplicationMetaDataCaptureSettings",
                    "description": "Java script agent meta data capture settings\n"
                },
                "monitoringSettings": {
                    "$ref": "#/types/dynatrace:index/WebApplicationMonitoringSettings:WebApplicationMonitoringSettings",
                    "description": "Real user monitoring settings\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the web application, displayed in the UI\n"
                },
                "realUserMonitoringEnabled": {
                    "type": "boolean",
                    "description": "(Field has overlap with `dynatrace_web_app_enablement`) Real user monitoring enabled/disabled\n"
                },
                "sessionReplayConfig": {
                    "$ref": "#/types/dynatrace:index/WebApplicationSessionReplayConfig:WebApplicationSessionReplayConfig",
                    "description": "Settings regarding Session Replay\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the web application. Possible values are `AUTO_INJECTED`, `BROWSER_EXTENSION_INJECTED` and\n`MANUALLY_INJECTED`\n"
                },
                "urlInjectionPattern": {
                    "type": "string",
                    "description": "URL injection pattern for manual web application\n"
                },
                "userActionAndSessionProperties": {
                    "$ref": "#/types/dynatrace:index/WebApplicationUserActionAndSessionProperties:WebApplicationUserActionAndSessionProperties",
                    "description": "User action and session properties settings\n"
                },
                "userActionNamingSettings": {
                    "$ref": "#/types/dynatrace:index/WebApplicationUserActionNamingSettings:WebApplicationUserActionNamingSettings",
                    "description": "The settings of user action naming\n"
                },
                "userTags": {
                    "$ref": "#/types/dynatrace:index/WebApplicationUserTags:WebApplicationUserTags",
                    "description": "User tags settings\n"
                },
                "waterfallSettings": {
                    "$ref": "#/types/dynatrace:index/WebApplicationWaterfallSettings:WebApplicationWaterfallSettings",
                    "description": "These settings influence the monitoring data you receive for 3rd party, CDN, and 1st party resources\n"
                },
                "xhrActionApdexSettings": {
                    "$ref": "#/types/dynatrace:index/WebApplicationXhrActionApdexSettings:WebApplicationXhrActionApdexSettings",
                    "description": "Defines the XHR Action Apdex settings of an application\n"
                },
                "xhrActionKeyPerformanceMetric": {
                    "type": "string",
                    "description": "The key performance metric of XHR actions. Possible values are `ACTION_DURATION`, `RESPONSE_END`, `RESPONSE_START` and\n`VISUALLY_COMPLETE`.\n"
                }
            },
            "requiredInputs": [
                "costControlUserSessionPercentage",
                "customActionApdexSettings",
                "loadActionApdexSettings",
                "loadActionKeyPerformanceMetric",
                "monitoringSettings",
                "type",
                "waterfallSettings",
                "xhrActionApdexSettings",
                "xhrActionKeyPerformanceMetric"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WebApplication resources.\n",
                "properties": {
                    "conversionGoals": {
                        "$ref": "#/types/dynatrace:index/WebApplicationConversionGoals:WebApplicationConversionGoals",
                        "description": "A list of conversion goals of the application\n"
                    },
                    "costControlUserSessionPercentage": {
                        "type": "integer",
                        "description": "(Field has overlap with `dynatrace_web_app_enablement`) Analize *X*% of user sessions\n"
                    },
                    "customActionApdexSettings": {
                        "$ref": "#/types/dynatrace:index/WebApplicationCustomActionApdexSettings:WebApplicationCustomActionApdexSettings",
                        "description": "Defines the Custom Action Apdex settings of an application\n"
                    },
                    "keyUserActions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/dynatrace:index/WebApplicationKeyUserAction:WebApplicationKeyUserAction"
                        },
                        "description": "User Action names to be flagged as Key User Actions\n",
                        "deprecationMessage": "Configuring Key User Actions within `dynatrace_web_application` is discouraged. Use the dedicated resource `dynatrace_key_user_action` instead."
                    },
                    "loadActionApdexSettings": {
                        "$ref": "#/types/dynatrace:index/WebApplicationLoadActionApdexSettings:WebApplicationLoadActionApdexSettings",
                        "description": "Defines the Load Action Apdex settings of an application\n"
                    },
                    "loadActionKeyPerformanceMetric": {
                        "type": "string",
                        "description": "The key performance metric of load actions. Possible values are `ACTION_DURATION`, `CUMULATIVE_LAYOUT_SHIFT`,\n`DOM_INTERACTIVE`, `FIRST_INPUT_DELAY`, `LARGEST_CONTENTFUL_PAINT`, `LOAD_EVENT_END`, `LOAD_EVENT_START`,\n`RESPONSE_END`, `RESPONSE_START`, `SPEED_INDEX` and `VISUALLY_COMPLETE`\n"
                    },
                    "metaDataCaptureSettings": {
                        "$ref": "#/types/dynatrace:index/WebApplicationMetaDataCaptureSettings:WebApplicationMetaDataCaptureSettings",
                        "description": "Java script agent meta data capture settings\n"
                    },
                    "monitoringSettings": {
                        "$ref": "#/types/dynatrace:index/WebApplicationMonitoringSettings:WebApplicationMonitoringSettings",
                        "description": "Real user monitoring settings\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the web application, displayed in the UI\n"
                    },
                    "realUserMonitoringEnabled": {
                        "type": "boolean",
                        "description": "(Field has overlap with `dynatrace_web_app_enablement`) Real user monitoring enabled/disabled\n"
                    },
                    "sessionReplayConfig": {
                        "$ref": "#/types/dynatrace:index/WebApplicationSessionReplayConfig:WebApplicationSessionReplayConfig",
                        "description": "Settings regarding Session Replay\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the web application. Possible values are `AUTO_INJECTED`, `BROWSER_EXTENSION_INJECTED` and\n`MANUALLY_INJECTED`\n"
                    },
                    "urlInjectionPattern": {
                        "type": "string",
                        "description": "URL injection pattern for manual web application\n"
                    },
                    "userActionAndSessionProperties": {
                        "$ref": "#/types/dynatrace:index/WebApplicationUserActionAndSessionProperties:WebApplicationUserActionAndSessionProperties",
                        "description": "User action and session properties settings\n"
                    },
                    "userActionNamingSettings": {
                        "$ref": "#/types/dynatrace:index/WebApplicationUserActionNamingSettings:WebApplicationUserActionNamingSettings",
                        "description": "The settings of user action naming\n"
                    },
                    "userTags": {
                        "$ref": "#/types/dynatrace:index/WebApplicationUserTags:WebApplicationUserTags",
                        "description": "User tags settings\n"
                    },
                    "waterfallSettings": {
                        "$ref": "#/types/dynatrace:index/WebApplicationWaterfallSettings:WebApplicationWaterfallSettings",
                        "description": "These settings influence the monitoring data you receive for 3rd party, CDN, and 1st party resources\n"
                    },
                    "xhrActionApdexSettings": {
                        "$ref": "#/types/dynatrace:index/WebApplicationXhrActionApdexSettings:WebApplicationXhrActionApdexSettings",
                        "description": "Defines the XHR Action Apdex settings of an application\n"
                    },
                    "xhrActionKeyPerformanceMetric": {
                        "type": "string",
                        "description": "The key performance metric of XHR actions. Possible values are `ACTION_DURATION`, `RESPONSE_END`, `RESPONSE_START` and\n`VISUALLY_COMPLETE`.\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/webhookNotification:WebhookNotification": {
            "properties": {
                "active": {
                    "type": "boolean",
                    "description": "The configuration is enabled (`true`) or disabled (`false`)\n"
                },
                "headers": {
                    "$ref": "#/types/dynatrace:index/WebhookNotificationHeaders:WebhookNotificationHeaders",
                    "description": "A list of the additional HTTP headers\n"
                },
                "insecure": {
                    "type": "boolean",
                    "description": "Accept any, including self-signed and invalid, SSL certificate (`true`) or only trusted (`false`) certificates\n"
                },
                "legacyId": {
                    "type": "string",
                    "description": "The ID of these settings when referred to from resources requiring the REST API V1 keys\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the notification configuration\n"
                },
                "notifyClosedProblems": {
                    "type": "boolean",
                    "description": "Send email if problem is closed\n"
                },
                "notifyEventMerges": {
                    "type": "boolean",
                    "description": "Call webhook if new events merge into existing problems\n"
                },
                "oauth2Credentials": {
                    "$ref": "#/types/dynatrace:index/WebhookNotificationOauth2Credentials:WebhookNotificationOauth2Credentials",
                    "description": "To authenticate your integration, the OAuth 2.0 *Client Credentials* Flow (Grant Type) is used. For details see [Client\nCredentials Flow](https://dt-url.net/ym22wsm)). The obtained Access Token is subsequently provided in the\n*Authorization* header of the request carrying the notification payload.\n"
                },
                "payload": {
                    "type": "string",
                    "description": "The content of the notification message. You can use the following placeholders: * `{ImpactedEntities}`: Details about\nthe entities impacted by the problem in form of a JSON array. * `{ImpactedEntity}`: The entity impacted by the problem\nor *X* impacted entities. * `{PID}`: The ID of the reported problem. * `{ProblemDetailsHTML}`: All problem event\ndetails, including root cause, as an HTML-formatted string. * `{ProblemDetailsJSON}`: All problem event details,\nincluding root cause, as a JSON object. * `{ProblemDetailsMarkdown}`: All problem event details, including root cause,\nas a [Markdown-formatted](https://www.markdownguide.org/cheat-sheet/) string. * `{ProblemDetailsText}`: All problem\nevent details, including root cause, as a text-formatted string. * `{ProblemID}`: The display number of the reported\nproblem. * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of\nthe problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`. * `{ProblemSeverity}`: The [severity\nlevel](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`,\n`ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`. * `{ProblemTitle}`: A short description of the\nproblem. * `{ProblemURL}`: The URL of the problem within Dynatrace. * `{State}`: The state of the problem. Possible\nvalues are `OPEN` and `RESOLVED`. * `{Tags}`: The list of tags that are defined for all impacted entities, separated by\ncommas\n"
                },
                "profile": {
                    "type": "string",
                    "description": "The ID of the associated alerting profile\n"
                },
                "secretUrl": {
                    "type": "string",
                    "description": "The secret URL of the webhook endpoint.\n",
                    "secret": true
                },
                "url": {
                    "type": "string",
                    "description": "The URL of the WebHook endpoint\n"
                },
                "urlContainsSecret": {
                    "type": "boolean",
                    "description": "Secret webhook URL\n"
                },
                "useOauth2": {
                    "type": "boolean",
                    "description": "Use OAuth 2.0 for authentication\n"
                }
            },
            "required": [
                "active",
                "legacyId",
                "name",
                "payload",
                "profile"
            ],
            "inputProperties": {
                "active": {
                    "type": "boolean",
                    "description": "The configuration is enabled (`true`) or disabled (`false`)\n"
                },
                "headers": {
                    "$ref": "#/types/dynatrace:index/WebhookNotificationHeaders:WebhookNotificationHeaders",
                    "description": "A list of the additional HTTP headers\n"
                },
                "insecure": {
                    "type": "boolean",
                    "description": "Accept any, including self-signed and invalid, SSL certificate (`true`) or only trusted (`false`) certificates\n"
                },
                "legacyId": {
                    "type": "string",
                    "description": "The ID of these settings when referred to from resources requiring the REST API V1 keys\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the notification configuration\n"
                },
                "notifyClosedProblems": {
                    "type": "boolean",
                    "description": "Send email if problem is closed\n"
                },
                "notifyEventMerges": {
                    "type": "boolean",
                    "description": "Call webhook if new events merge into existing problems\n"
                },
                "oauth2Credentials": {
                    "$ref": "#/types/dynatrace:index/WebhookNotificationOauth2Credentials:WebhookNotificationOauth2Credentials",
                    "description": "To authenticate your integration, the OAuth 2.0 *Client Credentials* Flow (Grant Type) is used. For details see [Client\nCredentials Flow](https://dt-url.net/ym22wsm)). The obtained Access Token is subsequently provided in the\n*Authorization* header of the request carrying the notification payload.\n"
                },
                "payload": {
                    "type": "string",
                    "description": "The content of the notification message. You can use the following placeholders: * `{ImpactedEntities}`: Details about\nthe entities impacted by the problem in form of a JSON array. * `{ImpactedEntity}`: The entity impacted by the problem\nor *X* impacted entities. * `{PID}`: The ID of the reported problem. * `{ProblemDetailsHTML}`: All problem event\ndetails, including root cause, as an HTML-formatted string. * `{ProblemDetailsJSON}`: All problem event details,\nincluding root cause, as a JSON object. * `{ProblemDetailsMarkdown}`: All problem event details, including root cause,\nas a [Markdown-formatted](https://www.markdownguide.org/cheat-sheet/) string. * `{ProblemDetailsText}`: All problem\nevent details, including root cause, as a text-formatted string. * `{ProblemID}`: The display number of the reported\nproblem. * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of\nthe problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`. * `{ProblemSeverity}`: The [severity\nlevel](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`,\n`ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`. * `{ProblemTitle}`: A short description of the\nproblem. * `{ProblemURL}`: The URL of the problem within Dynatrace. * `{State}`: The state of the problem. Possible\nvalues are `OPEN` and `RESOLVED`. * `{Tags}`: The list of tags that are defined for all impacted entities, separated by\ncommas\n"
                },
                "profile": {
                    "type": "string",
                    "description": "The ID of the associated alerting profile\n"
                },
                "secretUrl": {
                    "type": "string",
                    "description": "The secret URL of the webhook endpoint.\n",
                    "secret": true
                },
                "url": {
                    "type": "string",
                    "description": "The URL of the WebHook endpoint\n"
                },
                "urlContainsSecret": {
                    "type": "boolean",
                    "description": "Secret webhook URL\n"
                },
                "useOauth2": {
                    "type": "boolean",
                    "description": "Use OAuth 2.0 for authentication\n"
                }
            },
            "requiredInputs": [
                "active",
                "payload",
                "profile"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WebhookNotification resources.\n",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "description": "The configuration is enabled (`true`) or disabled (`false`)\n"
                    },
                    "headers": {
                        "$ref": "#/types/dynatrace:index/WebhookNotificationHeaders:WebhookNotificationHeaders",
                        "description": "A list of the additional HTTP headers\n"
                    },
                    "insecure": {
                        "type": "boolean",
                        "description": "Accept any, including self-signed and invalid, SSL certificate (`true`) or only trusted (`false`) certificates\n"
                    },
                    "legacyId": {
                        "type": "string",
                        "description": "The ID of these settings when referred to from resources requiring the REST API V1 keys\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the notification configuration\n"
                    },
                    "notifyClosedProblems": {
                        "type": "boolean",
                        "description": "Send email if problem is closed\n"
                    },
                    "notifyEventMerges": {
                        "type": "boolean",
                        "description": "Call webhook if new events merge into existing problems\n"
                    },
                    "oauth2Credentials": {
                        "$ref": "#/types/dynatrace:index/WebhookNotificationOauth2Credentials:WebhookNotificationOauth2Credentials",
                        "description": "To authenticate your integration, the OAuth 2.0 *Client Credentials* Flow (Grant Type) is used. For details see [Client\nCredentials Flow](https://dt-url.net/ym22wsm)). The obtained Access Token is subsequently provided in the\n*Authorization* header of the request carrying the notification payload.\n"
                    },
                    "payload": {
                        "type": "string",
                        "description": "The content of the notification message. You can use the following placeholders: * `{ImpactedEntities}`: Details about\nthe entities impacted by the problem in form of a JSON array. * `{ImpactedEntity}`: The entity impacted by the problem\nor *X* impacted entities. * `{PID}`: The ID of the reported problem. * `{ProblemDetailsHTML}`: All problem event\ndetails, including root cause, as an HTML-formatted string. * `{ProblemDetailsJSON}`: All problem event details,\nincluding root cause, as a JSON object. * `{ProblemDetailsMarkdown}`: All problem event details, including root cause,\nas a [Markdown-formatted](https://www.markdownguide.org/cheat-sheet/) string. * `{ProblemDetailsText}`: All problem\nevent details, including root cause, as a text-formatted string. * `{ProblemID}`: The display number of the reported\nproblem. * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of\nthe problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`. * `{ProblemSeverity}`: The [severity\nlevel](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`,\n`ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`. * `{ProblemTitle}`: A short description of the\nproblem. * `{ProblemURL}`: The URL of the problem within Dynatrace. * `{State}`: The state of the problem. Possible\nvalues are `OPEN` and `RESOLVED`. * `{Tags}`: The list of tags that are defined for all impacted entities, separated by\ncommas\n"
                    },
                    "profile": {
                        "type": "string",
                        "description": "The ID of the associated alerting profile\n"
                    },
                    "secretUrl": {
                        "type": "string",
                        "description": "The secret URL of the webhook endpoint.\n",
                        "secret": true
                    },
                    "url": {
                        "type": "string",
                        "description": "The URL of the WebHook endpoint\n"
                    },
                    "urlContainsSecret": {
                        "type": "boolean",
                        "description": "Secret webhook URL\n"
                    },
                    "useOauth2": {
                        "type": "boolean",
                        "description": "Use OAuth 2.0 for authentication\n"
                    }
                },
                "type": "object"
            }
        },
        "dynatrace:index/xmattersNotification:XmattersNotification": {
            "properties": {
                "active": {
                    "type": "boolean",
                    "description": "The configuration is enabled (`true`) or disabled (`false`)\n"
                },
                "headers": {
                    "$ref": "#/types/dynatrace:index/XmattersNotificationHeaders:XmattersNotificationHeaders",
                    "description": "A list of the additional HTTP headers\n"
                },
                "insecure": {
                    "type": "boolean",
                    "description": "Accept any, including self-signed and invalid, SSL certificate (`true`) or only trusted (`false`) certificates\n"
                },
                "legacyId": {
                    "type": "string",
                    "description": "The ID of these settings when referred to from resources requiring the REST API V1 keys\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the notification configuration\n"
                },
                "payload": {
                    "type": "string",
                    "description": "The content of the notification message. You can use the following placeholders: * `{ImpactedEntities}`: Details about\nthe entities impacted by the problem in form of a JSON array. * `{ImpactedEntity}`: The entity impacted by the problem\nor *X* impacted entities. * `{PID}`: The ID of the reported problem. * `{ProblemDetailsHTML}`: All problem event\ndetails, including root cause, as an HTML-formatted string. * `{ProblemDetailsJSON}`: All problem event details,\nincluding root cause, as a JSON object. * `{ProblemDetailsMarkdown}`: All problem event details, including root cause,\nas a [Markdown-formatted](https://www.markdownguide.org/cheat-sheet/) string. * `{ProblemDetailsText}`: All problem\nevent details, including root cause, as a text-formatted string. * `{ProblemID}`: The display number of the reported\nproblem. * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of\nthe problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`. * `{ProblemSeverity}`: The [severity\nlevel](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`,\n`ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`. * `{ProblemTitle}`: A short description of the\nproblem. * `{ProblemURL}`: The URL of the problem within Dynatrace. * `{State}`: The state of the problem. Possible\nvalues are `OPEN` and `RESOLVED`. * `{Tags}`: The list of tags that are defined for all impacted entities, separated by\ncommas\n"
                },
                "profile": {
                    "type": "string",
                    "description": "The ID of the associated alerting profile\n"
                },
                "url": {
                    "type": "string",
                    "description": "The URL of the WebHook endpoint\n"
                }
            },
            "required": [
                "active",
                "legacyId",
                "name",
                "payload",
                "profile",
                "url"
            ],
            "inputProperties": {
                "active": {
                    "type": "boolean",
                    "description": "The configuration is enabled (`true`) or disabled (`false`)\n"
                },
                "headers": {
                    "$ref": "#/types/dynatrace:index/XmattersNotificationHeaders:XmattersNotificationHeaders",
                    "description": "A list of the additional HTTP headers\n"
                },
                "insecure": {
                    "type": "boolean",
                    "description": "Accept any, including self-signed and invalid, SSL certificate (`true`) or only trusted (`false`) certificates\n"
                },
                "legacyId": {
                    "type": "string",
                    "description": "The ID of these settings when referred to from resources requiring the REST API V1 keys\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the notification configuration\n"
                },
                "payload": {
                    "type": "string",
                    "description": "The content of the notification message. You can use the following placeholders: * `{ImpactedEntities}`: Details about\nthe entities impacted by the problem in form of a JSON array. * `{ImpactedEntity}`: The entity impacted by the problem\nor *X* impacted entities. * `{PID}`: The ID of the reported problem. * `{ProblemDetailsHTML}`: All problem event\ndetails, including root cause, as an HTML-formatted string. * `{ProblemDetailsJSON}`: All problem event details,\nincluding root cause, as a JSON object. * `{ProblemDetailsMarkdown}`: All problem event details, including root cause,\nas a [Markdown-formatted](https://www.markdownguide.org/cheat-sheet/) string. * `{ProblemDetailsText}`: All problem\nevent details, including root cause, as a text-formatted string. * `{ProblemID}`: The display number of the reported\nproblem. * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of\nthe problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`. * `{ProblemSeverity}`: The [severity\nlevel](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`,\n`ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`. * `{ProblemTitle}`: A short description of the\nproblem. * `{ProblemURL}`: The URL of the problem within Dynatrace. * `{State}`: The state of the problem. Possible\nvalues are `OPEN` and `RESOLVED`. * `{Tags}`: The list of tags that are defined for all impacted entities, separated by\ncommas\n"
                },
                "profile": {
                    "type": "string",
                    "description": "The ID of the associated alerting profile\n"
                },
                "url": {
                    "type": "string",
                    "description": "The URL of the WebHook endpoint\n"
                }
            },
            "requiredInputs": [
                "active",
                "payload",
                "profile",
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering XmattersNotification resources.\n",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "description": "The configuration is enabled (`true`) or disabled (`false`)\n"
                    },
                    "headers": {
                        "$ref": "#/types/dynatrace:index/XmattersNotificationHeaders:XmattersNotificationHeaders",
                        "description": "A list of the additional HTTP headers\n"
                    },
                    "insecure": {
                        "type": "boolean",
                        "description": "Accept any, including self-signed and invalid, SSL certificate (`true`) or only trusted (`false`) certificates\n"
                    },
                    "legacyId": {
                        "type": "string",
                        "description": "The ID of these settings when referred to from resources requiring the REST API V1 keys\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the notification configuration\n"
                    },
                    "payload": {
                        "type": "string",
                        "description": "The content of the notification message. You can use the following placeholders: * `{ImpactedEntities}`: Details about\nthe entities impacted by the problem in form of a JSON array. * `{ImpactedEntity}`: The entity impacted by the problem\nor *X* impacted entities. * `{PID}`: The ID of the reported problem. * `{ProblemDetailsHTML}`: All problem event\ndetails, including root cause, as an HTML-formatted string. * `{ProblemDetailsJSON}`: All problem event details,\nincluding root cause, as a JSON object. * `{ProblemDetailsMarkdown}`: All problem event details, including root cause,\nas a [Markdown-formatted](https://www.markdownguide.org/cheat-sheet/) string. * `{ProblemDetailsText}`: All problem\nevent details, including root cause, as a text-formatted string. * `{ProblemID}`: The display number of the reported\nproblem. * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of\nthe problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`. * `{ProblemSeverity}`: The [severity\nlevel](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`,\n`ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`. * `{ProblemTitle}`: A short description of the\nproblem. * `{ProblemURL}`: The URL of the problem within Dynatrace. * `{State}`: The state of the problem. Possible\nvalues are `OPEN` and `RESOLVED`. * `{Tags}`: The list of tags that are defined for all impacted entities, separated by\ncommas\n"
                    },
                    "profile": {
                        "type": "string",
                        "description": "The ID of the associated alerting profile\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "The URL of the WebHook endpoint\n"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "dynatrace:index/getAlertingProfile:getAlertingProfile": {
            "inputs": {
                "description": "A collection of arguments for invoking getAlertingProfile.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getAlertingProfile.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "legacyId": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "legacyId",
                    "name",
                    "id"
                ]
            }
        },
        "dynatrace:index/getAlertingProfiles:getAlertingProfiles": {
            "inputs": {
                "description": "A collection of arguments for invoking getAlertingProfiles.\n",
                "properties": {
                    "profiles": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getAlertingProfiles.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "profiles": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/dynatrace:index/getAlertingProfilesValue:getAlertingProfilesValue"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "values",
                    "id"
                ]
            }
        },
        "dynatrace:index/getApplication:getApplication": {
            "inputs": {
                "description": "A collection of arguments for invoking getApplication.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getApplication.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "id"
                ]
            }
        },
        "dynatrace:index/getAttackAlerting:getAttackAlerting": {
            "inputs": {
                "description": "A collection of arguments for invoking getAttackAlerting.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getAttackAlerting.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "id"
                ]
            }
        },
        "dynatrace:index/getAwsCredentials:getAwsCredentials": {
            "inputs": {
                "description": "A collection of arguments for invoking getAwsCredentials.\n",
                "properties": {
                    "label": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "label"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getAwsCredentials.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "label": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "label",
                    "id"
                ]
            }
        },
        "dynatrace:index/getAwsIamExternal:getAwsIamExternal": {
            "outputs": {
                "description": "A collection of values returned by getAwsIamExternal.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            }
        },
        "dynatrace:index/getAwsSupportedServices:getAwsSupportedServices": {
            "inputs": {
                "description": "A collection of arguments for invoking getAwsSupportedServices.\n",
                "properties": {
                    "excepts": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getAwsSupportedServices.\n",
                "properties": {
                    "excepts": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "services": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "boolean"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "services",
                    "id"
                ]
            }
        },
        "dynatrace:index/getAzureCredentials:getAzureCredentials": {
            "inputs": {
                "description": "A collection of arguments for invoking getAzureCredentials.\n",
                "properties": {
                    "label": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "label"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getAzureCredentials.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "label": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "label",
                    "id"
                ]
            }
        },
        "dynatrace:index/getAzureSupportedServices:getAzureSupportedServices": {
            "inputs": {
                "description": "A collection of arguments for invoking getAzureSupportedServices.\n",
                "properties": {
                    "excepts": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getAzureSupportedServices.\n",
                "properties": {
                    "excepts": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "services": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "boolean"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "services",
                    "id"
                ]
            }
        },
        "dynatrace:index/getCalculatedServiceMetric:getCalculatedServiceMetric": {
            "inputs": {
                "description": "A collection of arguments for invoking getCalculatedServiceMetric.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getCalculatedServiceMetric.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "id"
                ]
            }
        },
        "dynatrace:index/getCredentials:getCredentials": {
            "inputs": {
                "description": "A collection of arguments for invoking getCredentials.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "scope": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getCredentials.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "scope": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            }
        },
        "dynatrace:index/getDashboard:getDashboard": {
            "inputs": {
                "description": "A collection of arguments for invoking getDashboard.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "owner": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "owner"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDashboard.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "owner": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "owner",
                    "id"
                ]
            }
        },
        "dynatrace:index/getDocuments:getDocuments": {
            "inputs": {
                "description": "A collection of arguments for invoking getDocuments.\n",
                "properties": {
                    "type": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getDocuments.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "type": {
                        "type": "string"
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/dynatrace:index/getDocumentsValue:getDocumentsValue"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "values",
                    "id"
                ]
            }
        },
        "dynatrace:index/getEntities:getEntities": {
            "inputs": {
                "description": "A collection of arguments for invoking getEntities.\n",
                "properties": {
                    "entitySelector": {
                        "type": "string"
                    },
                    "from": {
                        "type": "string"
                    },
                    "to": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getEntities.\n",
                "properties": {
                    "entities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/dynatrace:index/getEntitiesEntity:getEntitiesEntity"
                        }
                    },
                    "entitySelector": {
                        "type": "string"
                    },
                    "from": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "to": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "entities",
                    "id"
                ]
            }
        },
        "dynatrace:index/getEntity:getEntity": {
            "inputs": {
                "description": "A collection of arguments for invoking getEntity.\n",
                "properties": {
                    "entitySelector": {
                        "type": "string"
                    },
                    "from": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "to": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getEntity.\n",
                "properties": {
                    "entitySelector": {
                        "type": "string"
                    },
                    "from": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "properties": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "to": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "properties",
                    "id"
                ]
            }
        },
        "dynatrace:index/getFailureDetectionParameters:getFailureDetectionParameters": {
            "inputs": {
                "description": "A collection of arguments for invoking getFailureDetectionParameters.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getFailureDetectionParameters.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "id"
                ]
            }
        },
        "dynatrace:index/getHost:getHost": {
            "inputs": {
                "description": "A collection of arguments for invoking getHost.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getHost.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "id"
                ]
            }
        },
        "dynatrace:index/getHubItems:getHubItems": {
            "inputs": {
                "description": "A collection of arguments for invoking getHubItems.\n",
                "properties": {
                    "type": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getHubItems.\n",
                "properties": {
                    "artifacts": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/dynatrace:index/getHubItemsItem:getHubItemsItem"
                        }
                    },
                    "type": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "artifacts",
                    "items",
                    "id"
                ]
            }
        },
        "dynatrace:index/getIamGroup:getIamGroup": {
            "inputs": {
                "description": "A collection of arguments for invoking getIamGroup.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getIamGroup.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "id"
                ]
            }
        },
        "dynatrace:index/getIamUser:getIamUser": {
            "inputs": {
                "description": "A collection of arguments for invoking getIamUser.\n",
                "properties": {
                    "email": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "email"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getIamUser.\n",
                "properties": {
                    "email": {
                        "type": "string"
                    },
                    "groups": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "uid": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "email",
                    "groups",
                    "uid",
                    "id"
                ]
            }
        },
        "dynatrace:index/getManagementZone:getManagementZone": {
            "inputs": {
                "description": "A collection of arguments for invoking getManagementZone.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getManagementZone.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "legacyId": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "settings20Id": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "legacyId",
                    "name",
                    "settings20Id",
                    "id"
                ]
            }
        },
        "dynatrace:index/getManagementZoneV2:getManagementZoneV2": {
            "inputs": {
                "description": "A collection of arguments for invoking getManagementZoneV2.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getManagementZoneV2.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "legacyId": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "settings20Id": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "legacyId",
                    "name",
                    "settings20Id",
                    "id"
                ]
            }
        },
        "dynatrace:index/getManagementZones:getManagementZones": {
            "outputs": {
                "description": "A collection of values returned by getManagementZones.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/dynatrace:index/getManagementZonesValue:getManagementZonesValue"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "values",
                    "id"
                ]
            }
        },
        "dynatrace:index/getMobileApplication:getMobileApplication": {
            "inputs": {
                "description": "A collection of arguments for invoking getMobileApplication.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getMobileApplication.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "id"
                ]
            }
        },
        "dynatrace:index/getProcess:getProcess": {
            "inputs": {
                "description": "A collection of arguments for invoking getProcess.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getProcess.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "id"
                ]
            }
        },
        "dynatrace:index/getProcessGroup:getProcessGroup": {
            "inputs": {
                "description": "A collection of arguments for invoking getProcessGroup.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getProcessGroup.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "id"
                ]
            }
        },
        "dynatrace:index/getRemoteEnvironments:getRemoteEnvironments": {
            "outputs": {
                "description": "A collection of values returned by getRemoteEnvironments.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "remoteEnvironments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/dynatrace:index/getRemoteEnvironmentsRemoteEnvironment:getRemoteEnvironmentsRemoteEnvironment"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "remoteEnvironments",
                    "id"
                ]
            }
        },
        "dynatrace:index/getRequestAttribute:getRequestAttribute": {
            "inputs": {
                "description": "A collection of arguments for invoking getRequestAttribute.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getRequestAttribute.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "id"
                ]
            }
        },
        "dynatrace:index/getRequestNaming:getRequestNaming": {
            "inputs": {
                "description": "A collection of arguments for invoking getRequestNaming.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getRequestNaming.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "id"
                ]
            }
        },
        "dynatrace:index/getService:getService": {
            "inputs": {
                "description": "A collection of arguments for invoking getService.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "operator": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getService.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "operator": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "id"
                ]
            }
        },
        "dynatrace:index/getSlo:getSlo": {
            "inputs": {
                "description": "A collection of arguments for invoking getSlo.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSlo.\n",
                "properties": {
                    "burnRateVisualizationEnabled": {
                        "type": "boolean"
                    },
                    "description": {
                        "type": "string"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "evaluationType": {
                        "type": "string"
                    },
                    "evaluationWindow": {
                        "type": "string"
                    },
                    "fastBurnThreshold": {
                        "type": "number"
                    },
                    "filter": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "legacyId": {
                        "type": "string"
                    },
                    "metricExpression": {
                        "type": "string"
                    },
                    "metricName": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "targetSuccess": {
                        "type": "number"
                    },
                    "targetWarning": {
                        "type": "number"
                    }
                },
                "type": "object",
                "required": [
                    "burnRateVisualizationEnabled",
                    "description",
                    "enabled",
                    "evaluationType",
                    "evaluationWindow",
                    "fastBurnThreshold",
                    "filter",
                    "legacyId",
                    "metricExpression",
                    "metricName",
                    "name",
                    "targetSuccess",
                    "targetWarning",
                    "id"
                ]
            }
        },
        "dynatrace:index/getSyntheticLocation:getSyntheticLocation": {
            "inputs": {
                "description": "A collection of arguments for invoking getSyntheticLocation.\n",
                "properties": {
                    "cloudPlatform": {
                        "type": "string"
                    },
                    "entityId": {
                        "type": "string"
                    },
                    "ips": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "stage": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getSyntheticLocation.\n",
                "properties": {
                    "cloudPlatform": {
                        "type": "string"
                    },
                    "entityId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ips": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "stage": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "cloudPlatform",
                    "ips",
                    "stage",
                    "status",
                    "id"
                ]
            }
        },
        "dynatrace:index/getSyntheticLocations:getSyntheticLocations": {
            "inputs": {
                "description": "A collection of arguments for invoking getSyntheticLocations.\n",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "locations": {
                        "$ref": "#/types/dynatrace:index/getSyntheticLocationsLocations:getSyntheticLocationsLocations"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getSyntheticLocations.\n",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "locations": {
                        "$ref": "#/types/dynatrace:index/getSyntheticLocationsLocations:getSyntheticLocationsLocations"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "locations"
                ]
            }
        },
        "dynatrace:index/getSyntheticNodes:getSyntheticNodes": {
            "outputs": {
                "description": "A collection of values returned by getSyntheticNodes.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "nodes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/dynatrace:index/getSyntheticNodesNode:getSyntheticNodesNode"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "nodes",
                    "id"
                ]
            }
        },
        "dynatrace:index/getTenant:getTenant": {
            "outputs": {
                "description": "A collection of values returned by getTenant.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "id"
                ]
            }
        },
        "dynatrace:index/getUpdateWindows:getUpdateWindows": {
            "inputs": {
                "description": "A collection of arguments for invoking getUpdateWindows.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getUpdateWindows.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "id"
                ]
            }
        },
        "dynatrace:index/getVulnerabilityAlerting:getVulnerabilityAlerting": {
            "inputs": {
                "description": "A collection of arguments for invoking getVulnerabilityAlerting.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getVulnerabilityAlerting.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "id"
                ]
            }
        }
    }
}