// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface AlertingFilters {
    /**
     * A conditions for the metric usage
     */
    filters?: outputs.AlertingFiltersFilter[];
}

export interface AlertingFiltersFilter {
    /**
     * Configuration of a custom event filter. Filters custom events by title or description. If both specified, the AND logic applies
     */
    custom?: outputs.AlertingFiltersFilterCustom;
    /**
     * Configuration of a custom event filter. Filters custom events by title or description. If both specified, the AND logic applies
     */
    predefined?: outputs.AlertingFiltersFilterPredefined;
}

export interface AlertingFiltersFilterCustom {
    /**
     * Configuration of a matching filter
     */
    description?: outputs.AlertingFiltersFilterCustomDescription;
    /**
     * Configuration of a matching filter
     */
    metadata?: outputs.AlertingFiltersFilterCustomMetadata;
    /**
     * Configuration of a matching filter
     */
    title?: outputs.AlertingFiltersFilterCustomTitle;
}

export interface AlertingFiltersFilterCustomDescription {
    /**
     * The condition is case sensitive (`false`) or case insensitive (`true`).   If not set, then `false` is used, making the condition case sensitive
     */
    caseSensitive?: boolean;
    /**
     * The filter is enabled (`true`) or disabled (`false`)
     */
    enabled?: boolean;
    /**
     * Reverses the comparison **operator**. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison.   You can reverse it by setting **negate** to `true`. Possible values are `BEGINS_WITH`, `CONTAINS`, `REGEX_MATCHES`, `ENDS_WITH` and `STRING_EQUALS`
     */
    operator: string;
    /**
     * The value to compare to
     */
    value: string;
}

export interface AlertingFiltersFilterCustomMetadata {
    /**
     * Define filters for event properties. A maximum of 20 properties is allowed.
     */
    items: outputs.AlertingFiltersFilterCustomMetadataItems;
}

export interface AlertingFiltersFilterCustomMetadataItems {
    /**
     * A conditions for the metric usage
     */
    filters: outputs.AlertingFiltersFilterCustomMetadataItemsFilter[];
}

export interface AlertingFiltersFilterCustomMetadataItemsFilter {
    /**
     * GET /api/v2/eventProperties for list of available keys
     */
    key: string;
    /**
     * Reverses the comparison **operator**. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * The value to compare to
     */
    value: string;
}

export interface AlertingFiltersFilterCustomTitle {
    /**
     * The condition is case sensitive (`false`) or case insensitive (`true`).   If not set, then `false` is used, making the condition case sensitive
     */
    caseSensitive?: boolean;
    /**
     * The filter is enabled (`true`) or disabled (`false`)
     */
    enabled?: boolean;
    /**
     * Reverses the comparison **operator**. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison.   You can reverse it by setting **negate** to `true`. Possible values are `BEGINS_WITH`, `CONTAINS`, `REGEX_MATCHES`, `ENDS_WITH` and `STRING_EQUALS`
     */
    operator: string;
    /**
     * The value to compare to
     */
    value: string;
}

export interface AlertingFiltersFilterPredefined {
    /**
     * Reverses the comparison **operator**. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * The type of the predefined event. Possible values are `APPLICATION_ERROR_RATE_INCREASED`, `APPLICATION_SLOWDOWN`, `APPLICATION_UNEXPECTED_HIGH_LOAD`, `APPLICATION_UNEXPECTED_LOW_LOAD`, `AWS_LAMBDA_HIGH_ERROR_RATE`, `CUSTOM_APPLICATION_ERROR_RATE_INCREASED`, `CUSTOM_APPLICATION_SLOWDOWN`, `CUSTOM_APPLICATION_UNEXPECTED_HIGH_LOAD`, `CUSTOM_APPLICATION_UNEXPECTED_LOW_LOAD`, `CUSTOM_APP_CRASH_RATE_INCREASED`, `DATABASE_CONNECTION_FAILURE`, `DATA_CENTER_SERVICE_PERFORMANCE_DEGRADATION`, `DATA_CENTER_SERVICE_UNAVAILABLE`, `EBS_VOLUME_HIGH_LATENCY`, `EC2_HIGH_CPU`, `ELB_HIGH_BACKEND_ERROR_RATE`, `ENTERPRICE_APPLICATION_PERFORMANCE_DEGRADATION`, `ENTERPRISE_APPLICATION_UNAVAILABLE`, `ESXI_GUEST_ACTIVE_SWAP_WAIT`, `ESXI_GUEST_CPU_LIMIT_REACHED`, `ESXI_HOST_CPU_SATURATION`, `ESXI_HOST_DATASTORE_LOW_DISK_SPACE`, `ESXI_HOST_DISK_QUEUE_SLOW`, `ESXI_HOST_DISK_SLOW`, `ESXI_HOST_MEMORY_SATURATION`, `ESXI_HOST_NETWORK_PROBLEMS`, `ESXI_HOST_OVERLOADED_STORAGE`, `ESXI_VM_IMPACT_HOST_CPU_SATURATION`, `ESXI_VM_IMPACT_HOST_MEMORY_SATURATION`, `EXTERNAL_SYNTHETIC_TEST_OUTAGE`, `EXTERNAL_SYNTHETIC_TEST_SLOWDOWN`, `HOST_OF_SERVICE_UNAVAILABLE`, `HTTP_CHECK_GLOBAL_OUTAGE`, `HTTP_CHECK_LOCAL_OUTAGE`, `HTTP_CHECK_TEST_LOCATION_SLOWDOWN`, `MOBILE_APPLICATION_ERROR_RATE_INCREASED`, `MOBILE_APPLICATION_SLOWDOWN`, `MOBILE_APPLICATION_UNEXPECTED_HIGH_LOAD`, `MOBILE_APPLICATION_UNEXPECTED_LOW_LOAD`, `MOBILE_APP_CRASH_RATE_INCREASED`, `MONITORING_UNAVAILABLE`, `OSI_DISK_LOW_INODES`, `OSI_GRACEFULLY_SHUTDOWN`, `OSI_HIGH_CPU`, `OSI_HIGH_MEMORY`, `OSI_LOW_DISK_SPACE`, `OSI_NIC_DROPPED_PACKETS_HIGH`, `OSI_NIC_ERRORS_HIGH`, `OSI_NIC_UTILIZATION_HIGH`, `OSI_SLOW_DISK`, `OSI_UNEXPECTEDLY_UNAVAILABLE`, `PGI_OF_SERVICE_UNAVAILABLE`, `PGI_UNAVAILABLE`, `PG_LOW_INSTANCE_COUNT`, `PROCESS_CRASHED`, `PROCESS_HIGH_GC_ACTIVITY`, `PROCESS_MEMORY_RESOURCE_EXHAUSTED`, `PROCESS_NA_HIGH_CONN_FAIL_RATE`, `PROCESS_NA_HIGH_LOSS_RATE`, `PROCESS_THREADS_RESOURCE_EXHAUSTED`, `RDS_HIGH_CPU`, `RDS_HIGH_LATENCY`, `RDS_LOW_MEMORY`, `RDS_LOW_STORAGE_SPACE`, `RDS_OF_SERVICE_UNAVAILABLE`, `RDS_RESTART_SEQUENCE`, `SERVICE_ERROR_RATE_INCREASED`, `SERVICE_SLOWDOWN`, `SERVICE_UNEXPECTED_HIGH_LOAD`, `SERVICE_UNEXPECTED_LOW_LOAD`, `SYNTHETIC_GLOBAL_OUTAGE`, `SYNTHETIC_LOCAL_OUTAGE`, `SYNTHETIC_NODE_OUTAGE`, `SYNTHETIC_PRIVATE_LOCATION_OUTAGE` and `SYNTHETIC_TEST_LOCATION_SLOWDOWN`
     */
    type: string;
}

export interface AlertingProfileEventTypeFilter {
    /**
     * Configuration of a custom event filter. Filters custom events by title or description. If both specified, the AND logic applies
     */
    customEventFilters?: outputs.AlertingProfileEventTypeFilterCustomEventFilter[];
    /**
     * Configuration of a custom event filter. Filters custom events by title or description. If both specified, the AND logic applies
     */
    predefinedEventFilters?: outputs.AlertingProfileEventTypeFilterPredefinedEventFilter[];
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface AlertingProfileEventTypeFilterCustomEventFilter {
    /**
     * Configuration of a matching filter
     */
    customDescriptionFilters?: outputs.AlertingProfileEventTypeFilterCustomEventFilterCustomDescriptionFilter[];
    /**
     * Configuration of a matching filter
     */
    customTitleFilters?: outputs.AlertingProfileEventTypeFilterCustomEventFilterCustomTitleFilter[];
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface AlertingProfileEventTypeFilterCustomEventFilterCustomDescriptionFilter {
    /**
     * The condition is case sensitive (`false`) or case insensitive (`true`).   If not set, then `false` is used, making the condition case sensitive
     */
    caseInsensitive?: boolean;
    /**
     * The filter is enabled (`true`) or disabled (`false`)
     */
    enabled?: boolean;
    /**
     * Reverses the comparison **operator**. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison.   You can reverse it by setting **negate** to `true`. Possible values are `BEGINS_WITH`, `CONTAINS`, `CONTAINS_REGEX`, `ENDS_WITH` and `EQUALS`
     */
    operator: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value: string;
}

export interface AlertingProfileEventTypeFilterCustomEventFilterCustomTitleFilter {
    /**
     * The condition is case sensitive (`false`) or case insensitive (`true`).   If not set, then `false` is used, making the condition case sensitive
     */
    caseInsensitive?: boolean;
    /**
     * The filter is enabled (`true`) or disabled (`false`)
     */
    enabled?: boolean;
    /**
     * Reverses the comparison **operator**. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * Operator of the comparison.   You can reverse it by setting **negate** to `true`. Possible values are `BEGINS_WITH`, `CONTAINS`, `CONTAINS_REGEX`, `ENDS_WITH` and `EQUALS`
     */
    operator: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value: string;
}

export interface AlertingProfileEventTypeFilterPredefinedEventFilter {
    /**
     * The type of the predefined event. Possible values are `APPLICATION_ERROR_RATE_INCREASED`, `APPLICATION_SLOWDOWN`, `APPLICATION_UNEXPECTED_HIGH_LOAD`, `APPLICATION_UNEXPECTED_LOW_LOAD`, `AWS_LAMBDA_HIGH_ERROR_RATE`, `CUSTOM_APPLICATION_ERROR_RATE_INCREASED`, `CUSTOM_APPLICATION_SLOWDOWN`, `CUSTOM_APPLICATION_UNEXPECTED_HIGH_LOAD`, `CUSTOM_APPLICATION_UNEXPECTED_LOW_LOAD`, `CUSTOM_APP_CRASH_RATE_INCREASED`, `DATABASE_CONNECTION_FAILURE`, `DATA_CENTER_SERVICE_PERFORMANCE_DEGRADATION`, `DATA_CENTER_SERVICE_UNAVAILABLE`, `EBS_VOLUME_HIGH_LATENCY`, `EC2_HIGH_CPU`, `ELB_HIGH_BACKEND_ERROR_RATE`, `ENTERPRICE_APPLICATION_PERFORMANCE_DEGRADATION`, `ENTERPRISE_APPLICATION_UNAVAILABLE`, `ESXI_GUEST_ACTIVE_SWAP_WAIT`, `ESXI_GUEST_CPU_LIMIT_REACHED`, `ESXI_HOST_CPU_SATURATION`, `ESXI_HOST_DATASTORE_LOW_DISK_SPACE`, `ESXI_HOST_DISK_QUEUE_SLOW`, `ESXI_HOST_DISK_SLOW`, `ESXI_HOST_MEMORY_SATURATION`, `ESXI_HOST_NETWORK_PROBLEMS`, `ESXI_HOST_OVERLOADED_STORAGE`, `ESXI_VM_IMPACT_HOST_CPU_SATURATION`, `ESXI_VM_IMPACT_HOST_MEMORY_SATURATION`, `EXTERNAL_SYNTHETIC_TEST_OUTAGE`, `EXTERNAL_SYNTHETIC_TEST_SLOWDOWN`, `HOST_OF_SERVICE_UNAVAILABLE`, `HTTP_CHECK_GLOBAL_OUTAGE`, `HTTP_CHECK_LOCAL_OUTAGE`, `HTTP_CHECK_TEST_LOCATION_SLOWDOWN`, `MOBILE_APPLICATION_ERROR_RATE_INCREASED`, `MOBILE_APPLICATION_SLOWDOWN`, `MOBILE_APPLICATION_UNEXPECTED_HIGH_LOAD`, `MOBILE_APPLICATION_UNEXPECTED_LOW_LOAD`, `MOBILE_APP_CRASH_RATE_INCREASED`, `MONITORING_UNAVAILABLE`, `OSI_DISK_LOW_INODES`, `OSI_GRACEFULLY_SHUTDOWN`, `OSI_HIGH_CPU`, `OSI_HIGH_MEMORY`, `OSI_LOW_DISK_SPACE`, `OSI_NIC_DROPPED_PACKETS_HIGH`, `OSI_NIC_ERRORS_HIGH`, `OSI_NIC_UTILIZATION_HIGH`, `OSI_SLOW_DISK`, `OSI_UNEXPECTEDLY_UNAVAILABLE`, `PGI_OF_SERVICE_UNAVAILABLE`, `PGI_UNAVAILABLE`, `PG_LOW_INSTANCE_COUNT`, `PROCESS_CRASHED`, `PROCESS_HIGH_GC_ACTIVITY`, `PROCESS_MEMORY_RESOURCE_EXHAUSTED`, `PROCESS_NA_HIGH_CONN_FAIL_RATE`, `PROCESS_NA_HIGH_LOSS_RATE`, `PROCESS_THREADS_RESOURCE_EXHAUSTED`, `RDS_HIGH_CPU`, `RDS_HIGH_LATENCY`, `RDS_LOW_MEMORY`, `RDS_LOW_STORAGE_SPACE`, `RDS_OF_SERVICE_UNAVAILABLE`, `RDS_RESTART_SEQUENCE`, `SERVICE_ERROR_RATE_INCREASED`, `SERVICE_SLOWDOWN`, `SERVICE_UNEXPECTED_HIGH_LOAD`, `SERVICE_UNEXPECTED_LOW_LOAD`, `SYNTHETIC_GLOBAL_OUTAGE`, `SYNTHETIC_LOCAL_OUTAGE`, `SYNTHETIC_NODE_OUTAGE`, `SYNTHETIC_PRIVATE_LOCATION_OUTAGE` and `SYNTHETIC_TEST_LOCATION_SLOWDOWN`
     */
    eventType: string;
    /**
     * Reverses the comparison **operator**. For example it turns the **begins with** into **does not begin with**
     */
    negate?: boolean;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface AlertingProfileMetadata {
    /**
     * Dynatrace server version
     */
    clusterVersion?: string;
    /**
     * A Sorted list of the version numbers of the configuration
     */
    configurationVersions?: number[];
    /**
     * A Sorted list of the version numbers of the configuration
     */
    currentConfigurationVersions?: string[];
}

export interface AlertingProfileRule {
    /**
     * Send a notification if a problem remains open longer than *X* minutes
     */
    delayInMinutes: number;
    /**
     * The severity level to trigger the alert. Possible values are `AVAILABILITY`,	`CUSTOM_ALERT`,	`ERROR`,`MONITORING_UNAVAILABLE`,`PERFORMANCE` and `RESOURCE_CONTENTION`.
     */
    severityLevel: string;
    /**
     * Configuration of the tag filtering of the alerting profile
     */
    tagFilters: outputs.AlertingProfileRuleTagFilter[];
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface AlertingProfileRuleTagFilter {
    /**
     * The filtering mode:  * `INCLUDE_ANY`: The rule applies to monitored entities that have at least one of the specified tags. You can specify up to 100 tags.  * `INCLUDE_ALL`: The rule applies to monitored entities that have **all** of the specified tags. You can specify up to 10 tags.  * `NONE`: The rule applies to all monitored entities
     */
    includeMode: string;
    /**
     * A list of required tags
     */
    tagFilters?: outputs.AlertingProfileRuleTagFilterTagFilter[];
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface AlertingProfileRuleTagFilterTagFilter {
    /**
     * The origin of the tag, such as AWS or Cloud Foundry. Custom tags use the `CONTEXTLESS` value
     */
    context: string;
    /**
     * The key of the tag. Custom tags have the tag value here
     */
    key: string;
    /**
     * The value to compare to
     */
    value?: string;
}

export interface AlertingRules {
    /**
     * A conditions for the metric usage
     */
    rules?: outputs.AlertingRulesRule[];
}

export interface AlertingRulesRule {
    /**
     * Send a notification if a problem remains open longer than *X* minutes
     */
    delayInMinutes: number;
    /**
     * The filtering mode:  * `INCLUDE_ANY`: The rule applies to monitored entities that have at least one of the specified tags. You can specify up to 100 tags.  * `INCLUDE_ALL`: The rule applies to monitored entities that have **all** of the specified tags. You can specify up to 10 tags.  * `NONE`: The rule applies to all monitored entities
     */
    includeMode: string;
    /**
     * The severity level to trigger the alert. Possible values are `AVAILABILITY`,	`CUSTOM_ALERT`,	`ERRORS`,`MONITORING_UNAVAILABLE`,`PERFORMANCE` and `RESOURCE_CONTENTION`.
     */
    severityLevel: string;
    /**
     * Entities which contain any/all of the configured tags will match this alerting profile. It is recommended to use manual tags.
     */
    tags?: string[];
}

export interface ApiDetectionConditions {
    conditions: outputs.ApiDetectionConditionsCondition[];
}

export interface ApiDetectionConditionsCondition {
    /**
     * Possible Values: `FILE_NAME`, `FQCN`, `PACKAGE`
     */
    base: string;
    /**
     * Possible Values: `BEGINS_WITH`, `CONTAINS`
     */
    matcher: string;
    /**
     * no documentation available
     */
    pattern: string;
}

export interface ApplicationAnomaliesFailureRate {
    /**
     * Parameters of failure rate increase auto-detection. Example: If the expected error rate is 1.5%, and you set an absolute increase of 1%, and a relative increase of 50%, the thresholds will be:  Absolute: 1.5% + **1%** = 2.5%  Relative: 1.5% + 1.5% * **50%** = 2.25%
     */
    auto?: outputs.ApplicationAnomaliesFailureRateAuto;
    /**
     * Fixed thresholds for failure rate increase detection
     */
    thresholds?: outputs.ApplicationAnomaliesFailureRateThresholds;
}

export interface ApplicationAnomaliesFailureRateAuto {
    /**
     * Absolute increase of failing service calls to trigger an alert, %
     */
    absolute: number;
    /**
     * Relative increase of failing service calls to trigger an alert, %
     */
    relative: number;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface ApplicationAnomaliesFailureRateThresholds {
    /**
     * Sensitivity of the threshold.  With `low` sensitivity, high statistical confidence is used. Brief violations (for example, due to a surge in load) won't trigger alerts.  With `high` sensitivity, no statistical confidence is used. Each violation triggers alert
     */
    sensitivity: string;
    /**
     * Failure rate during any 5-minute period to trigger an alert, %
     */
    threshold: number;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface ApplicationAnomaliesResponseTime {
    /**
     * Parameters of the response time degradation auto-detection. Violation of **any** criterion triggers an alert
     */
    auto?: outputs.ApplicationAnomaliesResponseTimeAuto;
    /**
     * Fixed thresholds for response time degradation detection
     */
    thresholds?: outputs.ApplicationAnomaliesResponseTimeThresholds;
}

export interface ApplicationAnomaliesResponseTimeAuto {
    /**
     * Minimal service load to detect response time degradation. Response time degradation of services with smaller load won't trigger alerts. Possible values are `FIFTEEN_REQUESTS_PER_MINUTE`, `FIVE_REQUESTS_PER_MINUTE`, `ONE_REQUEST_PER_MINUTE` and `TEN_REQUESTS_PER_MINUTE`
     */
    load: string;
    /**
     * Alert if the response time degrades by more than *X* milliseconds
     */
    milliseconds: number;
    /**
     * Alert if the response time degrades by more than *X* %
     */
    percent: number;
    /**
     * Alert if the response time of the slowest 10% degrades by more than *X* milliseconds
     */
    slowestMilliseconds: number;
    /**
     * Alert if the response time of the slowest 10% degrades by more than *X* milliseconds
     */
    slowestPercent: number;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface ApplicationAnomaliesResponseTimeThresholds {
    /**
     * Minimal service load to detect response time degradation. Response time degradation of services with smaller load won't trigger alerts. Possible values are `FIFTEEN_REQUESTS_PER_MINUTE`, `FIVE_REQUESTS_PER_MINUTE`, `ONE_REQUEST_PER_MINUTE` and `TEN_REQUESTS_PER_MINUTE`
     */
    load: string;
    /**
     * Alert if the response time degrades by more than *X* milliseconds
     */
    milliseconds: number;
    /**
     * Sensitivity of the threshold.  With `low` sensitivity, high statistical confidence is used. Brief violations (for example, due to a surge in load) won't trigger alerts.  With `high` sensitivity, no statistical confidence is used. Each violation triggers alert
     */
    sensitivity: string;
    /**
     * Alert if the response time of the slowest 10% degrades by more than *X* milliseconds
     */
    slowestMilliseconds: number;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface ApplicationAnomaliesTraffic {
    /**
     * The configuration of traffic drops detection
     */
    drops?: outputs.ApplicationAnomaliesTrafficDrops;
    /**
     * The configuration of traffic spikes detection
     */
    spikes?: outputs.ApplicationAnomaliesTrafficSpikes;
}

export interface ApplicationAnomaliesTrafficDrops {
    /**
     * The detection is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Alert if the response time degrades by more than *X* %
     */
    percent?: number;
}

export interface ApplicationAnomaliesTrafficSpikes {
    /**
     * The detection is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Alert if the response time degrades by more than *X* %
     */
    percent?: number;
}

export interface ApplicationDataPrivacySessionReplayDataPrivacy {
    /**
     * (Field has overlap with `dynatrace.SessionReplayWebPrivacy`) Content masking settings for Session Replay.
     */
    contentMaskingSettings: outputs.ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettings;
    optIn?: boolean;
    urlExclusionRules?: string[];
}

export interface ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettings {
    /**
     * (Field has overlap with `dynatrace.SessionReplayWebPrivacy`) Configuration of the Session Replay masking during Playback
     */
    playback: outputs.ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettingsPlayback;
    /**
     * (Field has overlap with `dynatrace.SessionReplayWebPrivacy`) Configuration of the Session Replay masking during Recording
     */
    recording: outputs.ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettingsRecording;
}

export interface ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettingsPlayback {
    /**
     * The type of the masking:
     */
    preset: string;
    /**
     * A list of masking rules
     */
    rules?: outputs.ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettingsPlaybackRules;
}

export interface ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettingsPlaybackRules {
    /**
     * The masking rule defining how data is hidden
     */
    rules: outputs.ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettingsPlaybackRulesRule[];
}

export interface ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettingsPlaybackRulesRule {
    /**
     * The selector for the element or the attribute to be masked.
     */
    selector: string;
    type: string;
    userInteractionHidden?: boolean;
}

export interface ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettingsRecording {
    /**
     * The type of the masking:
     */
    preset: string;
    /**
     * A list of masking rules
     */
    rules?: outputs.ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettingsRecordingRules;
}

export interface ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettingsRecordingRules {
    /**
     * The masking rule defining how data is hidden
     */
    rules: outputs.ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettingsRecordingRulesRule[];
}

export interface ApplicationDataPrivacySessionReplayDataPrivacyContentMaskingSettingsRecordingRulesRule {
    /**
     * The selector for the element or the attribute to be masked.
     */
    selector: string;
    type: string;
    userInteractionHidden?: boolean;
}

export interface ApplicationDetectionRuleFilterConfig {
    /**
     * Where to look for the pattern value, possible values are `DOMAIN` or `URL`
     */
    applicationMatchTarget: string;
    /**
     * The operator used for matching the application detection rule, possible values are `BEGINS_WITH`, `CONTAINS`, `ENDS_WITH`, `EQUALS`, `MATCHES`
     */
    applicationMatchType: string;
    /**
     * The value to look for with the application detection rule
     */
    pattern: string;
}

export interface ApplicationErrorRulesCustomErrors {
    /**
     * Configuration of the custom error in the web application
     */
    rules: outputs.ApplicationErrorRulesCustomErrorsRule[];
}

export interface ApplicationErrorRulesCustomErrorsRule {
    /**
     * Capture (`true`) or ignore (`false`) the error
     */
    capture?: boolean;
    /**
     * Include (`true`) or exclude (`false`) the error in Davis AI [problem detection and analysis](https://dt-url.net/a963kd2)
     */
    customAlerting?: boolean;
    /**
     * Include (`true`) or exclude (`false`) the error in Apdex calculation
     */
    impactApdex?: boolean;
    /**
     * The matching operation for the **keyPattern**. Possible values are `BEGINS_WITH`, `CONTAINS`, `ENDS_WITH` and `EQUALS`
     */
    keyMatcher?: string;
    /**
     * The key of the error to look for
     */
    keyPattern?: string;
    /**
     * The matching operation for the **valuePattern**. Possible values are `BEGINS_WITH`, `CONTAINS`, `ENDS_WITH` and `EQUALS`.
     */
    valueMatcher?: string;
    /**
     * The value of the error to look for
     */
    valuePattern?: string;
}

export interface ApplicationErrorRulesHttpErrors {
    /**
     * Configuration of the HTTP error in the web application
     */
    rules: outputs.ApplicationErrorRulesHttpErrorsRule[];
}

export interface ApplicationErrorRulesHttpErrorsRule {
    /**
     * Capture (`true`) or ignore (`false`) the error
     */
    capture?: boolean;
    /**
     * If `true`, match by errors that have CSP Rule violations
     */
    considerBlockedRequests?: boolean;
    /**
     * Include (`true`) or exclude (`false`) the error in Davis AI [problem detection and analysis](https://dt-url.net/a963kd2)
     */
    considerForAi?: boolean;
    /**
     * If `true`, match by errors that have unknown HTTP status code
     */
    considerUnknownErrorCode?: boolean;
    /**
     * The HTTP status code or status code range to match by.
     */
    errorCodes?: string;
    filter?: string;
    filterByUrl?: boolean;
    /**
     * Include (`true`) or exclude (`false`) the error in Apdex calculation
     */
    impactApdex?: boolean;
    url?: string;
}

export interface AppsecNotificationAttackCandidateBasedEmailPayload {
    body: string;
    subject: string;
}

export interface AppsecNotificationAttackCandidateBasedJiraPayload {
    description: string;
    summary: string;
}

export interface AppsecNotificationAttackCandidateBasedWebhookPayload {
    payload: string;
}

export interface AppsecNotificationEmailConfiguration {
    bccRecipients?: string[];
    ccRecipients?: string[];
    recipients: string[];
}

export interface AppsecNotificationJiraConfiguration {
    apiToken: string;
    issueType: string;
    projectKey: string;
    url: string;
    username: string;
}

export interface AppsecNotificationSecurityProblemBasedEmailPayload {
    body: string;
    subject: string;
}

export interface AppsecNotificationSecurityProblemBasedJiraPayload {
    description: string;
    summary: string;
}

export interface AppsecNotificationSecurityProblemBasedWebhookPayload {
    payload: string;
}

export interface AppsecNotificationWebhookConfiguration {
    acceptAnyCertificate: boolean;
    headers?: outputs.AppsecNotificationWebhookConfigurationHeaders;
    url: string;
}

export interface AppsecNotificationWebhookConfigurationHeaders {
    headers: outputs.AppsecNotificationWebhookConfigurationHeadersHeader[];
}

export interface AppsecNotificationWebhookConfigurationHeadersHeader {
    name: string;
    secret: boolean;
    secretValue?: string;
    value?: string;
}

export interface AttackAllowlistAttackHandling {
    /**
     * Possible Values: `MONITOR`, `OFF`
     */
    blockingStrategy: string;
}

export interface AttackAllowlistCriteria {
    /**
     * Only consider attacks matching the specified pattern.
     */
    attackPattern?: string;
    /**
     * Source IP
     */
    sourceIp?: string;
}

export interface AttackAllowlistMetadata {
    /**
     * no documentation available
     */
    comment: string;
}

export interface AttackRulesAttackHandling {
    /**
     * Possible Values: `BLOCK`, `MONITOR`, `OFF`
     */
    blockingStrategy: string;
}

export interface AttackRulesCriteria {
    /**
     * Possible Values: `ANY`, `CMD_INJECTION`, `JNDI_INJECTION`, `SQL_INJECTION`, `SSRF`
     */
    attackType: string;
    /**
     * Process group
     */
    processGroup?: string;
}

export interface AttackRulesMetadata {
    /**
     * no documentation available
     */
    comment: string;
}

export interface AttackSettingsDefaultAttackHandling {
    /**
     * (v1.290) Possible Values: `BLOCK`, `MONITOR`, `OFF`
     */
    blockingStrategyDotNet?: string;
    /**
     * Possible Values: `BLOCK`, `MONITOR`, `OFF`
     */
    blockingStrategyJava: string;
}

export interface AutomationBusinessCalendarHolidays {
    /**
     * A (unordered) list of holidays valid in this calendar
     */
    holidays: outputs.AutomationBusinessCalendarHolidaysHoliday[];
}

export interface AutomationBusinessCalendarHolidaysHoliday {
    /**
     * The date of this holiday: Example `2017-07-04` for July 4th 2017
     */
    date: string;
    /**
     * An official name for this holiday
     */
    title: string;
}

export interface AutomationSchedulingRuleFixedOffset {
    /**
     * Every day of the scheduling rule referred to with `rule` will be offset by this amount of days
     */
    offset: number;
    /**
     * Refers to a scheduling rule for which to produce valid days with an offset
     */
    rule: string;
}

export interface AutomationSchedulingRuleGrouping {
    /**
     * The IDs of scheduling rules determining the days the schedule should apply to
     */
    combines: string[];
    /**
     * The IDs of scheduling rules determining the days the schedule is allowed apply to. If specified, only days that are covered by `combine` and `intersect` are valid days for the schedule
     */
    intersects?: string[];
    /**
     * The IDs of scheduling rules determing the days the schedule must not apply. If specified it reduces down the set of days covered by `combine` and `intersect`
     */
    subtracts?: string[];
}

export interface AutomationSchedulingRuleRecurrence {
    /**
     * The recurrence start. Example: `2017-07-04` represents July 4th 2017
     */
    datestart: string;
    /**
     * Restricts the recurrence to specific days within a month. `1`, `2`, `3`, ... refers to the first, second, third day in the month. You can also specify negative values to refer to values relative to the last day. `-1` refers to the last day, `-2` refers to the second to the last day, ...
     */
    daysInMonths?: number[];
    /**
     * Restricts the recurrence to specific days within a year. `1`, `2`, `3`, ... refers to the first, second, third day of the year. You can also specify negative values to refer to values relative to the last day. `-1` refers to the last day, `-2` refers to the second to the last day, ...
     */
    daysInYears?: number[];
    /**
     * Restricts the recurrence to specific days relative to Easter Sunday. `0` will yield the Easter Sunday itself
     */
    easters?: number[];
    /**
     * Possible values are `YEARLY`, `MONTHLY`, `WEEKLY`, `DAILY`, `HOURLY`, `MINUTELY` and `SECONDLY`. Example: `frequency` = `DAILY` and `interval` = `2` schedules for every other day
     */
    frequency: string;
    /**
     * The interval between each iteration. Default: 1. Example: `frequency` = `DAILY` and `interval` = `2` schedules for every other day
     */
    interval?: number;
    /**
     * Restricts the recurrence to specific months. `1` for `January`, `2` for `February`, ..., `12` for `December`
     */
    months?: number[];
    /**
     * Restricts the recurrence to specific week days. Possible values are `MO`, `TU`, `WE`, `TH`, `FR`, `SA` and `SU`
     */
    weekdays?: string[];
    /**
     * Restricts the recurrence to specific weeks within a year. `1`, `2`, `3`, ... refers to the first, second, third week of the year. You can also specify negative values to refer to values relative to the last week. `-1` refers to the last week, `-2` refers to the second to the last week, ...
     */
    weeks?: number[];
    /**
     * Possible values are `WORKING` (Work days), `HOLIDAYS` (Holidays) and `OFF` (Weekends + Holidays)
     */
    workdays: string;
}

export interface AutomationSchedulingRuleRelativeOffset {
    direction: string;
    sourceRule: string;
    targetRule: string;
}

export interface AutomationWorkflowTasks {
    /**
     * TODO: No documentation available
     */
    tasks?: outputs.AutomationWorkflowTasksTask[];
}

export interface AutomationWorkflowTasksTask {
    /**
     * Currently known and supported values are `dynatrace.automations:http-function`, `dynatrace.automations:run-javascript` and `dynatrace.automations:execute-dql-query`
     */
    action: string;
    /**
     * Specifies whether a task should be skipped as a no operation or not
     */
    active?: boolean;
    /**
     * Required if `withItems` is specified. By default loops execute sequentially with concurrency set to 1. You can increase how often it runs in parallel
     */
    concurrency?: string;
    /**
     * Conditions that have to be met in order to execute that task
     */
    conditions?: outputs.AutomationWorkflowTasksTaskConditions;
    /**
     * A description for this task
     */
    description?: string;
    /**
     * Parameters and values for this task as JSON code. Contents depend on the kind of task - determined by the attribute `action`
     */
    input?: string;
    /**
     * The name of the task
     */
    name: string;
    /**
     * Layouting information about the task tile when visualized. If not specified Dynatrace will position the task tiles automatically
     */
    position?: outputs.AutomationWorkflowTasksTaskPosition;
    /**
     * Configure whether to automatically rerun the task on failure. If not specified no retries will be attempted
     */
    retry?: outputs.AutomationWorkflowTasksTaskRetry;
    /**
     * Specifies a default task timeout in seconds. 15 * 60 (15min) is used when not set. Minimum 1. Maximum 604800
     */
    timeout?: string;
    /**
     * Iterates over items in a list, allowing actions to be executed repeatedly. Example: Specifying `item in [1, 2, 3]` here will execute the task three times for the numbers 1, 2 and 3 - with the current number available for scripting using the expression `{{ _.item }}`
     */
    withItems?: string;
}

export interface AutomationWorkflowTasksTaskConditions {
    /**
     * A custom condition that needs to be met for the current task to get executed
     */
    custom?: string;
    /**
     * Possible values are `SKIP` and `STOP`
     */
    else?: string;
    /**
     * key/value pairs where the `key` is the name of another task and the value the status it needs to be for the current task to get executed. Possible values are `SUCCESS`, `ERROR`, `ANY`, `OK` (Success or Skipped) and `NOK` (Error or Cancelled)
     */
    states: {[key: string]: any};
}

export interface AutomationWorkflowTasksTaskPosition {
    /**
     * x-coordinate for layouting
     */
    x: number;
    /**
     * y-coordinate for layouting
     */
    y: number;
}

export interface AutomationWorkflowTasksTaskRetry {
    /**
     * Specifies a maximum number of times that a task can be repeated in case it fails on execution. You can specify either a number between 1 and 99 here or use an expression (`{{}}`). Default: 1
     */
    count?: string;
    /**
     * Specifies a delay in seconds between subsequent task retries. You can specify either a number between 1 and 3600 here or an expression (`{{...}}`). Default: 1
     */
    delay?: string;
    /**
     * Specifies whether retrying the failed iterations or the whole loop. Default: true
     */
    failedLoopIterationsOnly?: boolean;
}

export interface AutomationWorkflowTrigger {
    /**
     * If specified the workflow is getting triggered based on events
     */
    event?: outputs.AutomationWorkflowTriggerEvent;
    /**
     * If specified the workflow is getting triggered based on a schedule
     */
    schedule?: outputs.AutomationWorkflowTriggerSchedule;
}

export interface AutomationWorkflowTriggerEvent {
    /**
     * Specifies whether a task should be skipped as a no operation or not
     */
    active?: boolean;
    /**
     * If specified the workflow is getting triggered based on events
     */
    config?: outputs.AutomationWorkflowTriggerEventConfig;
}

export interface AutomationWorkflowTriggerEventConfig {
    /**
     * Contains trigger configuration based on Davis Events. Either `davisEvent`, `davisProblem`, `davisEvent` or `config` need to set
     */
    davisEvent?: outputs.AutomationWorkflowTriggerEventConfigDavisEvent;
    /**
     * Contains trigger configuration based on Davis Problems. Either `davisEvent`, `davisProblem`, `davisEvent` or `config` need to set
     */
    davisProblem?: outputs.AutomationWorkflowTriggerEventConfigDavisProblem;
    /**
     * If specified the workflow is getting triggered based on events
     */
    event?: outputs.AutomationWorkflowTriggerEventConfigEvent;
    /**
     * The type of the trigger configuration to expect within attribute `value`. Only required if `config` is set. Must not be set if `davisEvent`, `davisProblem` or `event` are present
     */
    type?: string;
    /**
     * Contains JSON encoded trigger configuration if the trigger type is neither `davisEvent`, `davisProblem` or `event`. It requires the attribute `type` to be set in combination
     */
    value?: string;
}

export interface AutomationWorkflowTriggerEventConfigDavisEvent {
    /**
     * key/value pairs for entity tags to match for. For tags that don't require a value, just specify an empty string as value. Omit this attribute if all entities should match
     */
    entityTags?: {[key: string]: string};
    /**
     * Specifies whether all or just any of the configured entity tags need to match. Possible values: `all` and `any`. Omit this attribute if all entities should match
     */
    entityTagsMatch?: string;
    /**
     * If set to `true` closing a problem also is considered an event that triggers the execution
     */
    onProblemClose?: boolean;
    /**
     * The types of davis events to trigger an execution. Possible values are `CUSTOM_ANNOTATION`, `APPLICATION_UNEXPECTED_HIGH_LOAD`, `APPLICATION_UNEXPECTED_LOW_LOAD`, `APPLICATION_OVERLOAD_PREVENTION`, `APPLICATION_SLOWDOWN`, `AVAILABILITY_EVENT`, `LOG_AVAILABILITY`, `EC2_HIGH_CPU`, `RDS_BACKUP_COMPLETED`, `RDS_BACKUP_STARTED`, `SYNTHETIC_GLOBAL_OUTAGE`, `SYNTHETIC_LOCAL_OUTAGE`, `SYNTHETIC_TEST_LOCATION_SLOWDOWN`, `CUSTOM_CONFIGURATION`, `PROCESS_NA_HIGH_CONN_FAIL_RATE`, `OSI_HIGH_CPU`, `CUSTOM_ALERT`, `CUSTOM_APP_CRASH_RATE_INCREASED`, `CUSTOM_APPLICATION_ERROR_RATE_INCREASED`, `CUSTOM_APPLICATION_UNEXPECTED_HIGH_LOAD`, `CUSTOM_APPLICATION_UNEXPECTED_LOW_LOAD`, `CUSTOM_APPLICATION_OVERLOAD_PREVENTION`, `CUSTOM_APPLICATION_SLOWDOWN`, `PGI_CUSTOM_AVAILABILITY`, `PGI_CUSTOM_ERROR`, `CUSTOM_INFO`, `PGI_CUSTOM_PERFORMANCE`, `CUSTOM_DEPLOYMENT`, `DEPLOYMENT_CHANGED_CHANGE`, `DEPLOYMENT_CHANGED_NEW`, `DEPLOYMENT_CHANGED_REMOVED`, `EBS_VOLUME_HIGH_LATENCY`, `ERROR_EVENT`, `LOG_ERROR`, `ESXI_HOST_CONNECTION_FAILED`, `ESXI_HOST_CONNECTION_LOST`, `ESXI_GUEST_CPU_LIMIT_REACHED`, `ESXI_GUEST_ACTIVE_SWAP_WAIT`, `ESXI_HOST_CPU_SATURATION`, `ESXI_HOST_MEMORY_SATURATION`, `ESXI_HOST_MAINTENANCE`, `ESXI_HOST_NETWORK_PROBLEMS`, `ESXI_HOST_NO_CONNECTION`, `ESXI_HOST_SHUTDOWN`, `ESXI_HOST_DISK_SLOW`, `ESXI_HOST_UP`, `ESXI_HOST_TIMEOUT`, `ESXI_VM_IMPACT_HOST_CPU_SATURATION`, `ESXI_VM_IMPACT_HOST_MEMORY_SATURATION`, `DATABASE_CONNECTION_FAILURE`, `RDS_AZ_FAILOVER_COMPLETED`, `RDS_AZ_FAILOVER_STARTED`, `SERVICE_ERROR_RATE_INCREASED`, `RDS_HIGH_LATENCY`, `OSI_NIC_UTILIZATION_HIGH`, `OSI_NIC_ERRORS_HIGH`, `PGI_HAPROXY_QUEUED_REQUESTS_HIGH`, `PGI_RMQ_HIGH_FILE_DESC_USAGE`, `PGI_RMQ_HIGH_MEM_USAGE`, `PGI_RMQ_HIGH_PROCESS_USAGE`, `PGI_RMQ_HIGH_SOCKETS_USAGE`, `OSI_NIC_DROPPED_PACKETS_HIGH`, `PGI_MYSQL_SLOW_QUERIES_RATE_HIGH`, `PGI_KEYSTONE_SLOW`, `PGI_HAPROXY_SESSION_USAGE_HIGH`, `HOST_LOG_AVAILABILITY`, `HOST_LOG_ERROR`, `OSI_GRACEFULLY_SHUTDOWN`, `HOST_LOG_MATCHED`, `OSI_UNEXPECTEDLY_UNAVAILABLE`, `HOST_LOG_PERFORMANCE`, `HOST_OF_SERVICE_UNAVAILABLE`, `HTTP_CHECK_GLOBAL_OUTAGE`, `HTTP_CHECK_LOCAL_OUTAGE`, `HTTP_CHECK_TEST_LOCATION_SLOWDOWN`, `ESXI_HOST_DISK_QUEUE_SLOW`, `LOG_MATCHED`, `APPLICATION_ERROR_RATE_INCREASED`, `APPLICATION_JS_FRAMEWORK_DETECTED`, `AWS_LAMBDA_HIGH_ERROR_RATE`, `ELB_HIGH_BACKEND_ERROR_RATE`, `ELB_HIGH_FRONTEND_ERROR_RATE`, `ELB_HIGH_UNHEALTHY_HOST_RATE`, `PROCESS_HIGH_GC_ACTIVITY`, `ESXI_HOST_DATASTORE_LOW_DISK_SPACE`, `OSI_DOCKER_DEVICEMAPPER_LOW_DATA_SPACE`, `OSI_LOW_DISK_SPACE`, `OSI_DOCKER_DEVICEMAPPER_LOW_METADATA_SPACE`, `OSI_DISK_LOW_INODES`, `PGI_RMQ_LOW_DISK_SPACE`, `RDS_LOW_STORAGE_SPACE`, `MARKED_FOR_TERMINATION`, `PROCESS_MEMORY_RESOURCE_EXHAUSTED`, `OSI_HIGH_MEMORY`, `MOBILE_APP_CRASH_RATE_INCREASED`, `MOBILE_APPLICATION_ERROR_RATE_INCREASED`, `MOBILE_APPLICATION_OVERLOAD_PREVENTION`, `MOBILE_APPLICATION_SLOWDOWN`, `MOBILE_APPLICATION_UNEXPECTED_HIGH_LOAD`, `MOBILE_APPLICATION_UNEXPECTED_LOW_LOAD`, `MONITORING_UNAVAILABLE`, `PROCESS_NA_HIGH_LOSS_RATE`, `PGI_KEYSTONE_UNHEALTHY`, `ESXI_HOST_OVERLOADED_STORAGE`, `PERFORMANCE_EVENT`, `LOG_PERFORMANCE`, `PGI_LOG_AVAILABILITY`, `PGI_CRASHED_INFO`, `PROCESS_CRASHED`, `PGI_LOG_ERROR`, `PG_LOW_INSTANCE_COUNT`, `PGI_LOG_MATCHED`, `PGI_MEMDUMP`, `PGI_LOG_PERFORMANCE`, `PROCESS_RESTART`, `PGI_UNAVAILABLE`, `RDS_HIGH_CPU`, `RDS_LOW_MEMORY`, `RDS_OF_SERVICE_UNAVAILABLE`, `RESOURCE_CONTENTION_EVENT`, `SERVICE_SLOWDOWN`, `RDS_RESTART`, `RDS_RESTART_SEQUENCE`, `PGI_OF_SERVICE_UNAVAILABLE`, `OSI_SLOW_DISK`, `SYNTHETIC_NODE_OUTAGE`, `SYNTHETIC_PRIVATE_LOCATION_OUTAGE`, `EXTERNAL_SYNTHETIC_TEST_OUTAGE`, `EXTERNAL_SYNTHETIC_TEST_SLOWDOWN`, `PROCESS_THREADS_RESOURCE_EXHAUSTED`, `SERVICE_UNEXPECTED_HIGH_LOAD`, `SERVICE_UNEXPECTED_LOW_LOAD`, `ESXI_VM_DISCONNECTED`, `OPENSTACK_VM_LAUNCH_FAILED`, `ESXI_HOST_VM_MOTION_LEFT`, `ESXI_HOST_VM_MOTION_ARRIVED`, `ESXI_VM_MOTION`, `OPENSTACK_VM_MOTION`, `ESXI_VM_POWER_OFF`, `ESXI_VM_SHUTDOWN`, `OPENSTACK_HOST_VM_SHUTDOWN`, `ESXI_VM_START`, `ESXI_HOST_VM_STARTED`, `OPENSTACK_HOST_VM_STARTED`
     */
    types: string[];
}

export interface AutomationWorkflowTriggerEventConfigDavisProblem {
    categories: outputs.AutomationWorkflowTriggerEventConfigDavisProblemCategory[];
    customFilter?: string;
    /**
     * key/value pairs for entity tags to match for. For tags that don't require a value, just specify an empty string as value. Omit this attribute if all entities should match
     */
    entityTags?: {[key: string]: string};
    /**
     * Specifies whether all or just any of the configured entity tags need to match. Possible values: `all` and `any`. Omit this attribute if all entities should match
     */
    entityTagsMatch?: string;
    /**
     * If set to `true` closing a problem also is considered an event that triggers the execution
     */
    onProblemClose?: boolean;
}

export interface AutomationWorkflowTriggerEventConfigDavisProblemCategory {
    availability?: boolean;
    /**
     * A custom condition that needs to be met for the current task to get executed
     */
    custom?: boolean;
    error?: boolean;
    info?: boolean;
    monitoringUnavailable?: boolean;
    resource?: boolean;
    slowdown?: boolean;
}

export interface AutomationWorkflowTriggerEventConfigEvent {
    /**
     * Possible values: `events` or `bizevents`. Default: `events`
     */
    eventType?: string;
    /**
     * A query based on DQL for events that trigger executions
     */
    query: string;
}

export interface AutomationWorkflowTriggerSchedule {
    /**
     * Specifies whether a task should be skipped as a no operation or not
     */
    active?: boolean;
    /**
     * Advanced restrictions for the schedule to trigger executions
     */
    filterParameters?: outputs.AutomationWorkflowTriggerScheduleFilterParameters;
    /**
     * Refers to a configured rule that determines at which days the schedule should be active. If not specified it implies that the schedule is valid every day
     */
    rule?: string;
    /**
     * A time zone the scheduled times to align with. If not specified it will be chosen automatically based on the location of the Dynatrace Server
     */
    timeZone: string;
    /**
     * Detailed configuration about the timing constraints that trigger the execution
     */
    trigger: outputs.AutomationWorkflowTriggerScheduleTrigger;
}

export interface AutomationWorkflowTriggerScheduleFilterParameters {
    /**
     * Specifies a maximum number of times that a task can be repeated in case it fails on execution. You can specify either a number between 1 and 99 here or use an expression (`{{}}`). Default: 1
     */
    count?: number;
    /**
     * If specified, the schedule won't trigger executions before the given date
     */
    earliestStart?: string;
    /**
     * If specified, the schedule won't trigger executions before the given time
     */
    earliestStartTime?: string;
    /**
     * If specified, the schedule won't trigger exeuctions on the given dates
     */
    excludeDates?: string[];
    /**
     * If specified, the schedule will trigger executions on the given dates, even if the main configuration prohibits it
     */
    includeDates?: string[];
    /**
     * If specified, the schedule won't trigger executions after the given date
     */
    until?: string;
}

export interface AutomationWorkflowTriggerScheduleTrigger {
    /**
     * Triggers the schedule every n minutes within a given time frame - specifying the end time on any valid day in 24h format (e.g. 14:22:44). Conflicts with `cron` and `time`. Required with `intervalMinutes` and `betweenStart`
     */
    betweenEnd?: string;
    /**
     * Triggers the schedule every n minutes within a given time frame - specifying the start time on any valid day in 24h format (e.g. 13:22:44). Conflicts with `cron` and `time`. Required with `intervalMinutes` and `betweenEnd`
     */
    betweenStart?: string;
    /**
     * Configures using cron syntax. Conflicts with `time`, `intervalMinutes`, `betweenStart` and `betweenEnd`
     */
    cron?: string;
    /**
     * Triggers the schedule every n minutes within a given time frame. Minimum: 1, Maximum: 720. Required with `betweenStart` and `betweenEnd`. Conflicts with `cron` and `time`
     */
    intervalMinutes?: number;
    /**
     * Specifies a fixed time the schedule will trigger at in 24h format (e.g. `14:23:59`). Conflicts with `cron`, `intervalMinutes`, `betweenStart` and `betweenEnd`
     */
    time?: string;
}

export interface AutotagEntitySelectorBasedRule {
    enabled?: boolean;
    normalization?: string;
    selector?: string;
    unknowns?: string;
    valueFormat?: string;
}

export interface AutotagRule {
    conditions?: outputs.AutotagRuleCondition[];
    enabled?: boolean;
    normalization?: string;
    propagationTypes?: string[];
    type: string;
    unknowns?: string;
    valueFormat?: string;
}

export interface AutotagRuleCondition {
    /**
     * @deprecated You should use 'application_type' instead of 'application_type_comparison'. This attribute still exists for backwards compatibility.
     */
    applicationTypeComparisons?: outputs.AutotagRuleConditionApplicationTypeComparison[];
    applicationTypes?: outputs.AutotagRuleConditionApplicationType[];
    azureComputeModeComparisons?: outputs.AutotagRuleConditionAzureComputeModeComparison[];
    /**
     * @deprecated You should use 'azure_compute_mode' instead of 'azure_compute_mode_comparison'. This attribute still exists for backwards compatibility.
     */
    azureComputeModes?: outputs.AutotagRuleConditionAzureComputeMode[];
    /**
     * @deprecated You should use 'azure_sku' instead of 'azure_sku_comparision'. This attribute still exists for backwards compatibility.
     */
    azureSkuComparisions?: outputs.AutotagRuleConditionAzureSkuComparision[];
    azureSkus?: outputs.AutotagRuleConditionAzureSkus[];
    /**
     * @deprecated You should use 'comparison' instead of 'base_comparison_basic'. This attribute still exists for backwards compatibility.
     */
    baseComparisonBasics?: outputs.AutotagRuleConditionBaseComparisonBasic[];
    /**
     * @deprecated 'base_condition_key' is deprecated. You should use 'key'
     */
    baseConditionKeys?: outputs.AutotagRuleConditionBaseConditionKey[];
    /**
     * @deprecated You should use 'bitness' instead of 'bitness_comparision'. This attribute still exists for backwards compatibility.
     */
    bitnessComparisions?: outputs.AutotagRuleConditionBitnessComparision[];
    bitnesses?: outputs.AutotagRuleConditionBitness[];
    /**
     * @deprecated You should use 'cloud_type' instead of 'cloud_type_comparison'. This attribute still exists for backwards compatibility.
     */
    cloudTypeComparisons?: outputs.AutotagRuleConditionCloudTypeComparison[];
    cloudTypes?: outputs.AutotagRuleConditionCloudType[];
    comparisons?: outputs.AutotagRuleConditionComparison[];
    /**
     * @deprecated You should use 'custom_application_type' instead of 'custom_application_type_comparison'. This attribute still exists for backwards compatibility.
     */
    customApplicationTypeComparisons?: outputs.AutotagRuleConditionCustomApplicationTypeComparison[];
    customApplicationTypes?: outputs.AutotagRuleConditionCustomApplicationType[];
    /**
     * @deprecated 'custom_host_metadata_condition_key' is deprecated. You should use 'custom_host_metadata'
     */
    customHostMetadataConditionKeys?: outputs.AutotagRuleConditionCustomHostMetadataConditionKey[];
    customHostMetadatas?: outputs.AutotagRuleConditionCustomHostMetadata[];
    /**
     * @deprecated 'custom_process_metadata_condition_key' is deprecated. You should use 'custom_process_metadata'
     */
    customProcessMetadataConditionKeys?: outputs.AutotagRuleConditionCustomProcessMetadataConditionKey[];
    customProcessMetadatas?: outputs.AutotagRuleConditionCustomProcessMetadata[];
    databaseTopologies?: outputs.AutotagRuleConditionDatabaseTopology[];
    /**
     * @deprecated You should use 'database_topology' instead of 'database_topology_comparison'. This attribute still exists for backwards compatibility.
     */
    databaseTopologyComparisons?: outputs.AutotagRuleConditionDatabaseTopologyComparison[];
    /**
     * @deprecated You should use 'dcrum_decoder' instead of 'dcrum_decoder_comparison'. This attribute still exists for backwards compatibility.
     */
    dcrumDecoderComparisons?: outputs.AutotagRuleConditionDcrumDecoderComparison[];
    dcrumDecoders?: outputs.AutotagRuleConditionDcrumDecoder[];
    entities?: outputs.AutotagRuleConditionEntity[];
    /**
     * @deprecated You should use 'entity' instead of 'entity_id_comparison'. This attribute still exists for backwards compatibility.
     */
    entityIdComparisons?: outputs.AutotagRuleConditionEntityIdComparison[];
    hostTeches?: outputs.AutotagRuleConditionHostTech[];
    /**
     * @deprecated `hypervisor_type_comparision` is deprecated. Use `hypervisor` instead
     */
    hypervisorTypeComparisions?: outputs.AutotagRuleConditionHypervisorTypeComparision[];
    hypervisors?: outputs.AutotagRuleConditionHypervisor[];
    /**
     * @deprecated You should use 'indexed_name' instead of 'indexed_name_comparison'. This attribute still exists for backwards compatibility.
     */
    indexedNameComparisons?: outputs.AutotagRuleConditionIndexedNameComparison[];
    indexedNames?: outputs.AutotagRuleConditionIndexedName[];
    /**
     * @deprecated You should use 'indexed_string' instead of 'indexed_string_comparison'. This attribute still exists for backwards compatibility.
     */
    indexedStringComparisons?: outputs.AutotagRuleConditionIndexedStringComparison[];
    indexedStrings?: outputs.AutotagRuleConditionIndexedString[];
    /**
     * @deprecated You should use 'indexed_tag' instead of 'indexed_tag_comparison'. This attribute still exists for backwards compatibility.
     */
    indexedTagComparisons?: outputs.AutotagRuleConditionIndexedTagComparison[];
    indexedTags?: outputs.AutotagRuleConditionIndexedTag[];
    /**
     * @deprecated You should use 'integer' instead of 'integer_comparison'. This attribute still exists for backwards compatibility.
     */
    integerComparisons?: outputs.AutotagRuleConditionIntegerComparison[];
    integers?: outputs.AutotagRuleConditionInteger[];
    /**
     * @deprecated You should use 'ipaddress' instead of 'ipaddress_comparison'. This attribute still exists for backwards compatibility.
     */
    ipaddressComparisons?: outputs.AutotagRuleConditionIpaddressComparison[];
    ipaddresses?: outputs.AutotagRuleConditionIpaddress[];
    keys?: outputs.AutotagRuleConditionKey[];
    /**
     * @deprecated You should use 'mobile_platform' instead of 'mobile_platform_comparison'. This attribute still exists for backwards compatibility.
     */
    mobilePlatformComparisons?: outputs.AutotagRuleConditionMobilePlatformComparison[];
    mobilePlatforms?: outputs.AutotagRuleConditionMobilePlatform[];
    osArches?: outputs.AutotagRuleConditionOsArch[];
    osTypes?: outputs.AutotagRuleConditionOsType[];
    /**
     * @deprecated You should use 'os_arch' instead of 'osarchitecture_comparison'. This attribute still exists for backwards compatibility.
     */
    osarchitectureComparisons?: outputs.AutotagRuleConditionOsarchitectureComparison[];
    /**
     * @deprecated You should use 'os_type' instead of 'ostype_comparison'. This attribute still exists for backwards compatibility.
     */
    ostypeComparisons?: outputs.AutotagRuleConditionOstypeComparison[];
    /**
     * @deprecated You should use 'paas_type' instead of 'paas_type_comparison'. This attribute still exists for backwards compatibility.
     */
    paasTypeComparisons?: outputs.AutotagRuleConditionPaasTypeComparison[];
    paasTypes?: outputs.AutotagRuleConditionPaasType[];
    /**
     * @deprecated 'process_metadata_condition_key' is deprecated. You should use 'process_metadata'
     */
    processMetadataConditionKeys?: outputs.AutotagRuleConditionProcessMetadataConditionKey[];
    processMetadatas?: outputs.AutotagRuleConditionProcessMetadata[];
    serviceTopologies?: outputs.AutotagRuleConditionServiceTopology[];
    /**
     * @deprecated You should use 'service_topology' instead of 'service_topology_comparison'. This attribute still exists for backwards compatibility.
     */
    serviceTopologyComparisons?: outputs.AutotagRuleConditionServiceTopologyComparison[];
    /**
     * @deprecated You should use 'service_type' instead of 'service_type_comparison'. This attribute still exists for backwards compatibility.
     */
    serviceTypeComparisons?: outputs.AutotagRuleConditionServiceTypeComparison[];
    serviceTypes?: outputs.AutotagRuleConditionServiceType[];
    /**
     * @deprecated You should use 'host_tech' instead of 'simple_host_tech_comparison'. This attribute still exists for backwards compatibility.
     */
    simpleHostTechComparisons?: outputs.AutotagRuleConditionSimpleHostTechComparison[];
    /**
     * @deprecated You should use 'tech' instead of 'simple_tech_comparison'. This attribute still exists for backwards compatibility.
     */
    simpleTechComparisons?: outputs.AutotagRuleConditionSimpleTechComparison[];
    /**
     * @deprecated You should use 'string' instead of 'string_comparison'. This attribute still exists for backwards compatibility.
     */
    stringComparisons?: outputs.AutotagRuleConditionStringComparison[];
    /**
     * @deprecated 'string_condition_key' is deprecated. You should use 'string_key'
     */
    stringConditionKeys?: outputs.AutotagRuleConditionStringConditionKey[];
    stringKeys?: outputs.AutotagRuleConditionStringKey[];
    strings?: outputs.AutotagRuleConditionString[];
    /**
     * @deprecated You should use 'synthetic_engine' instead of 'synthetic_engine_type_comparison'. This attribute still exists for backwards compatibility.
     */
    syntheticEngineTypeComparisons?: outputs.AutotagRuleConditionSyntheticEngineTypeComparison[];
    syntheticEngines?: outputs.AutotagRuleConditionSyntheticEngine[];
    /**
     * @deprecated You should use 'tag' instead of 'tag_comparison'. This attribute still exists for backwards compatibility.
     */
    tagComparisons?: outputs.AutotagRuleConditionTagComparison[];
    tags?: outputs.AutotagRuleConditionTag[];
    teches?: outputs.AutotagRuleConditionTech[];
    unknowns?: string;
}

export interface AutotagRuleConditionApplicationType {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface AutotagRuleConditionApplicationTypeComparison {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: string;
}

export interface AutotagRuleConditionAzureComputeMode {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface AutotagRuleConditionAzureComputeModeComparison {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface AutotagRuleConditionAzureSkuComparision {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: string;
}

export interface AutotagRuleConditionAzureSkus {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface AutotagRuleConditionBaseComparisonBasic {
    negate?: boolean;
    type: string;
    unknowns?: string;
}

export interface AutotagRuleConditionBaseConditionKey {
    attribute: string;
    type?: string;
    unknowns?: string;
}

export interface AutotagRuleConditionBitness {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface AutotagRuleConditionBitnessComparision {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: string;
}

export interface AutotagRuleConditionCloudType {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface AutotagRuleConditionCloudTypeComparison {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: string;
}

export interface AutotagRuleConditionComparison {
    negate?: boolean;
    type: string;
    unknowns?: string;
}

export interface AutotagRuleConditionCustomApplicationType {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface AutotagRuleConditionCustomApplicationTypeComparison {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: string;
}

export interface AutotagRuleConditionCustomHostMetadata {
    attribute: string;
    dynamicKey: outputs.AutotagRuleConditionCustomHostMetadataDynamicKey;
    unknowns?: string;
}

export interface AutotagRuleConditionCustomHostMetadataConditionKey {
    attribute: string;
    dynamicKey: outputs.AutotagRuleConditionCustomHostMetadataConditionKeyDynamicKey;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
}

export interface AutotagRuleConditionCustomHostMetadataConditionKeyDynamicKey {
    key: string;
    source: string;
    unknowns?: string;
}

export interface AutotagRuleConditionCustomHostMetadataDynamicKey {
    key: string;
    source: string;
    unknowns?: string;
}

export interface AutotagRuleConditionCustomProcessMetadata {
    attribute: string;
    dynamicKey: outputs.AutotagRuleConditionCustomProcessMetadataDynamicKey;
    unknowns?: string;
}

export interface AutotagRuleConditionCustomProcessMetadataConditionKey {
    attribute: string;
    dynamicKey: outputs.AutotagRuleConditionCustomProcessMetadataConditionKeyDynamicKey;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
}

export interface AutotagRuleConditionCustomProcessMetadataConditionKeyDynamicKey {
    key: string;
    source: string;
    unknowns?: string;
}

export interface AutotagRuleConditionCustomProcessMetadataDynamicKey {
    key: string;
    source: string;
    unknowns?: string;
}

export interface AutotagRuleConditionDatabaseTopology {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface AutotagRuleConditionDatabaseTopologyComparison {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: string;
}

export interface AutotagRuleConditionDcrumDecoder {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface AutotagRuleConditionDcrumDecoderComparison {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: string;
}

export interface AutotagRuleConditionEntity {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface AutotagRuleConditionEntityIdComparison {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: string;
}

export interface AutotagRuleConditionHostTech {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: outputs.AutotagRuleConditionHostTechValue;
}

export interface AutotagRuleConditionHostTechValue {
    type?: string;
    unknowns?: string;
    verbatimType?: string;
}

export interface AutotagRuleConditionHypervisor {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface AutotagRuleConditionHypervisorTypeComparision {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: string;
}

export interface AutotagRuleConditionIndexedName {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface AutotagRuleConditionIndexedNameComparison {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: string;
}

export interface AutotagRuleConditionIndexedString {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface AutotagRuleConditionIndexedStringComparison {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: string;
}

export interface AutotagRuleConditionIndexedTag {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: outputs.AutotagRuleConditionIndexedTagValue;
}

export interface AutotagRuleConditionIndexedTagComparison {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: outputs.AutotagRuleConditionIndexedTagComparisonValue;
}

export interface AutotagRuleConditionIndexedTagComparisonValue {
    context: string;
    key: string;
    unknowns?: string;
    value?: string;
}

export interface AutotagRuleConditionIndexedTagValue {
    context: string;
    key: string;
    unknowns?: string;
    value?: string;
}

export interface AutotagRuleConditionInteger {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: number;
}

export interface AutotagRuleConditionIntegerComparison {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: number;
}

export interface AutotagRuleConditionIpaddress {
    caseSensitive?: boolean;
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface AutotagRuleConditionIpaddressComparison {
    caseSensitive?: boolean;
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: string;
}

export interface AutotagRuleConditionKey {
    attribute: string;
    type?: string;
    unknowns?: string;
}

export interface AutotagRuleConditionMobilePlatform {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface AutotagRuleConditionMobilePlatformComparison {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: string;
}

export interface AutotagRuleConditionOsArch {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface AutotagRuleConditionOsType {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface AutotagRuleConditionOsarchitectureComparison {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: string;
}

export interface AutotagRuleConditionOstypeComparison {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: string;
}

export interface AutotagRuleConditionPaasType {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface AutotagRuleConditionPaasTypeComparison {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: string;
}

export interface AutotagRuleConditionProcessMetadata {
    attribute: string;
    dynamicKey: string;
    unknowns?: string;
}

export interface AutotagRuleConditionProcessMetadataConditionKey {
    attribute: string;
    dynamicKey: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
}

export interface AutotagRuleConditionServiceTopology {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface AutotagRuleConditionServiceTopologyComparison {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: string;
}

export interface AutotagRuleConditionServiceType {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface AutotagRuleConditionServiceTypeComparison {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: string;
}

export interface AutotagRuleConditionSimpleHostTechComparison {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: outputs.AutotagRuleConditionSimpleHostTechComparisonValue;
}

export interface AutotagRuleConditionSimpleHostTechComparisonValue {
    type?: string;
    unknowns?: string;
    verbatimType?: string;
}

export interface AutotagRuleConditionSimpleTechComparison {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: outputs.AutotagRuleConditionSimpleTechComparisonValue;
}

export interface AutotagRuleConditionSimpleTechComparisonValue {
    type?: string;
    unknowns?: string;
    verbatimType?: string;
}

export interface AutotagRuleConditionString {
    caseSensitive?: boolean;
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface AutotagRuleConditionStringComparison {
    caseSensitive?: boolean;
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: string;
}

export interface AutotagRuleConditionStringConditionKey {
    attribute: string;
    dynamicKey: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
}

export interface AutotagRuleConditionStringKey {
    attribute: string;
    dynamicKey: string;
    unknowns?: string;
}

export interface AutotagRuleConditionSyntheticEngine {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface AutotagRuleConditionSyntheticEngineTypeComparison {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: string;
}

export interface AutotagRuleConditionTag {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: outputs.AutotagRuleConditionTagValue;
}

export interface AutotagRuleConditionTagComparison {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: outputs.AutotagRuleConditionTagComparisonValue;
}

export interface AutotagRuleConditionTagComparisonValue {
    context: string;
    key: string;
    unknowns?: string;
    value?: string;
}

export interface AutotagRuleConditionTagValue {
    context: string;
    key: string;
    unknowns?: string;
    value?: string;
}

export interface AutotagRuleConditionTech {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: outputs.AutotagRuleConditionTechValue;
}

export interface AutotagRuleConditionTechValue {
    type?: string;
    unknowns?: string;
    verbatimType?: string;
}

export interface AutotagRulesRules {
    rules: outputs.AutotagRulesRulesRule[];
}

export interface AutotagRulesRulesRule {
    /**
     * no documentation available
     */
    attributeRule?: outputs.AutotagRulesRulesRuleAttributeRule;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * The documentation of the entity selector can be found [here](https://dt-url.net/apientityselector).
     */
    entitySelector?: string;
    /**
     * Possible Values: `ME`, `SELECTOR`
     */
    type: string;
    /**
     * Type '{' for placeholder suggestions
     */
    valueFormat?: string;
    /**
     * Possible Values: `Leavetextas_is`, `Tolowercase`, `Touppercase`
     */
    valueNormalization: string;
}

export interface AutotagRulesRulesRuleAttributeRule {
    /**
     * Apply to process groups connected to matching Azure entities
     */
    azureToPgpropagation?: boolean;
    /**
     * Apply to services provided by matching Azure entities
     */
    azureToServicePropagation?: boolean;
    /**
     * no documentation available
     */
    conditions: outputs.AutotagRulesRulesRuleAttributeRuleConditions;
    /**
     * Possible Values: `APPLICATION`, `AWS_APPLICATION_LOAD_BALANCER`, `AWS_CLASSIC_LOAD_BALANCER`, `AWS_NETWORK_LOAD_BALANCER`, `AWS_RELATIONAL_DATABASE_SERVICE`, `AZURE`, `CUSTOM_APPLICATION`, `CUSTOM_DEVICE`, `DCRUM_APPLICATION`, `ESXI_HOST`, `EXTERNAL_SYNTHETIC_TEST`, `HOST`, `HTTP_CHECK`, `MOBILE_APPLICATION`, `PROCESS_GROUP`, `SERVICE`, `SYNTHETIC_TEST`
     */
    entityType: string;
    /**
     * Apply to processes running on matching hosts
     */
    hostToPgpropagation?: boolean;
    /**
     * Apply to underlying hosts of matching process groups
     */
    pgToHostPropagation?: boolean;
    /**
     * Apply to all services provided by the process groups
     */
    pgToServicePropagation?: boolean;
    /**
     * Apply to underlying hosts of matching services
     */
    serviceToHostPropagation?: boolean;
    /**
     * Apply to underlying process groups of matching services
     */
    serviceToPgpropagation?: boolean;
}

export interface AutotagRulesRulesRuleAttributeRuleConditions {
    conditions: outputs.AutotagRulesRulesRuleAttributeRuleConditionsCondition[];
}

export interface AutotagRulesRulesRuleAttributeRuleConditionsCondition {
    /**
     * Case sensitive
     */
    caseSensitive?: boolean;
    /**
     * Dynamic key
     */
    dynamicKey?: string;
    /**
     * Key source
     */
    dynamicKeySource?: string;
    /**
     * Value
     */
    entityId?: string;
    /**
     * Value
     */
    enumValue?: string;
    /**
     * Value
     */
    integerValue?: number;
    /**
     * Possible Values: `APPMON_SERVER_NAME`, `APPMON_SYSTEM_PROFILE_NAME`, `AWS_ACCOUNT_ID`, `AWS_ACCOUNT_NAME`, `AWS_APPLICATION_LOAD_BALANCER_NAME`, `AWS_APPLICATION_LOAD_BALANCER_TAGS`, `AWS_AUTO_SCALING_GROUP_NAME`, `AWS_AUTO_SCALING_GROUP_TAGS`, `AWS_AVAILABILITY_ZONE_NAME`, `AWS_CLASSIC_LOAD_BALANCER_FRONTEND_PORTS`, `AWS_CLASSIC_LOAD_BALANCER_NAME`, `AWS_CLASSIC_LOAD_BALANCER_TAGS`, `AWS_NETWORK_LOAD_BALANCER_NAME`, `AWS_NETWORK_LOAD_BALANCER_TAGS`, `AWS_RELATIONAL_DATABASE_SERVICE_DB_NAME`, `AWS_RELATIONAL_DATABASE_SERVICE_ENDPOINT`, `AWS_RELATIONAL_DATABASE_SERVICE_ENGINE`, `AWS_RELATIONAL_DATABASE_SERVICE_INSTANCE_CLASS`, `AWS_RELATIONAL_DATABASE_SERVICE_NAME`, `AWS_RELATIONAL_DATABASE_SERVICE_PORT`, `AWS_RELATIONAL_DATABASE_SERVICE_TAGS`, `AZURE_ENTITY_NAME`, `AZURE_ENTITY_TAGS`, `AZURE_MGMT_GROUP_NAME`, `AZURE_MGMT_GROUP_UUID`, `AZURE_REGION_NAME`, `AZURE_SCALE_SET_NAME`, `AZURE_SUBSCRIPTION_NAME`, `AZURE_SUBSCRIPTION_UUID`, `AZURE_TENANT_NAME`, `AZURE_TENANT_UUID`, `AZURE_VM_NAME`, `BROWSER_MONITOR_NAME`, `BROWSER_MONITOR_TAGS`, `CLOUD_APPLICATION_LABELS`, `CLOUD_APPLICATION_NAME`, `CLOUD_APPLICATION_NAMESPACE_LABELS`, `CLOUD_APPLICATION_NAMESPACE_NAME`, `CLOUD_FOUNDRY_FOUNDATION_NAME`, `CLOUD_FOUNDRY_ORG_NAME`, `CUSTOM_APPLICATION_NAME`, `CUSTOM_APPLICATION_PLATFORM`, `CUSTOM_APPLICATION_TAGS`, `CUSTOM_APPLICATION_TYPE`, `CUSTOM_DEVICE_DNS_ADDRESS`, `CUSTOM_DEVICE_GROUP_NAME`, `CUSTOM_DEVICE_GROUP_TAGS`, `CUSTOM_DEVICE_IP_ADDRESS`, `CUSTOM_DEVICE_METADATA`, `CUSTOM_DEVICE_NAME`, `CUSTOM_DEVICE_PORT`, `CUSTOM_DEVICE_TAGS`, `CUSTOM_DEVICE_TECHNOLOGY`, `DATA_CENTER_SERVICE_DECODER_TYPE`, `DATA_CENTER_SERVICE_IP_ADDRESS`, `DATA_CENTER_SERVICE_METADATA`, `DATA_CENTER_SERVICE_NAME`, `DATA_CENTER_SERVICE_PORT`, `DATA_CENTER_SERVICE_TAGS`, `DOCKER_CONTAINER_NAME`, `DOCKER_FULL_IMAGE_NAME`, `DOCKER_IMAGE_VERSION`, `EC2_INSTANCE_AMI_ID`, `EC2_INSTANCE_AWS_INSTANCE_TYPE`, `EC2_INSTANCE_AWS_SECURITY_GROUP`, `EC2_INSTANCE_BEANSTALK_ENV_NAME`, `EC2_INSTANCE_ID`, `EC2_INSTANCE_NAME`, `EC2_INSTANCE_PRIVATE_HOST_NAME`, `EC2_INSTANCE_PUBLIC_HOST_NAME`, `EC2_INSTANCE_TAGS`, `ENTERPRISE_APPLICATION_DECODER_TYPE`, `ENTERPRISE_APPLICATION_IP_ADDRESS`, `ENTERPRISE_APPLICATION_METADATA`, `ENTERPRISE_APPLICATION_NAME`, `ENTERPRISE_APPLICATION_PORT`, `ENTERPRISE_APPLICATION_TAGS`, `ESXI_HOST_CLUSTER_NAME`, `ESXI_HOST_HARDWARE_MODEL`, `ESXI_HOST_HARDWARE_VENDOR`, `ESXI_HOST_NAME`, `ESXI_HOST_PRODUCT_NAME`, `ESXI_HOST_PRODUCT_VERSION`, `ESXI_HOST_TAGS`, `EXTERNAL_MONITOR_ENGINE_DESCRIPTION`, `EXTERNAL_MONITOR_ENGINE_NAME`, `EXTERNAL_MONITOR_ENGINE_TYPE`, `EXTERNAL_MONITOR_NAME`, `EXTERNAL_MONITOR_TAGS`, `GEOLOCATION_SITE_NAME`, `GOOGLE_CLOUD_PLATFORM_ZONE_NAME`, `GOOGLE_COMPUTE_INSTANCE_ID`, `GOOGLE_COMPUTE_INSTANCE_MACHINE_TYPE`, `GOOGLE_COMPUTE_INSTANCE_NAME`, `GOOGLE_COMPUTE_INSTANCE_PROJECT`, `GOOGLE_COMPUTE_INSTANCE_PROJECT_ID`, `GOOGLE_COMPUTE_INSTANCE_PUBLIC_IP_ADDRESSES`, `HOST_AIX_LOGICAL_CPU_COUNT`, `HOST_AIX_SIMULTANEOUS_THREADS`, `HOST_AIX_VIRTUAL_CPU_COUNT`, `HOST_ARCHITECTURE`, `HOST_AWS_NAME_TAG`, `HOST_AZURE_COMPUTE_MODE`, `HOST_AZURE_SKU`, `HOST_AZURE_WEB_APPLICATION_HOST_NAMES`, `HOST_AZURE_WEB_APPLICATION_SITE_NAMES`, `HOST_BITNESS`, `HOST_BOSH_AVAILABILITY_ZONE`, `HOST_BOSH_DEPLOYMENT_ID`, `HOST_BOSH_INSTANCE_ID`, `HOST_BOSH_INSTANCE_NAME`, `HOST_BOSH_NAME`, `HOST_BOSH_STEMCELL_VERSION`, `HOST_CLOUD_TYPE`, `HOST_CPU_CORES`, `HOST_CUSTOM_METADATA`, `HOST_DETECTED_NAME`, `HOST_GROUP_ID`, `HOST_GROUP_NAME`, `HOST_HYPERVISOR_TYPE`, `HOST_IP_ADDRESS`, `HOST_KUBERNETES_LABELS`, `HOST_LOGICAL_CPU_CORES`, `HOST_NAME`, `HOST_ONEAGENT_CUSTOM_HOST_NAME`, `HOST_OS_TYPE`, `HOST_OS_VERSION`, `HOST_PAAS_MEMORY_LIMIT`, `HOST_PAAS_TYPE`, `HOST_TAGS`, `HOST_TECHNOLOGY`, `HTTP_MONITOR_NAME`, `HTTP_MONITOR_TAGS`, `KUBERNETES_CLUSTER_NAME`, `KUBERNETES_NODE_NAME`, `KUBERNETES_SERVICE_NAME`, `MOBILE_APPLICATION_NAME`, `MOBILE_APPLICATION_PLATFORM`, `MOBILE_APPLICATION_TAGS`, `NAME_OF_COMPUTE_NODE`, `OPENSTACK_ACCOUNT_NAME`, `OPENSTACK_ACCOUNT_PROJECT_NAME`, `OPENSTACK_AVAILABILITY_ZONE_NAME`, `OPENSTACK_PROJECT_NAME`, `OPENSTACK_REGION_NAME`, `OPENSTACK_VM_INSTANCE_TYPE`, `OPENSTACK_VM_NAME`, `OPENSTACK_VM_SECURITY_GROUP`, `PROCESS_GROUP_AZURE_HOST_NAME`, `PROCESS_GROUP_AZURE_SITE_NAME`, `PROCESS_GROUP_CUSTOM_METADATA`, `PROCESS_GROUP_DETECTED_NAME`, `PROCESS_GROUP_ID`, `PROCESS_GROUP_LISTEN_PORT`, `PROCESS_GROUP_NAME`, `PROCESS_GROUP_PREDEFINED_METADATA`, `PROCESS_GROUP_TAGS`, `PROCESS_GROUP_TECHNOLOGY`, `PROCESS_GROUP_TECHNOLOGY_EDITION`, `PROCESS_GROUP_TECHNOLOGY_VERSION`, `QUEUE_NAME`, `QUEUE_TECHNOLOGY`, `QUEUE_VENDOR`, `SERVICE_AKKA_ACTOR_SYSTEM`, `SERVICE_CTG_SERVICE_NAME`, `SERVICE_DATABASE_HOST_NAME`, `SERVICE_DATABASE_NAME`, `SERVICE_DATABASE_TOPOLOGY`, `SERVICE_DATABASE_VENDOR`, `SERVICE_DETECTED_NAME`, `SERVICE_ESB_APPLICATION_NAME`, `SERVICE_IBM_CTG_GATEWAY_URL`, `SERVICE_MESSAGING_LISTENER_CLASS_NAME`, `SERVICE_NAME`, `SERVICE_PORT`, `SERVICE_PUBLIC_DOMAIN_NAME`, `SERVICE_REMOTE_ENDPOINT`, `SERVICE_REMOTE_SERVICE_NAME`, `SERVICE_TAGS`, `SERVICE_TECHNOLOGY`, `SERVICE_TECHNOLOGY_EDITION`, `SERVICE_TECHNOLOGY_VERSION`, `SERVICE_TOPOLOGY`, `SERVICE_TYPE`, `SERVICE_WEB_APPLICATION_ID`, `SERVICE_WEB_CONTEXT_ROOT`, `SERVICE_WEB_SERVER_ENDPOINT`, `SERVICE_WEB_SERVER_NAME`, `SERVICE_WEB_SERVICE_NAME`, `SERVICE_WEB_SERVICE_NAMESPACE`, `VMWARE_DATACENTER_NAME`, `VMWARE_VM_NAME`, `WEB_APPLICATION_NAME`, `WEB_APPLICATION_NAME_PATTERN`, `WEB_APPLICATION_TAGS`, `WEB_APPLICATION_TYPE`
     */
    key: string;
    /**
     * Possible Values: `BEGINS_WITH`, `CONTAINS`, `ENDS_WITH`, `EQUALS`, `EXISTS`, `GREATER_THAN`, `GREATER_THAN_OR_EQUAL`, `IS_IP_IN_RANGE`, `LOWER_THAN`, `LOWER_THAN_OR_EQUAL`, `NOT_BEGINS_WITH`, `NOT_CONTAINS`, `NOT_ENDS_WITH`, `NOT_EQUALS`, `NOT_EXISTS`, `NOT_GREATER_THAN`, `NOT_GREATER_THAN_OR_EQUAL`, `NOT_IS_IP_IN_RANGE`, `NOT_LOWER_THAN`, `NOT_LOWER_THAN_OR_EQUAL`, `NOT_REGEX_MATCHES`, `NOT_TAG_KEY_EQUALS`, `REGEX_MATCHES`, `TAG_KEY_EQUALS`
     */
    operator: string;
    /**
     * Value
     */
    stringValue?: string;
    /**
     * Format: `[CONTEXT]tagKey:tagValue`
     */
    tag?: string;
}

export interface AutotagV2Rules {
    rules: outputs.AutotagV2RulesRule[];
}

export interface AutotagV2RulesRule {
    /**
     * no documentation available
     */
    attributeRule?: outputs.AutotagV2RulesRuleAttributeRule;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * The documentation of the entity selector can be found [here](https://dt-url.net/apientityselector).
     */
    entitySelector?: string;
    /**
     * Possible Values: `ME`, `SELECTOR`
     */
    type: string;
    /**
     * Type '{' for placeholder suggestions
     */
    valueFormat?: string;
    /**
     * Possible Values: `Leavetextas_is`, `Tolowercase`, `Touppercase`
     */
    valueNormalization: string;
}

export interface AutotagV2RulesRuleAttributeRule {
    /**
     * Apply to process groups connected to matching Azure entities
     */
    azureToPgpropagation?: boolean;
    /**
     * Apply to services provided by matching Azure entities
     */
    azureToServicePropagation?: boolean;
    /**
     * no documentation available
     */
    conditions: outputs.AutotagV2RulesRuleAttributeRuleConditions;
    /**
     * Possible Values: `APPLICATION`, `AWS_APPLICATION_LOAD_BALANCER`, `AWS_CLASSIC_LOAD_BALANCER`, `AWS_NETWORK_LOAD_BALANCER`, `AWS_RELATIONAL_DATABASE_SERVICE`, `AZURE`, `CUSTOM_APPLICATION`, `CUSTOM_DEVICE`, `DCRUM_APPLICATION`, `ESXI_HOST`, `EXTERNAL_SYNTHETIC_TEST`, `HOST`, `HTTP_CHECK`, `MOBILE_APPLICATION`, `PROCESS_GROUP`, `SERVICE`, `SYNTHETIC_TEST`
     */
    entityType: string;
    /**
     * Apply to processes running on matching hosts
     */
    hostToPgpropagation?: boolean;
    /**
     * Apply to underlying hosts of matching process groups
     */
    pgToHostPropagation?: boolean;
    /**
     * Apply to all services provided by the process groups
     */
    pgToServicePropagation?: boolean;
    /**
     * Apply to underlying hosts of matching services
     */
    serviceToHostPropagation?: boolean;
    /**
     * Apply to underlying process groups of matching services
     */
    serviceToPgpropagation?: boolean;
}

export interface AutotagV2RulesRuleAttributeRuleConditions {
    conditions: outputs.AutotagV2RulesRuleAttributeRuleConditionsCondition[];
}

export interface AutotagV2RulesRuleAttributeRuleConditionsCondition {
    /**
     * Case sensitive
     */
    caseSensitive?: boolean;
    /**
     * Dynamic key
     */
    dynamicKey?: string;
    /**
     * Key source
     */
    dynamicKeySource?: string;
    /**
     * Value
     */
    entityId?: string;
    /**
     * Value
     */
    enumValue?: string;
    /**
     * Value
     */
    integerValue?: number;
    /**
     * Possible Values: `APPMON_SERVER_NAME`, `APPMON_SYSTEM_PROFILE_NAME`, `AWS_ACCOUNT_ID`, `AWS_ACCOUNT_NAME`, `AWS_APPLICATION_LOAD_BALANCER_NAME`, `AWS_APPLICATION_LOAD_BALANCER_TAGS`, `AWS_AUTO_SCALING_GROUP_NAME`, `AWS_AUTO_SCALING_GROUP_TAGS`, `AWS_AVAILABILITY_ZONE_NAME`, `AWS_CLASSIC_LOAD_BALANCER_FRONTEND_PORTS`, `AWS_CLASSIC_LOAD_BALANCER_NAME`, `AWS_CLASSIC_LOAD_BALANCER_TAGS`, `AWS_NETWORK_LOAD_BALANCER_NAME`, `AWS_NETWORK_LOAD_BALANCER_TAGS`, `AWS_RELATIONAL_DATABASE_SERVICE_DB_NAME`, `AWS_RELATIONAL_DATABASE_SERVICE_ENDPOINT`, `AWS_RELATIONAL_DATABASE_SERVICE_ENGINE`, `AWS_RELATIONAL_DATABASE_SERVICE_INSTANCE_CLASS`, `AWS_RELATIONAL_DATABASE_SERVICE_NAME`, `AWS_RELATIONAL_DATABASE_SERVICE_PORT`, `AWS_RELATIONAL_DATABASE_SERVICE_TAGS`, `AZURE_ENTITY_NAME`, `AZURE_ENTITY_TAGS`, `AZURE_MGMT_GROUP_NAME`, `AZURE_MGMT_GROUP_UUID`, `AZURE_REGION_NAME`, `AZURE_SCALE_SET_NAME`, `AZURE_SUBSCRIPTION_NAME`, `AZURE_SUBSCRIPTION_UUID`, `AZURE_TENANT_NAME`, `AZURE_TENANT_UUID`, `AZURE_VM_NAME`, `BROWSER_MONITOR_NAME`, `BROWSER_MONITOR_TAGS`, `CLOUD_APPLICATION_LABELS`, `CLOUD_APPLICATION_NAME`, `CLOUD_APPLICATION_NAMESPACE_LABELS`, `CLOUD_APPLICATION_NAMESPACE_NAME`, `CLOUD_FOUNDRY_FOUNDATION_NAME`, `CLOUD_FOUNDRY_ORG_NAME`, `CUSTOM_APPLICATION_NAME`, `CUSTOM_APPLICATION_PLATFORM`, `CUSTOM_APPLICATION_TAGS`, `CUSTOM_APPLICATION_TYPE`, `CUSTOM_DEVICE_DNS_ADDRESS`, `CUSTOM_DEVICE_GROUP_NAME`, `CUSTOM_DEVICE_GROUP_TAGS`, `CUSTOM_DEVICE_IP_ADDRESS`, `CUSTOM_DEVICE_METADATA`, `CUSTOM_DEVICE_NAME`, `CUSTOM_DEVICE_PORT`, `CUSTOM_DEVICE_TAGS`, `CUSTOM_DEVICE_TECHNOLOGY`, `DATA_CENTER_SERVICE_DECODER_TYPE`, `DATA_CENTER_SERVICE_IP_ADDRESS`, `DATA_CENTER_SERVICE_METADATA`, `DATA_CENTER_SERVICE_NAME`, `DATA_CENTER_SERVICE_PORT`, `DATA_CENTER_SERVICE_TAGS`, `DOCKER_CONTAINER_NAME`, `DOCKER_FULL_IMAGE_NAME`, `DOCKER_IMAGE_VERSION`, `EC2_INSTANCE_AMI_ID`, `EC2_INSTANCE_AWS_INSTANCE_TYPE`, `EC2_INSTANCE_AWS_SECURITY_GROUP`, `EC2_INSTANCE_BEANSTALK_ENV_NAME`, `EC2_INSTANCE_ID`, `EC2_INSTANCE_NAME`, `EC2_INSTANCE_PRIVATE_HOST_NAME`, `EC2_INSTANCE_PUBLIC_HOST_NAME`, `EC2_INSTANCE_TAGS`, `ENTERPRISE_APPLICATION_DECODER_TYPE`, `ENTERPRISE_APPLICATION_IP_ADDRESS`, `ENTERPRISE_APPLICATION_METADATA`, `ENTERPRISE_APPLICATION_NAME`, `ENTERPRISE_APPLICATION_PORT`, `ENTERPRISE_APPLICATION_TAGS`, `ESXI_HOST_CLUSTER_NAME`, `ESXI_HOST_HARDWARE_MODEL`, `ESXI_HOST_HARDWARE_VENDOR`, `ESXI_HOST_NAME`, `ESXI_HOST_PRODUCT_NAME`, `ESXI_HOST_PRODUCT_VERSION`, `ESXI_HOST_TAGS`, `EXTERNAL_MONITOR_ENGINE_DESCRIPTION`, `EXTERNAL_MONITOR_ENGINE_NAME`, `EXTERNAL_MONITOR_ENGINE_TYPE`, `EXTERNAL_MONITOR_NAME`, `EXTERNAL_MONITOR_TAGS`, `GEOLOCATION_SITE_NAME`, `GOOGLE_CLOUD_PLATFORM_ZONE_NAME`, `GOOGLE_COMPUTE_INSTANCE_ID`, `GOOGLE_COMPUTE_INSTANCE_MACHINE_TYPE`, `GOOGLE_COMPUTE_INSTANCE_NAME`, `GOOGLE_COMPUTE_INSTANCE_PROJECT`, `GOOGLE_COMPUTE_INSTANCE_PROJECT_ID`, `GOOGLE_COMPUTE_INSTANCE_PUBLIC_IP_ADDRESSES`, `HOST_AIX_LOGICAL_CPU_COUNT`, `HOST_AIX_SIMULTANEOUS_THREADS`, `HOST_AIX_VIRTUAL_CPU_COUNT`, `HOST_ARCHITECTURE`, `HOST_AWS_NAME_TAG`, `HOST_AZURE_COMPUTE_MODE`, `HOST_AZURE_SKU`, `HOST_AZURE_WEB_APPLICATION_HOST_NAMES`, `HOST_AZURE_WEB_APPLICATION_SITE_NAMES`, `HOST_BITNESS`, `HOST_BOSH_AVAILABILITY_ZONE`, `HOST_BOSH_DEPLOYMENT_ID`, `HOST_BOSH_INSTANCE_ID`, `HOST_BOSH_INSTANCE_NAME`, `HOST_BOSH_NAME`, `HOST_BOSH_STEMCELL_VERSION`, `HOST_CLOUD_TYPE`, `HOST_CPU_CORES`, `HOST_CUSTOM_METADATA`, `HOST_DETECTED_NAME`, `HOST_GROUP_ID`, `HOST_GROUP_NAME`, `HOST_HYPERVISOR_TYPE`, `HOST_IP_ADDRESS`, `HOST_KUBERNETES_LABELS`, `HOST_LOGICAL_CPU_CORES`, `HOST_NAME`, `HOST_ONEAGENT_CUSTOM_HOST_NAME`, `HOST_OS_TYPE`, `HOST_OS_VERSION`, `HOST_PAAS_MEMORY_LIMIT`, `HOST_PAAS_TYPE`, `HOST_TAGS`, `HOST_TECHNOLOGY`, `HTTP_MONITOR_NAME`, `HTTP_MONITOR_TAGS`, `KUBERNETES_CLUSTER_NAME`, `KUBERNETES_NODE_NAME`, `KUBERNETES_SERVICE_NAME`, `MOBILE_APPLICATION_NAME`, `MOBILE_APPLICATION_PLATFORM`, `MOBILE_APPLICATION_TAGS`, `NAME_OF_COMPUTE_NODE`, `OPENSTACK_ACCOUNT_NAME`, `OPENSTACK_ACCOUNT_PROJECT_NAME`, `OPENSTACK_AVAILABILITY_ZONE_NAME`, `OPENSTACK_PROJECT_NAME`, `OPENSTACK_REGION_NAME`, `OPENSTACK_VM_INSTANCE_TYPE`, `OPENSTACK_VM_NAME`, `OPENSTACK_VM_SECURITY_GROUP`, `PROCESS_GROUP_AZURE_HOST_NAME`, `PROCESS_GROUP_AZURE_SITE_NAME`, `PROCESS_GROUP_CUSTOM_METADATA`, `PROCESS_GROUP_DETECTED_NAME`, `PROCESS_GROUP_ID`, `PROCESS_GROUP_LISTEN_PORT`, `PROCESS_GROUP_NAME`, `PROCESS_GROUP_PREDEFINED_METADATA`, `PROCESS_GROUP_TAGS`, `PROCESS_GROUP_TECHNOLOGY`, `PROCESS_GROUP_TECHNOLOGY_EDITION`, `PROCESS_GROUP_TECHNOLOGY_VERSION`, `QUEUE_NAME`, `QUEUE_TECHNOLOGY`, `QUEUE_VENDOR`, `SERVICE_AKKA_ACTOR_SYSTEM`, `SERVICE_CTG_SERVICE_NAME`, `SERVICE_DATABASE_HOST_NAME`, `SERVICE_DATABASE_NAME`, `SERVICE_DATABASE_TOPOLOGY`, `SERVICE_DATABASE_VENDOR`, `SERVICE_DETECTED_NAME`, `SERVICE_ESB_APPLICATION_NAME`, `SERVICE_IBM_CTG_GATEWAY_URL`, `SERVICE_MESSAGING_LISTENER_CLASS_NAME`, `SERVICE_NAME`, `SERVICE_PORT`, `SERVICE_PUBLIC_DOMAIN_NAME`, `SERVICE_REMOTE_ENDPOINT`, `SERVICE_REMOTE_SERVICE_NAME`, `SERVICE_TAGS`, `SERVICE_TECHNOLOGY`, `SERVICE_TECHNOLOGY_EDITION`, `SERVICE_TECHNOLOGY_VERSION`, `SERVICE_TOPOLOGY`, `SERVICE_TYPE`, `SERVICE_WEB_APPLICATION_ID`, `SERVICE_WEB_CONTEXT_ROOT`, `SERVICE_WEB_SERVER_ENDPOINT`, `SERVICE_WEB_SERVER_NAME`, `SERVICE_WEB_SERVICE_NAME`, `SERVICE_WEB_SERVICE_NAMESPACE`, `VMWARE_DATACENTER_NAME`, `VMWARE_VM_NAME`, `WEB_APPLICATION_NAME`, `WEB_APPLICATION_NAME_PATTERN`, `WEB_APPLICATION_TAGS`, `WEB_APPLICATION_TYPE`
     */
    key: string;
    /**
     * Possible Values: `BEGINS_WITH`, `CONTAINS`, `ENDS_WITH`, `EQUALS`, `EXISTS`, `GREATER_THAN`, `GREATER_THAN_OR_EQUAL`, `IS_IP_IN_RANGE`, `LOWER_THAN`, `LOWER_THAN_OR_EQUAL`, `NOT_BEGINS_WITH`, `NOT_CONTAINS`, `NOT_ENDS_WITH`, `NOT_EQUALS`, `NOT_EXISTS`, `NOT_GREATER_THAN`, `NOT_GREATER_THAN_OR_EQUAL`, `NOT_IS_IP_IN_RANGE`, `NOT_LOWER_THAN`, `NOT_LOWER_THAN_OR_EQUAL`, `NOT_REGEX_MATCHES`, `NOT_TAG_KEY_EQUALS`, `REGEX_MATCHES`, `TAG_KEY_EQUALS`
     */
    operator: string;
    /**
     * Value
     */
    stringValue?: string;
    /**
     * Format: `[CONTEXT]tagKey:tagValue`
     */
    tag?: string;
}

export interface AwsAnomaliesEc2CandidateHighCpuDetection {
    /**
     * Alert if the condition is met in 3 out of 5 samples
     */
    customThresholds?: outputs.AwsAnomaliesEc2CandidateHighCpuDetectionCustomThresholds;
    /**
     * Possible Values: `Auto`, `Custom`
     */
    detectionMode?: string;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface AwsAnomaliesEc2CandidateHighCpuDetectionCustomThresholds {
    /**
     * CPU usage is higher than
     */
    cpuUsage: number;
}

export interface AwsAnomaliesElbHighConnectionErrorsDetection {
    /**
     * Alert if the condition is met in 3 out of 5 samples
     */
    customThresholds?: outputs.AwsAnomaliesElbHighConnectionErrorsDetectionCustomThresholds;
    /**
     * Possible Values: `Auto`, `Custom`
     */
    detectionMode?: string;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface AwsAnomaliesElbHighConnectionErrorsDetectionCustomThresholds {
    /**
     * Number of backend connection errors is higher than
     */
    connectionErrorsPerMinute: number;
}

export interface AwsAnomaliesLambdaHighErrorRateDetection {
    /**
     * Alert if the condition is met in 3 out of 5 samples
     */
    customThresholds?: outputs.AwsAnomaliesLambdaHighErrorRateDetectionCustomThresholds;
    /**
     * Possible Values: `Auto`, `Custom`
     */
    detectionMode?: string;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface AwsAnomaliesLambdaHighErrorRateDetectionCustomThresholds {
    /**
     * Failed invocations rate is higher than
     */
    failedInvocationsRate: number;
}

export interface AwsAnomaliesRdsHighCpuDetection {
    /**
     * Alert if the condition is met in 3 out of 5 samples
     */
    customThresholds?: outputs.AwsAnomaliesRdsHighCpuDetectionCustomThresholds;
    /**
     * Possible Values: `Auto`, `Custom`
     */
    detectionMode?: string;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface AwsAnomaliesRdsHighCpuDetectionCustomThresholds {
    /**
     * CPU usage is higher than
     */
    cpuUsage: number;
}

export interface AwsAnomaliesRdsHighMemoryDetection {
    /**
     * Alert if **both** conditions is met in 3 out of 5 samples
     */
    customThresholds?: outputs.AwsAnomaliesRdsHighMemoryDetectionCustomThresholds;
    /**
     * Possible Values: `Auto`, `Custom`
     */
    detectionMode?: string;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface AwsAnomaliesRdsHighMemoryDetectionCustomThresholds {
    /**
     * Freeable memory is lower than
     */
    freeMemory: number;
    /**
     * Swap usage is higher than
     */
    swapUsage: number;
}

export interface AwsAnomaliesRdsHighWriteReadLatencyDetection {
    /**
     * Alert if the condition is met in 3 out of 5 samples
     */
    customThresholds?: outputs.AwsAnomaliesRdsHighWriteReadLatencyDetectionCustomThresholds;
    /**
     * Possible Values: `Auto`, `Custom`
     */
    detectionMode?: string;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface AwsAnomaliesRdsHighWriteReadLatencyDetectionCustomThresholds {
    /**
     * Read/write latency is higher than
     */
    readWriteLatency: number;
}

export interface AwsAnomaliesRdsLowStorageDetection {
    /**
     * Alert if the condition is met in 3 out of 5 samples
     */
    customThresholds?: outputs.AwsAnomaliesRdsLowStorageDetectionCustomThresholds;
    /**
     * Possible Values: `Auto`, `Custom`
     */
    detectionMode?: string;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface AwsAnomaliesRdsLowStorageDetectionCustomThresholds {
    /**
     * Free storage space divided by allocated storage is lower than
     */
    freeStoragePercentage: number;
}

export interface AwsAnomaliesRdsRestartsSequenceDetection {
    /**
     * Alert if the condition is met in 2 out of 20 samples
     */
    customThresholds?: outputs.AwsAnomaliesRdsRestartsSequenceDetectionCustomThresholds;
    /**
     * Possible Values: `Auto`, `Custom`
     */
    detectionMode?: string;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface AwsAnomaliesRdsRestartsSequenceDetectionCustomThresholds {
    /**
     * Number of restarts per minute is equal or higher than
     */
    restartsPerMinute: number;
}

export interface AwsCredentialsAuthenticationData {
    /**
     * the access key
     */
    accessKey?: string;
    /**
     * the ID of the Amazon account
     */
    accountId?: string;
    /**
     * (Read only) the external ID token for setting an IAM role. You can obtain it with the `GET /aws/iamExternalId` request
     */
    externalId: string;
    /**
     * the IAM role to be used by Dynatrace to get monitoring data
     */
    iamRole?: string;
    /**
     * the secret access key
     */
    secretKey?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
}

export interface AwsCredentialsSupportingServicesToMonitor {
    /**
     * a list of metrics to be monitored for this service
     */
    monitoredMetrics?: outputs.AwsCredentialsSupportingServicesToMonitorMonitoredMetric[];
    /**
     * the name of the supporting service
     */
    name?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
}

export interface AwsCredentialsSupportingServicesToMonitorMonitoredMetric {
    /**
     * a list of metric's dimensions names
     */
    dimensions?: string[];
    /**
     * the name of the metric of the supporting service
     */
    name?: string;
    /**
     * the statistic (aggregation) to be used for the metric. AVG*MIN*MAX value is 3 statistics at once: AVERAGE, MINIMUM and MAXIMUM
     */
    statistic?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
}

export interface AwsCredentialsTagsToMonitor {
    /**
     * the key of the AWS tag.
     */
    name?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * the value of the AWS tag
     */
    value?: string;
}

export interface AwsServiceMetric {
    /**
     * a list of metric's dimensions names
     */
    dimensions?: string[];
    /**
     * the name of the metric of the supporting service
     */
    name: string;
    /**
     * Possible values are `AVERAGE`, `AVG_MIN_MAX`, `MAXIMUM`, `MINIMUM`, `SAMPLE_COUNT` and `SUM`
     */
    statistic?: string;
}

export interface AzureCredentialsMonitorOnlyExcludingTagPair {
    /**
     * The name of the tag.
     */
    name?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value of the tag.   If set to `null`, then resources with any value of the tag are monitored.
     */
    value?: string;
}

export interface AzureCredentialsMonitorOnlyTagPair {
    /**
     * The name of the tag.
     */
    name?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
    /**
     * The value of the tag.   If set to `null`, then resources with any value of the tag are monitored.
     */
    value?: string;
}

export interface AzureCredentialsSupportingService {
    /**
     * A list of Azure tags to be monitored.  You can specify up to 10 tags. A resource tagged with *any* of the specified tags is monitored.  Only applicable when the **monitorOnlyTaggedEntities** parameter is set to `true`
     */
    monitoredMetrics?: outputs.AzureCredentialsSupportingServiceMonitoredMetric[];
    /**
     * The name of the supporting service.
     */
    name?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
}

export interface AzureCredentialsSupportingServiceMonitoredMetric {
    /**
     * a list of metric's dimensions names
     */
    dimensions?: string[];
    /**
     * The name of the tag.
     */
    name?: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
}

export interface AzureServiceMetric {
    /**
     * a list of metric's dimensions names
     */
    dimensions?: string[];
    /**
     * the name of the metric of the supporting service
     */
    name: string;
}

export interface BrowserMonitorAnomalyDetection {
    /**
     * Thresholds for loading times
     */
    loadingTimeThresholds?: outputs.BrowserMonitorAnomalyDetectionLoadingTimeThreshold[];
    /**
     * Outage handling configuration
     */
    outageHandlings?: outputs.BrowserMonitorAnomalyDetectionOutageHandling[];
}

export interface BrowserMonitorAnomalyDetectionLoadingTimeThreshold {
    /**
     * Performance threshold is enabled (`true`) or disabled (`false`)
     */
    enabled?: boolean;
    /**
     * The list of performance threshold rules
     */
    thresholds?: outputs.BrowserMonitorAnomalyDetectionLoadingTimeThresholdThreshold[];
}

export interface BrowserMonitorAnomalyDetectionLoadingTimeThresholdThreshold {
    /**
     * The list of performance threshold rules
     */
    thresholds: outputs.BrowserMonitorAnomalyDetectionLoadingTimeThresholdThresholdThreshold[];
}

export interface BrowserMonitorAnomalyDetectionLoadingTimeThresholdThresholdThreshold {
    /**
     * Specify the event to which an ACTION threshold applies
     */
    eventIndex?: number;
    /**
     * Specify the request to which an ACTION threshold applies
     */
    requestIndex?: number;
    /**
     * The type of the threshold: `TOTAL` (total loading time) or `ACTION` (action loading time)
     */
    type?: string;
    /**
     * Notify if monitor takes longer than *X* milliseconds to load
     */
    valueMs: number;
}

export interface BrowserMonitorAnomalyDetectionOutageHandling {
    /**
     * (Field has overlap with `dynatrace.BrowserMonitorOutage` and `dynatrace.HttpMonitorOutage`) When enabled (`true`), generate a problem and send an alert when the monitor is unavailable at all configured locations
     */
    globalOutage?: boolean;
    /**
     * (Field has overlap with `dynatrace.BrowserMonitorOutage` and `dynatrace.HttpMonitorOutage`) Global outage handling configuration.
     */
    globalOutagePolicies?: outputs.BrowserMonitorAnomalyDetectionOutageHandlingGlobalOutagePolicy[];
    localOutage?: boolean;
    localOutagePolicies?: outputs.BrowserMonitorAnomalyDetectionOutageHandlingLocalOutagePolicy[];
    retryOnError?: boolean;
}

export interface BrowserMonitorAnomalyDetectionOutageHandlingGlobalOutagePolicy {
    /**
     * The number of consecutive fails to trigger an alert
     */
    consecutiveRuns: number;
}

export interface BrowserMonitorAnomalyDetectionOutageHandlingLocalOutagePolicy {
    /**
     * The number of affected locations to trigger an alert
     */
    affectedLocations: number;
    /**
     * The number of consecutive fails to trigger an alert
     */
    consecutiveRuns: number;
}

export interface BrowserMonitorKeyPerformanceMetrics {
    /**
     * Defines the key performance metric for load actions. Supported values are `VISUALLY_COMPLETE`, `SPEED_INDEX`, `USER_ACTION_DURATION`, `TIME_TO_FIRST_BYTE`, `HTML_DOWNLOADED`, `DOM_INTERACTIVE`, `LOAD_EVENT_START` and `LOAD_EVENT_END`.
     */
    loadActionKpm: string;
    /**
     * Defines the key performance metric for XHR actions. Supported values are `VISUALLY_COMPLETE`, `USER_ACTION_DURATION`, `TIME_TO_FIRST_BYTE` and `RESPONSE_END`.
     */
    xhrActionKpm: string;
}

export interface BrowserMonitorPerformanceThresholds {
    thresholds: outputs.BrowserMonitorPerformanceThresholdsThreshold[];
}

export interface BrowserMonitorPerformanceThresholdsThreshold {
    /**
     * Synthetic event
     */
    event: string;
    threshold: number;
}

export interface BrowserMonitorScript {
    /**
     * The setup of the monitor
     */
    configuration?: outputs.BrowserMonitorScriptConfiguration;
    /**
     * Steps of the clickpath—the first step must always be of the `navigate` type
     */
    events?: outputs.BrowserMonitorScriptEvents;
    /**
     * The type of monitor. Possible values are `clickpath` for clickpath monitors and `availability` for single-URL browser monitors. These monitors are only allowed to have one event of the `navigate` type
     */
    type: string;
}

export interface BrowserMonitorScriptConfiguration {
    /**
     * The emulated device of the monitor—holds either the parameters of the custom device or the name and orientation of the preconfigured device.
     */
    bandwidth?: outputs.BrowserMonitorScriptConfigurationBandwidth;
    blocks?: string[];
    bypassCsp?: boolean;
    /**
     * Every cookie must be unique within the list. However, you can use the same cookie again in other event
     */
    cookies?: outputs.BrowserMonitorScriptConfigurationCookies;
    device?: outputs.BrowserMonitorScriptConfigurationDevice;
    disableWebSecurity?: boolean;
    headers?: outputs.BrowserMonitorScriptConfigurationHeaders;
    ignoredErrorCodes?: outputs.BrowserMonitorScriptConfigurationIgnoredErrorCodes;
    javascriptSetttings?: outputs.BrowserMonitorScriptConfigurationJavascriptSetttings;
    monitorFrames?: boolean;
    userAgent?: string;
}

export interface BrowserMonitorScriptConfigurationBandwidth {
    /**
     * The download speed of the network, in bytes per second
     */
    download?: number;
    /**
     * The latency of the network, in milliseconds
     */
    latency?: number;
    /**
     * The type of the preconfigured network—when editing in the browser, press `Crtl+Spacebar` to see the list of available networks
     */
    networkType?: string;
    /**
     * The upload speed of the network, in bytes per second
     */
    upload?: number;
}

export interface BrowserMonitorScriptConfigurationCookies {
    /**
     * A request cookie
     */
    cookies: outputs.BrowserMonitorScriptConfigurationCookiesCookie[];
}

export interface BrowserMonitorScriptConfigurationCookiesCookie {
    /**
     * The domain of the cookie.
     */
    domain: string;
    /**
     * The name of the cookie. The following cookie names are now allowed: `dtCookie`, `dtLatC`, `dtPC`, `rxVisitor`, `rxlatency`, `rxpc`, `rxsession` and `rxvt`
     */
    name: string;
    /**
     * The path of the cookie.
     */
    path?: string;
    /**
     * The value of the cookie. The following symbols are not allowed: `;`, `,`, `\` and `"`.
     */
    value: string;
}

export interface BrowserMonitorScriptConfigurationDevice {
    /**
     * The height of the screen in pixels.
     * The maximum allowed width is `1080`.
     */
    height?: number;
    /**
     * The flag of the mobile device.
     * Set to `true` for mobile devices or `false` for a desktop or laptop.
     */
    mobile?: boolean;
    /**
     * The name of the cookie. The following cookie names are now allowed: `dtCookie`, `dtLatC`, `dtPC`, `rxVisitor`, `rxlatency`, `rxpc`, `rxsession` and `rxvt`
     */
    name?: string;
    /**
     * The orientation of the device. Possible values are `portrait` or `landscape`. Desktop and laptop devices are not allowed to use the `portrait` orientation
     */
    orientation?: string;
    /**
     * The pixel ratio of the device.
     */
    scaleFactor?: number;
    /**
     * The flag of the touchscreen.
     * Set to `true` if the device uses touchscreen. In that case, use can set interaction event as `tap`.
     */
    touchEnabled?: boolean;
    /**
     * The width of the screen in pixels.
     * The maximum allowed width is `1920`.
     */
    width?: number;
}

export interface BrowserMonitorScriptConfigurationHeaders {
    /**
     * contains an HTTP header of the request
     */
    headers: outputs.BrowserMonitorScriptConfigurationHeadersHeader[];
    /**
     * Restrict applying headers to a set of URLs
     */
    restrictions?: string[];
}

export interface BrowserMonitorScriptConfigurationHeadersHeader {
    /**
     * The name of the cookie. The following cookie names are now allowed: `dtCookie`, `dtLatC`, `dtPC`, `rxVisitor`, `rxlatency`, `rxpc`, `rxsession` and `rxvt`
     */
    name: string;
    /**
     * The value of the cookie. The following symbols are not allowed: `;`, `,`, `\` and `"`.
     */
    value: string;
}

export interface BrowserMonitorScriptConfigurationIgnoredErrorCodes {
    /**
     * Only apply to document request matching this regex
     */
    matchingDocumentRequests?: string;
    /**
     * You can use exact number, range or status class mask. Multiple values can be separated by comma, i.e. 404, 405-410, 5xx
     */
    statusCodes: string;
}

export interface BrowserMonitorScriptConfigurationJavascriptSetttings {
    /**
     * Additional Javascript Agent Properties
     */
    customProperties?: string;
    /**
     * Custom JavaScript Agent settings
     */
    timeoutSettings?: outputs.BrowserMonitorScriptConfigurationJavascriptSetttingsTimeoutSettings;
    /**
     * Parameters for Visually complete and Speed index calculation
     */
    visuallyCompleteOptions?: outputs.BrowserMonitorScriptConfigurationJavascriptSetttingsVisuallyCompleteOptions;
}

export interface BrowserMonitorScriptConfigurationJavascriptSetttingsTimeoutSettings {
    /**
     * Track up to n cascading setTimeout calls
     */
    actionLimit: number;
    /**
     * Limit cascading timeouts cumulatively to n ms
     */
    totalTimeout: number;
}

export interface BrowserMonitorScriptConfigurationJavascriptSetttingsVisuallyCompleteOptions {
    /**
     * Query CSS selectors to specify mutation nodes (elements that change) to ignore in Visually complete and Speed index calculation
     */
    excludedElements?: string[];
    /**
     * Parameters for Visually complete and Speed index calculation
     */
    excludedUrls?: string[];
    /**
     * Use this setting to define the minimum visible area per element (in pixels) for an element to be counted towards Visually complete and Speed index
     */
    imageSizeThreshold: number;
    /**
     * The time the Visually complete module waits for inactivity and no further mutations on the page after the load action
     */
    inactivityTimeout: number;
    /**
     * The time the Visually complete module waits after an XHR or custom action closes to start the calculation
     */
    mutationTimeout: number;
}

export interface BrowserMonitorScriptEvents {
    /**
     * An event
     */
    events?: outputs.BrowserMonitorScriptEventsEvent[];
}

export interface BrowserMonitorScriptEventsEvent {
    /**
     * Properties specified for a click event
     */
    click?: outputs.BrowserMonitorScriptEventsEventClick;
    /**
     * A request cookie
     */
    cookie?: outputs.BrowserMonitorScriptEventsEventCookie;
    /**
     * A short description of the event to appear in the UI
     */
    description: string;
    /**
     * Properties specified for a javascript event
     */
    javascript?: outputs.BrowserMonitorScriptEventsEventJavascript;
    /**
     * Properties specified for a key strokes event
     */
    keystrokes?: outputs.BrowserMonitorScriptEventsEventKeystrokes;
    /**
     * Properties specified for a navigation event
     */
    navigate?: outputs.BrowserMonitorScriptEventsEventNavigate;
    /**
     * Properties specified for a key strokes event.
     */
    select?: outputs.BrowserMonitorScriptEventsEventSelect;
    /**
     * Properties specified for a tap event
     */
    tap?: outputs.BrowserMonitorScriptEventsEventTap;
}

export interface BrowserMonitorScriptEventsEventClick {
    /**
     * the mouse button to be used for the click
     */
    button: number;
    /**
     * The tab on which the page should open
     */
    target?: outputs.BrowserMonitorScriptEventsEventClickTarget;
    /**
     * The validation rules for the event—helps you verify that your browser monitor loads the expected page content or page element
     */
    validate?: outputs.BrowserMonitorScriptEventsEventClickValidate;
    /**
     * The wait condition for the event—defines how long Dynatrace should wait before the next action is executed
     */
    wait?: outputs.BrowserMonitorScriptEventsEventClickWait;
}

export interface BrowserMonitorScriptEventsEventClickTarget {
    /**
     * The list of locators identifying the desired element
     */
    locators?: outputs.BrowserMonitorScriptEventsEventClickTargetLocator[];
    /**
     * The tab of the target
     */
    window?: string;
}

export interface BrowserMonitorScriptEventsEventClickTargetLocator {
    /**
     * A locator dentifyies the desired element
     */
    locators: outputs.BrowserMonitorScriptEventsEventClickTargetLocatorLocator[];
}

export interface BrowserMonitorScriptEventsEventClickTargetLocatorLocator {
    /**
     * The type of the threshold: `TOTAL` (total loading time) or `ACTION` (action loading time)
     */
    type: string;
    /**
     * The value of the cookie. The following symbols are not allowed: `;`, `,`, `\` and `"`.
     */
    value: string;
}

export interface BrowserMonitorScriptEventsEventClickValidate {
    /**
     * The element to wait for. Required for the `validation` type, not applicable otherwise.
     */
    validations: outputs.BrowserMonitorScriptEventsEventClickValidateValidation[];
}

export interface BrowserMonitorScriptEventsEventClickValidateValidation {
    /**
     * The condition of the validation. `false` means the validation succeeds if the specified content/element is found. `true` means the validation fails if the specified content/element is found
     */
    failIfFound?: boolean;
    /**
     * The content to look for on the page.
     * Regular expressions are allowed. In that case set `isRegex` as `true`. Required for `contentMatch`, optional for `elementMatch`.
     */
    match?: string;
    /**
     * Defines whether `match` is plain text (`false`) or a regular expression (`true`)
     */
    regex?: boolean;
    /**
     * The tab on which the page should open
     */
    target?: outputs.BrowserMonitorScriptEventsEventClickValidateValidationTarget;
    /**
     * The type of the threshold: `TOTAL` (total loading time) or `ACTION` (action loading time)
     */
    type: string;
}

export interface BrowserMonitorScriptEventsEventClickValidateValidationTarget {
    /**
     * The list of locators identifying the desired element
     */
    locators?: outputs.BrowserMonitorScriptEventsEventClickValidateValidationTargetLocator[];
    /**
     * The tab of the target
     */
    window?: string;
}

export interface BrowserMonitorScriptEventsEventClickValidateValidationTargetLocator {
    /**
     * A locator dentifyies the desired element
     */
    locators: outputs.BrowserMonitorScriptEventsEventClickValidateValidationTargetLocatorLocator[];
}

export interface BrowserMonitorScriptEventsEventClickValidateValidationTargetLocatorLocator {
    /**
     * The type of the threshold: `TOTAL` (total loading time) or `ACTION` (action loading time)
     */
    type: string;
    /**
     * The value of the cookie. The following symbols are not allowed: `;`, `,`, `\` and `"`.
     */
    value: string;
}

export interface BrowserMonitorScriptEventsEventClickWait {
    /**
     * The time to wait, in millisencods. The maximum allowed value is `60000`. Required for the type `time`, not applicable otherwise.
     */
    milliseconds?: number;
    /**
     * he maximum amount of time to wait for a certain element to appear, in milliseconds—if exceeded, the action is marked as failed.
     * The maximum allowed value is 60000. Required for the type `validation`, not applicable otherwise..
     */
    timeout?: number;
    /**
     * The element to wait for. Required for the `validation` type, not applicable otherwise.
     */
    validation?: outputs.BrowserMonitorScriptEventsEventClickWaitValidation;
    /**
     * The time to wait before the next event is triggered. Possible values are `pageComplete` (wait for the page to load completely), `network` (wait for background network activity to complete), `nextAction` (wait for the next action), `time` (wait for a specified periodof time) and `validation` (wait for a specific element to appear)
     */
    waitFor: string;
}

export interface BrowserMonitorScriptEventsEventClickWaitValidation {
    /**
     * The condition of the validation. `false` means the validation succeeds if the specified content/element is found. `true` means the validation fails if the specified content/element is found
     */
    failIfFound?: boolean;
    /**
     * The content to look for on the page.
     * Regular expressions are allowed. In that case set `isRegex` as `true`. Required for `contentMatch`, optional for `elementMatch`.
     */
    match?: string;
    /**
     * Defines whether `match` is plain text (`false`) or a regular expression (`true`)
     */
    regex?: boolean;
    /**
     * The tab on which the page should open
     */
    target?: outputs.BrowserMonitorScriptEventsEventClickWaitValidationTarget;
    /**
     * The type of the threshold: `TOTAL` (total loading time) or `ACTION` (action loading time)
     */
    type: string;
}

export interface BrowserMonitorScriptEventsEventClickWaitValidationTarget {
    /**
     * The list of locators identifying the desired element
     */
    locators?: outputs.BrowserMonitorScriptEventsEventClickWaitValidationTargetLocator[];
    /**
     * The tab of the target
     */
    window?: string;
}

export interface BrowserMonitorScriptEventsEventClickWaitValidationTargetLocator {
    /**
     * A locator dentifyies the desired element
     */
    locators: outputs.BrowserMonitorScriptEventsEventClickWaitValidationTargetLocatorLocator[];
}

export interface BrowserMonitorScriptEventsEventClickWaitValidationTargetLocatorLocator {
    /**
     * The type of the threshold: `TOTAL` (total loading time) or `ACTION` (action loading time)
     */
    type: string;
    /**
     * The value of the cookie. The following symbols are not allowed: `;`, `,`, `\` and `"`.
     */
    value: string;
}

export interface BrowserMonitorScriptEventsEventCookie {
    /**
     * Every cookie must be unique within the list. However, you can use the same cookie again in other event
     */
    cookies: outputs.BrowserMonitorScriptEventsEventCookieCookies;
}

export interface BrowserMonitorScriptEventsEventCookieCookies {
    /**
     * A request cookie
     */
    cookies: outputs.BrowserMonitorScriptEventsEventCookieCookiesCookie[];
}

export interface BrowserMonitorScriptEventsEventCookieCookiesCookie {
    /**
     * The domain of the cookie.
     */
    domain: string;
    /**
     * The name of the cookie. The following cookie names are now allowed: `dtCookie`, `dtLatC`, `dtPC`, `rxVisitor`, `rxlatency`, `rxpc`, `rxsession` and `rxvt`
     */
    name: string;
    /**
     * The path of the cookie.
     */
    path?: string;
    /**
     * The value of the cookie. The following symbols are not allowed: `;`, `,`, `\` and `"`.
     */
    value: string;
}

export interface BrowserMonitorScriptEventsEventJavascript {
    /**
     * The JavaScript code to be executed in this event
     */
    code: string;
    /**
     * The tab on which the page should open
     */
    target?: outputs.BrowserMonitorScriptEventsEventJavascriptTarget;
    /**
     * The wait condition for the event—defines how long Dynatrace should wait before the next action is executed
     */
    wait?: outputs.BrowserMonitorScriptEventsEventJavascriptWait;
}

export interface BrowserMonitorScriptEventsEventJavascriptTarget {
    /**
     * The list of locators identifying the desired element
     */
    locators?: outputs.BrowserMonitorScriptEventsEventJavascriptTargetLocator[];
    /**
     * The tab of the target
     */
    window?: string;
}

export interface BrowserMonitorScriptEventsEventJavascriptTargetLocator {
    /**
     * A locator dentifyies the desired element
     */
    locators: outputs.BrowserMonitorScriptEventsEventJavascriptTargetLocatorLocator[];
}

export interface BrowserMonitorScriptEventsEventJavascriptTargetLocatorLocator {
    /**
     * The type of the threshold: `TOTAL` (total loading time) or `ACTION` (action loading time)
     */
    type: string;
    /**
     * The value of the cookie. The following symbols are not allowed: `;`, `,`, `\` and `"`.
     */
    value: string;
}

export interface BrowserMonitorScriptEventsEventJavascriptWait {
    /**
     * The time to wait, in millisencods. The maximum allowed value is `60000`. Required for the type `time`, not applicable otherwise.
     */
    milliseconds?: number;
    /**
     * he maximum amount of time to wait for a certain element to appear, in milliseconds—if exceeded, the action is marked as failed.
     * The maximum allowed value is 60000. Required for the type `validation`, not applicable otherwise..
     */
    timeout?: number;
    /**
     * The element to wait for. Required for the `validation` type, not applicable otherwise.
     */
    validation?: outputs.BrowserMonitorScriptEventsEventJavascriptWaitValidation;
    /**
     * The time to wait before the next event is triggered. Possible values are `pageComplete` (wait for the page to load completely), `network` (wait for background network activity to complete), `nextAction` (wait for the next action), `time` (wait for a specified periodof time) and `validation` (wait for a specific element to appear)
     */
    waitFor: string;
}

export interface BrowserMonitorScriptEventsEventJavascriptWaitValidation {
    /**
     * The condition of the validation. `false` means the validation succeeds if the specified content/element is found. `true` means the validation fails if the specified content/element is found
     */
    failIfFound?: boolean;
    /**
     * The content to look for on the page.
     * Regular expressions are allowed. In that case set `isRegex` as `true`. Required for `contentMatch`, optional for `elementMatch`.
     */
    match?: string;
    /**
     * Defines whether `match` is plain text (`false`) or a regular expression (`true`)
     */
    regex?: boolean;
    /**
     * The tab on which the page should open
     */
    target?: outputs.BrowserMonitorScriptEventsEventJavascriptWaitValidationTarget;
    /**
     * The type of the threshold: `TOTAL` (total loading time) or `ACTION` (action loading time)
     */
    type: string;
}

export interface BrowserMonitorScriptEventsEventJavascriptWaitValidationTarget {
    /**
     * The list of locators identifying the desired element
     */
    locators?: outputs.BrowserMonitorScriptEventsEventJavascriptWaitValidationTargetLocator[];
    /**
     * The tab of the target
     */
    window?: string;
}

export interface BrowserMonitorScriptEventsEventJavascriptWaitValidationTargetLocator {
    /**
     * A locator dentifyies the desired element
     */
    locators: outputs.BrowserMonitorScriptEventsEventJavascriptWaitValidationTargetLocatorLocator[];
}

export interface BrowserMonitorScriptEventsEventJavascriptWaitValidationTargetLocatorLocator {
    /**
     * The type of the threshold: `TOTAL` (total loading time) or `ACTION` (action loading time)
     */
    type: string;
    /**
     * The value of the cookie. The following symbols are not allowed: `;`, `,`, `\` and `"`.
     */
    value: string;
}

export interface BrowserMonitorScriptEventsEventKeystrokes {
    /**
     * Credentials for this event
     */
    credential?: outputs.BrowserMonitorScriptEventsEventKeystrokesCredential;
    /**
     * Indicates whether the `textValue` is encrypted (`true`) or not (`false`). Must not be specified if `credentials` from the vault are being used
     */
    masked?: boolean;
    /**
     * Defines whether to blur the text field when it loses focus.
     * Set to `true` to trigger the blur the `textValue`
     */
    simulateBlurEvent?: boolean;
    /**
     * Simulates pressing the 'Return' key after simulating other keystrokes. For example, to submit a form or trigger a login.
     */
    simulateReturnKey?: boolean;
    /**
     * The tab on which the page should open
     */
    target?: outputs.BrowserMonitorScriptEventsEventKeystrokesTarget;
    /**
     * The text to enter. Must not be specified if `credentials` from the vault are being used
     */
    text?: string;
    /**
     * The validation rules for the event—helps you verify that your browser monitor loads the expected page content or page element
     */
    validate?: outputs.BrowserMonitorScriptEventsEventKeystrokesValidate;
    /**
     * The wait condition for the event—defines how long Dynatrace should wait before the next action is executed
     */
    wait?: outputs.BrowserMonitorScriptEventsEventKeystrokesWait;
}

export interface BrowserMonitorScriptEventsEventKeystrokesCredential {
    /**
     * Either `username` or `password`
     */
    field: string;
    /**
     * The ID of the credential within the Credentials Vault
     */
    vaultId: string;
}

export interface BrowserMonitorScriptEventsEventKeystrokesTarget {
    /**
     * The list of locators identifying the desired element
     */
    locators?: outputs.BrowserMonitorScriptEventsEventKeystrokesTargetLocator[];
    /**
     * The tab of the target
     */
    window?: string;
}

export interface BrowserMonitorScriptEventsEventKeystrokesTargetLocator {
    /**
     * A locator dentifyies the desired element
     */
    locators: outputs.BrowserMonitorScriptEventsEventKeystrokesTargetLocatorLocator[];
}

export interface BrowserMonitorScriptEventsEventKeystrokesTargetLocatorLocator {
    /**
     * The type of the threshold: `TOTAL` (total loading time) or `ACTION` (action loading time)
     */
    type: string;
    /**
     * The value of the cookie. The following symbols are not allowed: `;`, `,`, `\` and `"`.
     */
    value: string;
}

export interface BrowserMonitorScriptEventsEventKeystrokesValidate {
    /**
     * The element to wait for. Required for the `validation` type, not applicable otherwise.
     */
    validations: outputs.BrowserMonitorScriptEventsEventKeystrokesValidateValidation[];
}

export interface BrowserMonitorScriptEventsEventKeystrokesValidateValidation {
    /**
     * The condition of the validation. `false` means the validation succeeds if the specified content/element is found. `true` means the validation fails if the specified content/element is found
     */
    failIfFound?: boolean;
    /**
     * The content to look for on the page.
     * Regular expressions are allowed. In that case set `isRegex` as `true`. Required for `contentMatch`, optional for `elementMatch`.
     */
    match?: string;
    /**
     * Defines whether `match` is plain text (`false`) or a regular expression (`true`)
     */
    regex?: boolean;
    /**
     * The tab on which the page should open
     */
    target?: outputs.BrowserMonitorScriptEventsEventKeystrokesValidateValidationTarget;
    /**
     * The type of the threshold: `TOTAL` (total loading time) or `ACTION` (action loading time)
     */
    type: string;
}

export interface BrowserMonitorScriptEventsEventKeystrokesValidateValidationTarget {
    /**
     * The list of locators identifying the desired element
     */
    locators?: outputs.BrowserMonitorScriptEventsEventKeystrokesValidateValidationTargetLocator[];
    /**
     * The tab of the target
     */
    window?: string;
}

export interface BrowserMonitorScriptEventsEventKeystrokesValidateValidationTargetLocator {
    /**
     * A locator dentifyies the desired element
     */
    locators: outputs.BrowserMonitorScriptEventsEventKeystrokesValidateValidationTargetLocatorLocator[];
}

export interface BrowserMonitorScriptEventsEventKeystrokesValidateValidationTargetLocatorLocator {
    /**
     * The type of the threshold: `TOTAL` (total loading time) or `ACTION` (action loading time)
     */
    type: string;
    /**
     * The value of the cookie. The following symbols are not allowed: `;`, `,`, `\` and `"`.
     */
    value: string;
}

export interface BrowserMonitorScriptEventsEventKeystrokesWait {
    /**
     * The time to wait, in millisencods. The maximum allowed value is `60000`. Required for the type `time`, not applicable otherwise.
     */
    milliseconds?: number;
    /**
     * he maximum amount of time to wait for a certain element to appear, in milliseconds—if exceeded, the action is marked as failed.
     * The maximum allowed value is 60000. Required for the type `validation`, not applicable otherwise..
     */
    timeout?: number;
    /**
     * The element to wait for. Required for the `validation` type, not applicable otherwise.
     */
    validation?: outputs.BrowserMonitorScriptEventsEventKeystrokesWaitValidation;
    /**
     * The time to wait before the next event is triggered. Possible values are `pageComplete` (wait for the page to load completely), `network` (wait for background network activity to complete), `nextAction` (wait for the next action), `time` (wait for a specified periodof time) and `validation` (wait for a specific element to appear)
     */
    waitFor: string;
}

export interface BrowserMonitorScriptEventsEventKeystrokesWaitValidation {
    /**
     * The condition of the validation. `false` means the validation succeeds if the specified content/element is found. `true` means the validation fails if the specified content/element is found
     */
    failIfFound?: boolean;
    /**
     * The content to look for on the page.
     * Regular expressions are allowed. In that case set `isRegex` as `true`. Required for `contentMatch`, optional for `elementMatch`.
     */
    match?: string;
    /**
     * Defines whether `match` is plain text (`false`) or a regular expression (`true`)
     */
    regex?: boolean;
    /**
     * The tab on which the page should open
     */
    target?: outputs.BrowserMonitorScriptEventsEventKeystrokesWaitValidationTarget;
    /**
     * The type of the threshold: `TOTAL` (total loading time) or `ACTION` (action loading time)
     */
    type: string;
}

export interface BrowserMonitorScriptEventsEventKeystrokesWaitValidationTarget {
    /**
     * The list of locators identifying the desired element
     */
    locators?: outputs.BrowserMonitorScriptEventsEventKeystrokesWaitValidationTargetLocator[];
    /**
     * The tab of the target
     */
    window?: string;
}

export interface BrowserMonitorScriptEventsEventKeystrokesWaitValidationTargetLocator {
    /**
     * A locator dentifyies the desired element
     */
    locators: outputs.BrowserMonitorScriptEventsEventKeystrokesWaitValidationTargetLocatorLocator[];
}

export interface BrowserMonitorScriptEventsEventKeystrokesWaitValidationTargetLocatorLocator {
    /**
     * The type of the threshold: `TOTAL` (total loading time) or `ACTION` (action loading time)
     */
    type: string;
    /**
     * The value of the cookie. The following symbols are not allowed: `;`, `,`, `\` and `"`.
     */
    value: string;
}

export interface BrowserMonitorScriptEventsEventNavigate {
    /**
     * The login credentials to bypass the browser login mask
     */
    authentication?: outputs.BrowserMonitorScriptEventsEventNavigateAuthentication;
    /**
     * The tab on which the page should open
     */
    target?: outputs.BrowserMonitorScriptEventsEventNavigateTarget;
    /**
     * The URL to navigate to
     */
    url: string;
    /**
     * The validation rules for the event—helps you verify that your browser monitor loads the expected page content or page element
     */
    validate?: outputs.BrowserMonitorScriptEventsEventNavigateValidate;
    /**
     * The wait condition for the event—defines how long Dynatrace should wait before the next action is executed
     */
    wait?: outputs.BrowserMonitorScriptEventsEventNavigateWait;
}

export interface BrowserMonitorScriptEventsEventNavigateAuthentication {
    /**
     * A reference to the entry within the credential vault
     */
    creds: string;
    /**
     * The type of the threshold: `TOTAL` (total loading time) or `ACTION` (action loading time)
     */
    type: string;
}

export interface BrowserMonitorScriptEventsEventNavigateTarget {
    /**
     * The list of locators identifying the desired element
     */
    locators?: outputs.BrowserMonitorScriptEventsEventNavigateTargetLocator[];
    /**
     * The tab of the target
     */
    window?: string;
}

export interface BrowserMonitorScriptEventsEventNavigateTargetLocator {
    /**
     * A locator dentifyies the desired element
     */
    locators: outputs.BrowserMonitorScriptEventsEventNavigateTargetLocatorLocator[];
}

export interface BrowserMonitorScriptEventsEventNavigateTargetLocatorLocator {
    /**
     * The type of the threshold: `TOTAL` (total loading time) or `ACTION` (action loading time)
     */
    type: string;
    /**
     * The value of the cookie. The following symbols are not allowed: `;`, `,`, `\` and `"`.
     */
    value: string;
}

export interface BrowserMonitorScriptEventsEventNavigateValidate {
    /**
     * The element to wait for. Required for the `validation` type, not applicable otherwise.
     */
    validations: outputs.BrowserMonitorScriptEventsEventNavigateValidateValidation[];
}

export interface BrowserMonitorScriptEventsEventNavigateValidateValidation {
    /**
     * The condition of the validation. `false` means the validation succeeds if the specified content/element is found. `true` means the validation fails if the specified content/element is found
     */
    failIfFound?: boolean;
    /**
     * The content to look for on the page.
     * Regular expressions are allowed. In that case set `isRegex` as `true`. Required for `contentMatch`, optional for `elementMatch`.
     */
    match?: string;
    /**
     * Defines whether `match` is plain text (`false`) or a regular expression (`true`)
     */
    regex?: boolean;
    /**
     * The tab on which the page should open
     */
    target?: outputs.BrowserMonitorScriptEventsEventNavigateValidateValidationTarget;
    /**
     * The type of the threshold: `TOTAL` (total loading time) or `ACTION` (action loading time)
     */
    type: string;
}

export interface BrowserMonitorScriptEventsEventNavigateValidateValidationTarget {
    /**
     * The list of locators identifying the desired element
     */
    locators?: outputs.BrowserMonitorScriptEventsEventNavigateValidateValidationTargetLocator[];
    /**
     * The tab of the target
     */
    window?: string;
}

export interface BrowserMonitorScriptEventsEventNavigateValidateValidationTargetLocator {
    /**
     * A locator dentifyies the desired element
     */
    locators: outputs.BrowserMonitorScriptEventsEventNavigateValidateValidationTargetLocatorLocator[];
}

export interface BrowserMonitorScriptEventsEventNavigateValidateValidationTargetLocatorLocator {
    /**
     * The type of the threshold: `TOTAL` (total loading time) or `ACTION` (action loading time)
     */
    type: string;
    /**
     * The value of the cookie. The following symbols are not allowed: `;`, `,`, `\` and `"`.
     */
    value: string;
}

export interface BrowserMonitorScriptEventsEventNavigateWait {
    /**
     * The time to wait, in millisencods. The maximum allowed value is `60000`. Required for the type `time`, not applicable otherwise.
     */
    milliseconds?: number;
    /**
     * he maximum amount of time to wait for a certain element to appear, in milliseconds—if exceeded, the action is marked as failed.
     * The maximum allowed value is 60000. Required for the type `validation`, not applicable otherwise..
     */
    timeout?: number;
    /**
     * The element to wait for. Required for the `validation` type, not applicable otherwise.
     */
    validation?: outputs.BrowserMonitorScriptEventsEventNavigateWaitValidation;
    /**
     * The time to wait before the next event is triggered. Possible values are `pageComplete` (wait for the page to load completely), `network` (wait for background network activity to complete), `nextAction` (wait for the next action), `time` (wait for a specified periodof time) and `validation` (wait for a specific element to appear)
     */
    waitFor: string;
}

export interface BrowserMonitorScriptEventsEventNavigateWaitValidation {
    /**
     * The condition of the validation. `false` means the validation succeeds if the specified content/element is found. `true` means the validation fails if the specified content/element is found
     */
    failIfFound?: boolean;
    /**
     * The content to look for on the page.
     * Regular expressions are allowed. In that case set `isRegex` as `true`. Required for `contentMatch`, optional for `elementMatch`.
     */
    match?: string;
    /**
     * Defines whether `match` is plain text (`false`) or a regular expression (`true`)
     */
    regex?: boolean;
    /**
     * The tab on which the page should open
     */
    target?: outputs.BrowserMonitorScriptEventsEventNavigateWaitValidationTarget;
    /**
     * The type of the threshold: `TOTAL` (total loading time) or `ACTION` (action loading time)
     */
    type: string;
}

export interface BrowserMonitorScriptEventsEventNavigateWaitValidationTarget {
    /**
     * The list of locators identifying the desired element
     */
    locators?: outputs.BrowserMonitorScriptEventsEventNavigateWaitValidationTargetLocator[];
    /**
     * The tab of the target
     */
    window?: string;
}

export interface BrowserMonitorScriptEventsEventNavigateWaitValidationTargetLocator {
    /**
     * A locator dentifyies the desired element
     */
    locators: outputs.BrowserMonitorScriptEventsEventNavigateWaitValidationTargetLocatorLocator[];
}

export interface BrowserMonitorScriptEventsEventNavigateWaitValidationTargetLocatorLocator {
    /**
     * The type of the threshold: `TOTAL` (total loading time) or `ACTION` (action loading time)
     */
    type: string;
    /**
     * The value of the cookie. The following symbols are not allowed: `;`, `,`, `\` and `"`.
     */
    value: string;
}

export interface BrowserMonitorScriptEventsEventSelect {
    /**
     * The options to be selected
     */
    selections: outputs.BrowserMonitorScriptEventsEventSelectSelections;
    /**
     * The tab on which the page should open
     */
    target?: outputs.BrowserMonitorScriptEventsEventSelectTarget;
    /**
     * The validation rules for the event—helps you verify that your browser monitor loads the expected page content or page element
     */
    validate?: outputs.BrowserMonitorScriptEventsEventSelectValidate;
    /**
     * The wait condition for the event—defines how long Dynatrace should wait before the next action is executed
     */
    wait?: outputs.BrowserMonitorScriptEventsEventSelectWait;
}

export interface BrowserMonitorScriptEventsEventSelectSelections {
    /**
     * The option to be selected
     */
    options: outputs.BrowserMonitorScriptEventsEventSelectSelectionsOption[];
}

export interface BrowserMonitorScriptEventsEventSelectSelectionsOption {
    /**
     * The index of the option to be selected
     */
    index: number;
    /**
     * The value of the cookie. The following symbols are not allowed: `;`, `,`, `\` and `"`.
     */
    value: string;
}

export interface BrowserMonitorScriptEventsEventSelectTarget {
    /**
     * The list of locators identifying the desired element
     */
    locators?: outputs.BrowserMonitorScriptEventsEventSelectTargetLocator[];
    /**
     * The tab of the target
     */
    window?: string;
}

export interface BrowserMonitorScriptEventsEventSelectTargetLocator {
    /**
     * A locator dentifyies the desired element
     */
    locators: outputs.BrowserMonitorScriptEventsEventSelectTargetLocatorLocator[];
}

export interface BrowserMonitorScriptEventsEventSelectTargetLocatorLocator {
    /**
     * The type of the threshold: `TOTAL` (total loading time) or `ACTION` (action loading time)
     */
    type: string;
    /**
     * The value of the cookie. The following symbols are not allowed: `;`, `,`, `\` and `"`.
     */
    value: string;
}

export interface BrowserMonitorScriptEventsEventSelectValidate {
    /**
     * The element to wait for. Required for the `validation` type, not applicable otherwise.
     */
    validations: outputs.BrowserMonitorScriptEventsEventSelectValidateValidation[];
}

export interface BrowserMonitorScriptEventsEventSelectValidateValidation {
    /**
     * The condition of the validation. `false` means the validation succeeds if the specified content/element is found. `true` means the validation fails if the specified content/element is found
     */
    failIfFound?: boolean;
    /**
     * The content to look for on the page.
     * Regular expressions are allowed. In that case set `isRegex` as `true`. Required for `contentMatch`, optional for `elementMatch`.
     */
    match?: string;
    /**
     * Defines whether `match` is plain text (`false`) or a regular expression (`true`)
     */
    regex?: boolean;
    /**
     * The tab on which the page should open
     */
    target?: outputs.BrowserMonitorScriptEventsEventSelectValidateValidationTarget;
    /**
     * The type of the threshold: `TOTAL` (total loading time) or `ACTION` (action loading time)
     */
    type: string;
}

export interface BrowserMonitorScriptEventsEventSelectValidateValidationTarget {
    /**
     * The list of locators identifying the desired element
     */
    locators?: outputs.BrowserMonitorScriptEventsEventSelectValidateValidationTargetLocator[];
    /**
     * The tab of the target
     */
    window?: string;
}

export interface BrowserMonitorScriptEventsEventSelectValidateValidationTargetLocator {
    /**
     * A locator dentifyies the desired element
     */
    locators: outputs.BrowserMonitorScriptEventsEventSelectValidateValidationTargetLocatorLocator[];
}

export interface BrowserMonitorScriptEventsEventSelectValidateValidationTargetLocatorLocator {
    /**
     * The type of the threshold: `TOTAL` (total loading time) or `ACTION` (action loading time)
     */
    type: string;
    /**
     * The value of the cookie. The following symbols are not allowed: `;`, `,`, `\` and `"`.
     */
    value: string;
}

export interface BrowserMonitorScriptEventsEventSelectWait {
    /**
     * The time to wait, in millisencods. The maximum allowed value is `60000`. Required for the type `time`, not applicable otherwise.
     */
    milliseconds?: number;
    /**
     * he maximum amount of time to wait for a certain element to appear, in milliseconds—if exceeded, the action is marked as failed.
     * The maximum allowed value is 60000. Required for the type `validation`, not applicable otherwise..
     */
    timeout?: number;
    /**
     * The element to wait for. Required for the `validation` type, not applicable otherwise.
     */
    validation?: outputs.BrowserMonitorScriptEventsEventSelectWaitValidation;
    /**
     * The time to wait before the next event is triggered. Possible values are `pageComplete` (wait for the page to load completely), `network` (wait for background network activity to complete), `nextAction` (wait for the next action), `time` (wait for a specified periodof time) and `validation` (wait for a specific element to appear)
     */
    waitFor: string;
}

export interface BrowserMonitorScriptEventsEventSelectWaitValidation {
    /**
     * The condition of the validation. `false` means the validation succeeds if the specified content/element is found. `true` means the validation fails if the specified content/element is found
     */
    failIfFound?: boolean;
    /**
     * The content to look for on the page.
     * Regular expressions are allowed. In that case set `isRegex` as `true`. Required for `contentMatch`, optional for `elementMatch`.
     */
    match?: string;
    /**
     * Defines whether `match` is plain text (`false`) or a regular expression (`true`)
     */
    regex?: boolean;
    /**
     * The tab on which the page should open
     */
    target?: outputs.BrowserMonitorScriptEventsEventSelectWaitValidationTarget;
    /**
     * The type of the threshold: `TOTAL` (total loading time) or `ACTION` (action loading time)
     */
    type: string;
}

export interface BrowserMonitorScriptEventsEventSelectWaitValidationTarget {
    /**
     * The list of locators identifying the desired element
     */
    locators?: outputs.BrowserMonitorScriptEventsEventSelectWaitValidationTargetLocator[];
    /**
     * The tab of the target
     */
    window?: string;
}

export interface BrowserMonitorScriptEventsEventSelectWaitValidationTargetLocator {
    /**
     * A locator dentifyies the desired element
     */
    locators: outputs.BrowserMonitorScriptEventsEventSelectWaitValidationTargetLocatorLocator[];
}

export interface BrowserMonitorScriptEventsEventSelectWaitValidationTargetLocatorLocator {
    /**
     * The type of the threshold: `TOTAL` (total loading time) or `ACTION` (action loading time)
     */
    type: string;
    /**
     * The value of the cookie. The following symbols are not allowed: `;`, `,`, `\` and `"`.
     */
    value: string;
}

export interface BrowserMonitorScriptEventsEventTap {
    /**
     * the mouse button to be used for the click
     */
    button: number;
    /**
     * The tab on which the page should open
     */
    target?: outputs.BrowserMonitorScriptEventsEventTapTarget;
    /**
     * The validation rules for the event—helps you verify that your browser monitor loads the expected page content or page element
     */
    validate?: outputs.BrowserMonitorScriptEventsEventTapValidate;
    /**
     * The wait condition for the event—defines how long Dynatrace should wait before the next action is executed
     */
    wait?: outputs.BrowserMonitorScriptEventsEventTapWait;
}

export interface BrowserMonitorScriptEventsEventTapTarget {
    /**
     * The list of locators identifying the desired element
     */
    locators?: outputs.BrowserMonitorScriptEventsEventTapTargetLocator[];
    /**
     * The tab of the target
     */
    window?: string;
}

export interface BrowserMonitorScriptEventsEventTapTargetLocator {
    /**
     * A locator dentifyies the desired element
     */
    locators: outputs.BrowserMonitorScriptEventsEventTapTargetLocatorLocator[];
}

export interface BrowserMonitorScriptEventsEventTapTargetLocatorLocator {
    /**
     * The type of the threshold: `TOTAL` (total loading time) or `ACTION` (action loading time)
     */
    type: string;
    /**
     * The value of the cookie. The following symbols are not allowed: `;`, `,`, `\` and `"`.
     */
    value: string;
}

export interface BrowserMonitorScriptEventsEventTapValidate {
    /**
     * The element to wait for. Required for the `validation` type, not applicable otherwise.
     */
    validations: outputs.BrowserMonitorScriptEventsEventTapValidateValidation[];
}

export interface BrowserMonitorScriptEventsEventTapValidateValidation {
    /**
     * The condition of the validation. `false` means the validation succeeds if the specified content/element is found. `true` means the validation fails if the specified content/element is found
     */
    failIfFound?: boolean;
    /**
     * The content to look for on the page.
     * Regular expressions are allowed. In that case set `isRegex` as `true`. Required for `contentMatch`, optional for `elementMatch`.
     */
    match?: string;
    /**
     * Defines whether `match` is plain text (`false`) or a regular expression (`true`)
     */
    regex?: boolean;
    /**
     * The tab on which the page should open
     */
    target?: outputs.BrowserMonitorScriptEventsEventTapValidateValidationTarget;
    /**
     * The type of the threshold: `TOTAL` (total loading time) or `ACTION` (action loading time)
     */
    type: string;
}

export interface BrowserMonitorScriptEventsEventTapValidateValidationTarget {
    /**
     * The list of locators identifying the desired element
     */
    locators?: outputs.BrowserMonitorScriptEventsEventTapValidateValidationTargetLocator[];
    /**
     * The tab of the target
     */
    window?: string;
}

export interface BrowserMonitorScriptEventsEventTapValidateValidationTargetLocator {
    /**
     * A locator dentifyies the desired element
     */
    locators: outputs.BrowserMonitorScriptEventsEventTapValidateValidationTargetLocatorLocator[];
}

export interface BrowserMonitorScriptEventsEventTapValidateValidationTargetLocatorLocator {
    /**
     * The type of the threshold: `TOTAL` (total loading time) or `ACTION` (action loading time)
     */
    type: string;
    /**
     * The value of the cookie. The following symbols are not allowed: `;`, `,`, `\` and `"`.
     */
    value: string;
}

export interface BrowserMonitorScriptEventsEventTapWait {
    /**
     * The time to wait, in millisencods. The maximum allowed value is `60000`. Required for the type `time`, not applicable otherwise.
     */
    milliseconds?: number;
    /**
     * he maximum amount of time to wait for a certain element to appear, in milliseconds—if exceeded, the action is marked as failed.
     * The maximum allowed value is 60000. Required for the type `validation`, not applicable otherwise..
     */
    timeout?: number;
    /**
     * The element to wait for. Required for the `validation` type, not applicable otherwise.
     */
    validation?: outputs.BrowserMonitorScriptEventsEventTapWaitValidation;
    /**
     * The time to wait before the next event is triggered. Possible values are `pageComplete` (wait for the page to load completely), `network` (wait for background network activity to complete), `nextAction` (wait for the next action), `time` (wait for a specified periodof time) and `validation` (wait for a specific element to appear)
     */
    waitFor: string;
}

export interface BrowserMonitorScriptEventsEventTapWaitValidation {
    /**
     * The condition of the validation. `false` means the validation succeeds if the specified content/element is found. `true` means the validation fails if the specified content/element is found
     */
    failIfFound?: boolean;
    /**
     * The content to look for on the page.
     * Regular expressions are allowed. In that case set `isRegex` as `true`. Required for `contentMatch`, optional for `elementMatch`.
     */
    match?: string;
    /**
     * Defines whether `match` is plain text (`false`) or a regular expression (`true`)
     */
    regex?: boolean;
    /**
     * The tab on which the page should open
     */
    target?: outputs.BrowserMonitorScriptEventsEventTapWaitValidationTarget;
    /**
     * The type of the threshold: `TOTAL` (total loading time) or `ACTION` (action loading time)
     */
    type: string;
}

export interface BrowserMonitorScriptEventsEventTapWaitValidationTarget {
    /**
     * The list of locators identifying the desired element
     */
    locators?: outputs.BrowserMonitorScriptEventsEventTapWaitValidationTargetLocator[];
    /**
     * The tab of the target
     */
    window?: string;
}

export interface BrowserMonitorScriptEventsEventTapWaitValidationTargetLocator {
    /**
     * A locator dentifyies the desired element
     */
    locators: outputs.BrowserMonitorScriptEventsEventTapWaitValidationTargetLocatorLocator[];
}

export interface BrowserMonitorScriptEventsEventTapWaitValidationTargetLocatorLocator {
    /**
     * The type of the threshold: `TOTAL` (total loading time) or `ACTION` (action loading time)
     */
    type: string;
    /**
     * The value of the cookie. The following symbols are not allowed: `;`, `,`, `\` and `"`.
     */
    value: string;
}

export interface BrowserMonitorTag {
    /**
     * Tag with source of a Dynatrace entity.
     */
    tags?: outputs.BrowserMonitorTagTag[];
}

export interface BrowserMonitorTagTag {
    /**
     * The origin of the tag. Supported values are `AWS`, `AWS_GENERIC`, `AZURE`, `CLOUD_FOUNDRY`, `CONTEXTLESS`, `ENVIRONMENT`, `GOOGLE_CLOUD` and `KUBERNETES`.
     */
    context: string;
    key: string;
    source?: string;
    /**
     * The value of the cookie. The following symbols are not allowed: `;`, `,`, `\` and `"`.
     */
    value?: string;
}

export interface BusinessEventsOneagentEvent {
    /**
     * Event category
     */
    category: outputs.BusinessEventsOneagentEventCategory;
    /**
     * Additional attributes for the business event.
     */
    data?: outputs.BusinessEventsOneagentEventData;
    /**
     * Event provider
     */
    provider: outputs.BusinessEventsOneagentEventProvider;
    /**
     * Event type
     */
    type: outputs.BusinessEventsOneagentEventType;
}

export interface BusinessEventsOneagentEventCategory {
    /**
     * [See our documentation](https://dt-url.net/ei034bx)
     */
    path?: string;
    /**
     * Fixed value
     */
    source?: string;
    /**
     * Possible Values: `Constant_string`, `Request_body`, `Request_headers`, `Request_method`, `Request_parameters`, `Request_path`, `Request_url`, `Response_body`, `Response_headers`, `Response_statusCode`
     */
    sourceType: string;
}

export interface BusinessEventsOneagentEventData {
    eventDataFieldComplexes: outputs.BusinessEventsOneagentEventDataEventDataFieldComplex[];
}

export interface BusinessEventsOneagentEventDataEventDataFieldComplex {
    /**
     * Field name to be added to data.
     */
    name: string;
    /**
     * Fixed value
     */
    source: outputs.BusinessEventsOneagentEventDataEventDataFieldComplexSource;
}

export interface BusinessEventsOneagentEventDataEventDataFieldComplexSource {
    /**
     * [See our documentation](https://dt-url.net/ei034bx)
     */
    path?: string;
    /**
     * Fixed value
     */
    source?: string;
    /**
     * Possible Values: `Constant_string`, `Request_body`, `Request_headers`, `Request_method`, `Request_parameters`, `Request_path`, `Request_url`, `Response_body`, `Response_headers`, `Response_statusCode`
     */
    sourceType: string;
}

export interface BusinessEventsOneagentEventProvider {
    /**
     * [See our documentation](https://dt-url.net/ei034bx)
     */
    path?: string;
    /**
     * Fixed value
     */
    source?: string;
    /**
     * Possible Values: `Constant_string`, `Request_body`, `Request_headers`, `Request_method`, `Request_parameters`, `Request_path`, `Request_url`, `Response_body`, `Response_headers`, `Response_statusCode`
     */
    sourceType: string;
}

export interface BusinessEventsOneagentEventType {
    /**
     * [See our documentation](https://dt-url.net/ei034bx)
     */
    path?: string;
    /**
     * Fixed value
     */
    source?: string;
    /**
     * Possible Values: `Constant_string`, `Request_body`, `Request_headers`, `Request_method`, `Request_parameters`, `Request_path`, `Request_url`, `Response_body`, `Response_headers`, `Response_statusCode`
     */
    sourceType: string;
}

export interface BusinessEventsOneagentTriggers {
    triggers: outputs.BusinessEventsOneagentTriggersTrigger[];
}

export interface BusinessEventsOneagentTriggersTrigger {
    /**
     * Case sensitive
     */
    caseSensitive?: boolean;
    /**
     * Fixed value
     */
    source: outputs.BusinessEventsOneagentTriggersTriggerSource;
    /**
     * Event type
     */
    type: string;
    /**
     * no documentation available
     */
    value?: string;
}

export interface BusinessEventsOneagentTriggersTriggerSource {
    /**
     * Possible Values: `Request_body`, `Request_headers`, `Request_method`, `Request_parameters`, `Request_path`, `Request_url`, `Response_body`, `Response_headers`, `Response_statusCode`
     */
    dataSource: string;
    /**
     * [See our documentation](https://dt-url.net/ei034bx)
     */
    path?: string;
}

export interface BusinessEventsProcessingRuleTesting {
    sampleEvent: string;
}

export interface BusinessEventsProcessingTransformationFields {
    transformationFields: outputs.BusinessEventsProcessingTransformationFieldsTransformationField[];
}

export interface BusinessEventsProcessingTransformationFieldsTransformationField {
    array: boolean;
    name: string;
    optional: boolean;
    readonly: boolean;
    type: string;
}

export interface BusinessEventsSecurityContextSecurityContextRule {
    /**
     * Matcher
     */
    query: string;
    /**
     * Rule name
     */
    ruleName: string;
    /**
     * Literal value to be set
     */
    value?: string;
    /**
     * Possible Values: `FIELD`, `LITERAL`
     */
    valueSource: string;
    /**
     * Name of field used to copy value
     */
    valueSourceField?: string;
}

export interface CalculatedMobileMetricDimension {
    /**
     * A dimensions for the metric usage
     */
    dimensions?: outputs.CalculatedMobileMetricDimensionDimension[];
}

export interface CalculatedMobileMetricDimensionDimension {
    /**
     * A dimensions for the metric usage
     */
    dimension: string;
    /**
     * The number of top values to be calculated
     */
    topX: number;
}

export interface CalculatedMobileMetricUserActionFilter {
    /**
     * Only actions with a duration more than or equal to this value (in milliseconds) are included in the metric calculation.
     */
    actionDurationFromMilliseconds?: number;
    /**
     * Only actions with a duration less than or equal to this value (in milliseconds) are included in the metric calculation.
     */
    actionDurationToMilliseconds?: number;
    /**
     * Only actions with the specified Apdex score are included in the metric calculation. Possible values: [ Frustrated, Satisfied, Tolerating, Unknown ]
     */
    apdex?: string;
    /**
     * Only actions coming from this app version are included in the metric calculation.
     */
    appVersion?: string;
    /**
     * Only actions coming from this carrier type are included in the metric calculation.
     */
    carrier?: string;
    /**
     * Only actions of users from this city are included in the metric calculation. Specify geolocation ID here.
     */
    city?: string;
    /**
     * Only actions coming from this connection type are included in the metric calculation. Possible values: [ LAN, MOBILE, OFFLINE, UNKNOWN, WIFI ]
     */
    connectionType?: string;
    /**
     * Only actions of users from this continent are included in the metric calculation. Specify geolocation ID here.
     */
    continent?: string;
    /**
     * Only actions of users from this country are included in the metric calculation. Specify geolocation ID here.
     */
    country?: string;
    /**
     * Only actions coming from this app version are included in the metric calculation.
     */
    device?: string;
    /**
     * The request error status of the actions to be included in the metric calculation: `true` or `false`
     */
    hasHttpError?: boolean;
    /**
     * The error status of the actions to be included in the metric calculation: `true` or `false`
     */
    hasReportedError?: boolean;
    /**
     * Only actions coming from this internet service provider are included in the metric calculation.
     */
    isp?: string;
    /**
     * Only actions coming from devices of this manufacturer are included in the metric calculation.
     */
    manufacturer?: string;
    /**
     * Filter by network technology
     */
    networkTechnology?: string;
    /**
     * Only actions coming from devices with this display orientation are included in the metric calculation. Possible values: [ LANDSCAPE, PORTRAIT, UNKNOWN ]
     */
    orientation?: string;
    /**
     * Only actions coming from this OS family are included in the metric calculation.
     */
    osFamily?: string;
    /**
     * Only actions coming from this OS version are included in the metric calculation.
     */
    osVersion?: string;
    /**
     * Only actions of users from this region are included in the metric calculation. Specify geolocation ID here.
     */
    region?: string;
    /**
     * Only actions coming from devices with this display resolution are included in the metric calculation. Possible values: [ CGA, DCI2K, DCI4K, DVGA, FHD, FWVGA, FWXGA, GHDPlus, HD, HQVGA, HQVGA2, HSXGA, HUXGA, HVGA, HXGA, NTSC, PAL, QHD, QQVGA, QSXGA, QUXGA, QVGA, QWXGA, QXGA, SVGA, SXGA, SXGAMinus, SXGAPlus, UGA, UHD16K, UHD4K, UHD8K, UHDPlus, UNKNOWN, UWQHD, UXGA, VGA, WHSXGA, WHUXGA, WHXGA, WQSXGA, WQUXGA, WQVGA, WQVGA2, WQVGA3, WQXGA, WQXGA2, WSVGA, WSVGA2, WSXGA, WSXGAPlus, WUXGA, WVGA, WVGA2, WXGA, WXGA2, WXGA3, WXGAPlus, XGA, XGAPLUS, _1280x854, nHD, qHD ]
     */
    resolution?: string;
    /**
     * Only actions with this name are included in the metric calculation.
     */
    userActionName?: string;
}

export interface CalculatedServiceMetricCondition {
    conditions?: outputs.CalculatedServiceMetricConditionCondition[];
}

export interface CalculatedServiceMetricConditionCondition {
    attribute: string;
    comparison: outputs.CalculatedServiceMetricConditionConditionComparison;
    unknowns?: string;
}

export interface CalculatedServiceMetricConditionConditionComparison {
    boolean?: outputs.CalculatedServiceMetricConditionConditionComparisonBoolean;
    esbInputNodeType?: outputs.CalculatedServiceMetricConditionConditionComparisonEsbInputNodeType;
    failedState?: outputs.CalculatedServiceMetricConditionConditionComparisonFailedState;
    failureReason?: outputs.CalculatedServiceMetricConditionConditionComparisonFailureReason;
    fastString?: outputs.CalculatedServiceMetricConditionConditionComparisonFastString;
    flawState?: outputs.CalculatedServiceMetricConditionConditionComparisonFlawState;
    generic?: outputs.CalculatedServiceMetricConditionConditionComparisonGeneric;
    httpMethod?: outputs.CalculatedServiceMetricConditionConditionComparisonHttpMethod;
    httpStatusClass?: outputs.CalculatedServiceMetricConditionConditionComparisonHttpStatusClass;
    iibInputNodeType?: outputs.CalculatedServiceMetricConditionConditionComparisonIibInputNodeType;
    negate?: boolean;
    number?: outputs.CalculatedServiceMetricConditionConditionComparisonNumber;
    numberRequestAttribute?: outputs.CalculatedServiceMetricConditionConditionComparisonNumberRequestAttribute;
    serviceType?: outputs.CalculatedServiceMetricConditionConditionComparisonServiceType;
    string?: outputs.CalculatedServiceMetricConditionConditionComparisonString;
    stringRequestAttribute?: outputs.CalculatedServiceMetricConditionConditionComparisonStringRequestAttribute;
    tag?: outputs.CalculatedServiceMetricConditionConditionComparisonTag;
    zosCallType?: outputs.CalculatedServiceMetricConditionConditionComparisonZosCallType;
}

export interface CalculatedServiceMetricConditionConditionComparisonBoolean {
    operator?: string;
    unknowns?: string;
    value: boolean;
    values?: boolean[];
}

export interface CalculatedServiceMetricConditionConditionComparisonEsbInputNodeType {
    operator?: string;
    unknowns?: string;
    value?: string;
    values?: string[];
}

export interface CalculatedServiceMetricConditionConditionComparisonFailedState {
    operator?: string;
    unknowns?: string;
    value?: string;
    values?: string[];
}

export interface CalculatedServiceMetricConditionConditionComparisonFailureReason {
    operator?: string;
    unknowns?: string;
    value?: string;
    values?: string[];
}

export interface CalculatedServiceMetricConditionConditionComparisonFastString {
    caseSensitive?: boolean;
    operator?: string;
    unknowns?: string;
    value?: string;
    values?: string[];
}

export interface CalculatedServiceMetricConditionConditionComparisonFlawState {
    operator?: string;
    unknowns?: string;
    value?: string;
    values?: string[];
}

export interface CalculatedServiceMetricConditionConditionComparisonGeneric {
    type: string;
    unknowns?: string;
}

export interface CalculatedServiceMetricConditionConditionComparisonHttpMethod {
    operator?: string;
    unknowns?: string;
    value?: string;
    values?: string[];
}

export interface CalculatedServiceMetricConditionConditionComparisonHttpStatusClass {
    operator?: string;
    unknowns?: string;
    value?: string;
    values?: string[];
}

export interface CalculatedServiceMetricConditionConditionComparisonIibInputNodeType {
    operator?: string;
    unknowns?: string;
    value?: string;
    values?: string[];
}

export interface CalculatedServiceMetricConditionConditionComparisonNumber {
    operator?: string;
    unknowns?: string;
    value?: number;
    values?: number[];
}

export interface CalculatedServiceMetricConditionConditionComparisonNumberRequestAttribute {
    matchOnChildCalls?: boolean;
    operator?: string;
    requestAttribute: string;
    source?: outputs.CalculatedServiceMetricConditionConditionComparisonNumberRequestAttributeSource;
    unknowns?: string;
    value?: number;
    values?: number[];
}

export interface CalculatedServiceMetricConditionConditionComparisonNumberRequestAttributeSource {
    managementZone?: string;
    serviceTag?: outputs.CalculatedServiceMetricConditionConditionComparisonNumberRequestAttributeSourceServiceTag;
    unknowns?: string;
}

export interface CalculatedServiceMetricConditionConditionComparisonNumberRequestAttributeSourceServiceTag {
    context?: string;
    key: string;
    tagKey?: outputs.CalculatedServiceMetricConditionConditionComparisonNumberRequestAttributeSourceServiceTagTagKey;
    value?: string;
}

export interface CalculatedServiceMetricConditionConditionComparisonNumberRequestAttributeSourceServiceTagTagKey {
    context?: string;
    key?: string;
}

export interface CalculatedServiceMetricConditionConditionComparisonServiceType {
    operator?: string;
    unknowns?: string;
    value?: string;
    values?: string[];
}

export interface CalculatedServiceMetricConditionConditionComparisonString {
    caseSensitive?: boolean;
    operator?: string;
    unknowns?: string;
    value?: string;
    values?: string[];
}

export interface CalculatedServiceMetricConditionConditionComparisonStringRequestAttribute {
    caseSensitive?: boolean;
    matchOnChildCalls?: boolean;
    operator?: string;
    requestAttribute: string;
    source?: outputs.CalculatedServiceMetricConditionConditionComparisonStringRequestAttributeSource;
    unknowns?: string;
    value?: string;
    values?: string[];
}

export interface CalculatedServiceMetricConditionConditionComparisonStringRequestAttributeSource {
    managementZone?: string;
    serviceTag?: outputs.CalculatedServiceMetricConditionConditionComparisonStringRequestAttributeSourceServiceTag;
    unknowns?: string;
}

export interface CalculatedServiceMetricConditionConditionComparisonStringRequestAttributeSourceServiceTag {
    context?: string;
    key: string;
    tagKey?: outputs.CalculatedServiceMetricConditionConditionComparisonStringRequestAttributeSourceServiceTagTagKey;
    value?: string;
}

export interface CalculatedServiceMetricConditionConditionComparisonStringRequestAttributeSourceServiceTagTagKey {
    context?: string;
    key?: string;
}

export interface CalculatedServiceMetricConditionConditionComparisonTag {
    operator?: string;
    unknowns?: string;
    value?: outputs.CalculatedServiceMetricConditionConditionComparisonTagValue;
    values?: outputs.CalculatedServiceMetricConditionConditionComparisonTagValues;
}

export interface CalculatedServiceMetricConditionConditionComparisonTagValue {
    context: string;
    key: string;
    unknowns?: string;
    value?: string;
}

export interface CalculatedServiceMetricConditionConditionComparisonTagValues {
    values?: outputs.CalculatedServiceMetricConditionConditionComparisonTagValuesValue[];
}

export interface CalculatedServiceMetricConditionConditionComparisonTagValuesValue {
    context: string;
    key: string;
    unknowns?: string;
    value?: string;
}

export interface CalculatedServiceMetricConditionConditionComparisonZosCallType {
    operator?: string;
    unknowns?: string;
    value?: string;
    values?: string[];
}

export interface CalculatedServiceMetricDimensionDefinition {
    dimension: string;
    name: string;
    placeholders?: outputs.CalculatedServiceMetricDimensionDefinitionPlaceholders;
    topX: number;
    topXAggregation: string;
    topXDirection: string;
    unknowns?: string;
}

export interface CalculatedServiceMetricDimensionDefinitionPlaceholders {
    placeholders?: outputs.CalculatedServiceMetricDimensionDefinitionPlaceholdersPlaceholder[];
}

export interface CalculatedServiceMetricDimensionDefinitionPlaceholdersPlaceholder {
    aggregation?: string;
    attribute: string;
    delimiterOrRegex?: string;
    endDelimiter?: string;
    kind: string;
    name: string;
    normalization?: string;
    requestAttribute?: string;
    source?: outputs.CalculatedServiceMetricDimensionDefinitionPlaceholdersPlaceholderSource;
    unknowns?: string;
    useFromChildCalls?: boolean;
}

export interface CalculatedServiceMetricDimensionDefinitionPlaceholdersPlaceholderSource {
    managementZone?: string;
    serviceTag?: outputs.CalculatedServiceMetricDimensionDefinitionPlaceholdersPlaceholderSourceServiceTag;
    unknowns?: string;
}

export interface CalculatedServiceMetricDimensionDefinitionPlaceholdersPlaceholderSourceServiceTag {
    context?: string;
    key: string;
    tagKey?: outputs.CalculatedServiceMetricDimensionDefinitionPlaceholdersPlaceholderSourceServiceTagTagKey;
    value?: string;
}

export interface CalculatedServiceMetricDimensionDefinitionPlaceholdersPlaceholderSourceServiceTagTagKey {
    context?: string;
    key?: string;
}

export interface CalculatedServiceMetricMetricDefinition {
    metric: string;
    requestAttribute?: string;
}

export interface CalculatedSyntheticMetricDimension {
    /**
     * A dimensions for the metric usage
     */
    dimensions?: outputs.CalculatedSyntheticMetricDimensionDimension[];
}

export interface CalculatedSyntheticMetricDimensionDimension {
    /**
     * A dimensions for the metric usage
     */
    dimension: string;
    /**
     * The number of top values to be calculated
     */
    topX?: number;
}

export interface CalculatedSyntheticMetricFilter {
    /**
     * Only user actions of the specified type are included in the metric calculation
     */
    actionType?: string;
    /**
     * Only executions finished with the specified error code are included in the metric calculation.
     */
    errorCode?: number;
    /**
     * Only the specified browser clickpath event is included in the metric calculation. Specify the Dynatrace entity ID of the event here.
     */
    event?: string;
    /**
     * The execution status of the monitors to be included in the metric calculation: `true` or `false`
     */
    hasError?: boolean;
    /**
     * Only executions from the specified location are included in the metric calculation. Specify the Dynatrace entity ID of the location here.
     */
    location?: string;
}

export interface CalculatedWebMetricDimension {
    /**
     * A dimensions for the metric usage
     */
    dimensions?: outputs.CalculatedWebMetricDimensionDimension[];
}

export interface CalculatedWebMetricDimensionDimension {
    /**
     * A dimensions for the metric usage
     */
    dimension: string;
    /**
     * The key of the user action property. Only applicable for the StringProperty dimension.
     */
    propertyKey?: string;
    /**
     * The number of top values to be calculated
     */
    topX: number;
}

export interface CalculatedWebMetricMetricDefinition {
    /**
     * The metric to be captured. Possible values are `Apdex`, `ApplicationCache`, `Callback`, `CumulativeLayoutShift`, `DNSLookup`, `DOMComplete`, `DOMContentLoaded`, `DOMInteractive`, `DoubleProperty`, `ErrorCount`, `FirstContentfulPaint`, `FirstInputDelay`, `FirstInputStart`, `FirstPaint`, `HTMLDownloaded`, `LargestContentfulPaint`, `LoadEventEnd`, `LoadEventStart`, `LongProperty`, `LongTasksTime`, `NavigationStart`, `OnDOMContentLoaded`, `OnLoad`, `Processing`, `RedirectTime`, `Request`, `RequestStart`, `Response`, `SecureConnect`, `SpeedIndex`, `TCPConnect`, `TimeToFirstByte`, `UserActionDuration`, `VisuallyComplete`
     */
    metric: string;
    /**
     * The key of the user action property. Only applicable for DoubleProperty and LongProperty metrics.
     */
    propertyKey?: string;
}

export interface CalculatedWebMetricUserActionFilter {
    /**
     * Only actions with a duration more than or equal to this value (in milliseconds) are included in the metric calculation.
     */
    actionDurationFromMilliseconds?: number;
    /**
     * Only actions with a duration less than or equal to this value (in milliseconds) are included in the metric calculation.
     */
    actionDurationToMilliseconds?: number;
    /**
     * Only actions with the specified Apdex score are included in the metric calculation. Possible values: [ Frustrated, Satisfied, Tolerating, Unknown ]
     */
    apdex?: string;
    /**
     * Only user actions coming from the specified browser family are included in the metric calculation.
     */
    browserFamily?: string;
    /**
     * Only user actions coming from the specified browser type are included in the metric calculation.
     */
    browserType?: string;
    /**
     * Only user actions coming from the specified browser version are included in the metric calculation.
     */
    browserVersion?: string;
    /**
     * Only actions of users from this city are included in the metric calculation. Specify geolocation ID here.
     */
    city?: string;
    /**
     * Only actions of users from this continent are included in the metric calculation. Specify geolocation ID here.
     */
    continent?: string;
    /**
     * Only actions of users from this country are included in the metric calculation. Specify geolocation ID here.
     */
    country?: string;
    /**
     * The status of custom actions in the metric calculation: `true` or `false`
     */
    customAction?: boolean;
    /**
     * The custom error name of the actions to be included in the metric calculation.
     */
    customErrorName?: string;
    /**
     * The custom error type of the actions to be included in the metric calculation.
     */
    customErrorType?: string;
    /**
     * Only user actions coming from the specified domain are included in the metric calculation.
     */
    domain?: string;
    /**
     * The error status of the actions to be included in the metric calculation: `true` or `false`
     */
    hasAnyError?: boolean;
    /**
     * The custom error status of the actions to be included in the metric calculation: `true` or `false`
     */
    hasCustomErrors?: boolean;
    /**
     * The request error status of the actions to be included in the metric calculation: `true` or `false`
     */
    hasHttpErrors?: boolean;
    /**
     * The JavaScript error status of the actions to be included in the metric calculation: `true` or `false`
     */
    hasJavascriptErrors?: boolean;
    /**
     * The HTTP error status code of the actions to be included in the metric calculation.
     */
    httpErrorCode?: number;
    /**
     * Can be used in combination with httpErrorCode to define a range of error codes that will be included in the metric calculation.
     */
    httpErrorCodeTo?: number;
    /**
     * The request path that has been determined to be the origin of an HTTP error of the actions to be included in the metric calculation.
     */
    httpPath?: string;
    /**
     * Only actions coming from this IP address are included in the metric calculation.
     */
    ip?: string;
    /**
     * The IPv6 status of the actions to be included in the metric calculation: `true` or `false`
     */
    ipV6Traffic?: boolean;
    /**
     * The status of load actions in the metric calculation: `true` or `false`
     */
    loadAction?: boolean;
    /**
     * Only actions coming from this OS family are included in the metric calculation.
     */
    osFamily?: string;
    /**
     * Only actions coming from this OS version are included in the metric calculation.
     */
    osVersion?: string;
    /**
     * The status of actions coming from real users in the metric calculation: `true` or `false`
     */
    realUser?: boolean;
    /**
     * Only actions of users from this region are included in the metric calculation. Specify geolocation ID here.
     */
    region?: string;
    /**
     * The status of actions coming from robots in the metric calculation: `true` or `false`
     */
    robot?: boolean;
    /**
     * The status of actions coming from synthetic monitors in the metric calculation: `true` or `false`
     */
    synthetic?: boolean;
    /**
     * Only actions on the specified group of views are included in the metric calculation.
     */
    targetViewGroup?: string;
    /**
     * Specifies the match type of the view group filter, e.g. using Contains or Equals. Defaults to Equals.
     */
    targetViewGroupNameMatchType?: string;
    /**
     * Only actions on the specified view are included in the metric calculation.
     */
    targetViewName?: string;
    /**
     * Specifies the match type of the view name filter, e.g. using Contains or Equals. Defaults to Equals.
     */
    targetViewNameMatchType?: string;
    /**
     * Only actions with this name are included in the metric calculation.
     */
    userActionName?: string;
    /**
     * The definition of a calculated web metric.
     */
    userActionProperties?: outputs.CalculatedWebMetricUserActionFilterUserActionProperty[];
    /**
     * The status of xhr actions in the metric calculation: `true` or `false`
     */
    xhrAction?: boolean;
    /**
     * The status of route actions in the metric calculation: `true` or `false`
     */
    xhrRouteChangeAction?: boolean;
}

export interface CalculatedWebMetricUserActionFilterUserActionProperty {
    /**
     * User Action Property
     */
    properties?: outputs.CalculatedWebMetricUserActionFilterUserActionPropertyProperty[];
}

export interface CalculatedWebMetricUserActionFilterUserActionPropertyProperty {
    /**
     * Only actions that have a value greater than or equal to this are included in the metric calculation.
     */
    from?: number;
    /**
     * The key of the action property we're checking.
     */
    key?: string;
    /**
     * Specifies the match type of a string filter, e.g. using Contains or Equals.
     */
    matchType?: string;
    /**
     * Only actions that have a value less than or equal to this are included in the metric calculation.
     */
    to?: number;
    /**
     * Only actions that have this value in the specified property are included in the metric calculation.
     */
    value?: string;
}

export interface CloudappWorkloaddetectionCloudFoundry {
    enabled: boolean;
}

export interface CloudappWorkloaddetectionDocker {
    enabled: boolean;
}

export interface CloudappWorkloaddetectionKubernetes {
    enabled: boolean;
    filters?: outputs.CloudappWorkloaddetectionKubernetesFilters;
}

export interface CloudappWorkloaddetectionKubernetesFilters {
    filters: outputs.CloudappWorkloaddetectionKubernetesFiltersFilter[];
}

export interface CloudappWorkloaddetectionKubernetesFiltersFilter {
    enabled: boolean;
    inclusionToggles: outputs.CloudappWorkloaddetectionKubernetesFiltersFilterInclusionToggles;
    matchFilter: outputs.CloudappWorkloaddetectionKubernetesFiltersFilterMatchFilter;
}

export interface CloudappWorkloaddetectionKubernetesFiltersFilterInclusionToggles {
    incBasepod: boolean;
    incContainer: boolean;
    incNamespace: boolean;
    incProduct: boolean;
    incStage: boolean;
}

export interface CloudappWorkloaddetectionKubernetesFiltersFilterMatchFilter {
    matchOperator: string;
    namespace?: string;
}

export interface CredentialsCredentialUsageSummary {
    /**
     * The number of uses
     */
    count: number;
    /**
     * Type of usage, `HTTP_MONITOR` or `BROWSER_MONITOR`
     */
    type: string;
}

export interface CredentialsExternal {
    /**
     * Required for Hashicorp Certificate. The ID of Credentials within the Certificate Vault holding the certificate
     */
    certificate?: string;
    /**
     * Required for Azure Client Secret. No further documentation available
     */
    clientSecret?: string;
    /**
     * Required for Azure Client Secret. No further documentation available
     */
    clientid?: string;
    /**
     * No documentation available
     */
    credentialsUsedForExternalSynchronizations?: string[];
    /**
     * No documentation available
     */
    passwordSecretName?: string;
    /**
     * Required for Hashicorp App Role or Hashicorp Certificate. No further documentation available
     */
    pathToCredentials?: string;
    /**
     * Required for Hashicorp App Role. No further documentation available
     */
    roleid?: string;
    /**
     * Required for Hashicorp App Role. The ID of Credentials within the Certificate Vault holding the secret id
     */
    secretid?: string;
    /**
     * Required for Azure Client Secret. No further documentation available
     */
    tenantid?: string;
    /**
     * No documentation available
     */
    tokenSecretName?: string;
    /**
     * No documentation available
     */
    usernameSecretName?: string;
    /**
     * Required for Hashicorp App Role. No further documentation available
     */
    vaultNamespace?: string;
    /**
     * No documentation available
     */
    vaultUrl?: string;
}

export interface CustomAnomaliesDimension {
    /**
     * A generic definition for a filter
     */
    dimensions?: outputs.CustomAnomaliesDimensionDimension[];
    /**
     * A filter for the metrics entity dimensions
     */
    entities?: outputs.CustomAnomaliesDimensionEntity[];
    /**
     * A filter for the metrics string dimensions
     */
    strings?: outputs.CustomAnomaliesDimensionString[];
}

export interface CustomAnomaliesDimensionDimension {
    /**
     * No documentation available
     */
    index?: number;
    /**
     * The dimensions key on the metric
     */
    key?: string;
    /**
     * No documentation available
     */
    name?: string;
    /**
     * Defines the actual set of fields depending on the value
     */
    type: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface CustomAnomaliesDimensionEntity {
    /**
     * A filter for a string value based on the given operator
     */
    filter: outputs.CustomAnomaliesDimensionEntityFilter;
    /**
     * The dimensions key on the metric
     */
    key?: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface CustomAnomaliesDimensionEntityFilter {
    /**
     * The operator to match on
     */
    operator: string;
    /**
     * The value to match on
     */
    value: string;
}

export interface CustomAnomaliesDimensionString {
    /**
     * A filter for a string value based on the given operator
     */
    filter: outputs.CustomAnomaliesDimensionStringFilter;
    /**
     * No documentation available
     */
    index?: number;
    /**
     * The dimensions key on the metric
     */
    key?: string;
    /**
     * No documentation available
     */
    name?: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface CustomAnomaliesDimensionStringFilter {
    /**
     * The operator to match on
     */
    operator: string;
    /**
     * The value to match on
     */
    value: string;
}

export interface CustomAnomaliesScope {
    /**
     * A scope filter for the related custom device group name
     */
    customDeviceGroupNames?: outputs.CustomAnomaliesScopeCustomDeviceGroupName[];
    /**
     * A scope filter for a monitored entity identifier
     */
    entities?: outputs.CustomAnomaliesScopeEntity[];
    /**
     * A scope filter for the related host group name
     */
    hostGroupNames?: outputs.CustomAnomaliesScopeHostGroupName[];
    /**
     * A scope filter for the related host name
     */
    hostNames?: outputs.CustomAnomaliesScopeHostName[];
    /**
     * A scope filter for a management zone identifier
     */
    managementZones?: outputs.CustomAnomaliesScopeManagementZone[];
    /**
     * A scope filter for a monitored entity name
     */
    names?: outputs.CustomAnomaliesScopeName[];
    /**
     * A scope filter for a process group identifier
     */
    processGroupIds?: outputs.CustomAnomaliesScopeProcessGroupId[];
    /**
     * A scope filter for the related process group name
     */
    processGroupNames?: outputs.CustomAnomaliesScopeProcessGroupName[];
    /**
     * A generic scope filter
     */
    scopes?: outputs.CustomAnomaliesScopeScope[];
    /**
     * A scope filter for tags on entities
     */
    tags?: outputs.CustomAnomaliesScopeTag[];
}

export interface CustomAnomaliesScopeCustomDeviceGroupName {
    /**
     * A filter for a string value based on the given operator
     */
    filter: outputs.CustomAnomaliesScopeCustomDeviceGroupNameFilter;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface CustomAnomaliesScopeCustomDeviceGroupNameFilter {
    /**
     * The operator to match on
     */
    operator: string;
    /**
     * The value to match on
     */
    value: string;
}

export interface CustomAnomaliesScopeEntity {
    /**
     * The monitored entities id to match on
     */
    id: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface CustomAnomaliesScopeHostGroupName {
    /**
     * A filter for a string value based on the given operator
     */
    filter: outputs.CustomAnomaliesScopeHostGroupNameFilter;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface CustomAnomaliesScopeHostGroupNameFilter {
    /**
     * The operator to match on
     */
    operator: string;
    /**
     * The value to match on
     */
    value: string;
}

export interface CustomAnomaliesScopeHostName {
    /**
     * A filter for a string value based on the given operator
     */
    filter: outputs.CustomAnomaliesScopeHostNameFilter;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface CustomAnomaliesScopeHostNameFilter {
    /**
     * The operator to match on
     */
    operator: string;
    /**
     * The value to match on
     */
    value: string;
}

export interface CustomAnomaliesScopeManagementZone {
    /**
     * The monitored entities id to match on
     */
    id?: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface CustomAnomaliesScopeName {
    /**
     * A filter for a string value based on the given operator
     */
    filter: outputs.CustomAnomaliesScopeNameFilter;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface CustomAnomaliesScopeNameFilter {
    /**
     * The operator to match on
     */
    operator: string;
    /**
     * The value to match on
     */
    value: string;
}

export interface CustomAnomaliesScopeProcessGroupId {
    /**
     * The monitored entities id to match on
     */
    id: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface CustomAnomaliesScopeProcessGroupName {
    /**
     * A filter for a string value based on the given operator
     */
    filter: outputs.CustomAnomaliesScopeProcessGroupNameFilter;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface CustomAnomaliesScopeProcessGroupNameFilter {
    /**
     * The operator to match on
     */
    operator: string;
    /**
     * The value to match on
     */
    value: string;
}

export interface CustomAnomaliesScopeScope {
    /**
     * Defines the actual set of fields depending on the value
     */
    type: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface CustomAnomaliesScopeTag {
    /**
     * A filter for a string value based on the given operator
     */
    filter: outputs.CustomAnomaliesScopeTagFilter;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface CustomAnomaliesScopeTagFilter {
    /**
     * The origin of the tag, such as AWS or Cloud Foundry. Custom tags use the `CONTEXTLESS` value
     */
    context: string;
    /**
     * The dimensions key on the metric
     */
    key: string;
    /**
     * The value to match on
     */
    value?: string;
}

export interface CustomAnomaliesStrategy {
    /**
     * An auto-adaptive baseline strategy to detect anomalies within metrics that show a regular change over time, as the baseline is also updated automatically. An example is to detect an anomaly in the number of received network packets or within the number of user actions over time
     */
    auto?: outputs.CustomAnomaliesStrategyAuto;
    /**
     * A generic monitoring strategy
     */
    generics?: outputs.CustomAnomaliesStrategyGeneric[];
    /**
     * A static threshold monitoring strategy to alert on hard limits within a given metric. An example is the violation of a critical memory limit
     */
    static?: outputs.CustomAnomaliesStrategyStatic;
}

export interface CustomAnomaliesStrategyAuto {
    /**
     * The condition for the **threshold** value check: `ABOVE` or `BELOW`
     */
    alertCondition: string;
    /**
     * If true, also one-minute samples without data are counted as violating samples
     */
    alertingOnMissingData?: boolean;
    /**
     * The number of one-minute samples within the evaluation window that must go back to normal to close the event
     */
    dealertingSamples: number;
    /**
     * The number of one-minute samples that form the sliding evaluation window
     */
    samples: number;
    /**
     * Defines the factor of how many signal fluctuations are valid. Values above the baseline plus the signal fluctuation times the number of tolerated signal fluctuations are alerted
     */
    signalFluctuations: number;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
    /**
     * The number of one-minute samples within the evaluation window that must violate the threshold to trigger an event
     */
    violatingSamples: number;
}

export interface CustomAnomaliesStrategyGeneric {
    /**
     * Defines the actual set of fields depending on the value
     */
    type: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface CustomAnomaliesStrategyStatic {
    /**
     * The condition for the **threshold** value check: `ABOVE` or `BELOW`
     */
    alertCondition: string;
    /**
     * If true, also one-minute samples without data are counted as violating samples
     */
    alertingOnMissingData?: boolean;
    /**
     * The number of one-minute samples within the evaluation window that must go back to normal to close the event
     */
    dealertingSamples: number;
    /**
     * The number of one-minute samples that form the sliding evaluation window
     */
    samples: number;
    /**
     * The value of the static threshold based on the specified unit
     */
    threshold: number;
    /**
     * The unit of the threshold, matching the metric definition
     */
    unit: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
    /**
     * The number of one-minute samples within the evaluation window that must violate the threshold to trigger an event
     */
    violatingSamples: number;
}

export interface CustomAppAnomaliesErrorRateIncrease {
    /**
     * Possible Values: `Auto`, `Fixed`
     */
    detectionMode?: string;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Alert if the percentage of user actions affected by reported errors exceeds **both** the absolute threshold and the relative threshold
     */
    errorRateIncreaseAuto?: outputs.CustomAppAnomaliesErrorRateIncreaseErrorRateIncreaseAuto;
    /**
     * Alert if the custom reported error rate threshold is exceeded during any 5-minute period
     */
    errorRateIncreaseFixed?: outputs.CustomAppAnomaliesErrorRateIncreaseErrorRateIncreaseFixed;
}

export interface CustomAppAnomaliesErrorRateIncreaseErrorRateIncreaseAuto {
    /**
     * Absolute threshold
     */
    thresholdAbsolute: number;
    /**
     * Relative threshold
     */
    thresholdRelative: number;
}

export interface CustomAppAnomaliesErrorRateIncreaseErrorRateIncreaseFixed {
    /**
     * Possible Values: `Low`, `Medium`, `High`
     */
    sensitivity: string;
    /**
     * Absolute threshold
     */
    thresholdAbsolute: number;
}

export interface CustomAppAnomaliesSlowUserActions {
    /**
     * Possible Values: `Auto`, `Fixed`
     */
    detectionMode?: string;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * no documentation available
     */
    slowUserActionsAuto?: outputs.CustomAppAnomaliesSlowUserActionsSlowUserActionsAuto;
    /**
     * no documentation available
     */
    slowUserActionsFixed?: outputs.CustomAppAnomaliesSlowUserActionsSlowUserActionsFixed;
}

export interface CustomAppAnomaliesSlowUserActionsSlowUserActionsAuto {
    /**
     * To avoid over-alerting do not alert for low traffic applications with less than
     */
    durationAvoidOveralerting: outputs.CustomAppAnomaliesSlowUserActionsSlowUserActionsAutoDurationAvoidOveralerting;
    /**
     * Alert if the action duration of all user actions degrades beyond **both** the absolute and relative threshold:
     */
    durationThresholdAll: outputs.CustomAppAnomaliesSlowUserActionsSlowUserActionsAutoDurationThresholdAll;
    /**
     * Alert if the action duration of the slowest 10% of user actions degrades beyond **both** the absolute and relative threshold:
     */
    durationThresholdSlowest: outputs.CustomAppAnomaliesSlowUserActionsSlowUserActionsAutoDurationThresholdSlowest;
}

export interface CustomAppAnomaliesSlowUserActionsSlowUserActionsAutoDurationAvoidOveralerting {
    /**
     * no documentation available
     */
    minActionRate: number;
}

export interface CustomAppAnomaliesSlowUserActionsSlowUserActionsAutoDurationThresholdAll {
    /**
     * Absolute threshold
     */
    durationThreshold: number;
    /**
     * Relative threshold
     */
    slowdownPercentage: number;
}

export interface CustomAppAnomaliesSlowUserActionsSlowUserActionsAutoDurationThresholdSlowest {
    /**
     * Absolute threshold
     */
    durationThreshold: number;
    /**
     * Relative threshold
     */
    slowdownPercentage: number;
}

export interface CustomAppAnomaliesSlowUserActionsSlowUserActionsFixed {
    /**
     * To avoid over-alerting do not alert for low traffic applications with less than
     */
    durationAvoidOveralerting: outputs.CustomAppAnomaliesSlowUserActionsSlowUserActionsFixedDurationAvoidOveralerting;
    /**
     * Alert if the action duration of all user actions degrades beyond the absolute threshold:
     */
    durationThresholdAllFixed: outputs.CustomAppAnomaliesSlowUserActionsSlowUserActionsFixedDurationThresholdAllFixed;
    /**
     * Alert if the action duration of the slowest 10% of user actions degrades beyond **both** the absolute and relative threshold:
     */
    durationThresholdSlowest: outputs.CustomAppAnomaliesSlowUserActionsSlowUserActionsFixedDurationThresholdSlowest;
    /**
     * Possible Values: `Low`, `Medium`, `High`
     */
    sensitivity: string;
}

export interface CustomAppAnomaliesSlowUserActionsSlowUserActionsFixedDurationAvoidOveralerting {
    /**
     * no documentation available
     */
    minActionRate: number;
}

export interface CustomAppAnomaliesSlowUserActionsSlowUserActionsFixedDurationThresholdAllFixed {
    /**
     * Absolute threshold
     */
    durationThreshold: number;
}

export interface CustomAppAnomaliesSlowUserActionsSlowUserActionsFixedDurationThresholdSlowest {
    /**
     * Absolute threshold
     */
    durationThreshold: number;
}

export interface CustomAppAnomaliesUnexpectedHighLoad {
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Dynatrace learns your typical application traffic over an observation period of one week. Depending on this expected value Dynatrace detects abnormal traffic spikes within your application.
     */
    thresholdPercentage?: number;
}

export interface CustomAppAnomaliesUnexpectedLowLoad {
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Dynatrace learns your typical application traffic over an observation period of one week. Depending on this expected value Dynatrace detects abnormal traffic drops within your application.
     */
    thresholdPercentage?: number;
}

export interface CustomAppCrashRateCrashRateIncrease {
    /**
     * Alert crash rate increases when auto-detected baseline is exceeded by a certain number of users
     */
    crashRateIncreaseAuto?: outputs.CustomAppCrashRateCrashRateIncreaseCrashRateIncreaseAuto;
    /**
     * Alert crash rate increases when the defined threshold is exceeded by a certain number of users
     */
    crashRateIncreaseFixed?: outputs.CustomAppCrashRateCrashRateIncreaseCrashRateIncreaseFixed;
    /**
     * Possible Values: `Auto`, `Fixed`
     */
    detectionMode?: string;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface CustomAppCrashRateCrashRateIncreaseCrashRateIncreaseAuto {
    /**
     * Dynatrace learns the typical crash rate for all app versions and will create an alert if the baseline is violated by more than a specified threshold. Analysis happens based on a sliding window of 10 minutes.
     */
    baselineViolationPercentage: number;
    /**
     * Amount of users
     */
    concurrentUsers: number;
    /**
     * Possible Values: `Low`, `Medium`, `High`
     */
    sensitivity: string;
}

export interface CustomAppCrashRateCrashRateIncreaseCrashRateIncreaseFixed {
    /**
     * Absolute threshold
     */
    absoluteCrashRate: number;
    /**
     * Amount of users
     */
    concurrentUsers: number;
}

export interface CustomAppEnablementRum {
    /**
     * (Field has overlap with `dynatrace.MobileApplication`) Percentage of user sessions captured and analyzed. By default, Dynatrace captures all user actions and user sessions for analysis. This approach ensures complete insight into your application’s performance and customer experience. You can optionally reduce the granularity of user-action and user-session analysis by capturing a lower percentage of user sessions. While this approach can reduce monitoring costs, it also results in lower visibility into how your customers are using your applications. For example, a setting of 10% results in Dynatrace analyzing only every tenth user session.
     */
    costAndTrafficControl: number;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface CustomServiceRule {
    /**
     * Additional annotations filter of the rule. Only classes where all listed annotations are available in the class itself or any of its superclasses are instrumented. Not applicable to PHP
     */
    annotations?: string[];
    /**
     * The fully qualified class or interface to instrument (or a substring if matching to a string). Required for Java and .NET custom services. Not applicable to PHP
     */
    class?: outputs.CustomServiceRuleClass;
    /**
     * Rule enabled/disabled
     */
    enabled: boolean;
    /**
     * The PHP file containing the class or methods to instrument. Required for PHP custom service. Not applicable to Java and .NET
     */
    file?: outputs.CustomServiceRuleFile;
    /**
     * methods to instrument
     */
    methods: outputs.CustomServiceRuleMethod[];
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface CustomServiceRuleClass {
    /**
     * Matcher applying to the class name (ENDS*WITH, EQUALS or STARTS*WITH). STARTS_WITH can only be used if there is at least one annotation defined. Default value is EQUALS
     */
    match?: string;
    /**
     * The full name of the class / the name to match the class name with
     */
    name: string;
}

export interface CustomServiceRuleFile {
    /**
     * Matcher applying to the class name (ENDS*WITH, EQUALS or STARTS*WITH). STARTS_WITH can only be used if there is at least one annotation defined. Default value is EQUALS
     */
    match?: string;
    /**
     * The full name of the class / the name to match the class name with
     */
    name: string;
}

export interface CustomServiceRuleMethod {
    /**
     * Fully qualified types of argument the method expects
     */
    arguments?: string[];
    /**
     * The ID of the method rule
     */
    id: string;
    /**
     * The modifiers of the method rule. Possible values are `ABSTRACT`, `EXTERN`, `FINAL`, `NATIVE` and `STATIC`
     */
    modifiers?: string[];
    /**
     * The full name of the class / the name to match the class name with
     */
    name: string;
    /**
     * Fully qualified type the method returns
     */
    returns?: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
    /**
     * The visibility of the method rule. Possible values are `INTERNAL`, `PACKAGE_PROTECTED`, `PRIVATE`, `PROTECTED` and `PUBLIC`
     */
    visibility?: string;
}

export interface CustomTagsTags {
    /**
     * A Tag Filter
     */
    filters?: outputs.CustomTagsTagsFilter[];
}

export interface CustomTagsTagsFilter {
    /**
     * The origin of the tag, such as AWS or Cloud Foundry. Custom tags use the `CONTEXTLESS` value
     */
    context: string;
    /**
     * The key of the tag. Custom tags have the tag value here
     */
    key: string;
    /**
     * The value of the tag. Not applicable to custom tags
     */
    value?: string;
}

export interface DashboardDashboardMetadata {
    /**
     * The tile uses consistent colors when rendering its content
     */
    consistentColors?: boolean;
    /**
     * Dashboard filter configuration of a dashboard
     */
    dynamicFilters?: outputs.DashboardDashboardMetadataDynamicFilters;
    /**
     * Global filter Settings for the Dashboard
     */
    filter?: outputs.DashboardDashboardMetadataFilter;
    /**
     * the name of the dashboard
     */
    name: string;
    /**
     * the owner of the dashboard
     */
    owner: string;
    /**
     * the dashboard is a preset (`true`) or not (`false`). Default is `false`.
     */
    preset?: boolean;
    /**
     * the dashboard is shared (`true`) or private (`false`)
     *
     * @deprecated Please use the resource `dynatrace_dashboard_sharing` to configure share settings
     */
    shared?: boolean;
    /**
     * represents sharing configuration of a dashboard
     *
     * @deprecated Please use the resource `dynatrace_dashboard_sharing` to configure share settings
     */
    sharingDetails?: outputs.DashboardDashboardMetadataSharingDetails;
    /**
     * a set of tags assigned to the dashboard
     */
    tags?: string[];
    /**
     * No documentation available
     */
    tilesNameSize?: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
    /**
     * a set of all possible global dashboard filters that can be applied to dashboard
     */
    validFilterKeys?: string[];
}

export interface DashboardDashboardMetadataDynamicFilters {
    /**
     * A set of all possible global dashboard filters that can be applied to a dashboard
     */
    filters: string[];
    genericTagFilters?: outputs.DashboardDashboardMetadataDynamicFiltersGenericTagFilters;
    tagSuggestionTypes?: string[];
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface DashboardDashboardMetadataDynamicFiltersGenericTagFilters {
    filters: outputs.DashboardDashboardMetadataDynamicFiltersGenericTagFiltersFilter[];
}

export interface DashboardDashboardMetadataDynamicFiltersGenericTagFiltersFilter {
    /**
     * Entity types affected by tag
     */
    entityTypes: string[];
    /**
     * The display name used to identify this generic filter
     */
    name?: string;
    /**
     * The entity type for which the suggestions should be provided.
     */
    suggestionsFromEntityType?: string;
    /**
     * The tag key for this filter
     */
    tagKey?: string;
}

export interface DashboardDashboardMetadataFilter {
    /**
     * the management zone this dashboard applies to
     */
    managementZones?: outputs.DashboardDashboardMetadataFilterManagementZone[];
    /**
     * the default timeframe of the dashboard
     */
    timeframe?: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface DashboardDashboardMetadataFilterManagementZone {
    /**
     * a short description of the Dynatrace entity
     */
    description?: string;
    /**
     * the ID of the Dynatrace entity
     */
    id: string;
    /**
     * The display name used to identify this generic filter
     */
    name?: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface DashboardDashboardMetadataSharingDetails {
    /**
     * If `true`, the dashboard is shared via link and authenticated users with the link can view
     */
    linkShared?: boolean;
    /**
     * If `true`, the dashboard is published to anyone on this environment
     */
    published?: boolean;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface DashboardMetadata {
    /**
     * Dynatrace server version
     */
    clusterVersion?: string;
    /**
     * A Sorted list of the version numbers of the configuration
     */
    configurationVersions?: number[];
    /**
     * A Sorted list of the version numbers of the configuration
     */
    currentConfigurationVersions?: string[];
}

export interface DashboardSharingPermissions {
    /**
     * Access permissions of the dashboard
     */
    permissions?: outputs.DashboardSharingPermissionsPermission[];
}

export interface DashboardSharingPermissionsPermission {
    /**
     * The ID of the user or group to whom the permission is granted.
     */
    id?: string;
    /**
     * The level of the permission:
     */
    level: string;
    /**
     * The type of the permission:
     */
    type: string;
}

export interface DashboardSharingPublic {
    /**
     * A list of management zones that can display data on the publicly shared dashboard.
     */
    managementZones: string[];
    urls: {[key: string]: string};
}

export interface DashboardTile {
    /**
     * The list of Dynatrace entities, assigned to the tile
     */
    assignedEntities?: string[];
    /**
     * Auto Refresh is disabled (`true`)
     */
    autoRefreshDisabled?: boolean;
    /**
     * the position and size of a tile
     */
    bounds?: outputs.DashboardTileBounds;
    chartVisible?: boolean;
    /**
     * The tile is configured and ready to use (`true`) or just placed on the dashboard (`false`)
     */
    configured?: boolean;
    /**
     * The name of the tile, set by user
     */
    customName?: string;
    /**
     * Include (`false') or exclude (`true`) maintenance windows from availability calculations
     */
    excludeMaintenanceWindows?: boolean;
    /**
     * is filter applied to a tile. It overrides dashboard's filter
     */
    filter?: outputs.DashboardTileFilter;
    /**
     * the position and size of a tile
     */
    filterConfig?: outputs.DashboardTileFilterConfig;
    /**
     * The limit of the results, if not set will use the default value of the system
     */
    limit?: number;
    /**
     * The markdown-formatted content of the tile
     */
    markdown?: string;
    /**
     * The metric assigned to the tile
     */
    metric?: string;
    /**
     * the name of the tile
     */
    name: string;
    /**
     * The size of the tile name. Possible values are `small`, `medium` and `large`.
     */
    nameSize?: string;
    /**
     * A [user session query](https://www.dynatrace.com/support/help/shortlink/usql-info) executed by the tile
     */
    query?: string;
    /**
     * the type of the tile. Must be either `APPLICATION_WORLDMAP`, `RESOURCES`, `THIRD_PARTY_MOST_ACTIVE`, `UEM_CONVERSIONS_PER_GOAL`, `PROCESS_GROUPS_ONE` or `HOST` .
     */
    tileType: string;
    /**
     * The comparison timeframe of the query. If specified, you additionally get the results of the same query with the specified time shift
     */
    timeFrameShift?: string;
    /**
     * The attribute `type` exists for backwards compatibilty. Usage is discouraged. You should use `visualization` instead.
     */
    type?: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
    /**
     * The visualization of the tile. Possible values are: `COLUMN_CHART`, `FUNNEL`, `LINE_CHART`, `PIE_CHART`, `SINGLE_VALUE`, `TABLE`
     */
    visualization?: string;
    /**
     * Configuration of a User session query visualization tile
     */
    visualizationConfig?: outputs.DashboardTileVisualizationConfig;
}

export interface DashboardTileBounds {
    /**
     * the height of the tile, in pixels
     */
    height: number;
    /**
     * the horizontal distance from the top left corner of the dashboard to the top left corner of the tile, in pixels
     */
    left: number;
    /**
     * the vertical distance from the top left corner of the dashboard to the top left corner of the tile, in pixels
     */
    top: number;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
    /**
     * the width of the tile, in pixels
     */
    width: number;
}

export interface DashboardTileFilter {
    /**
     * the management zone this dashboard applies to
     */
    managementZones?: outputs.DashboardTileFilterManagementZone[];
    /**
     * the default timeframe of the dashboard
     */
    timeframe?: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface DashboardTileFilterConfig {
    /**
     * Configuration of a custom chart
     */
    chartConfig?: outputs.DashboardTileFilterConfigChartConfig;
    /**
     * The name of the tile, set by user
     */
    customName: string;
    /**
     * The default name of the tile
     */
    defaultName: string;
    /**
     * A set of all possible global dashboard filters that can be applied to a dashboard
     */
    filters?: outputs.DashboardTileFilterConfigFilters;
    /**
     * The visualization of the timeseries chart. Possible values are `AREA`, `BAR` and `LINE`.
     */
    type: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface DashboardTileFilterConfigChartConfig {
    /**
     * The optional custom y-axis limits
     */
    axisLimits?: {[key: string]: number};
    /**
     * Either one of `Bit`, `BitPerHour`, `BitPerMinute`, `BitPerSecond`, `Byte`, `BytePerHour`, `BytePerMinute`, `BytePerSecond`, `Cores`, `Count`, `Day`, `DecibelMilliWatt`, `GibiByte`, `Giga`, `GigaByte`, `Hour`, `KibiByte`, `KibiBytePerHour`, `KibiBytePerMinute`, `KibiBytePerSecond`, `Kilo`, `KiloByte`, `KiloBytePerHour`, `KiloBytePerMinute`, `KiloBytePerSecond`, `MebiByte`, `MebiBytePerHour`, `MebiBytePerMinute`, `MebiBytePerSecond`, `Mega`, `MegaByte`, `MegaBytePerHour`, `MegaBytePerMinute`, `MegaBytePerSecond`, `MicroSecond`, `MilliCores`, `MilliSecond`, `MilliSecondPerMinute`, `Minute`, `Month`, `NanoSecond`, `NanoSecondPerMinute`, `NotApplicable`, `PerHour`, `PerMinute`, `PerSecond`, `Percent`, `Pixel`, `Promille`, `Ratio`, `Second`, `State`, `Unspecified`, `Week`, `Year`
     */
    leftAxisCustomUnit?: string;
    /**
     * Defines if a legend should be shown
     */
    legend?: boolean;
    /**
     * Additional information about charted metric
     */
    resultMetadatas?: outputs.DashboardTileFilterConfigChartConfigResultMetadata[];
    /**
     * Either one of `Bit`, `BitPerHour`, `BitPerMinute`, `BitPerSecond`, `Byte`, `BytePerHour`, `BytePerMinute`, `BytePerSecond`, `Cores`, `Count`, `Day`, `DecibelMilliWatt`, `GibiByte`, `Giga`, `GigaByte`, `Hour`, `KibiByte`, `KibiBytePerHour`, `KibiBytePerMinute`, `KibiBytePerSecond`, `Kilo`, `KiloByte`, `KiloBytePerHour`, `KiloBytePerMinute`, `KiloBytePerSecond`, `MebiByte`, `MebiBytePerHour`, `MebiBytePerMinute`, `MebiBytePerSecond`, `Mega`, `MegaByte`, `MegaBytePerHour`, `MegaBytePerMinute`, `MegaBytePerSecond`, `MicroSecond`, `MilliCores`, `MilliSecond`, `MilliSecondPerMinute`, `Minute`, `Month`, `NanoSecond`, `NanoSecondPerMinute`, `NotApplicable`, `PerHour`, `PerMinute`, `PerSecond`, `Percent`, `Pixel`, `Promille`, `Ratio`, `Second`, `State`, `Unspecified`, `Week`, `Year`
     */
    rightAxisCustomUnit?: string;
    /**
     * A list of charted metrics
     */
    series?: outputs.DashboardTileFilterConfigChartConfigSeries[];
    /**
     * The visualization of the timeseries chart. Possible values are `AREA`, `BAR` and `LINE`.
     */
    type: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface DashboardTileFilterConfigChartConfigResultMetadata {
    /**
     * Additional metadata for charted metric
     */
    configs?: outputs.DashboardTileFilterConfigChartConfigResultMetadataConfig[];
}

export interface DashboardTileFilterConfigChartConfigResultMetadataConfig {
    /**
     * The color of the metric in the chart, hex format
     */
    customColor?: string;
    /**
     * A generated key by the Dynatrace Server
     */
    key?: string;
    /**
     * The timestamp of the last metadata modification, in UTC milliseconds
     */
    lastModified?: number;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface DashboardTileFilterConfigChartConfigSeries {
    /**
     * The charted aggregation of the metric
     */
    aggregation: string;
    aggregationRate?: string;
    /**
     * Configuration of the charted metric splitting
     */
    dimensions?: outputs.DashboardTileFilterConfigChartConfigSeriesDimension[];
    /**
     * The visualization of the timeseries chart
     */
    entityType: string;
    /**
     * The name of the charted metric
     */
    metric: string;
    /**
     * The charted percentile. Only applicable if the **aggregation** is set to `PERCENTILE`
     */
    percentile?: number;
    /**
     * Sort ascending (`true`) or descending (`false`)
     */
    sortAscending?: boolean;
    /**
     * Sort the column (`true`) or (`false`)
     */
    sortColumn?: boolean;
    /**
     * The visualization of the timeseries chart. Possible values are `AREA`, `BAR` and `LINE`.
     */
    type: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface DashboardTileFilterConfigChartConfigSeriesDimension {
    entityDimension?: boolean;
    /**
     * the ID of the Dynatrace entity
     */
    id: string;
    /**
     * The display name used to identify this generic filter
     */
    name?: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
    /**
     * The splitting value
     */
    values?: string[];
}

export interface DashboardTileFilterConfigFilters {
    filters?: outputs.DashboardTileFilterConfigFiltersFilter[];
}

export interface DashboardTileFilterConfigFiltersFilter {
    /**
     * The visualization of the timeseries chart
     */
    entityType: string;
    /**
     * the tiles this Dashboard consist of
     */
    matches?: outputs.DashboardTileFilterConfigFiltersFilterMatch[];
}

export interface DashboardTileFilterConfigFiltersFilterMatch {
    /**
     * A generated key by the Dynatrace Server
     */
    key: string;
    /**
     * The splitting value
     */
    values?: string[];
}

export interface DashboardTileFilterManagementZone {
    /**
     * a short description of the Dynatrace entity
     */
    description?: string;
    /**
     * the ID of the Dynatrace entity
     */
    id: string;
    /**
     * The display name used to identify this generic filter
     */
    name?: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface DashboardTileVisualizationConfig {
    /**
     * The axis bucketing when enabled groups similar series in the same virtual axis
     */
    hasAxisBucketing?: boolean;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface DashboardsAllowlistAllowlist {
    urlpatterns: outputs.DashboardsAllowlistAllowlistUrlpattern[];
}

export interface DashboardsAllowlistAllowlistUrlpattern {
    /**
     * Possible Values: `Equals`, `StartsWith`
     */
    rule: string;
    /**
     * Pattern
     */
    template: string;
}

export interface DashboardsGeneralDefaultDashboardList {
    defaultDashboards: outputs.DashboardsGeneralDefaultDashboardListDefaultDashboard[];
}

export interface DashboardsGeneralDefaultDashboardListDefaultDashboard {
    /**
     * Preset dashboard to show as default landing page
     */
    dashboard: string;
    /**
     * Show selected dashboard by default for this user group
     */
    userGroup: string;
}

export interface DashboardsPresetsDashboardPresetsList {
    dashboardPresets: outputs.DashboardsPresetsDashboardPresetsListDashboardPreset[];
}

export interface DashboardsPresetsDashboardPresetsListDashboardPreset {
    /**
     * Dashboard preset to limit visibility for
     */
    dashboardPreset: string;
    /**
     * User group to show selected dashboard preset to
     */
    userGroup: string;
}

export interface DataPrivacyDataCollection {
    optInModeEnabled: boolean;
}

export interface DataPrivacyDoNotTrack {
    complyWithDoNotTrack: boolean;
    doNotTrack?: string;
}

export interface DataPrivacyMasking {
    /**
     * @deprecated This property is not supported anymore by the Dynatrace REST API (since schema version 4)
     */
    ipAddressMasking?: string;
    /**
     * @deprecated This property is not supported anymore by the Dynatrace REST API (since schema version 4)
     */
    ipAddressMaskingEnabled?: boolean;
    personalDataUriMaskingEnabled: boolean;
    userActionMaskingEnabled: boolean;
}

export interface DataPrivacyUserTracking {
    persistentCookieEnabled: boolean;
}

export interface DatabaseAnomaliesDbConnectFailures {
    /**
     * Number of failed database connections during any **eval_period** minutes period to trigger an alert
     */
    connectionFailsCount?: number;
    /**
     * The *X* minutes time period during which the **connection*fails*count** is evaluated
     */
    evalPeriod?: number;
}

export interface DatabaseAnomaliesFailureRate {
    /**
     * Parameters of failure rate increase auto-detection. Example: If the expected error rate is 1.5%, and you set an absolute increase of 1%, and a relative increase of 50%, the thresholds will be:  Absolute: 1.5% + **1%** = 2.5%  Relative: 1.5% + 1.5% * **50%** = 2.25%
     */
    auto?: outputs.DatabaseAnomaliesFailureRateAuto;
    /**
     * Fixed thresholds for failure rate increase detection
     */
    thresholds?: outputs.DatabaseAnomaliesFailureRateThresholds;
}

export interface DatabaseAnomaliesFailureRateAuto {
    /**
     * Absolute increase of failing service calls to trigger an alert, %
     */
    absolute: number;
    /**
     * Relative increase of failing service calls to trigger an alert, %
     */
    relative: number;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface DatabaseAnomaliesFailureRateThresholds {
    /**
     * Sensitivity of the threshold.  With `low` sensitivity, high statistical confidence is used. Brief violations (for example, due to a surge in load) won't trigger alerts.  With `high` sensitivity, no statistical confidence is used. Each violation triggers alert
     */
    sensitivity: string;
    /**
     * Failure rate during any 5-minute period to trigger an alert, %
     */
    threshold: number;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface DatabaseAnomaliesLoad {
    /**
     * The configuration of traffic drops detection
     */
    drops?: outputs.DatabaseAnomaliesLoadDrops;
    /**
     * The configuration of traffic spikes detection
     */
    spikes?: outputs.DatabaseAnomaliesLoadSpikes;
}

export interface DatabaseAnomaliesLoadDrops {
    /**
     * Alert if the service stays in abnormal state for at least *X* minutes
     */
    minutes?: number;
    /**
     * Alert if the observed load is more than *X* % of the expected value
     */
    percent?: number;
}

export interface DatabaseAnomaliesLoadSpikes {
    /**
     * Alert if the service stays in abnormal state for at least *X* minutes
     */
    minutes?: number;
    /**
     * Alert if the observed load is more than *X* % of the expected value
     */
    percent?: number;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface DatabaseAnomaliesResponseTime {
    /**
     * Parameters of the response time degradation auto-detection. Violation of **any** criterion triggers an alert
     */
    auto?: outputs.DatabaseAnomaliesResponseTimeAuto;
    /**
     * Fixed thresholds for response time degradation detection
     */
    thresholds?: outputs.DatabaseAnomaliesResponseTimeThresholds;
}

export interface DatabaseAnomaliesResponseTimeAuto {
    /**
     * Minimal service load to detect response time degradation. Response time degradation of services with smaller load won't trigger alerts. Possible values are `FIFTEEN_REQUESTS_PER_MINUTE`, `FIVE_REQUESTS_PER_MINUTE`, `ONE_REQUEST_PER_MINUTE` and `TEN_REQUESTS_PER_MINUTE`
     */
    load: string;
    /**
     * Alert if the response time degrades by more than *X* milliseconds
     */
    milliseconds: number;
    /**
     * Alert if the observed load is more than *X* % of the expected value
     */
    percent: number;
    /**
     * Alert if the response time of the slowest 10% degrades by more than *X* milliseconds
     */
    slowestMilliseconds: number;
    /**
     * Alert if the response time of the slowest 10% degrades by more than *X* milliseconds
     */
    slowestPercent: number;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface DatabaseAnomaliesResponseTimeThresholds {
    /**
     * Minimal service load to detect response time degradation. Response time degradation of services with smaller load won't trigger alerts. Possible values are `FIFTEEN_REQUESTS_PER_MINUTE`, `FIVE_REQUESTS_PER_MINUTE`, `ONE_REQUEST_PER_MINUTE` and `TEN_REQUESTS_PER_MINUTE`
     */
    load: string;
    /**
     * Alert if the response time degrades by more than *X* milliseconds
     */
    milliseconds: number;
    /**
     * Sensitivity of the threshold.  With `low` sensitivity, high statistical confidence is used. Brief violations (for example, due to a surge in load) won't trigger alerts.  With `high` sensitivity, no statistical confidence is used. Each violation triggers alert
     */
    sensitivity: string;
    /**
     * Alert if the response time of the slowest 10% degrades by more than *X* milliseconds
     */
    slowestMilliseconds: number;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface DatabaseAnomaliesV2DatabaseConnections {
    /**
     * Detect failed database connects
     */
    enabled: boolean;
    /**
     * Threshold
     */
    maxFailedConnects?: number;
    /**
     * Time span
     */
    timePeriod?: number;
}

export interface DatabaseAnomaliesV2FailureRate {
    /**
     * Alert if the percentage of failing service calls increases by **both** the absolute and relative thresholds:
     */
    autoDetection?: outputs.DatabaseAnomaliesV2FailureRateAutoDetection;
    /**
     * Detection mode for increases in failure rate
     */
    detectionMode?: string;
    /**
     * Detect increases in failure rate
     */
    enabled: boolean;
    /**
     * Alert if a given failure rate is exceeded during any 5-minute-period
     */
    fixedDetection?: outputs.DatabaseAnomaliesV2FailureRateFixedDetection;
}

export interface DatabaseAnomaliesV2FailureRateAutoDetection {
    /**
     * Absolute threshold
     */
    absoluteIncrease: number;
    /**
     * Avoid over-alerting
     */
    overAlertingProtection: outputs.DatabaseAnomaliesV2FailureRateAutoDetectionOverAlertingProtection;
    /**
     * Relative threshold
     */
    relativeIncrease: number;
}

export interface DatabaseAnomaliesV2FailureRateAutoDetectionOverAlertingProtection {
    /**
     * Only alert if the abnormal state remains for at least
     */
    minutesAbnormalState: number;
    /**
     * Only alert if there are at least
     */
    requestsPerMinute: number;
}

export interface DatabaseAnomaliesV2FailureRateFixedDetection {
    /**
     * Avoid over-alerting
     */
    overAlertingProtection: outputs.DatabaseAnomaliesV2FailureRateFixedDetectionOverAlertingProtection;
    /**
     * no documentation available
     */
    sensitivity: string;
    /**
     * no documentation available
     */
    threshold: number;
}

export interface DatabaseAnomaliesV2FailureRateFixedDetectionOverAlertingProtection {
    /**
     * Only alert if the abnormal state remains for at least
     */
    minutesAbnormalState: number;
    /**
     * Only alert if there are at least
     */
    requestsPerMinute: number;
}

export interface DatabaseAnomaliesV2LoadDrops {
    /**
     * Detect service load drops
     */
    enabled: boolean;
    /**
     * Threshold
     */
    loadDropPercent?: number;
    /**
     * Time span
     */
    minutesAbnormalState?: number;
}

export interface DatabaseAnomaliesV2LoadSpikes {
    /**
     * Detect service load spikes
     */
    enabled: boolean;
    /**
     * Threshold
     */
    loadSpikePercent?: number;
    /**
     * Time span
     */
    minutesAbnormalState?: number;
}

export interface DatabaseAnomaliesV2ResponseTime {
    /**
     * no documentation available
     */
    autoDetection?: outputs.DatabaseAnomaliesV2ResponseTimeAutoDetection;
    /**
     * Detection mode for response time degradations
     */
    detectionMode?: string;
    /**
     * Detect response time degradations
     */
    enabled: boolean;
    /**
     * no documentation available
     */
    fixedDetection?: outputs.DatabaseAnomaliesV2ResponseTimeFixedDetection;
}

export interface DatabaseAnomaliesV2ResponseTimeAutoDetection {
    /**
     * Avoid over-alerting
     */
    overAlertingProtection: outputs.DatabaseAnomaliesV2ResponseTimeAutoDetectionOverAlertingProtection;
    /**
     * Alert if the median response time of all requests degrades beyond **both** the absolute and relative thresholds:
     */
    responseTimeAll: outputs.DatabaseAnomaliesV2ResponseTimeAutoDetectionResponseTimeAll;
    /**
     * Alert if the response time of the slowest 10% of requests degrades beyond **both** the absolute and relative thresholds:
     */
    responseTimeSlowest: outputs.DatabaseAnomaliesV2ResponseTimeAutoDetectionResponseTimeSlowest;
}

export interface DatabaseAnomaliesV2ResponseTimeAutoDetectionOverAlertingProtection {
    /**
     * Only alert if the abnormal state remains for at least
     */
    minutesAbnormalState: number;
    /**
     * Only alert if there are at least
     */
    requestsPerMinute: number;
}

export interface DatabaseAnomaliesV2ResponseTimeAutoDetectionResponseTimeAll {
    /**
     * Absolute threshold
     */
    degradationMilliseconds: number;
    /**
     * Relative threshold
     */
    degradationPercent: number;
}

export interface DatabaseAnomaliesV2ResponseTimeAutoDetectionResponseTimeSlowest {
    /**
     * Absolute threshold
     */
    slowestDegradationMilliseconds: number;
    /**
     * Relative threshold
     */
    slowestDegradationPercent: number;
}

export interface DatabaseAnomaliesV2ResponseTimeFixedDetection {
    /**
     * Avoid over-alerting
     */
    overAlertingProtection: outputs.DatabaseAnomaliesV2ResponseTimeFixedDetectionOverAlertingProtection;
    /**
     * Alert if the median response time of all requests degrades beyond **both** the absolute and relative thresholds:
     */
    responseTimeAll: outputs.DatabaseAnomaliesV2ResponseTimeFixedDetectionResponseTimeAll;
    /**
     * Alert if the response time of the slowest 10% of requests degrades beyond **both** the absolute and relative thresholds:
     */
    responseTimeSlowest: outputs.DatabaseAnomaliesV2ResponseTimeFixedDetectionResponseTimeSlowest;
    /**
     * no documentation available
     */
    sensitivity: string;
}

export interface DatabaseAnomaliesV2ResponseTimeFixedDetectionOverAlertingProtection {
    /**
     * Only alert if the abnormal state remains for at least
     */
    minutesAbnormalState: number;
    /**
     * Only alert if there are at least
     */
    requestsPerMinute: number;
}

export interface DatabaseAnomaliesV2ResponseTimeFixedDetectionResponseTimeAll {
    /**
     * Absolute threshold
     */
    degradationMilliseconds: number;
}

export interface DatabaseAnomaliesV2ResponseTimeFixedDetectionResponseTimeSlowest {
    /**
     * Absolute threshold
     */
    slowestDegradationMilliseconds: number;
}

export interface DduPoolEvents {
    /**
     * Is the limit configuration enabled
     */
    enabled: boolean;
    /**
     * Type of the limit applied: MONTHLY or ANNUAL
     */
    type?: string;
    /**
     * Value of the DDU limit applied for provided timerange
     */
    value?: number;
}

export interface DduPoolLogMonitoring {
    /**
     * Is the limit configuration enabled
     */
    enabled: boolean;
    /**
     * Type of the limit applied: MONTHLY or ANNUAL
     */
    type?: string;
    /**
     * Value of the DDU limit applied for provided timerange
     */
    value?: number;
}

export interface DduPoolMetrics {
    /**
     * Is the limit configuration enabled
     */
    enabled: boolean;
    /**
     * Type of the limit applied: MONTHLY or ANNUAL
     */
    type?: string;
    /**
     * Value of the DDU limit applied for provided timerange
     */
    value?: number;
}

export interface DduPoolServerless {
    /**
     * Is the limit configuration enabled
     */
    enabled: boolean;
    /**
     * Type of the limit applied: MONTHLY or ANNUAL
     */
    type?: string;
    /**
     * Value of the DDU limit applied for provided timerange
     */
    value?: number;
}

export interface DduPoolTraces {
    /**
     * Is the limit configuration enabled
     */
    enabled: boolean;
    /**
     * Type of the limit applied: MONTHLY or ANNUAL
     */
    type?: string;
    /**
     * Value of the DDU limit applied for provided timerange
     */
    value?: number;
}

export interface DeclarativeGroupingDetection {
    processDefinitions: outputs.DeclarativeGroupingDetectionProcessDefinition[];
}

export interface DeclarativeGroupingDetectionProcessDefinition {
    id: string;
    processGroupName: string;
    report: string;
    rules?: outputs.DeclarativeGroupingDetectionProcessDefinitionRules;
}

export interface DeclarativeGroupingDetectionProcessDefinitionRules {
    rules: outputs.DeclarativeGroupingDetectionProcessDefinitionRulesRule[];
}

export interface DeclarativeGroupingDetectionProcessDefinitionRulesRule {
    condition: string;
    property: string;
}

export interface DirectSharesRecipients {
    /**
     * Recipient of the direct share
     */
    recipients?: outputs.DirectSharesRecipientsRecipient[];
}

export interface DirectSharesRecipientsRecipient {
    /**
     * Identifier of the recipient
     */
    id: string;
    /**
     * Type of the recipient. Possible values are `group' and`user'
     */
    type?: string;
}

export interface DiskAnomaliesDiskName {
    /**
     * Possible values are: `CONTAINS`, `DOES_NOT_CONTAIN`, `DOES_NOT_EQUAL`, `DOES_NOT_START_WITH`, `EQUALS` and `STARTS_WITH`
     */
    operator: string;
    /**
     * Value to compare to
     */
    value: string;
}

export interface DiskAnomaliesTags {
    /**
     * A Tag Filter
     */
    filters?: outputs.DiskAnomaliesTagsFilter[];
}

export interface DiskAnomaliesTagsFilter {
    /**
     * The origin of the tag, such as AWS or Cloud Foundry. Custom tags use the `CONTEXTLESS` value
     */
    context: string;
    /**
     * The key of the tag. Custom tags have the tag value here
     */
    key: string;
    /**
     * Value to compare to
     */
    value?: string;
}

export interface DiskAnomaliesV2Disk {
    /**
     * no documentation available
     */
    diskLowInodesDetection: outputs.DiskAnomaliesV2DiskDiskLowInodesDetection;
    /**
     * no documentation available
     */
    diskLowSpaceDetection: outputs.DiskAnomaliesV2DiskDiskLowSpaceDetection;
    /**
     * no documentation available
     */
    diskSlowWritesAndReadsDetection: outputs.DiskAnomaliesV2DiskDiskSlowWritesAndReadsDetection;
}

export interface DiskAnomaliesV2DiskDiskLowInodesDetection {
    /**
     * no documentation available
     */
    customThresholds?: outputs.DiskAnomaliesV2DiskDiskLowInodesDetectionCustomThresholds;
    /**
     * Detection mode for low inodes number available
     */
    detectionMode?: string;
    /**
     * Detect low inodes number available
     */
    enabled: boolean;
}

export interface DiskAnomaliesV2DiskDiskLowInodesDetectionCustomThresholds {
    /**
     * Alert if the percentage of available inodes is lower than this threshold in 3 out of 5 samples
     */
    freeInodesPercentage: number;
}

export interface DiskAnomaliesV2DiskDiskLowSpaceDetection {
    /**
     * no documentation available
     */
    customThresholds?: outputs.DiskAnomaliesV2DiskDiskLowSpaceDetectionCustomThresholds;
    /**
     * Detection mode for low inodes number available
     */
    detectionMode?: string;
    /**
     * Detect low inodes number available
     */
    enabled: boolean;
}

export interface DiskAnomaliesV2DiskDiskLowSpaceDetectionCustomThresholds {
    /**
     * Alert if free disk space is lower than this percentage in 3 out of 5 samples
     */
    freeSpacePercentage: number;
}

export interface DiskAnomaliesV2DiskDiskSlowWritesAndReadsDetection {
    /**
     * no documentation available
     */
    customThresholds?: outputs.DiskAnomaliesV2DiskDiskSlowWritesAndReadsDetectionCustomThresholds;
    /**
     * Detection mode for low inodes number available
     */
    detectionMode?: string;
    /**
     * Detect low inodes number available
     */
    enabled: boolean;
}

export interface DiskAnomaliesV2DiskDiskSlowWritesAndReadsDetectionCustomThresholds {
    /**
     * Alert if disk read time or write time is higher than this threshold in 3 out of 5 samples
     */
    writeAndReadTime: number;
}

export interface DiskAnomalyRulesDiskNameFilter {
    /**
     * Possible Values: `CONTAINS`, `DOES_NOT_CONTAIN`, `DOES_NOT_EQUAL`, `DOES_NOT_START_WITH`, `EQUALS`, `STARTS_WITH`
     */
    operator: string;
    /**
     * Matching text
     */
    value?: string;
}

export interface DiskAnomalyRulesSampleLimit {
    /**
     * .. within the last
     */
    samples: number;
    /**
     * Minimum number of violating samples
     */
    violatingSamples: number;
}

export interface DiskOptionsExclusions {
    exclusions: outputs.DiskOptionsExclusionsExclusion[];
}

export interface DiskOptionsExclusionsExclusion {
    filesystem?: string;
    mountpoint?: string;
    os: string;
}

export interface DiskSpecificAnomaliesV2DiskLowInodesDetection {
    /**
     * no documentation available
     */
    customThresholds?: outputs.DiskSpecificAnomaliesV2DiskLowInodesDetectionCustomThresholds;
    /**
     * Detection mode for low inodes number available
     */
    detectionMode?: string;
    /**
     * Detect low inodes number available
     */
    enabled: boolean;
}

export interface DiskSpecificAnomaliesV2DiskLowInodesDetectionCustomThresholds {
    /**
     * Alert if the percentage of available inodes is lower than this threshold in 3 out of 5 samples
     */
    freeInodesPercentage: number;
}

export interface DiskSpecificAnomaliesV2DiskLowSpaceDetection {
    /**
     * no documentation available
     */
    customThresholds?: outputs.DiskSpecificAnomaliesV2DiskLowSpaceDetectionCustomThresholds;
    /**
     * Detection mode for low disk space
     */
    detectionMode?: string;
    /**
     * Detect low disk space
     */
    enabled: boolean;
}

export interface DiskSpecificAnomaliesV2DiskLowSpaceDetectionCustomThresholds {
    /**
     * Alert if free disk space is lower than this percentage in 3 out of 5 samples
     */
    freeSpacePercentage: number;
}

export interface DiskSpecificAnomaliesV2DiskSlowWritesAndReadsDetection {
    /**
     * no documentation available
     */
    customThresholds?: outputs.DiskSpecificAnomaliesV2DiskSlowWritesAndReadsDetectionCustomThresholds;
    /**
     * Detection mode for slow running disks
     */
    detectionMode?: string;
    /**
     * Detect slow-running disks
     */
    enabled: boolean;
}

export interface DiskSpecificAnomaliesV2DiskSlowWritesAndReadsDetectionCustomThresholds {
    /**
     * Alert if disk read time or write time is higher than this threshold in 3 out of 5 samples
     */
    writeAndReadTime: number;
}

export interface EnvironmentQuotas {
    /**
     * Davis Data Units consumption and quota information on environment level. Not set (and not editable) if Davis data units is not enabled
     */
    ddus?: outputs.EnvironmentQuotasDdus;
    /**
     * DEM units consumption and quota information on environment level
     */
    demUnits?: outputs.EnvironmentQuotasDemUnits;
    /**
     * Host units consumption and quota information on environment level
     */
    hostUnits?: number;
    /**
     * Log Monitoring consumption and quota information on environment level. Not set (and not editable) if Log monitoring is not enabled. Not set (and not editable) if Log monitoring is migrated to Davis data on license level
     */
    logs?: outputs.EnvironmentQuotasLogs;
    /**
     * Synthetic monitors consumption and quota information on environment level. Not set (and not editable) if neither Synthetic nor DEM units is enabled
     */
    synthetic?: outputs.EnvironmentQuotasSynthetic;
    /**
     * User sessions consumption and quota information on environment level
     */
    userSessions?: outputs.EnvironmentQuotasUserSessions;
}

export interface EnvironmentQuotasDdus {
    /**
     * Annual environment quota. Not set if unlimited
     */
    annual?: number;
    /**
     * Monthly environment quota. Not set if unlimited
     */
    monthly?: number;
}

export interface EnvironmentQuotasDemUnits {
    /**
     * Annual environment quota. Not set if unlimited
     */
    annual?: number;
    /**
     * Monthly environment quota. Not set if unlimited
     */
    monthly?: number;
}

export interface EnvironmentQuotasLogs {
    /**
     * Annual environment quota. Not set if unlimited
     */
    annual?: number;
    /**
     * Monthly environment quota. Not set if unlimited
     */
    monthly?: number;
}

export interface EnvironmentQuotasSynthetic {
    /**
     * Annual environment quota. Not set if unlimited
     */
    annual?: number;
    /**
     * Monthly environment quota. Not set if unlimited
     */
    monthly?: number;
}

export interface EnvironmentQuotasUserSessions {
    /**
     * Annual environment quota. Not set if unlimited
     */
    annual?: number;
    /**
     * Monthly environment quota. Not set if unlimited
     */
    monthly?: number;
}

export interface EnvironmentStorage {
    limits?: outputs.EnvironmentStorageLimits;
    retention?: outputs.EnvironmentStorageRetention;
    /**
     * Maximum number of newly monitored entry point PurePaths captured per process/minute on environment level. Can be set to any value from 100 to 100000
     */
    transactions: number;
    /**
     * Maximum number of user actions generated per minute on environment level. Can be set to any value from 1 to 2147483646 or left unlimited by omitting this property
     */
    userActions?: number;
}

export interface EnvironmentStorageLimits {
    /**
     * Log Monitoring consumption and quota information on environment level. Not set (and not editable) if Log monitoring is not enabled. Not set (and not editable) if Log monitoring is migrated to Davis data on license level
     */
    logs?: number;
    /**
     * Session replay storage usage and limit information on environment level in bytes. 0 for unlimited.
     */
    sessionReplay?: number;
    /**
     * Session replay storage usage and limit information on environment level in bytes. 0 for unlimited.
     */
    symbolFiles?: number;
    /**
     * Transaction storage usage and limit information on environment level in bytes. 0 for unlimited.
     */
    transactions?: number;
}

export interface EnvironmentStorageRetention {
    /**
     * Log Monitoring consumption and quota information on environment level. Not set (and not editable) if Log monitoring is not enabled. Not set (and not editable) if Log monitoring is migrated to Davis data on license level
     */
    logs?: number;
    /**
     * Real user monitoring retention settings on environment level in days. Can be set to any value from 1 to 35 days
     */
    rum: number;
    /**
     * Service code level retention settings on environment level in days. Service code level retention time can't be greater than service request level retention time and both can't exceed one year
     */
    serviceCodeLevel: number;
    /**
     * Service request level retention settings on environment level in days. Service code level retention time can't be greater than service request level retention time and both can't exceed one year
     */
    serviceRequestLevel: number;
    /**
     * Session replay storage usage and limit information on environment level in bytes. 0 for unlimited.
     */
    sessionReplay: number;
    /**
     * Synthetic monitors consumption and quota information on environment level. Not set (and not editable) if neither Synthetic nor DEM units is enabled
     */
    synthetic: number;
}

export interface FailureDetectionParametersBrokenLinks {
    /**
     * If your application relies on other hosts at other domains, add the associated domain names here. Once configured, Dynatrace will consider 404s thrown by hosts at these domains to be service failures related to your application.
     */
    brokenLinkDomains?: string[];
    /**
     * Consider 404 HTTP response codes as failures
     */
    http404NotFoundFailures: boolean;
}

export interface FailureDetectionParametersExceptionRules {
    /**
     * Some custom error situations are only detectable via a return value or other means. To support such cases, [define a request attribute](https://dt-url.net/ys5k0p4y) that captures the required data. Then define a custom error rule that determines if the request has failed based on the value of the request attribute.
     */
    customErrorRules?: outputs.FailureDetectionParametersExceptionRulesCustomErrorRules;
    /**
     * There may be situations where your application code handles exceptions gracefully in a manner that these failures aren't detected by Dynatrace. Use this setting to define specific gracefully-handled exceptions that should be treated as service failures.
     */
    customHandledExceptions?: outputs.FailureDetectionParametersExceptionRulesCustomHandledExceptions;
    /**
     * Ignore all exceptions
     */
    ignoreAllExceptions: boolean;
    /**
     * Ignore span failure detection
     */
    ignoreSpanFailureDetection: boolean;
    /**
     * Some exceptions that are thrown by legacy or 3rd-party code indicate a specific response, not an error. Use this setting to instruct Dynatrace to treat such exceptions as non-failed requests.. If an exception matching any of the defined patterns occurs in a request, it will not be considered as a failure. Other exceptions occurring at the same request might still mark the request as failed.
     */
    ignoredExceptions?: outputs.FailureDetectionParametersExceptionRulesIgnoredExceptions;
    /**
     * Define exceptions which indicate that a service call should not be considered as failed. E.g. an exception indicating that the client aborted the operation.. If an exception matching any of the defined patterns occurs on the entry node of the service, it will be considered successful. Compared to ignored exceptions, the request will be considered successful even if other exceptions occur in the same request.
     */
    successForcingExceptions?: outputs.FailureDetectionParametersExceptionRulesSuccessForcingExceptions;
}

export interface FailureDetectionParametersExceptionRulesCustomErrorRules {
    customErrorRules: outputs.FailureDetectionParametersExceptionRulesCustomErrorRulesCustomErrorRule[];
}

export interface FailureDetectionParametersExceptionRulesCustomErrorRulesCustomErrorRule {
    /**
     * Request attribute condition
     */
    condition: outputs.FailureDetectionParametersExceptionRulesCustomErrorRulesCustomErrorRuleCondition;
    /**
     * Request attribute
     */
    requestAttribute: string;
}

export interface FailureDetectionParametersExceptionRulesCustomErrorRulesCustomErrorRuleCondition {
    /**
     * Case sensitive
     */
    caseSensitive?: boolean;
    /**
     * Apply this comparison
     */
    compareOperationType: string;
    /**
     * Value
     */
    doubleValue?: number;
    /**
     * Value
     */
    intValue?: number;
    /**
     * Value
     */
    textValue?: string;
}

export interface FailureDetectionParametersExceptionRulesCustomHandledExceptions {
    customHandledExceptions: outputs.FailureDetectionParametersExceptionRulesCustomHandledExceptionsCustomHandledException[];
}

export interface FailureDetectionParametersExceptionRulesCustomHandledExceptionsCustomHandledException {
    /**
     * The pattern will match if it is contained within the actual class name.
     */
    classPattern?: string;
    /**
     * Optionally, define an exception message pattern. The pattern will match if the actual exception message contains the pattern.
     */
    messagePattern?: string;
}

export interface FailureDetectionParametersExceptionRulesIgnoredExceptions {
    customHandledExceptions: outputs.FailureDetectionParametersExceptionRulesIgnoredExceptionsCustomHandledException[];
}

export interface FailureDetectionParametersExceptionRulesIgnoredExceptionsCustomHandledException {
    /**
     * The pattern will match if it is contained within the actual class name.
     */
    classPattern?: string;
    /**
     * Optionally, define an exception message pattern. The pattern will match if the actual exception message contains the pattern.
     */
    messagePattern?: string;
}

export interface FailureDetectionParametersExceptionRulesSuccessForcingExceptions {
    customHandledExceptions: outputs.FailureDetectionParametersExceptionRulesSuccessForcingExceptionsCustomHandledException[];
}

export interface FailureDetectionParametersExceptionRulesSuccessForcingExceptionsCustomHandledException {
    /**
     * The pattern will match if it is contained within the actual class name.
     */
    classPattern?: string;
    /**
     * Optionally, define an exception message pattern. The pattern will match if the actual exception message contains the pattern.
     */
    messagePattern?: string;
}

export interface FailureDetectionParametersHttpResponseCodes {
    /**
     * HTTP response codes which indicate client side errors
     */
    clientSideErrors: string;
    /**
     * Treat missing HTTP response code as client side error
     */
    failOnMissingResponseCodeClientSide: boolean;
    /**
     * Treat missing HTTP response code as server side errors
     */
    failOnMissingResponseCodeServerSide: boolean;
    /**
     * HTTP response codes which indicate an error on the server side
     */
    serverSideErrors: string;
}

export interface FailureDetectionRulesConditions {
    conditions: outputs.FailureDetectionRulesConditionsCondition[];
}

export interface FailureDetectionRulesConditionsCondition {
    /**
     * Possible Values: `PG_NAME`, `PG_TAG`, `SERVICE_MANAGEMENT_ZONE`, `SERVICE_NAME`, `SERVICE_TAG`, `SERVICE_TYPE`
     */
    attribute: string;
    /**
     * Condition to check the attribute against
     */
    predicate: outputs.FailureDetectionRulesConditionsConditionPredicate;
}

export interface FailureDetectionRulesConditionsConditionPredicate {
    /**
     * Case sensitive
     */
    caseSensitive?: boolean;
    /**
     * Management zones
     */
    managementZones?: string[];
    /**
     * Predicate type
     */
    predicateType: string;
    /**
     * Service types
     */
    serviceTypes?: string[];
    /**
     * Tag keys
     */
    tagKeys?: string[];
    /**
     * Tags (exact match)
     */
    tags?: string[];
    /**
     * Names
     */
    textValues?: string[];
}

export interface GenericRelationshipsSources {
    sources: outputs.GenericRelationshipsSourcesSource[];
}

export interface GenericRelationshipsSourcesSource {
    /**
     * Specify a filter that needs to match in order for the extraction to happen.. Two different filters are supported: `$eq(value)` will ensure that the source matches exactly 'value', while `$prefix(value)` will ensure that the source begins with exactly 'value'.
     * If your value contains the characters '(', ')' or '~', you need to escape them by adding a '~' in front of them.
     */
    condition?: string;
    /**
     * Specify all properties which should be compared. If all mapping rules match a relationship between entities will be created.
     */
    mappingRules?: outputs.GenericRelationshipsSourcesSourceMappingRules;
    /**
     * Possible Values: `BusinessEvents`, `Entities`, `Events`, `Logs`, `Metrics`, `Spans`, `Topology`
     */
    sourceType: string;
}

export interface GenericRelationshipsSourcesSourceMappingRules {
    mappingRules: outputs.GenericRelationshipsSourcesSourceMappingRulesMappingRule[];
}

export interface GenericRelationshipsSourcesSourceMappingRulesMappingRule {
    /**
     * The case-sensitive name of a property of the destination type.
     */
    destinationProperty: string;
    /**
     * Possible Values: `Leavetextas_is`, `Tolowercase`, `Touppercase`
     */
    destinationTransformation: string;
    /**
     * The case-sensitive name of a property of the source type.
     */
    sourceProperty: string;
    /**
     * Possible Values: `Leavetextas_is`, `Tolowercase`, `Touppercase`
     */
    sourceTransformation: string;
}

export interface GenericTypesRules {
    rules: outputs.GenericTypesRulesRule[];
}

export interface GenericTypesRulesRule {
    attributes?: outputs.GenericTypesRulesRuleAttributes;
    iconPattern?: string;
    /**
     * ID patterns are comprised of static text and placeholders referring to dimensions in the ingest data. An ID pattern **must** contain at least one placeholder to ensure that different entities will be created.. Take care that the pattern results in the same ID for the same entity. For example, using timestamp or counter-like dimensions as part of the ID would lead to the creation of new entities for each ingest data and is strongly discouraged!
     */
    idPattern: string;
    instanceNamePattern?: string;
    requiredDimensions?: outputs.GenericTypesRulesRuleRequiredDimensions;
    role?: string;
    sources: outputs.GenericTypesRulesRuleSources;
}

export interface GenericTypesRulesRuleAttributes {
    attributes: outputs.GenericTypesRulesRuleAttributesAttribute[];
}

export interface GenericTypesRulesRuleAttributesAttribute {
    /**
     * The human readable attribute name for this extraction rule. Leave blank to use the key as the display name.
     */
    displayName?: string;
    /**
     * The attribute key is the unique name of the attribute.
     */
    key: string;
    /**
     * Pattern for specifying the value for the extracted attribute. Can be a static value, placeholders or a combination of both.
     */
    pattern: string;
}

export interface GenericTypesRulesRuleRequiredDimensions {
    requiredDimensions: outputs.GenericTypesRulesRuleRequiredDimensionsRequiredDimension[];
}

export interface GenericTypesRulesRuleRequiredDimensionsRequiredDimension {
    /**
     * The attribute key is the unique name of the attribute.
     */
    key: string;
    /**
     * A dimension value pattern which needs to exist in the ingest data to match this filter.
     */
    valuePattern?: string;
}

export interface GenericTypesRulesRuleSources {
    sources: outputs.GenericTypesRulesRuleSourcesSource[];
}

export interface GenericTypesRulesRuleSourcesSource {
    /**
     * Specify a filter that needs to match in order for the extraction to happen.. Three different filters are supported: `$eq(value)` will ensure that the source matches exactly 'value', `$prefix(value)` will ensure that the source begins with exactly 'value', '$exists()' will ensure that any source with matching dimension filter exists.
     * If your value contains the characters '(', ')' or '~', you need to escape them by adding a '~' in front of them.
     */
    condition?: string;
    /**
     * Possible Values: `BusinessEvents`, `Entities`, `Events`, `Logs`, `Metrics`, `Spans`, `Topology`
     */
    sourceType: string;
}

export interface GetAlertingProfilesValue {
    id: string;
    legacyId: string;
    managementZoneId: string;
    managementZoneLegacyId: string;
    name: string;
}

export interface GetDocumentsValue {
    id: string;
    name: string;
    owner: string;
    type: string;
}

export interface GetEntitiesEntity {
    displayName?: string;
    entityId?: string;
    lastSeenTms?: number;
    properties: {[key: string]: string};
    tags?: outputs.GetEntitiesEntityTag[];
    type?: string;
}

export interface GetEntitiesEntityTag {
    tags?: outputs.GetEntitiesEntityTagTag[];
}

export interface GetEntitiesEntityTagTag {
    context: string;
    key: string;
    stringRepresentation?: string;
    value?: string;
}

export interface GetHubItemsItem {
    activationLink: string;
    artifactId: string;
    authorLogo: string;
    authorName: string;
    clusterCompatible: boolean;
    comingSoon: boolean;
    description: string;
    documentationLink: string;
    hasDescriptionBlocks: boolean;
    itemId: string;
    logo: string;
    marketingLink: string;
    name: string;
    notCompatibleReason: string;
    tags: string[];
    type: string;
}

export interface GetManagementZonesValue {
    description: string;
    id: string;
    legacyId: string;
    name: string;
}

export interface GetRemoteEnvironmentsRemoteEnvironment {
    name: string;
    networkScope: string;
    token: string;
    uri: string;
}

export interface GetSyntheticLocationsLocations {
    /**
     * The cloud provider where the location is hosted.
     */
    cloudPlatform: string;
    entityId?: string;
    ips: string[];
    name?: string;
    stage: string;
    status: string;
    type?: string;
}

export interface GetSyntheticNodesNode {
    activeGateVersion: string;
    autoUpdate: boolean;
    browserMonitors: boolean;
    healthCheckStatus: string;
    hostname: string;
    id: string;
    ips: string[];
    oneAgentRouting: boolean;
    operatingSystem: string;
    playerVersion: string;
    status: string;
    version: string;
}

export interface GrailMetricsAllowlistAllowRules {
    allowRules: outputs.GrailMetricsAllowlistAllowRulesAllowRule[];
}

export interface GrailMetricsAllowlistAllowRulesAllowRule {
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Metric key
     */
    metricKey: string;
    /**
     * Possible Values: `CONTAINS`, `EQUALS`, `STARTSWITH`
     */
    pattern: string;
}

export interface HostAnomaliesConnections {
    /**
     * The detection is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Alert (`true`) on graceful host shutdowns
     */
    enabledOnGracefulShutdowns: boolean;
}

export interface HostAnomaliesCpu {
    /**
     * The detection is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Custom thresholds for high CPU saturation. If not set then the automatic mode is used
     */
    thresholds?: outputs.HostAnomaliesCpuThresholds;
}

export interface HostAnomaliesCpuThresholds {
    /**
     * Alert if CPU usage is higher than *X*% in 3 out of 5 samples
     */
    saturation: number;
}

export interface HostAnomaliesDisks {
    /**
     * Configuration of low disk inodes number detection
     */
    inodes?: outputs.HostAnomaliesDisksInodes;
    /**
     * Configuration of low disk space detection
     */
    space?: outputs.HostAnomaliesDisksSpace;
    /**
     * Configuration of slow running disks detection
     */
    speed?: outputs.HostAnomaliesDisksSpeed;
}

export interface HostAnomaliesDisksInodes {
    /**
     * The detection is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Custom thresholds for high CPU saturation. If not set then the automatic mode is used
     */
    thresholds?: outputs.HostAnomaliesDisksInodesThresholds;
}

export interface HostAnomaliesDisksInodesThresholds {
    /**
     * Alert if percentage of available inodes is lower than *X*% in 3 out of 5 samples
     */
    percentage: number;
}

export interface HostAnomaliesDisksSpace {
    /**
     * The detection is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Custom thresholds for high CPU saturation. If not set then the automatic mode is used
     */
    thresholds?: outputs.HostAnomaliesDisksSpaceThresholds;
}

export interface HostAnomaliesDisksSpaceThresholds {
    /**
     * Alert if percentage of available inodes is lower than *X*% in 3 out of 5 samples
     */
    percentage: number;
}

export interface HostAnomaliesDisksSpeed {
    /**
     * The detection is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Custom thresholds for high CPU saturation. If not set then the automatic mode is used
     */
    thresholds?: outputs.HostAnomaliesDisksSpeedThresholds;
}

export interface HostAnomaliesDisksSpeedThresholds {
    /**
     * Alert if disk read/write time is higher than *X* milliseconds in 3 out of 5 samples
     */
    writeAndReadTime: number;
}

export interface HostAnomaliesGc {
    /**
     * The detection is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Custom thresholds for high GC activity. If not set, automatic mode is used.   Meeting **any** of these conditions triggers an alert
     */
    thresholds?: outputs.HostAnomaliesGcThresholds;
}

export interface HostAnomaliesGcThresholds {
    /**
     * GC suspension is higher than *X*% in 3 out of 5 samples
     */
    suspensionPercentage: number;
    /**
     * GC time is higher than *X*% in 3 out of 5 samples
     */
    timePercentage: number;
}

export interface HostAnomaliesJava {
    /**
     * Configuration of Java out of memory problems detection
     */
    outOfMemory?: outputs.HostAnomaliesJavaOutOfMemory;
    /**
     * Configuration of Java out of threads problems detection
     */
    outOfThreads?: outputs.HostAnomaliesJavaOutOfThreads;
}

export interface HostAnomaliesJavaOutOfMemory {
    /**
     * The detection is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Custom thresholds for high CPU saturation. If not set then the automatic mode is used
     */
    thresholds?: outputs.HostAnomaliesJavaOutOfMemoryThresholds;
}

export interface HostAnomaliesJavaOutOfMemoryThresholds {
    /**
     * Alert if the number of Java out of memory exceptions is *X* per minute or higher
     */
    exceptionCount: number;
}

export interface HostAnomaliesJavaOutOfThreads {
    /**
     * The detection is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Custom thresholds for high CPU saturation. If not set then the automatic mode is used
     */
    thresholds?: outputs.HostAnomaliesJavaOutOfThreadsThresholds;
}

export interface HostAnomaliesJavaOutOfThreadsThresholds {
    /**
     * Alert if the number of Java out of memory exceptions is *X* per minute or higher
     */
    exceptionCount: number;
}

export interface HostAnomaliesMemory {
    /**
     * The detection is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Custom thresholds for high memory usage. If not set then the automatic mode is used. **Both** conditions must be met to trigger an alert
     */
    thresholds?: outputs.HostAnomaliesMemoryThresholds;
}

export interface HostAnomaliesMemoryThresholds {
    /**
     * Custom thresholds for Linux
     */
    linux: outputs.HostAnomaliesMemoryThresholdsLinux;
    /**
     * Custom thresholds for Windows
     */
    windows: outputs.HostAnomaliesMemoryThresholdsWindows;
}

export interface HostAnomaliesMemoryThresholdsLinux {
    /**
     * Memory page fault rate is higher than *X* faults per second
     */
    pageFaults: number;
    /**
     * Memory usage is higher than *X*%
     */
    usage: number;
}

export interface HostAnomaliesMemoryThresholdsWindows {
    /**
     * Memory page fault rate is higher than *X* faults per second
     */
    pageFaults: number;
    /**
     * Memory usage is higher than *X*%
     */
    usage: number;
}

export interface HostAnomaliesNetwork {
    /**
     * Configuration of TCP connectivity problems detection
     */
    connectivity?: outputs.HostAnomaliesNetworkConnectivity;
    /**
     * Configuration of high number of dropped packets detection
     */
    droppedPackets?: outputs.HostAnomaliesNetworkDroppedPackets;
    /**
     * Configuration of high number of network errors detection
     */
    errors?: outputs.HostAnomaliesNetworkErrors;
    /**
     * Configuration of high retransmission rate detection
     */
    retransmission?: outputs.HostAnomaliesNetworkRetransmission;
    /**
     * Configuration of high network utilization detection
     */
    utilization?: outputs.HostAnomaliesNetworkUtilization;
}

export interface HostAnomaliesNetworkConnectivity {
    /**
     * The detection is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Custom thresholds for high CPU saturation. If not set then the automatic mode is used
     */
    thresholds?: outputs.HostAnomaliesNetworkConnectivityThresholds;
}

export interface HostAnomaliesNetworkConnectivityThresholds {
    /**
     * Number of failed connections is higher than *X* connections per minute in 3 out of 5 samples
     */
    failedConnections: number;
    /**
     * Percentage of new connection failures is higher than *X*% in 3 out of 5 samples
     */
    newConnectionFailures: number;
}

export interface HostAnomaliesNetworkDroppedPackets {
    /**
     * The detection is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Custom thresholds for high CPU saturation. If not set then the automatic mode is used
     */
    thresholds?: outputs.HostAnomaliesNetworkDroppedPacketsThresholds;
}

export interface HostAnomaliesNetworkDroppedPacketsThresholds {
    /**
     * Configuration of high number of dropped packets detection
     */
    droppedPackets: number;
    /**
     * Total receive/transmit packets rate is higher than *X* packets per second in 3 out of 5 samples
     */
    totalPacketsRate: number;
}

export interface HostAnomaliesNetworkErrors {
    /**
     * The detection is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Custom thresholds for high CPU saturation. If not set then the automatic mode is used
     */
    thresholds?: outputs.HostAnomaliesNetworkErrorsThresholds;
}

export interface HostAnomaliesNetworkErrorsThresholds {
    /**
     * Receive/transmit error packet percentage is higher than *X*% in 3 out of 5 samples
     */
    errorsPercentage: number;
    /**
     * Total receive/transmit packets rate is higher than *X* packets per second in 3 out of 5 samples
     */
    totalPacketsRate: number;
}

export interface HostAnomaliesNetworkRetransmission {
    /**
     * The detection is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Custom thresholds for high CPU saturation. If not set then the automatic mode is used
     */
    thresholds?: outputs.HostAnomaliesNetworkRetransmissionThresholds;
}

export interface HostAnomaliesNetworkRetransmissionThresholds {
    /**
     * Retransmission rate is higher than *X*% in 3 out of 5 samples
     */
    retransmissionRate: number;
    /**
     * Number of retransmitted packets is higher than *X* packets per minute in 3 out of 5 samples
     */
    retransmittedPackets: number;
}

export interface HostAnomaliesNetworkUtilization {
    /**
     * The detection is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Custom thresholds for high CPU saturation. If not set then the automatic mode is used
     */
    thresholds?: outputs.HostAnomaliesNetworkUtilizationThresholds;
}

export interface HostAnomaliesNetworkUtilizationThresholds {
    /**
     * Configuration of high network utilization detection
     */
    utilization: number;
}

export interface HostAnomaliesV2Host {
    /**
     * no documentation available
     */
    connectionLostDetection: outputs.HostAnomaliesV2HostConnectionLostDetection;
    /**
     * no documentation available
     */
    highCpuSaturationDetection: outputs.HostAnomaliesV2HostHighCpuSaturationDetection;
    /**
     * no documentation available
     */
    highGcActivityDetection: outputs.HostAnomaliesV2HostHighGcActivityDetection;
    /**
     * no documentation available
     */
    highMemoryDetection: outputs.HostAnomaliesV2HostHighMemoryDetection;
    /**
     * no documentation available
     */
    highSystemLoadDetection: outputs.HostAnomaliesV2HostHighSystemLoadDetection;
    /**
     * no documentation available
     */
    outOfMemoryDetection: outputs.HostAnomaliesV2HostOutOfMemoryDetection;
    /**
     * no documentation available
     */
    outOfThreadsDetection: outputs.HostAnomaliesV2HostOutOfThreadsDetection;
}

export interface HostAnomaliesV2HostConnectionLostDetection {
    /**
     * Detect host or monitoring connection lost problems
     */
    enabled: boolean;
    /**
     * Graceful host shutdowns
     */
    onGracefulShutdowns?: string;
}

export interface HostAnomaliesV2HostHighCpuSaturationDetection {
    /**
     * no documentation available
     */
    customThresholds?: outputs.HostAnomaliesV2HostHighCpuSaturationDetectionCustomThresholds;
    /**
     * Detection mode for CPU saturation
     */
    detectionMode?: string;
    /**
     * Detect host or monitoring connection lost problems
     */
    enabled: boolean;
}

export interface HostAnomaliesV2HostHighCpuSaturationDetectionCustomThresholds {
    /**
     * Alert if the CPU usage is higher than this threshold for the defined amount of samples
     */
    cpuSaturation: number;
    /**
     * no documentation available
     */
    eventThresholds: outputs.HostAnomaliesV2HostHighCpuSaturationDetectionCustomThresholdsEventThresholds;
}

export interface HostAnomaliesV2HostHighCpuSaturationDetectionCustomThresholdsEventThresholds {
    /**
     * The number of **10-second samples** that form the sliding evaluation window for dealerting.
     */
    dealertingEvaluationWindow: number;
    /**
     * The number of **10-second samples** within the evaluation window that must be lower the threshold to close an event
     */
    dealertingSamples: number;
    /**
     * The number of **10-second samples** that form the sliding evaluation window to detect violating samples.
     */
    violatingEvaluationWindow: number;
    /**
     * The number of **10-second samples** within the evaluation window that must exceed the threshold to trigger an event
     */
    violatingSamples: number;
}

export interface HostAnomaliesV2HostHighGcActivityDetection {
    /**
     * no documentation available
     */
    customThresholds?: outputs.HostAnomaliesV2HostHighGcActivityDetectionCustomThresholds;
    /**
     * Detection mode for CPU saturation
     */
    detectionMode?: string;
    /**
     * Detect host or monitoring connection lost problems
     */
    enabled: boolean;
}

export interface HostAnomaliesV2HostHighGcActivityDetectionCustomThresholds {
    /**
     * no documentation available
     */
    eventThresholds: outputs.HostAnomaliesV2HostHighGcActivityDetectionCustomThresholdsEventThresholds;
    /**
     * Alert if the GC suspension is higher than this threshold
     */
    gcSuspensionPercentage: number;
    /**
     * Alert if GC time is higher than this threshold
     */
    gcTimePercentage: number;
}

export interface HostAnomaliesV2HostHighGcActivityDetectionCustomThresholdsEventThresholds {
    /**
     * The number of **10-second samples** that form the sliding evaluation window for dealerting.
     */
    dealertingEvaluationWindow: number;
    /**
     * The number of **10-second samples** within the evaluation window that must be lower the threshold to close an event
     */
    dealertingSamples: number;
    /**
     * The number of **10-second samples** that form the sliding evaluation window to detect violating samples.
     */
    violatingEvaluationWindow: number;
    /**
     * The number of **10-second samples** within the evaluation window that must exceed the threshold to trigger an event
     */
    violatingSamples: number;
}

export interface HostAnomaliesV2HostHighMemoryDetection {
    /**
     * no documentation available
     */
    customThresholds?: outputs.HostAnomaliesV2HostHighMemoryDetectionCustomThresholds;
    /**
     * Detection mode for CPU saturation
     */
    detectionMode?: string;
    /**
     * Detect host or monitoring connection lost problems
     */
    enabled: boolean;
}

export interface HostAnomaliesV2HostHighMemoryDetectionCustomThresholds {
    /**
     * no documentation available
     */
    eventThresholds: outputs.HostAnomaliesV2HostHighMemoryDetectionCustomThresholdsEventThresholds;
    /**
     * Alert if the memory page fault rate on Unix systems is higher than this threshold for the defined amount of samples
     */
    pageFaultsPerSecondNonWindows: number;
    /**
     * Alert if the memory page fault rate on Windows is higher than this threshold for the defined amount of samples
     */
    pageFaultsPerSecondWindows: number;
    /**
     * Alert if the memory usage on Unix systems is higher than this threshold
     */
    usedMemoryPercentageNonWindows: number;
    /**
     * Alert if the memory usage on Windows is higher than this threshold
     */
    usedMemoryPercentageWindows: number;
}

export interface HostAnomaliesV2HostHighMemoryDetectionCustomThresholdsEventThresholds {
    /**
     * The number of **10-second samples** that form the sliding evaluation window for dealerting.
     */
    dealertingEvaluationWindow: number;
    /**
     * The number of **10-second samples** within the evaluation window that must be lower the threshold to close an event
     */
    dealertingSamples: number;
    /**
     * The number of **10-second samples** that form the sliding evaluation window to detect violating samples.
     */
    violatingEvaluationWindow: number;
    /**
     * The number of **10-second samples** within the evaluation window that must exceed the threshold to trigger an event
     */
    violatingSamples: number;
}

export interface HostAnomaliesV2HostHighSystemLoadDetection {
    /**
     * no documentation available
     */
    customThresholds?: outputs.HostAnomaliesV2HostHighSystemLoadDetectionCustomThresholds;
    /**
     * Detection mode for CPU saturation
     */
    detectionMode?: string;
    /**
     * Detect host or monitoring connection lost problems
     */
    enabled: boolean;
}

export interface HostAnomaliesV2HostHighSystemLoadDetectionCustomThresholds {
    /**
     * no documentation available
     */
    eventThresholds: outputs.HostAnomaliesV2HostHighSystemLoadDetectionCustomThresholdsEventThresholds;
    /**
     * Alert if the System Load / Logical cpu core is higher than this threshold for the defined amount of samples
     */
    systemLoad: number;
}

export interface HostAnomaliesV2HostHighSystemLoadDetectionCustomThresholdsEventThresholds {
    /**
     * The number of **10-second samples** that form the sliding evaluation window for dealerting.
     */
    dealertingEvaluationWindow: number;
    /**
     * The number of **10-second samples** within the evaluation window that must be lower the threshold to close an event
     */
    dealertingSamples: number;
    /**
     * The number of **10-second samples** that form the sliding evaluation window to detect violating samples.
     */
    violatingEvaluationWindow: number;
    /**
     * The number of **10-second samples** within the evaluation window that must exceed the threshold to trigger an event
     */
    violatingSamples: number;
}

export interface HostAnomaliesV2HostOutOfMemoryDetection {
    /**
     * no documentation available
     */
    customThresholds?: outputs.HostAnomaliesV2HostOutOfMemoryDetectionCustomThresholds;
    /**
     * Detection mode for CPU saturation
     */
    detectionMode?: string;
    /**
     * Detect host or monitoring connection lost problems
     */
    enabled: boolean;
}

export interface HostAnomaliesV2HostOutOfMemoryDetectionCustomThresholds {
    /**
     * no documentation available
     */
    eventThresholds: outputs.HostAnomaliesV2HostOutOfMemoryDetectionCustomThresholdsEventThresholds;
    /**
     * Alert if the number of Java out-of-memory exceptions is at least this value
     */
    outOfMemoryExceptionsNumber: number;
}

export interface HostAnomaliesV2HostOutOfMemoryDetectionCustomThresholdsEventThresholds {
    /**
     * The number of **10-second samples** that form the sliding evaluation window for dealerting.
     */
    dealertingEvaluationWindow: number;
    /**
     * The number of **10-second samples** within the evaluation window that must be lower the threshold to close an event
     */
    dealertingSamples: number;
    /**
     * The number of **10-second samples** that form the sliding evaluation window to detect violating samples.
     */
    violatingEvaluationWindow: number;
    /**
     * The number of **10-second samples** within the evaluation window that must exceed the threshold to trigger an event
     */
    violatingSamples: number;
}

export interface HostAnomaliesV2HostOutOfThreadsDetection {
    /**
     * no documentation available
     */
    customThresholds?: outputs.HostAnomaliesV2HostOutOfThreadsDetectionCustomThresholds;
    /**
     * Detection mode for CPU saturation
     */
    detectionMode?: string;
    /**
     * Detect host or monitoring connection lost problems
     */
    enabled: boolean;
}

export interface HostAnomaliesV2HostOutOfThreadsDetectionCustomThresholds {
    /**
     * no documentation available
     */
    eventThresholds: outputs.HostAnomaliesV2HostOutOfThreadsDetectionCustomThresholdsEventThresholds;
    /**
     * Alert if the number of Java out-of-threads exceptions is at least this value
     */
    outOfThreadsExceptionsNumber: number;
}

export interface HostAnomaliesV2HostOutOfThreadsDetectionCustomThresholdsEventThresholds {
    /**
     * The number of **10-second samples** that form the sliding evaluation window for dealerting.
     */
    dealertingEvaluationWindow: number;
    /**
     * The number of **10-second samples** within the evaluation window that must be lower the threshold to close an event
     */
    dealertingSamples: number;
    /**
     * The number of **10-second samples** that form the sliding evaluation window to detect violating samples.
     */
    violatingEvaluationWindow: number;
    /**
     * The number of **10-second samples** within the evaluation window that must exceed the threshold to trigger an event
     */
    violatingSamples: number;
}

export interface HostAnomaliesV2Network {
    /**
     * no documentation available
     */
    highNetworkDetection: outputs.HostAnomaliesV2NetworkHighNetworkDetection;
    /**
     * no documentation available
     */
    networkDroppedPacketsDetection: outputs.HostAnomaliesV2NetworkNetworkDroppedPacketsDetection;
    /**
     * no documentation available
     */
    networkErrorsDetection: outputs.HostAnomaliesV2NetworkNetworkErrorsDetection;
    /**
     * no documentation available
     */
    networkHighRetransmissionDetection: outputs.HostAnomaliesV2NetworkNetworkHighRetransmissionDetection;
    /**
     * no documentation available
     */
    networkTcpProblemsDetection: outputs.HostAnomaliesV2NetworkNetworkTcpProblemsDetection;
}

export interface HostAnomaliesV2NetworkHighNetworkDetection {
    /**
     * no documentation available
     */
    customThresholds?: outputs.HostAnomaliesV2NetworkHighNetworkDetectionCustomThresholds;
    /**
     * Detection mode for CPU saturation
     */
    detectionMode?: string;
    /**
     * Detect host or monitoring connection lost problems
     */
    enabled: boolean;
}

export interface HostAnomaliesV2NetworkHighNetworkDetectionCustomThresholds {
    /**
     * Alert if sent/received traffic utilization is higher than this threshold for the defined amount of samples
     */
    errorsPercentage: number;
    /**
     * no documentation available
     */
    eventThresholds: outputs.HostAnomaliesV2NetworkHighNetworkDetectionCustomThresholdsEventThresholds;
}

export interface HostAnomaliesV2NetworkHighNetworkDetectionCustomThresholdsEventThresholds {
    /**
     * The number of **10-second samples** that form the sliding evaluation window for dealerting.
     */
    dealertingEvaluationWindow: number;
    /**
     * The number of **10-second samples** within the evaluation window that must be lower the threshold to close an event
     */
    dealertingSamples: number;
    /**
     * The number of **10-second samples** that form the sliding evaluation window to detect violating samples.
     */
    violatingEvaluationWindow: number;
    /**
     * The number of **10-second samples** within the evaluation window that must exceed the threshold to trigger an event
     */
    violatingSamples: number;
}

export interface HostAnomaliesV2NetworkNetworkDroppedPacketsDetection {
    /**
     * no documentation available
     */
    customThresholds?: outputs.HostAnomaliesV2NetworkNetworkDroppedPacketsDetectionCustomThresholds;
    /**
     * Detection mode for CPU saturation
     */
    detectionMode?: string;
    /**
     * Detect host or monitoring connection lost problems
     */
    enabled: boolean;
}

export interface HostAnomaliesV2NetworkNetworkDroppedPacketsDetectionCustomThresholds {
    /**
     * Receive/transmit dropped packet percentage threshold
     */
    droppedPacketsPercentage: number;
    /**
     * no documentation available
     */
    eventThresholds: outputs.HostAnomaliesV2NetworkNetworkDroppedPacketsDetectionCustomThresholdsEventThresholds;
    /**
     * Total packets rate threshold
     */
    totalPacketsRate: number;
}

export interface HostAnomaliesV2NetworkNetworkDroppedPacketsDetectionCustomThresholdsEventThresholds {
    /**
     * The number of **10-second samples** that form the sliding evaluation window for dealerting.
     */
    dealertingEvaluationWindow: number;
    /**
     * The number of **10-second samples** within the evaluation window that must be lower the threshold to close an event
     */
    dealertingSamples: number;
    /**
     * The number of **10-second samples** that form the sliding evaluation window to detect violating samples.
     */
    violatingEvaluationWindow: number;
    /**
     * The number of **10-second samples** within the evaluation window that must exceed the threshold to trigger an event
     */
    violatingSamples: number;
}

export interface HostAnomaliesV2NetworkNetworkErrorsDetection {
    /**
     * no documentation available
     */
    customThresholds?: outputs.HostAnomaliesV2NetworkNetworkErrorsDetectionCustomThresholds;
    /**
     * Detection mode for CPU saturation
     */
    detectionMode?: string;
    /**
     * Detect host or monitoring connection lost problems
     */
    enabled: boolean;
}

export interface HostAnomaliesV2NetworkNetworkErrorsDetectionCustomThresholds {
    /**
     * Alert if sent/received traffic utilization is higher than this threshold for the defined amount of samples
     */
    errorsPercentage: number;
    /**
     * no documentation available
     */
    eventThresholds: outputs.HostAnomaliesV2NetworkNetworkErrorsDetectionCustomThresholdsEventThresholds;
    /**
     * Total packets rate threshold
     */
    totalPacketsRate: number;
}

export interface HostAnomaliesV2NetworkNetworkErrorsDetectionCustomThresholdsEventThresholds {
    /**
     * The number of **10-second samples** that form the sliding evaluation window for dealerting.
     */
    dealertingEvaluationWindow: number;
    /**
     * The number of **10-second samples** within the evaluation window that must be lower the threshold to close an event
     */
    dealertingSamples: number;
    /**
     * The number of **10-second samples** that form the sliding evaluation window to detect violating samples.
     */
    violatingEvaluationWindow: number;
    /**
     * The number of **10-second samples** within the evaluation window that must exceed the threshold to trigger an event
     */
    violatingSamples: number;
}

export interface HostAnomaliesV2NetworkNetworkHighRetransmissionDetection {
    /**
     * no documentation available
     */
    customThresholds?: outputs.HostAnomaliesV2NetworkNetworkHighRetransmissionDetectionCustomThresholds;
    /**
     * Detection mode for CPU saturation
     */
    detectionMode?: string;
    /**
     * Detect host or monitoring connection lost problems
     */
    enabled: boolean;
}

export interface HostAnomaliesV2NetworkNetworkHighRetransmissionDetectionCustomThresholds {
    /**
     * no documentation available
     */
    eventThresholds: outputs.HostAnomaliesV2NetworkNetworkHighRetransmissionDetectionCustomThresholdsEventThresholds;
    /**
     * Retransmission rate threshold
     */
    retransmissionRatePercentage: number;
    /**
     * Number of retransmitted packets threshold
     */
    retransmittedPacketsNumberPerMinute: number;
}

export interface HostAnomaliesV2NetworkNetworkHighRetransmissionDetectionCustomThresholdsEventThresholds {
    /**
     * The number of **10-second samples** that form the sliding evaluation window for dealerting.
     */
    dealertingEvaluationWindow: number;
    /**
     * The number of **10-second samples** within the evaluation window that must be lower the threshold to close an event
     */
    dealertingSamples: number;
    /**
     * The number of **10-second samples** that form the sliding evaluation window to detect violating samples.
     */
    violatingEvaluationWindow: number;
    /**
     * The number of **10-second samples** within the evaluation window that must exceed the threshold to trigger an event
     */
    violatingSamples: number;
}

export interface HostAnomaliesV2NetworkNetworkTcpProblemsDetection {
    /**
     * no documentation available
     */
    customThresholds?: outputs.HostAnomaliesV2NetworkNetworkTcpProblemsDetectionCustomThresholds;
    /**
     * Detection mode for CPU saturation
     */
    detectionMode?: string;
    /**
     * Detect host or monitoring connection lost problems
     */
    enabled: boolean;
}

export interface HostAnomaliesV2NetworkNetworkTcpProblemsDetectionCustomThresholds {
    /**
     * no documentation available
     */
    eventThresholds: outputs.HostAnomaliesV2NetworkNetworkTcpProblemsDetectionCustomThresholdsEventThresholds;
    /**
     * Number of failed connections threshold
     */
    failedConnectionsNumberPerMinute: number;
    /**
     * New connection failure threshold
     */
    newConnectionFailuresPercentage: number;
}

export interface HostAnomaliesV2NetworkNetworkTcpProblemsDetectionCustomThresholdsEventThresholds {
    /**
     * The number of **10-second samples** that form the sliding evaluation window for dealerting.
     */
    dealertingEvaluationWindow: number;
    /**
     * The number of **10-second samples** within the evaluation window that must be lower the threshold to close an event
     */
    dealertingSamples: number;
    /**
     * The number of **10-second samples** that form the sliding evaluation window to detect violating samples.
     */
    violatingEvaluationWindow: number;
    /**
     * The number of **10-second samples** within the evaluation window that must exceed the threshold to trigger an event
     */
    violatingSamples: number;
}

export interface HostNamingCondition {
    conditions?: outputs.HostNamingConditionCondition[];
}

export interface HostNamingConditionCondition {
    /**
     * @deprecated You should use 'application_type' instead of 'application_type_comparison'. This attribute still exists for backwards compatibility.
     */
    applicationTypeComparisons?: outputs.HostNamingConditionConditionApplicationTypeComparison[];
    applicationTypes?: outputs.HostNamingConditionConditionApplicationType[];
    azureComputeModeComparisons?: outputs.HostNamingConditionConditionAzureComputeModeComparison[];
    /**
     * @deprecated You should use 'azure_compute_mode' instead of 'azure_compute_mode_comparison'. This attribute still exists for backwards compatibility.
     */
    azureComputeModes?: outputs.HostNamingConditionConditionAzureComputeMode[];
    /**
     * @deprecated You should use 'azure_sku' instead of 'azure_sku_comparision'. This attribute still exists for backwards compatibility.
     */
    azureSkuComparisions?: outputs.HostNamingConditionConditionAzureSkuComparision[];
    azureSkus?: outputs.HostNamingConditionConditionAzureSkus[];
    /**
     * @deprecated You should use 'comparison' instead of 'base_comparison_basic'. This attribute still exists for backwards compatibility.
     */
    baseComparisonBasics?: outputs.HostNamingConditionConditionBaseComparisonBasic[];
    /**
     * @deprecated 'base_condition_key' is deprecated. You should use 'key'
     */
    baseConditionKeys?: outputs.HostNamingConditionConditionBaseConditionKey[];
    /**
     * @deprecated You should use 'bitness' instead of 'bitness_comparision'. This attribute still exists for backwards compatibility.
     */
    bitnessComparisions?: outputs.HostNamingConditionConditionBitnessComparision[];
    bitnesses?: outputs.HostNamingConditionConditionBitness[];
    /**
     * @deprecated You should use 'cloud_type' instead of 'cloud_type_comparison'. This attribute still exists for backwards compatibility.
     */
    cloudTypeComparisons?: outputs.HostNamingConditionConditionCloudTypeComparison[];
    cloudTypes?: outputs.HostNamingConditionConditionCloudType[];
    comparisons?: outputs.HostNamingConditionConditionComparison[];
    /**
     * @deprecated You should use 'custom_application_type' instead of 'custom_application_type_comparison'. This attribute still exists for backwards compatibility.
     */
    customApplicationTypeComparisons?: outputs.HostNamingConditionConditionCustomApplicationTypeComparison[];
    customApplicationTypes?: outputs.HostNamingConditionConditionCustomApplicationType[];
    /**
     * @deprecated 'custom_host_metadata_condition_key' is deprecated. You should use 'custom_host_metadata'
     */
    customHostMetadataConditionKeys?: outputs.HostNamingConditionConditionCustomHostMetadataConditionKey[];
    customHostMetadatas?: outputs.HostNamingConditionConditionCustomHostMetadata[];
    /**
     * @deprecated 'custom_process_metadata_condition_key' is deprecated. You should use 'custom_process_metadata'
     */
    customProcessMetadataConditionKeys?: outputs.HostNamingConditionConditionCustomProcessMetadataConditionKey[];
    customProcessMetadatas?: outputs.HostNamingConditionConditionCustomProcessMetadata[];
    databaseTopologies?: outputs.HostNamingConditionConditionDatabaseTopology[];
    /**
     * @deprecated You should use 'database_topology' instead of 'database_topology_comparison'. This attribute still exists for backwards compatibility.
     */
    databaseTopologyComparisons?: outputs.HostNamingConditionConditionDatabaseTopologyComparison[];
    /**
     * @deprecated You should use 'dcrum_decoder' instead of 'dcrum_decoder_comparison'. This attribute still exists for backwards compatibility.
     */
    dcrumDecoderComparisons?: outputs.HostNamingConditionConditionDcrumDecoderComparison[];
    dcrumDecoders?: outputs.HostNamingConditionConditionDcrumDecoder[];
    entities?: outputs.HostNamingConditionConditionEntity[];
    /**
     * @deprecated You should use 'entity' instead of 'entity_id_comparison'. This attribute still exists for backwards compatibility.
     */
    entityIdComparisons?: outputs.HostNamingConditionConditionEntityIdComparison[];
    hostTeches?: outputs.HostNamingConditionConditionHostTech[];
    /**
     * @deprecated `hypervisor_type_comparision` is deprecated. Use `hypervisor` instead
     */
    hypervisorTypeComparisions?: outputs.HostNamingConditionConditionHypervisorTypeComparision[];
    hypervisors?: outputs.HostNamingConditionConditionHypervisor[];
    /**
     * @deprecated You should use 'indexed_name' instead of 'indexed_name_comparison'. This attribute still exists for backwards compatibility.
     */
    indexedNameComparisons?: outputs.HostNamingConditionConditionIndexedNameComparison[];
    indexedNames?: outputs.HostNamingConditionConditionIndexedName[];
    /**
     * @deprecated You should use 'indexed_string' instead of 'indexed_string_comparison'. This attribute still exists for backwards compatibility.
     */
    indexedStringComparisons?: outputs.HostNamingConditionConditionIndexedStringComparison[];
    indexedStrings?: outputs.HostNamingConditionConditionIndexedString[];
    /**
     * @deprecated You should use 'indexed_tag' instead of 'indexed_tag_comparison'. This attribute still exists for backwards compatibility.
     */
    indexedTagComparisons?: outputs.HostNamingConditionConditionIndexedTagComparison[];
    indexedTags?: outputs.HostNamingConditionConditionIndexedTag[];
    /**
     * @deprecated You should use 'integer' instead of 'integer_comparison'. This attribute still exists for backwards compatibility.
     */
    integerComparisons?: outputs.HostNamingConditionConditionIntegerComparison[];
    integers?: outputs.HostNamingConditionConditionInteger[];
    /**
     * @deprecated You should use 'ipaddress' instead of 'ipaddress_comparison'. This attribute still exists for backwards compatibility.
     */
    ipaddressComparisons?: outputs.HostNamingConditionConditionIpaddressComparison[];
    ipaddresses?: outputs.HostNamingConditionConditionIpaddress[];
    keys?: outputs.HostNamingConditionConditionKey[];
    /**
     * @deprecated You should use 'mobile_platform' instead of 'mobile_platform_comparison'. This attribute still exists for backwards compatibility.
     */
    mobilePlatformComparisons?: outputs.HostNamingConditionConditionMobilePlatformComparison[];
    mobilePlatforms?: outputs.HostNamingConditionConditionMobilePlatform[];
    osArches?: outputs.HostNamingConditionConditionOsArch[];
    osTypes?: outputs.HostNamingConditionConditionOsType[];
    /**
     * @deprecated You should use 'os_arch' instead of 'osarchitecture_comparison'. This attribute still exists for backwards compatibility.
     */
    osarchitectureComparisons?: outputs.HostNamingConditionConditionOsarchitectureComparison[];
    /**
     * @deprecated You should use 'os_type' instead of 'ostype_comparison'. This attribute still exists for backwards compatibility.
     */
    ostypeComparisons?: outputs.HostNamingConditionConditionOstypeComparison[];
    /**
     * @deprecated You should use 'paas_type' instead of 'paas_type_comparison'. This attribute still exists for backwards compatibility.
     */
    paasTypeComparisons?: outputs.HostNamingConditionConditionPaasTypeComparison[];
    paasTypes?: outputs.HostNamingConditionConditionPaasType[];
    /**
     * @deprecated 'process_metadata_condition_key' is deprecated. You should use 'process_metadata'
     */
    processMetadataConditionKeys?: outputs.HostNamingConditionConditionProcessMetadataConditionKey[];
    processMetadatas?: outputs.HostNamingConditionConditionProcessMetadata[];
    serviceTopologies?: outputs.HostNamingConditionConditionServiceTopology[];
    /**
     * @deprecated You should use 'service_topology' instead of 'service_topology_comparison'. This attribute still exists for backwards compatibility.
     */
    serviceTopologyComparisons?: outputs.HostNamingConditionConditionServiceTopologyComparison[];
    /**
     * @deprecated You should use 'service_type' instead of 'service_type_comparison'. This attribute still exists for backwards compatibility.
     */
    serviceTypeComparisons?: outputs.HostNamingConditionConditionServiceTypeComparison[];
    serviceTypes?: outputs.HostNamingConditionConditionServiceType[];
    /**
     * @deprecated You should use 'host_tech' instead of 'simple_host_tech_comparison'. This attribute still exists for backwards compatibility.
     */
    simpleHostTechComparisons?: outputs.HostNamingConditionConditionSimpleHostTechComparison[];
    /**
     * @deprecated You should use 'tech' instead of 'simple_tech_comparison'. This attribute still exists for backwards compatibility.
     */
    simpleTechComparisons?: outputs.HostNamingConditionConditionSimpleTechComparison[];
    /**
     * @deprecated You should use 'string' instead of 'string_comparison'. This attribute still exists for backwards compatibility.
     */
    stringComparisons?: outputs.HostNamingConditionConditionStringComparison[];
    /**
     * @deprecated 'string_condition_key' is deprecated. You should use 'string_key'
     */
    stringConditionKeys?: outputs.HostNamingConditionConditionStringConditionKey[];
    stringKeys?: outputs.HostNamingConditionConditionStringKey[];
    strings?: outputs.HostNamingConditionConditionString[];
    /**
     * @deprecated You should use 'synthetic_engine' instead of 'synthetic_engine_type_comparison'. This attribute still exists for backwards compatibility.
     */
    syntheticEngineTypeComparisons?: outputs.HostNamingConditionConditionSyntheticEngineTypeComparison[];
    syntheticEngines?: outputs.HostNamingConditionConditionSyntheticEngine[];
    /**
     * @deprecated You should use 'tag' instead of 'tag_comparison'. This attribute still exists for backwards compatibility.
     */
    tagComparisons?: outputs.HostNamingConditionConditionTagComparison[];
    tags?: outputs.HostNamingConditionConditionTag[];
    teches?: outputs.HostNamingConditionConditionTech[];
    unknowns?: string;
}

export interface HostNamingConditionConditionApplicationType {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface HostNamingConditionConditionApplicationTypeComparison {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: string;
}

export interface HostNamingConditionConditionAzureComputeMode {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface HostNamingConditionConditionAzureComputeModeComparison {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface HostNamingConditionConditionAzureSkuComparision {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: string;
}

export interface HostNamingConditionConditionAzureSkus {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface HostNamingConditionConditionBaseComparisonBasic {
    negate?: boolean;
    type: string;
    unknowns?: string;
}

export interface HostNamingConditionConditionBaseConditionKey {
    attribute: string;
    type?: string;
    unknowns?: string;
}

export interface HostNamingConditionConditionBitness {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface HostNamingConditionConditionBitnessComparision {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: string;
}

export interface HostNamingConditionConditionCloudType {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface HostNamingConditionConditionCloudTypeComparison {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: string;
}

export interface HostNamingConditionConditionComparison {
    negate?: boolean;
    type: string;
    unknowns?: string;
}

export interface HostNamingConditionConditionCustomApplicationType {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface HostNamingConditionConditionCustomApplicationTypeComparison {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: string;
}

export interface HostNamingConditionConditionCustomHostMetadata {
    attribute: string;
    dynamicKey: outputs.HostNamingConditionConditionCustomHostMetadataDynamicKey;
    unknowns?: string;
}

export interface HostNamingConditionConditionCustomHostMetadataConditionKey {
    attribute: string;
    dynamicKey: outputs.HostNamingConditionConditionCustomHostMetadataConditionKeyDynamicKey;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
}

export interface HostNamingConditionConditionCustomHostMetadataConditionKeyDynamicKey {
    key: string;
    source: string;
    unknowns?: string;
}

export interface HostNamingConditionConditionCustomHostMetadataDynamicKey {
    key: string;
    source: string;
    unknowns?: string;
}

export interface HostNamingConditionConditionCustomProcessMetadata {
    attribute: string;
    dynamicKey: outputs.HostNamingConditionConditionCustomProcessMetadataDynamicKey;
    unknowns?: string;
}

export interface HostNamingConditionConditionCustomProcessMetadataConditionKey {
    attribute: string;
    dynamicKey: outputs.HostNamingConditionConditionCustomProcessMetadataConditionKeyDynamicKey;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
}

export interface HostNamingConditionConditionCustomProcessMetadataConditionKeyDynamicKey {
    key: string;
    source: string;
    unknowns?: string;
}

export interface HostNamingConditionConditionCustomProcessMetadataDynamicKey {
    key: string;
    source: string;
    unknowns?: string;
}

export interface HostNamingConditionConditionDatabaseTopology {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface HostNamingConditionConditionDatabaseTopologyComparison {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: string;
}

export interface HostNamingConditionConditionDcrumDecoder {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface HostNamingConditionConditionDcrumDecoderComparison {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: string;
}

export interface HostNamingConditionConditionEntity {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface HostNamingConditionConditionEntityIdComparison {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: string;
}

export interface HostNamingConditionConditionHostTech {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: outputs.HostNamingConditionConditionHostTechValue;
}

export interface HostNamingConditionConditionHostTechValue {
    type?: string;
    unknowns?: string;
    verbatimType?: string;
}

export interface HostNamingConditionConditionHypervisor {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface HostNamingConditionConditionHypervisorTypeComparision {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: string;
}

export interface HostNamingConditionConditionIndexedName {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface HostNamingConditionConditionIndexedNameComparison {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: string;
}

export interface HostNamingConditionConditionIndexedString {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface HostNamingConditionConditionIndexedStringComparison {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: string;
}

export interface HostNamingConditionConditionIndexedTag {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: outputs.HostNamingConditionConditionIndexedTagValue;
}

export interface HostNamingConditionConditionIndexedTagComparison {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: outputs.HostNamingConditionConditionIndexedTagComparisonValue;
}

export interface HostNamingConditionConditionIndexedTagComparisonValue {
    context: string;
    key: string;
    unknowns?: string;
    value?: string;
}

export interface HostNamingConditionConditionIndexedTagValue {
    context: string;
    key: string;
    unknowns?: string;
    value?: string;
}

export interface HostNamingConditionConditionInteger {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: number;
}

export interface HostNamingConditionConditionIntegerComparison {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: number;
}

export interface HostNamingConditionConditionIpaddress {
    caseSensitive?: boolean;
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface HostNamingConditionConditionIpaddressComparison {
    caseSensitive?: boolean;
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: string;
}

export interface HostNamingConditionConditionKey {
    attribute: string;
    type?: string;
    unknowns?: string;
}

export interface HostNamingConditionConditionMobilePlatform {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface HostNamingConditionConditionMobilePlatformComparison {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: string;
}

export interface HostNamingConditionConditionOsArch {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface HostNamingConditionConditionOsType {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface HostNamingConditionConditionOsarchitectureComparison {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: string;
}

export interface HostNamingConditionConditionOstypeComparison {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: string;
}

export interface HostNamingConditionConditionPaasType {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface HostNamingConditionConditionPaasTypeComparison {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: string;
}

export interface HostNamingConditionConditionProcessMetadata {
    attribute: string;
    dynamicKey: string;
    unknowns?: string;
}

export interface HostNamingConditionConditionProcessMetadataConditionKey {
    attribute: string;
    dynamicKey: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
}

export interface HostNamingConditionConditionServiceTopology {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface HostNamingConditionConditionServiceTopologyComparison {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: string;
}

export interface HostNamingConditionConditionServiceType {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface HostNamingConditionConditionServiceTypeComparison {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: string;
}

export interface HostNamingConditionConditionSimpleHostTechComparison {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: outputs.HostNamingConditionConditionSimpleHostTechComparisonValue;
}

export interface HostNamingConditionConditionSimpleHostTechComparisonValue {
    type?: string;
    unknowns?: string;
    verbatimType?: string;
}

export interface HostNamingConditionConditionSimpleTechComparison {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: outputs.HostNamingConditionConditionSimpleTechComparisonValue;
}

export interface HostNamingConditionConditionSimpleTechComparisonValue {
    type?: string;
    unknowns?: string;
    verbatimType?: string;
}

export interface HostNamingConditionConditionString {
    caseSensitive?: boolean;
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface HostNamingConditionConditionStringComparison {
    caseSensitive?: boolean;
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: string;
}

export interface HostNamingConditionConditionStringConditionKey {
    attribute: string;
    dynamicKey: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
}

export interface HostNamingConditionConditionStringKey {
    attribute: string;
    dynamicKey: string;
    unknowns?: string;
}

export interface HostNamingConditionConditionSyntheticEngine {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface HostNamingConditionConditionSyntheticEngineTypeComparison {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: string;
}

export interface HostNamingConditionConditionTag {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: outputs.HostNamingConditionConditionTagValue;
}

export interface HostNamingConditionConditionTagComparison {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: outputs.HostNamingConditionConditionTagComparisonValue;
}

export interface HostNamingConditionConditionTagComparisonValue {
    context: string;
    key: string;
    unknowns?: string;
    value?: string;
}

export interface HostNamingConditionConditionTagValue {
    context: string;
    key: string;
    unknowns?: string;
    value?: string;
}

export interface HostNamingConditionConditionTech {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: outputs.HostNamingConditionConditionTechValue;
}

export interface HostNamingConditionConditionTechValue {
    type?: string;
    unknowns?: string;
    verbatimType?: string;
}

export interface HttpMonitorAnomalyDetection {
    /**
     * Thresholds for loading times
     */
    loadingTimeThresholds?: outputs.HttpMonitorAnomalyDetectionLoadingTimeThreshold[];
    /**
     * Outage handling configuration
     */
    outageHandlings?: outputs.HttpMonitorAnomalyDetectionOutageHandling[];
}

export interface HttpMonitorAnomalyDetectionLoadingTimeThreshold {
    /**
     * Performance threshold is enabled (`true`) or disabled (`false`)
     */
    enabled?: boolean;
    /**
     * The list of performance threshold rules
     */
    thresholds?: outputs.HttpMonitorAnomalyDetectionLoadingTimeThresholdThreshold[];
}

export interface HttpMonitorAnomalyDetectionLoadingTimeThresholdThreshold {
    /**
     * The list of performance threshold rules
     */
    thresholds: outputs.HttpMonitorAnomalyDetectionLoadingTimeThresholdThresholdThreshold[];
}

export interface HttpMonitorAnomalyDetectionLoadingTimeThresholdThresholdThreshold {
    /**
     * Specify the event to which an ACTION threshold applies
     */
    eventIndex?: number;
    /**
     * Specify the request to which an ACTION threshold applies
     */
    requestIndex?: number;
    /**
     * The type of the threshold: `TOTAL` (total loading time) or `ACTION` (action loading time)
     */
    type?: string;
    /**
     * Notify if monitor takes longer than *X* milliseconds to load
     */
    valueMs: number;
}

export interface HttpMonitorAnomalyDetectionOutageHandling {
    /**
     * (Field has overlap with `dynatrace.BrowserMonitorOutage` and `dynatrace.HttpMonitorOutage`) When enabled (`true`), generate a problem and send an alert when the monitor is unavailable at all configured locations
     */
    globalOutage?: boolean;
    /**
     * (Field has overlap with `dynatrace.BrowserMonitorOutage` and `dynatrace.HttpMonitorOutage`) Global outage handling configuration.
     */
    globalOutagePolicies?: outputs.HttpMonitorAnomalyDetectionOutageHandlingGlobalOutagePolicy[];
    localOutage?: boolean;
    localOutagePolicies?: outputs.HttpMonitorAnomalyDetectionOutageHandlingLocalOutagePolicy[];
    retryOnError?: boolean;
}

export interface HttpMonitorAnomalyDetectionOutageHandlingGlobalOutagePolicy {
    /**
     * The number of consecutive fails to trigger an alert
     */
    consecutiveRuns: number;
}

export interface HttpMonitorAnomalyDetectionOutageHandlingLocalOutagePolicy {
    /**
     * The number of affected locations to trigger an alert
     */
    affectedLocations: number;
    /**
     * The number of consecutive fails to trigger an alert
     */
    consecutiveRuns: number;
}

export interface HttpMonitorCookiesCookies {
    cookies: outputs.HttpMonitorCookiesCookiesCookie[];
}

export interface HttpMonitorCookiesCookiesCookie {
    /**
     * Enclose placeholder values in brackets, for example {email}
     */
    domain: string;
    /**
     * Enclose placeholder values in brackets, for example {email}
     */
    name: string;
    /**
     * Enclose placeholder values in brackets, for example {email}
     */
    path?: string;
    /**
     * Enclose placeholder values in brackets, for example {email}
     */
    value: string;
}

export interface HttpMonitorPerformanceThresholds {
    thresholds: outputs.HttpMonitorPerformanceThresholdsThreshold[];
}

export interface HttpMonitorPerformanceThresholdsThreshold {
    /**
     * Request
     */
    event: string;
    threshold: number;
}

export interface HttpMonitorScript {
    /**
     * A HTTP request to be performed by the monitor.
     */
    requests: outputs.HttpMonitorScriptRequest[];
}

export interface HttpMonitorScriptRequest {
    /**
     * Authentication options for this request
     */
    authentication?: outputs.HttpMonitorScriptRequestAuthentication;
    /**
     * The body of the HTTP request.
     */
    body?: string;
    /**
     * The setup of the monitor
     */
    configuration?: outputs.HttpMonitorScriptRequestConfiguration;
    /**
     * A short description of the event to appear in the web UI.
     */
    description?: string;
    /**
     * The HTTP method of the request.
     */
    method: string;
    /**
     * Javascript code to execute after sending the request.
     */
    postProcessing?: string;
    /**
     * Javascript code to execute before sending the request.
     */
    preProcessing?: string;
    /**
     * Adapt request timeout option - the maximum time this request is allowed to consume. Keep in mind the maximum timeout of the complete monitor is 60 seconds
     */
    requestTimeout?: number;
    /**
     * The URL to check.
     */
    url: string;
    /**
     * Validation helps you verify that your HTTP monitor loads the expected content
     */
    validation?: outputs.HttpMonitorScriptRequestValidation;
}

export interface HttpMonitorScriptRequestAuthentication {
    /**
     * The ID of the credentials within the Dynatrace Credentials Vault.
     */
    credentials: string;
    /**
     * The KDC IP. Valid and required only if the type of authentication is `KERBEROS`.
     */
    kdcIp?: string;
    /**
     * The Realm Name. Valid and required only if the type of authentication is `KERBEROS`.
     */
    realmName?: string;
    /**
     * The type of the threshold: `TOTAL` (total loading time) or `ACTION` (action loading time)
     */
    type: string;
}

export interface HttpMonitorScriptRequestConfiguration {
    /**
     * If set to `false`, then the monitor fails with invalid SSL certificates.
     */
    acceptAnyCertificate?: boolean;
    clientCertificate?: string;
    followRedirects?: boolean;
    headers?: outputs.HttpMonitorScriptRequestConfigurationHeaders;
    sensitiveData?: boolean;
    userAgent?: string;
}

export interface HttpMonitorScriptRequestConfigurationHeaders {
    /**
     * contains an HTTP header of the request
     */
    headers: outputs.HttpMonitorScriptRequestConfigurationHeadersHeader[];
}

export interface HttpMonitorScriptRequestConfigurationHeadersHeader {
    /**
     * The key of the header
     */
    name: string;
    /**
     * The value of the header
     */
    value: string;
}

export interface HttpMonitorScriptRequestValidation {
    /**
     * A list of validation rules
     */
    rules: outputs.HttpMonitorScriptRequestValidationRule[];
}

export interface HttpMonitorScriptRequestValidationRule {
    /**
     * The validation condition. `true` means validation succeeds if the specified content/element is found. `false` means validation fails if the specified content/element is found. Always specify `false` for `certificateExpiryDateConstraint` to fail the monitor if SSL certificate expiry is within the specified number of days
     */
    passIfFound?: boolean;
    /**
     * The type of the threshold: `TOTAL` (total loading time) or `ACTION` (action loading time)
     */
    type: string;
    /**
     * The value of the header
     */
    value: string;
}

export interface HttpMonitorScriptScript {
    /**
     * A HTTP request to be performed by the monitor.
     */
    requests: outputs.HttpMonitorScriptScriptRequest[];
}

export interface HttpMonitorScriptScriptRequest {
    /**
     * Authentication options for this request
     */
    authentication?: outputs.HttpMonitorScriptScriptRequestAuthentication;
    /**
     * The body of the HTTP request.
     */
    body?: string;
    /**
     * The setup of the monitor
     */
    configuration?: outputs.HttpMonitorScriptScriptRequestConfiguration;
    /**
     * A short description of the event to appear in the web UI.
     */
    description?: string;
    /**
     * The HTTP method of the request.
     */
    method: string;
    /**
     * Javascript code to execute after sending the request.
     */
    postProcessing?: string;
    /**
     * Javascript code to execute before sending the request.
     */
    preProcessing?: string;
    /**
     * Adapt request timeout option - the maximum time this request is allowed to consume. Keep in mind the maximum timeout of the complete monitor is 60 seconds
     */
    requestTimeout?: number;
    /**
     * The URL to check.
     */
    url: string;
    /**
     * Validation helps you verify that your HTTP monitor loads the expected content
     */
    validation?: outputs.HttpMonitorScriptScriptRequestValidation;
}

export interface HttpMonitorScriptScriptRequestAuthentication {
    /**
     * The ID of the credentials within the Dynatrace Credentials Vault.
     */
    credentials: string;
    /**
     * The KDC IP. Valid and required only if the type of authentication is `KERBEROS`.
     */
    kdcIp?: string;
    /**
     * The Realm Name. Valid and required only if the type of authentication is `KERBEROS`.
     */
    realmName?: string;
    /**
     * The type of authentication. Possible values are `BASIC_AUTHENTICATION`, `NTLM` and `KERBEROS`.
     */
    type: string;
}

export interface HttpMonitorScriptScriptRequestConfiguration {
    /**
     * If set to `false`, then the monitor fails with invalid SSL certificates.
     */
    acceptAnyCertificate?: boolean;
    clientCertificate?: string;
    followRedirects?: boolean;
    headers?: outputs.HttpMonitorScriptScriptRequestConfigurationHeaders;
    sensitiveData?: boolean;
    userAgent?: string;
}

export interface HttpMonitorScriptScriptRequestConfigurationHeaders {
    /**
     * contains an HTTP header of the request
     */
    headers: outputs.HttpMonitorScriptScriptRequestConfigurationHeadersHeader[];
}

export interface HttpMonitorScriptScriptRequestConfigurationHeadersHeader {
    /**
     * The key of the header
     */
    name: string;
    /**
     * The value of the header
     */
    value: string;
}

export interface HttpMonitorScriptScriptRequestValidation {
    /**
     * A list of validation rules
     */
    rules: outputs.HttpMonitorScriptScriptRequestValidationRule[];
}

export interface HttpMonitorScriptScriptRequestValidationRule {
    /**
     * The validation condition. `true` means validation succeeds if the specified content/element is found. `false` means validation fails if the specified content/element is found. Always specify `false` for `certificateExpiryDateConstraint` to fail the monitor if SSL certificate expiry is within the specified number of days
     */
    passIfFound?: boolean;
    /**
     * The type of authentication. Possible values are `BASIC_AUTHENTICATION`, `NTLM` and `KERBEROS`.
     */
    type: string;
    /**
     * The value of the header
     */
    value: string;
}

export interface HttpMonitorTag {
    /**
     * Tag with source of a Dynatrace entity.
     */
    tags?: outputs.HttpMonitorTagTag[];
}

export interface HttpMonitorTagTag {
    /**
     * The origin of the tag. Supported values are `AWS`, `AWS_GENERIC`, `AZURE`, `CLOUD_FOUNDRY`, `CONTEXTLESS`, `ENVIRONMENT`, `GOOGLE_CLOUD` and `KUBERNETES`.
     */
    context: string;
    key: string;
    source?: string;
    /**
     * The value of the header
     */
    value?: string;
}

export interface HubSubscriptionsTokenSubscriptions {
    tokenSubscriptions: outputs.HubSubscriptionsTokenSubscriptionsTokenSubscription[];
}

export interface HubSubscriptionsTokenSubscriptionsTokenSubscription {
    /**
     * no documentation available
     */
    description?: string;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Name of subscription
     */
    name: string;
    /**
     * Subscription token
     */
    token: string;
}

export interface IamGroupPermissions {
    /**
     * A Permission
     */
    permissions: outputs.IamGroupPermissionsPermission[];
}

export interface IamGroupPermissionsPermission {
    /**
     * Possible values: `account-company-info`, `account-user-management`, `account-viewer`, `account-saml-flexible-federation`, `tenant-viewer`, `tenant-manage-settings`, `tenant-agent-install`, `tenant-logviewer`, `tenant-view-sensitive-request-data`, `tenant-configure-request-capture-data`, `tenant-replay-sessions-with-masking`, `tenant-replay-sessions-without-masking`, `tenant-manage-security-problems`, `tenant-view-security-problems`, `tenant-manage-support-tickets`
     */
    name: string;
    /**
     * If `type` is `account` this attribute should hold the UUID of the account. If `type` is 'tenant`this attribute should hold the ID of the environment (`https://\n\n.live.dynatrace.com`). If`type`is`management-zone`this attribute should hold a value like`\n\n:\n\n. You need to use the attribute `legacyId` when referring to a resource `dynatrace.ManagementZoneV2` or a data source `dynatrace.ManagementZone`.
     */
    scope: string;
    /**
     * The type of this permission. Possible values are `account`, `tenant`, `management-zone`
     */
    type: string;
}

export interface IamPolicyBindingsV2Policy {
    /**
     * The id of the policy
     */
    id: string;
    metadata?: {[key: string]: string};
    parameters?: {[key: string]: string};
}

export interface ImsBridgesQueueManager {
    /**
     * Queue manager definition for IMS bridge
     */
    queueManagers?: outputs.ImsBridgesQueueManagerQueueManager[];
}

export interface ImsBridgesQueueManagerQueueManager {
    /**
     * The name of the queue manager
     */
    name: string;
    /**
     * Queue(s) that belong to the queue manager
     */
    queueManagerQueues?: string[];
}

export interface K8sClusterAnomaliesCpuRequestsSaturation {
    /**
     * Alert if
     */
    configuration?: outputs.K8sClusterAnomaliesCpuRequestsSaturationConfiguration;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface K8sClusterAnomaliesCpuRequestsSaturationConfiguration {
    /**
     * within the last
     */
    observationPeriodInMinutes: number;
    /**
     * of cluster CPU capacity for at least
     */
    samplePeriodInMinutes: number;
    /**
     * amount of requested CPU is above
     */
    threshold: number;
}

export interface K8sClusterAnomaliesMemoryRequestsSaturation {
    /**
     * Alert if
     */
    configuration?: outputs.K8sClusterAnomaliesMemoryRequestsSaturationConfiguration;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface K8sClusterAnomaliesMemoryRequestsSaturationConfiguration {
    /**
     * within the last
     */
    observationPeriodInMinutes: number;
    /**
     * of cluster CPU capacity for at least
     */
    samplePeriodInMinutes: number;
    /**
     * amount of requested CPU is above
     */
    threshold: number;
}

export interface K8sClusterAnomaliesMonitoringIssues {
    /**
     * Alert if
     */
    configuration?: outputs.K8sClusterAnomaliesMonitoringIssuesConfiguration;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface K8sClusterAnomaliesMonitoringIssuesConfiguration {
    /**
     * within the last
     */
    observationPeriodInMinutes: number;
    /**
     * of cluster CPU capacity for at least
     */
    samplePeriodInMinutes: number;
}

export interface K8sClusterAnomaliesPodsSaturation {
    /**
     * Alert if
     */
    configuration?: outputs.K8sClusterAnomaliesPodsSaturationConfiguration;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface K8sClusterAnomaliesPodsSaturationConfiguration {
    /**
     * within the last
     */
    observationPeriodInMinutes: number;
    /**
     * of cluster CPU capacity for at least
     */
    samplePeriodInMinutes: number;
    /**
     * amount of requested CPU is above
     */
    threshold: number;
}

export interface K8sClusterAnomaliesReadinessIssues {
    /**
     * Alert if
     */
    configuration?: outputs.K8sClusterAnomaliesReadinessIssuesConfiguration;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface K8sClusterAnomaliesReadinessIssuesConfiguration {
    /**
     * within the last
     */
    observationPeriodInMinutes: number;
    /**
     * of cluster CPU capacity for at least
     */
    samplePeriodInMinutes: number;
}

export interface K8sCredentialsEventsFieldSelector {
    /**
     * Whether subscription to this events field selector is enabled (value set to `true`). If disabled (value set to `false`), Dynatrace will stop fetching events from the Kubernetes API for this events field selector
     */
    active: boolean;
    /**
     * The field selector string (url decoding is applied) when storing it.
     */
    fieldSelector: string;
    /**
     * A label of the events field selector.
     */
    label: string;
    /**
     * Any attributes that aren't yet supported by this provider
     */
    unknowns?: string;
}

export interface K8sMonitoringEventPatterns {
    eventPatterns: outputs.K8sMonitoringEventPatternsEventPattern[];
}

export interface K8sMonitoringEventPatternsEventPattern {
    /**
     * Activate
     */
    active: boolean;
    /**
     * Field selector name
     */
    label: string;
    /**
     * The set of allowed characters for this field has been extended with ActiveGate version 1.259. For more details, see the [documentation](https://dt-url.net/7h23wuk#set-up-event-field-selectors).
     */
    pattern: string;
}

export interface K8sNamespaceAnomaliesCpuLimitsQuotaSaturation {
    /**
     * Alert if
     */
    configuration?: outputs.K8sNamespaceAnomaliesCpuLimitsQuotaSaturationConfiguration;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface K8sNamespaceAnomaliesCpuLimitsQuotaSaturationConfiguration {
    /**
     * within the last
     */
    observationPeriodInMinutes: number;
    /**
     * of quota for at least
     */
    samplePeriodInMinutes: number;
    /**
     * amount of utilized namespace CPU is above
     */
    threshold: number;
}

export interface K8sNamespaceAnomaliesCpuRequestsQuotaSaturation {
    /**
     * Alert if
     */
    configuration?: outputs.K8sNamespaceAnomaliesCpuRequestsQuotaSaturationConfiguration;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface K8sNamespaceAnomaliesCpuRequestsQuotaSaturationConfiguration {
    /**
     * within the last
     */
    observationPeriodInMinutes: number;
    /**
     * of quota for at least
     */
    samplePeriodInMinutes: number;
    /**
     * amount of utilized namespace CPU is above
     */
    threshold: number;
}

export interface K8sNamespaceAnomaliesMemoryLimitsQuotaSaturation {
    /**
     * Alert if
     */
    configuration?: outputs.K8sNamespaceAnomaliesMemoryLimitsQuotaSaturationConfiguration;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface K8sNamespaceAnomaliesMemoryLimitsQuotaSaturationConfiguration {
    /**
     * within the last
     */
    observationPeriodInMinutes: number;
    /**
     * of quota for at least
     */
    samplePeriodInMinutes: number;
    /**
     * amount of utilized namespace CPU is above
     */
    threshold: number;
}

export interface K8sNamespaceAnomaliesMemoryRequestsQuotaSaturation {
    /**
     * Alert if
     */
    configuration?: outputs.K8sNamespaceAnomaliesMemoryRequestsQuotaSaturationConfiguration;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface K8sNamespaceAnomaliesMemoryRequestsQuotaSaturationConfiguration {
    /**
     * within the last
     */
    observationPeriodInMinutes: number;
    /**
     * of quota for at least
     */
    samplePeriodInMinutes: number;
    /**
     * amount of utilized namespace CPU is above
     */
    threshold: number;
}

export interface K8sNamespaceAnomaliesPodsQuotaSaturation {
    /**
     * Alert if
     */
    configuration?: outputs.K8sNamespaceAnomaliesPodsQuotaSaturationConfiguration;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface K8sNamespaceAnomaliesPodsQuotaSaturationConfiguration {
    /**
     * within the last
     */
    observationPeriodInMinutes: number;
    /**
     * of quota for at least
     */
    samplePeriodInMinutes: number;
    /**
     * amount of utilized namespace CPU is above
     */
    threshold: number;
}

export interface K8sNodeAnomaliesCpuRequestsSaturation {
    /**
     * Alert if
     */
    configuration?: outputs.K8sNodeAnomaliesCpuRequestsSaturationConfiguration;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface K8sNodeAnomaliesCpuRequestsSaturationConfiguration {
    /**
     * within the last
     */
    observationPeriodInMinutes: number;
    /**
     * of node CPU capacity for at least
     */
    samplePeriodInMinutes: number;
    /**
     * amount of requested CPU is higher than
     */
    threshold: number;
}

export interface K8sNodeAnomaliesMemoryRequestsSaturation {
    /**
     * Alert if
     */
    configuration?: outputs.K8sNodeAnomaliesMemoryRequestsSaturationConfiguration;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface K8sNodeAnomaliesMemoryRequestsSaturationConfiguration {
    /**
     * within the last
     */
    observationPeriodInMinutes: number;
    /**
     * of node CPU capacity for at least
     */
    samplePeriodInMinutes: number;
    /**
     * amount of requested CPU is higher than
     */
    threshold: number;
}

export interface K8sNodeAnomaliesNodeProblematicCondition {
    /**
     * Alert if
     */
    configuration?: outputs.K8sNodeAnomaliesNodeProblematicConditionConfiguration;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface K8sNodeAnomaliesNodeProblematicConditionConfiguration {
    /**
     * within the last
     */
    observationPeriodInMinutes: number;
    /**
     * of node CPU capacity for at least
     */
    samplePeriodInMinutes: number;
}

export interface K8sNodeAnomaliesPodsSaturation {
    /**
     * Alert if
     */
    configuration?: outputs.K8sNodeAnomaliesPodsSaturationConfiguration;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface K8sNodeAnomaliesPodsSaturationConfiguration {
    /**
     * within the last
     */
    observationPeriodInMinutes: number;
    /**
     * of node CPU capacity for at least
     */
    samplePeriodInMinutes: number;
    /**
     * amount of requested CPU is higher than
     */
    threshold: number;
}

export interface K8sNodeAnomaliesReadinessIssues {
    /**
     * Alert if
     */
    configuration?: outputs.K8sNodeAnomaliesReadinessIssuesConfiguration;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface K8sNodeAnomaliesReadinessIssuesConfiguration {
    /**
     * within the last
     */
    observationPeriodInMinutes: number;
    /**
     * of node CPU capacity for at least
     */
    samplePeriodInMinutes: number;
}

export interface K8sPvcAnomaliesLowDiskSpaceCritical {
    /**
     * Alert if
     */
    configuration?: outputs.K8sPvcAnomaliesLowDiskSpaceCriticalConfiguration;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface K8sPvcAnomaliesLowDiskSpaceCriticalConfiguration {
    /**
     * within the last
     */
    observationPeriodInMinutes: number;
    /**
     * for at least
     */
    samplePeriodInMinutes: number;
    /**
     * the available disk space is below
     */
    threshold: number;
}

export interface K8sPvcAnomaliesLowDiskSpaceCriticalPercentage {
    /**
     * Alert if
     */
    configuration?: outputs.K8sPvcAnomaliesLowDiskSpaceCriticalPercentageConfiguration;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface K8sPvcAnomaliesLowDiskSpaceCriticalPercentageConfiguration {
    /**
     * within the last
     */
    observationPeriodInMinutes: number;
    /**
     * for at least
     */
    samplePeriodInMinutes: number;
    /**
     * the available disk space is below
     */
    threshold: number;
}

export interface K8sWorkloadAnomaliesContainerRestarts {
    /**
     * Alert if
     */
    configuration?: outputs.K8sWorkloadAnomaliesContainerRestartsConfiguration;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface K8sWorkloadAnomaliesContainerRestartsConfiguration {
    /**
     * within the last
     */
    observationPeriodInMinutes: number;
    /**
     * per minute, for any
     */
    samplePeriodInMinutes: number;
    /**
     * there is at least
     */
    threshold: number;
}

export interface K8sWorkloadAnomaliesDeploymentStuck {
    /**
     * Alert if
     */
    configuration?: outputs.K8sWorkloadAnomaliesDeploymentStuckConfiguration;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface K8sWorkloadAnomaliesDeploymentStuckConfiguration {
    /**
     * within the last
     */
    observationPeriodInMinutes: number;
    /**
     * per minute, for any
     */
    samplePeriodInMinutes: number;
}

export interface K8sWorkloadAnomaliesHighCpuThrottling {
    /**
     * Alert if
     */
    configuration?: outputs.K8sWorkloadAnomaliesHighCpuThrottlingConfiguration;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface K8sWorkloadAnomaliesHighCpuThrottlingConfiguration {
    /**
     * within the last
     */
    observationPeriodInMinutes: number;
    /**
     * per minute, for any
     */
    samplePeriodInMinutes: number;
    /**
     * there is at least
     */
    threshold: number;
}

export interface K8sWorkloadAnomaliesHighCpuUsage {
    /**
     * Alert if
     */
    configuration?: outputs.K8sWorkloadAnomaliesHighCpuUsageConfiguration;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface K8sWorkloadAnomaliesHighCpuUsageConfiguration {
    /**
     * within the last
     */
    observationPeriodInMinutes: number;
    /**
     * per minute, for any
     */
    samplePeriodInMinutes: number;
    /**
     * there is at least
     */
    threshold: number;
}

export interface K8sWorkloadAnomaliesHighMemoryUsage {
    /**
     * Alert if
     */
    configuration?: outputs.K8sWorkloadAnomaliesHighMemoryUsageConfiguration;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface K8sWorkloadAnomaliesHighMemoryUsageConfiguration {
    /**
     * within the last
     */
    observationPeriodInMinutes: number;
    /**
     * per minute, for any
     */
    samplePeriodInMinutes: number;
    /**
     * there is at least
     */
    threshold: number;
}

export interface K8sWorkloadAnomaliesJobFailureEvents {
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface K8sWorkloadAnomaliesNotAllPodsReady {
    /**
     * Alert if
     */
    configuration?: outputs.K8sWorkloadAnomaliesNotAllPodsReadyConfiguration;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface K8sWorkloadAnomaliesNotAllPodsReadyConfiguration {
    /**
     * within the last
     */
    observationPeriodInMinutes: number;
    /**
     * per minute, for any
     */
    samplePeriodInMinutes: number;
}

export interface K8sWorkloadAnomaliesOomKills {
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface K8sWorkloadAnomaliesPendingPods {
    /**
     * Alert if
     */
    configuration?: outputs.K8sWorkloadAnomaliesPendingPodsConfiguration;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface K8sWorkloadAnomaliesPendingPodsConfiguration {
    /**
     * within the last
     */
    observationPeriodInMinutes: number;
    /**
     * per minute, for any
     */
    samplePeriodInMinutes: number;
    /**
     * there is at least
     */
    threshold: number;
}

export interface K8sWorkloadAnomaliesPodBackoffEvents {
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface K8sWorkloadAnomaliesPodEvictionEvents {
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface K8sWorkloadAnomaliesPodPreemptionEvents {
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface K8sWorkloadAnomaliesPodStuckInTerminating {
    /**
     * Alert if
     */
    configuration?: outputs.K8sWorkloadAnomaliesPodStuckInTerminatingConfiguration;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface K8sWorkloadAnomaliesPodStuckInTerminatingConfiguration {
    /**
     * within the last
     */
    observationPeriodInMinutes: number;
    /**
     * per minute, for any
     */
    samplePeriodInMinutes: number;
}

export interface K8sWorkloadAnomaliesWorkloadWithoutReadyPods {
    /**
     * Alert if
     */
    configuration?: outputs.K8sWorkloadAnomaliesWorkloadWithoutReadyPodsConfiguration;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface K8sWorkloadAnomaliesWorkloadWithoutReadyPodsConfiguration {
    /**
     * within the last
     */
    observationPeriodInMinutes: number;
    /**
     * per minute, for any
     */
    samplePeriodInMinutes: number;
}

export interface KubernetesAppKubernetesAppOptions {
    /**
     * New Kubernetes experience
     */
    enableKubernetesApp: boolean;
}

export interface KubernetesEventPatterns {
    eventPatterns: outputs.KubernetesEventPatternsEventPattern[];
}

export interface KubernetesEventPatternsEventPattern {
    /**
     * Activate
     */
    active: boolean;
    /**
     * Field selector name
     */
    label: string;
    /**
     * The set of allowed characters for this field has been extended with ActiveGate version 1.259. For more details, see the [documentation](https://dt-url.net/7h23wuk#set-up-event-field-selectors).
     */
    pattern: string;
}

export interface LimitOutboundConnectionsAllowedOutboundConnections {
    /**
     * If enabled, the Dynatrace JavaScript runtime will only be able to connect to the specified hosts.
     */
    enforced: boolean;
    /**
     * The Dynatrace JavaScript runtime will only be to connect to these hosts.
     */
    hostLists?: string[];
}

export interface LogCustomSourceContext {
    contexts: outputs.LogCustomSourceContextContext[];
}

export interface LogCustomSourceContextContext {
    /**
     * Possible Values: `Dt_entity_process_group`
     */
    attribute: string;
    /**
     * no documentation available
     */
    values: string[];
}

export interface LogCustomSourceCustomLogSource {
    /**
     * Accept binary content
     */
    acceptBinary?: boolean;
    /**
     * Possible Values: `LOG_PATH_PATTERN`, `WINDOWS_EVENT_LOG`
     */
    type: string;
    /**
     * It might be either an absolute path to log(s) with optional wildcards or Windows Event Log name.
     */
    values: string[];
}

export interface LogEventsEventTemplate {
    /**
     * Davis® AI will try to merge this event into existing problems, otherwise a new problem will always be created.
     */
    davisMerge?: boolean;
    /**
     * The description of the event to trigger.
     */
    description: string;
    /**
     * Possible Values: `AVAILABILITY`, `CUSTOM_ALERT`, `CUSTOM_ANNOTATION`, `CUSTOM_CONFIGURATION`, `CUSTOM_DEPLOYMENT`, `ERROR`, `INFO`, `MARKED_FOR_TERMINATION`, `RESOURCE`, `SLOWDOWN`
     */
    eventType: string;
    /**
     * Set of additional key-value properties to be attached to the triggered event.
     */
    metadata?: outputs.LogEventsEventTemplateMetadata;
    /**
     * The title of the event to trigger.
     */
    title: string;
}

export interface LogEventsEventTemplateMetadata {
    items: outputs.LogEventsEventTemplateMetadataItem[];
}

export interface LogEventsEventTemplateMetadataItem {
    /**
     * Type 'dt.' for key hints.
     */
    metadataKey: string;
    /**
     * no documentation available
     */
    metadataValue: string;
}

export interface LogProcessingProcessorDefinition {
    rule: string;
}

export interface LogProcessingRuleTesting {
    sampleLog: string;
}

export interface LogSecurityContextSecurityContextRule {
    /**
     * Matcher
     */
    query: string;
    /**
     * Rule name
     */
    ruleName: string;
    /**
     * Literal value to be set
     */
    value?: string;
    /**
     * Possible Values: `FIELD`, `LITERAL`
     */
    valueSource: string;
    /**
     * Name of field used to copy value
     */
    valueSourceField?: string;
}

export interface LogSensitiveDataMaskingMasking {
    /**
     * Maximum one capture group is allowed. If none was given, the whole expression will be treated as a capture group.
     */
    expression: string;
    /**
     * The string to replace the masked expression with. Irrelevant if `type` is `SHA1`.
     */
    replacement?: string;
    /**
     * Possible Values: `SHA1`, `STRING`
     */
    type: string;
}

export interface LogSensitiveDataMaskingMatchers {
    matchers: outputs.LogSensitiveDataMaskingMatchersMatcher[];
}

export interface LogSensitiveDataMaskingMatchersMatcher {
    /**
     * Possible Values: `Container_name`, `Dt_entity_container_group`, `Dt_entity_process_group`, `K8s_container_name`, `K8s_deployment_name`, `K8s_namespace_name`, `Log_source`, `Process_technology`
     */
    attribute: string;
    /**
     * Possible Values: `MATCHES`
     */
    operator: string;
    /**
     * no documentation available
     */
    values: string[];
}

export interface LogStorageMatchers {
    matchers: outputs.LogStorageMatchersMatcher[];
}

export interface LogStorageMatchersMatcher {
    /**
     * Possible Values: `Container_name`, `Dt_entity_container_group`, `Dt_entity_process_group`, `Host_tag`, `K8s_container_name`, `K8s_deployment_name`, `K8s_namespace_name`, `Log_content`, `Log_source`, `Loglevel`, `Process_technology`, `Winlog_eventid`, `Winlog_opcode`, `Winlog_provider`, `Winlog_task`
     */
    attribute: string;
    /**
     * Possible Values: `MATCHES`
     */
    operator: string;
    /**
     * no documentation available
     */
    values: string[];
}

export interface LogTimestampMatchers {
    matchers: outputs.LogTimestampMatchersMatcher[];
}

export interface LogTimestampMatchersMatcher {
    /**
     * Possible Values: `Container_name`, `Dt_entity_container_group`, `Dt_entity_process_group`, `K8s_container_name`, `K8s_deployment_name`, `K8s_namespace_name`, `Log_source`, `Process_technology`
     */
    attribute: string;
    /**
     * Possible Values: `MATCHES`
     */
    operator: string;
    /**
     * no documentation available
     */
    values: string[];
}

export interface MaintenanceFilters {
    filters: outputs.MaintenanceFiltersFilter[];
}

export interface MaintenanceFiltersFilter {
    /**
     * A specific entity that should match this maintenance window.. **Note**: If an entity type filter value is set, it must be equal to the type of the selected entity. Otherwise this maintenance window will not match.
     */
    entityId?: string;
    /**
     * Entities which contain all of the configured tags will match this maintenance window.
     */
    entityTags?: string[];
    /**
     * Type of entities this maintenance window should match.. If no entity type is selected all entities regardless of the type will match.
     */
    entityType?: string;
    /**
     * Entities which are part of all the configured management zones will match this maintenance window.
     */
    managementZones?: string[];
}

export interface MaintenanceGeneralProperties {
    /**
     * A short description of the maintenance purpose.
     */
    description?: string;
    /**
     * Disables the execution of the synthetic monitors that are within [the scope of this maintenance window](https://dt-url.net/0e0341m).
     */
    disableSynthetic: boolean;
    /**
     * The name of the maintenance window, displayed in the UI
     */
    name: string;
    /**
     * The type of suppression of alerting and problem detection during the maintenance. Possible Values: `DETECT_PROBLEMS_AND_ALERT`, `DETECT_PROBLEMS_DONT_ALERT`, `DONT_DETECT_PROBLEMS`
     */
    suppression: string;
    /**
     * The type of the maintenance, possible values: `PLANNED` or `UNPLANNED`
     */
    type: string;
}

export interface MaintenanceSchedule {
    /**
     * The configuration for maintenance windows occuring daily
     */
    dailyRecurrence?: outputs.MaintenanceScheduleDailyRecurrence;
    /**
     * The configuration for maintenance windows occuring monthly
     */
    monthlyRecurrence?: outputs.MaintenanceScheduleMonthlyRecurrence;
    /**
     * The configuration for maintenance windows occuring once
     */
    onceRecurrence?: outputs.MaintenanceScheduleOnceRecurrence;
    /**
     * The type maintenance window, possible values: `DAILY`, `MONTHLY`, `ONCE`, `WEEKLY`
     */
    type: string;
    /**
     * The configuration for maintenance windows occuring weekly
     */
    weeklyRecurrence?: outputs.MaintenanceScheduleWeeklyRecurrence;
}

export interface MaintenanceScheduleDailyRecurrence {
    /**
     * The recurrence date range of the maintenance window
     */
    recurrenceRange: outputs.MaintenanceScheduleDailyRecurrenceRecurrenceRange;
    /**
     * The time window of the maintenance window
     */
    timeWindow: outputs.MaintenanceScheduleDailyRecurrenceTimeWindow;
}

export interface MaintenanceScheduleDailyRecurrenceRecurrenceRange {
    /**
     * The end date of the recurrence range in YYYY-MM-DD format
     */
    endDate: string;
    /**
     * The start date of the recurrence range in YYYY-MM-DD format
     */
    startDate: string;
}

export interface MaintenanceScheduleDailyRecurrenceTimeWindow {
    /**
     * The end time of the maintenance window validity period in hh:mm:ss format
     */
    endTime: string;
    /**
     * The start time of the maintenance window validity period in hh:mm:ss format
     */
    startTime: string;
    /**
     * The time zone of the start and end time. Default time zone is UTC. You can use either UTC offset `UTC+01:00` format or the IANA Time Zone Database format (for example, `Europe/Vienna`)
     */
    timeZone: string;
}

export interface MaintenanceScheduleMonthlyRecurrence {
    /**
     * The day of the month for monthly maintenance. If the selected day does not fall within the month, the maintenance window will be active on the last day of the month.
     */
    dayOfMonth: number;
    /**
     * The recurrence date range of the maintenance window
     */
    recurrenceRange: outputs.MaintenanceScheduleMonthlyRecurrenceRecurrenceRange;
    /**
     * The time window of the maintenance window
     */
    timeWindow: outputs.MaintenanceScheduleMonthlyRecurrenceTimeWindow;
}

export interface MaintenanceScheduleMonthlyRecurrenceRecurrenceRange {
    /**
     * The end date of the recurrence range in YYYY-MM-DD format
     */
    endDate: string;
    /**
     * The start date of the recurrence range in YYYY-MM-DD format
     */
    startDate: string;
}

export interface MaintenanceScheduleMonthlyRecurrenceTimeWindow {
    /**
     * The end time of the maintenance window validity period in hh:mm:ss format
     */
    endTime: string;
    /**
     * The start time of the maintenance window validity period in hh:mm:ss format
     */
    startTime: string;
    /**
     * The time zone of the start and end time. Default time zone is UTC. You can use either UTC offset `UTC+01:00` format or the IANA Time Zone Database format (for example, `Europe/Vienna`)
     */
    timeZone: string;
}

export interface MaintenanceScheduleOnceRecurrence {
    /**
     * The end time of the maintenance window validity period in hh:mm:ss format
     */
    endTime: string;
    /**
     * The start time of the maintenance window validity period in hh:mm:ss format
     */
    startTime: string;
    /**
     * The time zone of the start and end time. Default time zone is UTC. You can use either UTC offset `UTC+01:00` format or the IANA Time Zone Database format (for example, `Europe/Vienna`)
     */
    timeZone: string;
}

export interface MaintenanceScheduleWeeklyRecurrence {
    /**
     * The day of the week for weekly maintenance, possible values: `FRIDAY`, `MONDAY`, `SATURDAY`, `SUNDAY`, `THURSDAY`, `TUESDAY`, `WEDNESDAY`
     */
    dayOfWeek: string;
    /**
     * The recurrence date range of the maintenance window
     */
    recurrenceRange: outputs.MaintenanceScheduleWeeklyRecurrenceRecurrenceRange;
    /**
     * The time window of the maintenance window
     */
    timeWindow: outputs.MaintenanceScheduleWeeklyRecurrenceTimeWindow;
}

export interface MaintenanceScheduleWeeklyRecurrenceRecurrenceRange {
    /**
     * The end date of the recurrence range in YYYY-MM-DD format
     */
    endDate: string;
    /**
     * The start date of the recurrence range in YYYY-MM-DD format
     */
    startDate: string;
}

export interface MaintenanceScheduleWeeklyRecurrenceTimeWindow {
    /**
     * The end time of the maintenance window validity period in hh:mm:ss format
     */
    endTime: string;
    /**
     * The start time of the maintenance window validity period in hh:mm:ss format
     */
    startTime: string;
    /**
     * The time zone of the start and end time. Default time zone is UTC. You can use either UTC offset `UTC+01:00` format or the IANA Time Zone Database format (for example, `Europe/Vienna`)
     */
    timeZone: string;
}

export interface MaintenanceWindowSchedule {
    /**
     * The end date and time of the maintenance window validity period in yyyy-mm-dd HH:mm format
     */
    end: string;
    /**
     * The recurrence of the maintenance window
     */
    recurrence?: outputs.MaintenanceWindowScheduleRecurrence;
    /**
     * The type of the schedule recurrence. Possible values are `DAILY`, `MONTHLY`, `ONCE` and `WEEKLY`
     */
    recurrenceType: string;
    /**
     * The start date and time of the maintenance window validity period in yyyy-mm-dd HH:mm format
     */
    start: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
    /**
     * The time zone of the start and end time. Default time zone is UTC. You can use either UTC offset `UTC+01:00` format or the IANA Time Zone Database format (for example, `Europe/Vienna`)
     */
    zoneId: string;
}

export interface MaintenanceWindowScheduleRecurrence {
    /**
     * The day of the month for monthly maintenance.  The value of `31` is treated as the last day of the month for months that don't have a 31st day. The value of `30` is also treated as the last day of the month for February
     */
    dayOfMonth?: number;
    /**
     * The day of the week for weekly maintenance.  The format is the full name of the day in upper case, for example `THURSDAY`
     */
    dayOfWeek?: string;
    /**
     * The duration of the maintenance window in minutes
     */
    durationMinutes: number;
    /**
     * The start time of the maintenance window in HH:mm format
     */
    startTime: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface MaintenanceWindowScope {
    /**
     * A list of Dynatrace entities (for example, hosts or services) to be included in the scope.  Allowed values are Dynatrace entity IDs
     */
    entities?: string[];
    /**
     * A list of matching rules for dynamic scope formation.  If several rules are set, the OR logic applies
     */
    matches?: outputs.MaintenanceWindowScopeMatch[];
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface MaintenanceWindowScopeMatch {
    /**
     * The ID of a management zone to which the matched entities must belong
     */
    mzId?: string;
    /**
     * The logic that applies when several tags are specified: AND/OR.  If not set, the OR logic is used
     */
    tagCombination?: string;
    /**
     * The tag you want to use for matching.  You can use custom tags from the UI, AWS tags, Cloud Foundry tags, OpenShift/Kubernetes, and tags based on environment variables
     */
    tags?: outputs.MaintenanceWindowScopeMatchTag[];
    /**
     * The type of the Dynatrace entities (for example, hosts or services) you want to pick up by matching
     */
    type?: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface MaintenanceWindowScopeMatchTag {
    /**
     * The origin of the tag, such as AWS or Cloud Foundry. Custom tags use the `CONTEXTLESS` value
     */
    context: string;
    /**
     * The key of the tag. Custom tags have the tag value here
     */
    key: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
    /**
     * The value of the tag. Not applicable to custom tags
     */
    value?: string;
}

export interface ManagementZoneDimensionalRule {
    appliesTo: string;
    conditions?: outputs.ManagementZoneDimensionalRuleCondition[];
    enabled?: boolean;
    unknowns?: string;
}

export interface ManagementZoneDimensionalRuleCondition {
    key: string;
    match: string;
    type: string;
    unknowns?: string;
    value?: string;
}

export interface ManagementZoneEntitySelectorBasedRule {
    enabled?: boolean;
    selector?: string;
    unknowns?: string;
}

export interface ManagementZoneRule {
    conditions?: outputs.ManagementZoneRuleCondition[];
    enabled?: boolean;
    propagationTypes?: string[];
    type: string;
    unknowns?: string;
}

export interface ManagementZoneRuleCondition {
    /**
     * @deprecated You should use 'application_type' instead of 'application_type_comparison'. This attribute still exists for backwards compatibility.
     */
    applicationTypeComparisons?: outputs.ManagementZoneRuleConditionApplicationTypeComparison[];
    applicationTypes?: outputs.ManagementZoneRuleConditionApplicationType[];
    azureComputeModeComparisons?: outputs.ManagementZoneRuleConditionAzureComputeModeComparison[];
    /**
     * @deprecated You should use 'azure_compute_mode' instead of 'azure_compute_mode_comparison'. This attribute still exists for backwards compatibility.
     */
    azureComputeModes?: outputs.ManagementZoneRuleConditionAzureComputeMode[];
    /**
     * @deprecated You should use 'azure_sku' instead of 'azure_sku_comparision'. This attribute still exists for backwards compatibility.
     */
    azureSkuComparisions?: outputs.ManagementZoneRuleConditionAzureSkuComparision[];
    azureSkus?: outputs.ManagementZoneRuleConditionAzureSkus[];
    /**
     * @deprecated You should use 'comparison' instead of 'base_comparison_basic'. This attribute still exists for backwards compatibility.
     */
    baseComparisonBasics?: outputs.ManagementZoneRuleConditionBaseComparisonBasic[];
    /**
     * @deprecated 'base_condition_key' is deprecated. You should use 'key'
     */
    baseConditionKeys?: outputs.ManagementZoneRuleConditionBaseConditionKey[];
    /**
     * @deprecated You should use 'bitness' instead of 'bitness_comparision'. This attribute still exists for backwards compatibility.
     */
    bitnessComparisions?: outputs.ManagementZoneRuleConditionBitnessComparision[];
    bitnesses?: outputs.ManagementZoneRuleConditionBitness[];
    /**
     * @deprecated You should use 'cloud_type' instead of 'cloud_type_comparison'. This attribute still exists for backwards compatibility.
     */
    cloudTypeComparisons?: outputs.ManagementZoneRuleConditionCloudTypeComparison[];
    cloudTypes?: outputs.ManagementZoneRuleConditionCloudType[];
    comparisons?: outputs.ManagementZoneRuleConditionComparison[];
    /**
     * @deprecated You should use 'custom_application_type' instead of 'custom_application_type_comparison'. This attribute still exists for backwards compatibility.
     */
    customApplicationTypeComparisons?: outputs.ManagementZoneRuleConditionCustomApplicationTypeComparison[];
    customApplicationTypes?: outputs.ManagementZoneRuleConditionCustomApplicationType[];
    /**
     * @deprecated 'custom_host_metadata_condition_key' is deprecated. You should use 'custom_host_metadata'
     */
    customHostMetadataConditionKeys?: outputs.ManagementZoneRuleConditionCustomHostMetadataConditionKey[];
    customHostMetadatas?: outputs.ManagementZoneRuleConditionCustomHostMetadata[];
    /**
     * @deprecated 'custom_process_metadata_condition_key' is deprecated. You should use 'custom_process_metadata'
     */
    customProcessMetadataConditionKeys?: outputs.ManagementZoneRuleConditionCustomProcessMetadataConditionKey[];
    customProcessMetadatas?: outputs.ManagementZoneRuleConditionCustomProcessMetadata[];
    databaseTopologies?: outputs.ManagementZoneRuleConditionDatabaseTopology[];
    /**
     * @deprecated You should use 'database_topology' instead of 'database_topology_comparison'. This attribute still exists for backwards compatibility.
     */
    databaseTopologyComparisons?: outputs.ManagementZoneRuleConditionDatabaseTopologyComparison[];
    /**
     * @deprecated You should use 'dcrum_decoder' instead of 'dcrum_decoder_comparison'. This attribute still exists for backwards compatibility.
     */
    dcrumDecoderComparisons?: outputs.ManagementZoneRuleConditionDcrumDecoderComparison[];
    dcrumDecoders?: outputs.ManagementZoneRuleConditionDcrumDecoder[];
    entities?: outputs.ManagementZoneRuleConditionEntity[];
    /**
     * @deprecated You should use 'entity' instead of 'entity_id_comparison'. This attribute still exists for backwards compatibility.
     */
    entityIdComparisons?: outputs.ManagementZoneRuleConditionEntityIdComparison[];
    hostTeches?: outputs.ManagementZoneRuleConditionHostTech[];
    /**
     * @deprecated `hypervisor_type_comparision` is deprecated. Use `hypervisor` instead
     */
    hypervisorTypeComparisions?: outputs.ManagementZoneRuleConditionHypervisorTypeComparision[];
    hypervisors?: outputs.ManagementZoneRuleConditionHypervisor[];
    /**
     * @deprecated You should use 'indexed_name' instead of 'indexed_name_comparison'. This attribute still exists for backwards compatibility.
     */
    indexedNameComparisons?: outputs.ManagementZoneRuleConditionIndexedNameComparison[];
    indexedNames?: outputs.ManagementZoneRuleConditionIndexedName[];
    /**
     * @deprecated You should use 'indexed_string' instead of 'indexed_string_comparison'. This attribute still exists for backwards compatibility.
     */
    indexedStringComparisons?: outputs.ManagementZoneRuleConditionIndexedStringComparison[];
    indexedStrings?: outputs.ManagementZoneRuleConditionIndexedString[];
    /**
     * @deprecated You should use 'indexed_tag' instead of 'indexed_tag_comparison'. This attribute still exists for backwards compatibility.
     */
    indexedTagComparisons?: outputs.ManagementZoneRuleConditionIndexedTagComparison[];
    indexedTags?: outputs.ManagementZoneRuleConditionIndexedTag[];
    /**
     * @deprecated You should use 'integer' instead of 'integer_comparison'. This attribute still exists for backwards compatibility.
     */
    integerComparisons?: outputs.ManagementZoneRuleConditionIntegerComparison[];
    integers?: outputs.ManagementZoneRuleConditionInteger[];
    /**
     * @deprecated You should use 'ipaddress' instead of 'ipaddress_comparison'. This attribute still exists for backwards compatibility.
     */
    ipaddressComparisons?: outputs.ManagementZoneRuleConditionIpaddressComparison[];
    ipaddresses?: outputs.ManagementZoneRuleConditionIpaddress[];
    keys?: outputs.ManagementZoneRuleConditionKey[];
    /**
     * @deprecated You should use 'mobile_platform' instead of 'mobile_platform_comparison'. This attribute still exists for backwards compatibility.
     */
    mobilePlatformComparisons?: outputs.ManagementZoneRuleConditionMobilePlatformComparison[];
    mobilePlatforms?: outputs.ManagementZoneRuleConditionMobilePlatform[];
    osArches?: outputs.ManagementZoneRuleConditionOsArch[];
    osTypes?: outputs.ManagementZoneRuleConditionOsType[];
    /**
     * @deprecated You should use 'os_arch' instead of 'osarchitecture_comparison'. This attribute still exists for backwards compatibility.
     */
    osarchitectureComparisons?: outputs.ManagementZoneRuleConditionOsarchitectureComparison[];
    /**
     * @deprecated You should use 'os_type' instead of 'ostype_comparison'. This attribute still exists for backwards compatibility.
     */
    ostypeComparisons?: outputs.ManagementZoneRuleConditionOstypeComparison[];
    /**
     * @deprecated You should use 'paas_type' instead of 'paas_type_comparison'. This attribute still exists for backwards compatibility.
     */
    paasTypeComparisons?: outputs.ManagementZoneRuleConditionPaasTypeComparison[];
    paasTypes?: outputs.ManagementZoneRuleConditionPaasType[];
    /**
     * @deprecated 'process_metadata_condition_key' is deprecated. You should use 'process_metadata'
     */
    processMetadataConditionKeys?: outputs.ManagementZoneRuleConditionProcessMetadataConditionKey[];
    processMetadatas?: outputs.ManagementZoneRuleConditionProcessMetadata[];
    serviceTopologies?: outputs.ManagementZoneRuleConditionServiceTopology[];
    /**
     * @deprecated You should use 'service_topology' instead of 'service_topology_comparison'. This attribute still exists for backwards compatibility.
     */
    serviceTopologyComparisons?: outputs.ManagementZoneRuleConditionServiceTopologyComparison[];
    /**
     * @deprecated You should use 'service_type' instead of 'service_type_comparison'. This attribute still exists for backwards compatibility.
     */
    serviceTypeComparisons?: outputs.ManagementZoneRuleConditionServiceTypeComparison[];
    serviceTypes?: outputs.ManagementZoneRuleConditionServiceType[];
    /**
     * @deprecated You should use 'host_tech' instead of 'simple_host_tech_comparison'. This attribute still exists for backwards compatibility.
     */
    simpleHostTechComparisons?: outputs.ManagementZoneRuleConditionSimpleHostTechComparison[];
    /**
     * @deprecated You should use 'tech' instead of 'simple_tech_comparison'. This attribute still exists for backwards compatibility.
     */
    simpleTechComparisons?: outputs.ManagementZoneRuleConditionSimpleTechComparison[];
    /**
     * @deprecated You should use 'string' instead of 'string_comparison'. This attribute still exists for backwards compatibility.
     */
    stringComparisons?: outputs.ManagementZoneRuleConditionStringComparison[];
    /**
     * @deprecated 'string_condition_key' is deprecated. You should use 'string_key'
     */
    stringConditionKeys?: outputs.ManagementZoneRuleConditionStringConditionKey[];
    stringKeys?: outputs.ManagementZoneRuleConditionStringKey[];
    strings?: outputs.ManagementZoneRuleConditionString[];
    /**
     * @deprecated You should use 'synthetic_engine' instead of 'synthetic_engine_type_comparison'. This attribute still exists for backwards compatibility.
     */
    syntheticEngineTypeComparisons?: outputs.ManagementZoneRuleConditionSyntheticEngineTypeComparison[];
    syntheticEngines?: outputs.ManagementZoneRuleConditionSyntheticEngine[];
    /**
     * @deprecated You should use 'tag' instead of 'tag_comparison'. This attribute still exists for backwards compatibility.
     */
    tagComparisons?: outputs.ManagementZoneRuleConditionTagComparison[];
    tags?: outputs.ManagementZoneRuleConditionTag[];
    teches?: outputs.ManagementZoneRuleConditionTech[];
    unknowns?: string;
}

export interface ManagementZoneRuleConditionApplicationType {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface ManagementZoneRuleConditionApplicationTypeComparison {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: string;
}

export interface ManagementZoneRuleConditionAzureComputeMode {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface ManagementZoneRuleConditionAzureComputeModeComparison {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface ManagementZoneRuleConditionAzureSkuComparision {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: string;
}

export interface ManagementZoneRuleConditionAzureSkus {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface ManagementZoneRuleConditionBaseComparisonBasic {
    negate?: boolean;
    type: string;
    unknowns?: string;
}

export interface ManagementZoneRuleConditionBaseConditionKey {
    attribute: string;
    type?: string;
    unknowns?: string;
}

export interface ManagementZoneRuleConditionBitness {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface ManagementZoneRuleConditionBitnessComparision {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: string;
}

export interface ManagementZoneRuleConditionCloudType {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface ManagementZoneRuleConditionCloudTypeComparison {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: string;
}

export interface ManagementZoneRuleConditionComparison {
    negate?: boolean;
    type: string;
    unknowns?: string;
}

export interface ManagementZoneRuleConditionCustomApplicationType {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface ManagementZoneRuleConditionCustomApplicationTypeComparison {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: string;
}

export interface ManagementZoneRuleConditionCustomHostMetadata {
    attribute: string;
    dynamicKey: outputs.ManagementZoneRuleConditionCustomHostMetadataDynamicKey;
    unknowns?: string;
}

export interface ManagementZoneRuleConditionCustomHostMetadataConditionKey {
    attribute: string;
    dynamicKey: outputs.ManagementZoneRuleConditionCustomHostMetadataConditionKeyDynamicKey;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
}

export interface ManagementZoneRuleConditionCustomHostMetadataConditionKeyDynamicKey {
    key: string;
    source: string;
    unknowns?: string;
}

export interface ManagementZoneRuleConditionCustomHostMetadataDynamicKey {
    key: string;
    source: string;
    unknowns?: string;
}

export interface ManagementZoneRuleConditionCustomProcessMetadata {
    attribute: string;
    dynamicKey: outputs.ManagementZoneRuleConditionCustomProcessMetadataDynamicKey;
    unknowns?: string;
}

export interface ManagementZoneRuleConditionCustomProcessMetadataConditionKey {
    attribute: string;
    dynamicKey: outputs.ManagementZoneRuleConditionCustomProcessMetadataConditionKeyDynamicKey;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
}

export interface ManagementZoneRuleConditionCustomProcessMetadataConditionKeyDynamicKey {
    key: string;
    source: string;
    unknowns?: string;
}

export interface ManagementZoneRuleConditionCustomProcessMetadataDynamicKey {
    key: string;
    source: string;
    unknowns?: string;
}

export interface ManagementZoneRuleConditionDatabaseTopology {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface ManagementZoneRuleConditionDatabaseTopologyComparison {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: string;
}

export interface ManagementZoneRuleConditionDcrumDecoder {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface ManagementZoneRuleConditionDcrumDecoderComparison {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: string;
}

export interface ManagementZoneRuleConditionEntity {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface ManagementZoneRuleConditionEntityIdComparison {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: string;
}

export interface ManagementZoneRuleConditionHostTech {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: outputs.ManagementZoneRuleConditionHostTechValue;
}

export interface ManagementZoneRuleConditionHostTechValue {
    type?: string;
    unknowns?: string;
    verbatimType?: string;
}

export interface ManagementZoneRuleConditionHypervisor {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface ManagementZoneRuleConditionHypervisorTypeComparision {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: string;
}

export interface ManagementZoneRuleConditionIndexedName {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface ManagementZoneRuleConditionIndexedNameComparison {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: string;
}

export interface ManagementZoneRuleConditionIndexedString {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface ManagementZoneRuleConditionIndexedStringComparison {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: string;
}

export interface ManagementZoneRuleConditionIndexedTag {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: outputs.ManagementZoneRuleConditionIndexedTagValue;
}

export interface ManagementZoneRuleConditionIndexedTagComparison {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: outputs.ManagementZoneRuleConditionIndexedTagComparisonValue;
}

export interface ManagementZoneRuleConditionIndexedTagComparisonValue {
    context: string;
    key: string;
    unknowns?: string;
    value?: string;
}

export interface ManagementZoneRuleConditionIndexedTagValue {
    context: string;
    key: string;
    unknowns?: string;
    value?: string;
}

export interface ManagementZoneRuleConditionInteger {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: number;
}

export interface ManagementZoneRuleConditionIntegerComparison {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: number;
}

export interface ManagementZoneRuleConditionIpaddress {
    caseSensitive?: boolean;
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface ManagementZoneRuleConditionIpaddressComparison {
    caseSensitive?: boolean;
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: string;
}

export interface ManagementZoneRuleConditionKey {
    attribute: string;
    type?: string;
    unknowns?: string;
}

export interface ManagementZoneRuleConditionMobilePlatform {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface ManagementZoneRuleConditionMobilePlatformComparison {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: string;
}

export interface ManagementZoneRuleConditionOsArch {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface ManagementZoneRuleConditionOsType {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface ManagementZoneRuleConditionOsarchitectureComparison {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: string;
}

export interface ManagementZoneRuleConditionOstypeComparison {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: string;
}

export interface ManagementZoneRuleConditionPaasType {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface ManagementZoneRuleConditionPaasTypeComparison {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: string;
}

export interface ManagementZoneRuleConditionProcessMetadata {
    attribute: string;
    dynamicKey: string;
    unknowns?: string;
}

export interface ManagementZoneRuleConditionProcessMetadataConditionKey {
    attribute: string;
    dynamicKey: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
}

export interface ManagementZoneRuleConditionServiceTopology {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface ManagementZoneRuleConditionServiceTopologyComparison {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: string;
}

export interface ManagementZoneRuleConditionServiceType {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface ManagementZoneRuleConditionServiceTypeComparison {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: string;
}

export interface ManagementZoneRuleConditionSimpleHostTechComparison {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: outputs.ManagementZoneRuleConditionSimpleHostTechComparisonValue;
}

export interface ManagementZoneRuleConditionSimpleHostTechComparisonValue {
    type?: string;
    unknowns?: string;
    verbatimType?: string;
}

export interface ManagementZoneRuleConditionSimpleTechComparison {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: outputs.ManagementZoneRuleConditionSimpleTechComparisonValue;
}

export interface ManagementZoneRuleConditionSimpleTechComparisonValue {
    type?: string;
    unknowns?: string;
    verbatimType?: string;
}

export interface ManagementZoneRuleConditionString {
    caseSensitive?: boolean;
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface ManagementZoneRuleConditionStringComparison {
    caseSensitive?: boolean;
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: string;
}

export interface ManagementZoneRuleConditionStringConditionKey {
    attribute: string;
    dynamicKey: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
}

export interface ManagementZoneRuleConditionStringKey {
    attribute: string;
    dynamicKey: string;
    unknowns?: string;
}

export interface ManagementZoneRuleConditionSyntheticEngine {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface ManagementZoneRuleConditionSyntheticEngineTypeComparison {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: string;
}

export interface ManagementZoneRuleConditionTag {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: outputs.ManagementZoneRuleConditionTagValue;
}

export interface ManagementZoneRuleConditionTagComparison {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: outputs.ManagementZoneRuleConditionTagComparisonValue;
}

export interface ManagementZoneRuleConditionTagComparisonValue {
    context: string;
    key: string;
    unknowns?: string;
    value?: string;
}

export interface ManagementZoneRuleConditionTagValue {
    context: string;
    key: string;
    unknowns?: string;
    value?: string;
}

export interface ManagementZoneRuleConditionTech {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: outputs.ManagementZoneRuleConditionTechValue;
}

export interface ManagementZoneRuleConditionTechValue {
    type?: string;
    unknowns?: string;
    verbatimType?: string;
}

export interface ManagementZoneV2Rules {
    /**
     * A management zone rule
     */
    rules: outputs.ManagementZoneV2RulesRule[];
}

export interface ManagementZoneV2RulesRule {
    /**
     * no documentation available
     */
    attributeRule?: outputs.ManagementZoneV2RulesRuleAttributeRule;
    /**
     * no documentation available
     */
    dimensionRule?: outputs.ManagementZoneV2RulesRuleDimensionRule;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * The documentation of the entity selector can be found [here](https://dt-url.net/apientityselector).
     */
    entitySelector?: string;
    /**
     * Possible Values: `DIMENSION`, `ME`, `SELECTOR`
     */
    type: string;
}

export interface ManagementZoneV2RulesRuleAttributeRule {
    /**
     * no documentation available
     */
    attributeConditions: outputs.ManagementZoneV2RulesRuleAttributeRuleAttributeConditions;
    /**
     * Apply to process groups connected to matching Azure entities
     */
    azureToPgpropagation?: boolean;
    /**
     * Apply to services provided by matching Azure entities
     */
    azureToServicePropagation?: boolean;
    /**
     * Apply to custom devices in a custom device group
     */
    customDeviceGroupToCustomDevicePropagation?: boolean;
    /**
     * Possible Values: `APPMON_SERVER`, `APPMON_SYSTEM_PROFILE`, `AWS_ACCOUNT`, `AWS_APPLICATION_LOAD_BALANCER`, `AWS_AUTO_SCALING_GROUP`, `AWS_CLASSIC_LOAD_BALANCER`, `AWS_NETWORK_LOAD_BALANCER`, `AWS_RELATIONAL_DATABASE_SERVICE`, `AZURE`, `BROWSER_MONITOR`, `CLOUD_APPLICATION`, `CLOUD_APPLICATION_NAMESPACE`, `CLOUD_FOUNDRY_FOUNDATION`, `CUSTOM_APPLICATION`, `CUSTOM_DEVICE`, `CUSTOM_DEVICE_GROUP`, `DATA_CENTER_SERVICE`, `ENTERPRISE_APPLICATION`, `ESXI_HOST`, `EXTERNAL_MONITOR`, `HOST`, `HOST_GROUP`, `HTTP_MONITOR`, `KUBERNETES_CLUSTER`, `KUBERNETES_SERVICE`, `MOBILE_APPLICATION`, `OPENSTACK_ACCOUNT`, `PROCESS_GROUP`, `QUEUE`, `SERVICE`, `WEB_APPLICATION`
     */
    entityType: string;
    /**
     * Apply to processes running on matching hosts
     */
    hostToPgpropagation?: boolean;
    /**
     * Apply to underlying hosts of matching process groups
     */
    pgToHostPropagation?: boolean;
    /**
     * Apply to all services provided by the process groups
     */
    pgToServicePropagation?: boolean;
    /**
     * Apply to underlying hosts of matching services
     */
    serviceToHostPropagation?: boolean;
    /**
     * Apply to underlying process groups of matching services
     */
    serviceToPgpropagation?: boolean;
}

export interface ManagementZoneV2RulesRuleAttributeRuleAttributeConditions {
    /**
     * Attribute conditions
     */
    conditions: outputs.ManagementZoneV2RulesRuleAttributeRuleAttributeConditionsCondition[];
}

export interface ManagementZoneV2RulesRuleAttributeRuleAttributeConditionsCondition {
    /**
     * Case sensitive
     */
    caseSensitive?: boolean;
    /**
     * Dynamic key
     */
    dynamicKey?: string;
    /**
     * Key source
     */
    dynamicKeySource?: string;
    /**
     * Value
     */
    entityId?: string;
    /**
     * Value
     */
    enumValue?: string;
    /**
     * Value
     */
    integerValue?: number;
    /**
     * Possible Values: `APPMON_SERVER_NAME`, `APPMON_SYSTEM_PROFILE_NAME`, `AWS_ACCOUNT_ID`, `AWS_ACCOUNT_NAME`, `AWS_APPLICATION_LOAD_BALANCER_NAME`, `AWS_APPLICATION_LOAD_BALANCER_TAGS`, `AWS_AUTO_SCALING_GROUP_NAME`, `AWS_AUTO_SCALING_GROUP_TAGS`, `AWS_AVAILABILITY_ZONE_NAME`, `AWS_CLASSIC_LOAD_BALANCER_FRONTEND_PORTS`, `AWS_CLASSIC_LOAD_BALANCER_NAME`, `AWS_CLASSIC_LOAD_BALANCER_TAGS`, `AWS_NETWORK_LOAD_BALANCER_NAME`, `AWS_NETWORK_LOAD_BALANCER_TAGS`, `AWS_RELATIONAL_DATABASE_SERVICE_DB_NAME`, `AWS_RELATIONAL_DATABASE_SERVICE_ENDPOINT`, `AWS_RELATIONAL_DATABASE_SERVICE_ENGINE`, `AWS_RELATIONAL_DATABASE_SERVICE_INSTANCE_CLASS`, `AWS_RELATIONAL_DATABASE_SERVICE_NAME`, `AWS_RELATIONAL_DATABASE_SERVICE_PORT`, `AWS_RELATIONAL_DATABASE_SERVICE_TAGS`, `AZURE_ENTITY_NAME`, `AZURE_ENTITY_TAGS`, `AZURE_MGMT_GROUP_NAME`, `AZURE_MGMT_GROUP_UUID`, `AZURE_REGION_NAME`, `AZURE_SCALE_SET_NAME`, `AZURE_SUBSCRIPTION_NAME`, `AZURE_SUBSCRIPTION_UUID`, `AZURE_TENANT_NAME`, `AZURE_TENANT_UUID`, `AZURE_VM_NAME`, `BROWSER_MONITOR_NAME`, `BROWSER_MONITOR_TAGS`, `CLOUD_APPLICATION_LABELS`, `CLOUD_APPLICATION_NAME`, `CLOUD_APPLICATION_NAMESPACE_LABELS`, `CLOUD_APPLICATION_NAMESPACE_NAME`, `CLOUD_FOUNDRY_FOUNDATION_NAME`, `CLOUD_FOUNDRY_ORG_NAME`, `CUSTOM_APPLICATION_NAME`, `CUSTOM_APPLICATION_PLATFORM`, `CUSTOM_APPLICATION_TAGS`, `CUSTOM_APPLICATION_TYPE`, `CUSTOM_DEVICE_DNS_ADDRESS`, `CUSTOM_DEVICE_GROUP_NAME`, `CUSTOM_DEVICE_GROUP_TAGS`, `CUSTOM_DEVICE_IP_ADDRESS`, `CUSTOM_DEVICE_METADATA`, `CUSTOM_DEVICE_NAME`, `CUSTOM_DEVICE_PORT`, `CUSTOM_DEVICE_TAGS`, `CUSTOM_DEVICE_TECHNOLOGY`, `DATA_CENTER_SERVICE_DECODER_TYPE`, `DATA_CENTER_SERVICE_IP_ADDRESS`, `DATA_CENTER_SERVICE_METADATA`, `DATA_CENTER_SERVICE_NAME`, `DATA_CENTER_SERVICE_PORT`, `DATA_CENTER_SERVICE_TAGS`, `DOCKER_CONTAINER_NAME`, `DOCKER_FULL_IMAGE_NAME`, `DOCKER_IMAGE_VERSION`, `EC2_INSTANCE_AMI_ID`, `EC2_INSTANCE_AWS_INSTANCE_TYPE`, `EC2_INSTANCE_AWS_SECURITY_GROUP`, `EC2_INSTANCE_BEANSTALK_ENV_NAME`, `EC2_INSTANCE_ID`, `EC2_INSTANCE_NAME`, `EC2_INSTANCE_PRIVATE_HOST_NAME`, `EC2_INSTANCE_PUBLIC_HOST_NAME`, `EC2_INSTANCE_TAGS`, `ENTERPRISE_APPLICATION_DECODER_TYPE`, `ENTERPRISE_APPLICATION_IP_ADDRESS`, `ENTERPRISE_APPLICATION_METADATA`, `ENTERPRISE_APPLICATION_NAME`, `ENTERPRISE_APPLICATION_PORT`, `ENTERPRISE_APPLICATION_TAGS`, `ESXI_HOST_CLUSTER_NAME`, `ESXI_HOST_HARDWARE_MODEL`, `ESXI_HOST_HARDWARE_VENDOR`, `ESXI_HOST_NAME`, `ESXI_HOST_PRODUCT_NAME`, `ESXI_HOST_PRODUCT_VERSION`, `ESXI_HOST_TAGS`, `EXTERNAL_MONITOR_ENGINE_DESCRIPTION`, `EXTERNAL_MONITOR_ENGINE_NAME`, `EXTERNAL_MONITOR_ENGINE_TYPE`, `EXTERNAL_MONITOR_NAME`, `EXTERNAL_MONITOR_TAGS`, `GEOLOCATION_SITE_NAME`, `GOOGLE_CLOUD_PLATFORM_ZONE_NAME`, `GOOGLE_COMPUTE_INSTANCE_ID`, `GOOGLE_COMPUTE_INSTANCE_MACHINE_TYPE`, `GOOGLE_COMPUTE_INSTANCE_NAME`, `GOOGLE_COMPUTE_INSTANCE_PROJECT`, `GOOGLE_COMPUTE_INSTANCE_PROJECT_ID`, `GOOGLE_COMPUTE_INSTANCE_PUBLIC_IP_ADDRESSES`, `HOST_AIX_LOGICAL_CPU_COUNT`, `HOST_AIX_SIMULTANEOUS_THREADS`, `HOST_AIX_VIRTUAL_CPU_COUNT`, `HOST_ARCHITECTURE`, `HOST_AWS_NAME_TAG`, `HOST_AZURE_COMPUTE_MODE`, `HOST_AZURE_SKU`, `HOST_AZURE_WEB_APPLICATION_HOST_NAMES`, `HOST_AZURE_WEB_APPLICATION_SITE_NAMES`, `HOST_BITNESS`, `HOST_BOSH_AVAILABILITY_ZONE`, `HOST_BOSH_DEPLOYMENT_ID`, `HOST_BOSH_INSTANCE_ID`, `HOST_BOSH_INSTANCE_NAME`, `HOST_BOSH_NAME`, `HOST_BOSH_STEMCELL_VERSION`, `HOST_CLOUD_TYPE`, `HOST_CPU_CORES`, `HOST_CUSTOM_METADATA`, `HOST_DETECTED_NAME`, `HOST_GROUP_ID`, `HOST_GROUP_NAME`, `HOST_HYPERVISOR_TYPE`, `HOST_IP_ADDRESS`, `HOST_KUBERNETES_LABELS`, `HOST_LOGICAL_CPU_CORES`, `HOST_NAME`, `HOST_ONEAGENT_CUSTOM_HOST_NAME`, `HOST_OS_TYPE`, `HOST_OS_VERSION`, `HOST_PAAS_MEMORY_LIMIT`, `HOST_PAAS_TYPE`, `HOST_TAGS`, `HOST_TECHNOLOGY`, `HTTP_MONITOR_NAME`, `HTTP_MONITOR_TAGS`, `KUBERNETES_CLUSTER_NAME`, `KUBERNETES_NODE_NAME`, `KUBERNETES_SERVICE_NAME`, `MOBILE_APPLICATION_NAME`, `MOBILE_APPLICATION_PLATFORM`, `MOBILE_APPLICATION_TAGS`, `NAME_OF_COMPUTE_NODE`, `OPENSTACK_ACCOUNT_NAME`, `OPENSTACK_ACCOUNT_PROJECT_NAME`, `OPENSTACK_AVAILABILITY_ZONE_NAME`, `OPENSTACK_PROJECT_NAME`, `OPENSTACK_REGION_NAME`, `OPENSTACK_VM_INSTANCE_TYPE`, `OPENSTACK_VM_NAME`, `OPENSTACK_VM_SECURITY_GROUP`, `PROCESS_GROUP_AZURE_HOST_NAME`, `PROCESS_GROUP_AZURE_SITE_NAME`, `PROCESS_GROUP_CUSTOM_METADATA`, `PROCESS_GROUP_DETECTED_NAME`, `PROCESS_GROUP_ID`, `PROCESS_GROUP_LISTEN_PORT`, `PROCESS_GROUP_NAME`, `PROCESS_GROUP_PREDEFINED_METADATA`, `PROCESS_GROUP_TAGS`, `PROCESS_GROUP_TECHNOLOGY`, `PROCESS_GROUP_TECHNOLOGY_EDITION`, `PROCESS_GROUP_TECHNOLOGY_VERSION`, `QUEUE_NAME`, `QUEUE_TECHNOLOGY`, `QUEUE_VENDOR`, `SERVICE_AKKA_ACTOR_SYSTEM`, `SERVICE_CTG_SERVICE_NAME`, `SERVICE_DATABASE_HOST_NAME`, `SERVICE_DATABASE_NAME`, `SERVICE_DATABASE_TOPOLOGY`, `SERVICE_DATABASE_VENDOR`, `SERVICE_DETECTED_NAME`, `SERVICE_ESB_APPLICATION_NAME`, `SERVICE_IBM_CTG_GATEWAY_URL`, `SERVICE_MESSAGING_LISTENER_CLASS_NAME`, `SERVICE_NAME`, `SERVICE_PORT`, `SERVICE_PUBLIC_DOMAIN_NAME`, `SERVICE_REMOTE_ENDPOINT`, `SERVICE_REMOTE_SERVICE_NAME`, `SERVICE_TAGS`, `SERVICE_TECHNOLOGY`, `SERVICE_TECHNOLOGY_EDITION`, `SERVICE_TECHNOLOGY_VERSION`, `SERVICE_TOPOLOGY`, `SERVICE_TYPE`, `SERVICE_WEB_APPLICATION_ID`, `SERVICE_WEB_CONTEXT_ROOT`, `SERVICE_WEB_SERVER_ENDPOINT`, `SERVICE_WEB_SERVER_NAME`, `SERVICE_WEB_SERVICE_NAME`, `SERVICE_WEB_SERVICE_NAMESPACE`, `VMWARE_DATACENTER_NAME`, `VMWARE_VM_NAME`, `WEB_APPLICATION_NAME`, `WEB_APPLICATION_NAME_PATTERN`, `WEB_APPLICATION_TAGS`, `WEB_APPLICATION_TYPE`
     */
    key: string;
    /**
     * Possible Values: `BEGINS_WITH`, `CONTAINS`, `ENDS_WITH`, `EQUALS`, `EXISTS`, `GREATER_THAN`, `GREATER_THAN_OR_EQUAL`, `IS_IP_IN_RANGE`, `LOWER_THAN`, `LOWER_THAN_OR_EQUAL`, `NOT_BEGINS_WITH`, `NOT_CONTAINS`, `NOT_ENDS_WITH`, `NOT_EQUALS`, `NOT_EXISTS`, `NOT_GREATER_THAN`, `NOT_GREATER_THAN_OR_EQUAL`, `NOT_IS_IP_IN_RANGE`, `NOT_LOWER_THAN`, `NOT_LOWER_THAN_OR_EQUAL`, `NOT_REGEX_MATCHES`, `NOT_TAG_KEY_EQUALS`, `REGEX_MATCHES`, `TAG_KEY_EQUALS`
     */
    operator: string;
    /**
     * Value
     */
    stringValue?: string;
    /**
     * Format: `[CONTEXT]tagKey:tagValue`
     */
    tag?: string;
}

export interface ManagementZoneV2RulesRuleDimensionRule {
    /**
     * Possible Values: `ANY`, `LOG`, `METRIC`
     */
    appliesTo: string;
    /**
     * Conditions
     */
    dimensionConditions?: outputs.ManagementZoneV2RulesRuleDimensionRuleDimensionConditions;
}

export interface ManagementZoneV2RulesRuleDimensionRuleDimensionConditions {
    /**
     * Attribute conditions
     */
    conditions: outputs.ManagementZoneV2RulesRuleDimensionRuleDimensionConditionsCondition[];
}

export interface ManagementZoneV2RulesRuleDimensionRuleDimensionConditionsCondition {
    /**
     * Possible Values: `DIMENSION`, `LOG_FILE_NAME`, `METRIC_KEY`
     */
    conditionType: string;
    /**
     * Possible Values: `APPMON_SERVER_NAME`, `APPMON_SYSTEM_PROFILE_NAME`, `AWS_ACCOUNT_ID`, `AWS_ACCOUNT_NAME`, `AWS_APPLICATION_LOAD_BALANCER_NAME`, `AWS_APPLICATION_LOAD_BALANCER_TAGS`, `AWS_AUTO_SCALING_GROUP_NAME`, `AWS_AUTO_SCALING_GROUP_TAGS`, `AWS_AVAILABILITY_ZONE_NAME`, `AWS_CLASSIC_LOAD_BALANCER_FRONTEND_PORTS`, `AWS_CLASSIC_LOAD_BALANCER_NAME`, `AWS_CLASSIC_LOAD_BALANCER_TAGS`, `AWS_NETWORK_LOAD_BALANCER_NAME`, `AWS_NETWORK_LOAD_BALANCER_TAGS`, `AWS_RELATIONAL_DATABASE_SERVICE_DB_NAME`, `AWS_RELATIONAL_DATABASE_SERVICE_ENDPOINT`, `AWS_RELATIONAL_DATABASE_SERVICE_ENGINE`, `AWS_RELATIONAL_DATABASE_SERVICE_INSTANCE_CLASS`, `AWS_RELATIONAL_DATABASE_SERVICE_NAME`, `AWS_RELATIONAL_DATABASE_SERVICE_PORT`, `AWS_RELATIONAL_DATABASE_SERVICE_TAGS`, `AZURE_ENTITY_NAME`, `AZURE_ENTITY_TAGS`, `AZURE_MGMT_GROUP_NAME`, `AZURE_MGMT_GROUP_UUID`, `AZURE_REGION_NAME`, `AZURE_SCALE_SET_NAME`, `AZURE_SUBSCRIPTION_NAME`, `AZURE_SUBSCRIPTION_UUID`, `AZURE_TENANT_NAME`, `AZURE_TENANT_UUID`, `AZURE_VM_NAME`, `BROWSER_MONITOR_NAME`, `BROWSER_MONITOR_TAGS`, `CLOUD_APPLICATION_LABELS`, `CLOUD_APPLICATION_NAME`, `CLOUD_APPLICATION_NAMESPACE_LABELS`, `CLOUD_APPLICATION_NAMESPACE_NAME`, `CLOUD_FOUNDRY_FOUNDATION_NAME`, `CLOUD_FOUNDRY_ORG_NAME`, `CUSTOM_APPLICATION_NAME`, `CUSTOM_APPLICATION_PLATFORM`, `CUSTOM_APPLICATION_TAGS`, `CUSTOM_APPLICATION_TYPE`, `CUSTOM_DEVICE_DNS_ADDRESS`, `CUSTOM_DEVICE_GROUP_NAME`, `CUSTOM_DEVICE_GROUP_TAGS`, `CUSTOM_DEVICE_IP_ADDRESS`, `CUSTOM_DEVICE_METADATA`, `CUSTOM_DEVICE_NAME`, `CUSTOM_DEVICE_PORT`, `CUSTOM_DEVICE_TAGS`, `CUSTOM_DEVICE_TECHNOLOGY`, `DATA_CENTER_SERVICE_DECODER_TYPE`, `DATA_CENTER_SERVICE_IP_ADDRESS`, `DATA_CENTER_SERVICE_METADATA`, `DATA_CENTER_SERVICE_NAME`, `DATA_CENTER_SERVICE_PORT`, `DATA_CENTER_SERVICE_TAGS`, `DOCKER_CONTAINER_NAME`, `DOCKER_FULL_IMAGE_NAME`, `DOCKER_IMAGE_VERSION`, `EC2_INSTANCE_AMI_ID`, `EC2_INSTANCE_AWS_INSTANCE_TYPE`, `EC2_INSTANCE_AWS_SECURITY_GROUP`, `EC2_INSTANCE_BEANSTALK_ENV_NAME`, `EC2_INSTANCE_ID`, `EC2_INSTANCE_NAME`, `EC2_INSTANCE_PRIVATE_HOST_NAME`, `EC2_INSTANCE_PUBLIC_HOST_NAME`, `EC2_INSTANCE_TAGS`, `ENTERPRISE_APPLICATION_DECODER_TYPE`, `ENTERPRISE_APPLICATION_IP_ADDRESS`, `ENTERPRISE_APPLICATION_METADATA`, `ENTERPRISE_APPLICATION_NAME`, `ENTERPRISE_APPLICATION_PORT`, `ENTERPRISE_APPLICATION_TAGS`, `ESXI_HOST_CLUSTER_NAME`, `ESXI_HOST_HARDWARE_MODEL`, `ESXI_HOST_HARDWARE_VENDOR`, `ESXI_HOST_NAME`, `ESXI_HOST_PRODUCT_NAME`, `ESXI_HOST_PRODUCT_VERSION`, `ESXI_HOST_TAGS`, `EXTERNAL_MONITOR_ENGINE_DESCRIPTION`, `EXTERNAL_MONITOR_ENGINE_NAME`, `EXTERNAL_MONITOR_ENGINE_TYPE`, `EXTERNAL_MONITOR_NAME`, `EXTERNAL_MONITOR_TAGS`, `GEOLOCATION_SITE_NAME`, `GOOGLE_CLOUD_PLATFORM_ZONE_NAME`, `GOOGLE_COMPUTE_INSTANCE_ID`, `GOOGLE_COMPUTE_INSTANCE_MACHINE_TYPE`, `GOOGLE_COMPUTE_INSTANCE_NAME`, `GOOGLE_COMPUTE_INSTANCE_PROJECT`, `GOOGLE_COMPUTE_INSTANCE_PROJECT_ID`, `GOOGLE_COMPUTE_INSTANCE_PUBLIC_IP_ADDRESSES`, `HOST_AIX_LOGICAL_CPU_COUNT`, `HOST_AIX_SIMULTANEOUS_THREADS`, `HOST_AIX_VIRTUAL_CPU_COUNT`, `HOST_ARCHITECTURE`, `HOST_AWS_NAME_TAG`, `HOST_AZURE_COMPUTE_MODE`, `HOST_AZURE_SKU`, `HOST_AZURE_WEB_APPLICATION_HOST_NAMES`, `HOST_AZURE_WEB_APPLICATION_SITE_NAMES`, `HOST_BITNESS`, `HOST_BOSH_AVAILABILITY_ZONE`, `HOST_BOSH_DEPLOYMENT_ID`, `HOST_BOSH_INSTANCE_ID`, `HOST_BOSH_INSTANCE_NAME`, `HOST_BOSH_NAME`, `HOST_BOSH_STEMCELL_VERSION`, `HOST_CLOUD_TYPE`, `HOST_CPU_CORES`, `HOST_CUSTOM_METADATA`, `HOST_DETECTED_NAME`, `HOST_GROUP_ID`, `HOST_GROUP_NAME`, `HOST_HYPERVISOR_TYPE`, `HOST_IP_ADDRESS`, `HOST_KUBERNETES_LABELS`, `HOST_LOGICAL_CPU_CORES`, `HOST_NAME`, `HOST_ONEAGENT_CUSTOM_HOST_NAME`, `HOST_OS_TYPE`, `HOST_OS_VERSION`, `HOST_PAAS_MEMORY_LIMIT`, `HOST_PAAS_TYPE`, `HOST_TAGS`, `HOST_TECHNOLOGY`, `HTTP_MONITOR_NAME`, `HTTP_MONITOR_TAGS`, `KUBERNETES_CLUSTER_NAME`, `KUBERNETES_NODE_NAME`, `KUBERNETES_SERVICE_NAME`, `MOBILE_APPLICATION_NAME`, `MOBILE_APPLICATION_PLATFORM`, `MOBILE_APPLICATION_TAGS`, `NAME_OF_COMPUTE_NODE`, `OPENSTACK_ACCOUNT_NAME`, `OPENSTACK_ACCOUNT_PROJECT_NAME`, `OPENSTACK_AVAILABILITY_ZONE_NAME`, `OPENSTACK_PROJECT_NAME`, `OPENSTACK_REGION_NAME`, `OPENSTACK_VM_INSTANCE_TYPE`, `OPENSTACK_VM_NAME`, `OPENSTACK_VM_SECURITY_GROUP`, `PROCESS_GROUP_AZURE_HOST_NAME`, `PROCESS_GROUP_AZURE_SITE_NAME`, `PROCESS_GROUP_CUSTOM_METADATA`, `PROCESS_GROUP_DETECTED_NAME`, `PROCESS_GROUP_ID`, `PROCESS_GROUP_LISTEN_PORT`, `PROCESS_GROUP_NAME`, `PROCESS_GROUP_PREDEFINED_METADATA`, `PROCESS_GROUP_TAGS`, `PROCESS_GROUP_TECHNOLOGY`, `PROCESS_GROUP_TECHNOLOGY_EDITION`, `PROCESS_GROUP_TECHNOLOGY_VERSION`, `QUEUE_NAME`, `QUEUE_TECHNOLOGY`, `QUEUE_VENDOR`, `SERVICE_AKKA_ACTOR_SYSTEM`, `SERVICE_CTG_SERVICE_NAME`, `SERVICE_DATABASE_HOST_NAME`, `SERVICE_DATABASE_NAME`, `SERVICE_DATABASE_TOPOLOGY`, `SERVICE_DATABASE_VENDOR`, `SERVICE_DETECTED_NAME`, `SERVICE_ESB_APPLICATION_NAME`, `SERVICE_IBM_CTG_GATEWAY_URL`, `SERVICE_MESSAGING_LISTENER_CLASS_NAME`, `SERVICE_NAME`, `SERVICE_PORT`, `SERVICE_PUBLIC_DOMAIN_NAME`, `SERVICE_REMOTE_ENDPOINT`, `SERVICE_REMOTE_SERVICE_NAME`, `SERVICE_TAGS`, `SERVICE_TECHNOLOGY`, `SERVICE_TECHNOLOGY_EDITION`, `SERVICE_TECHNOLOGY_VERSION`, `SERVICE_TOPOLOGY`, `SERVICE_TYPE`, `SERVICE_WEB_APPLICATION_ID`, `SERVICE_WEB_CONTEXT_ROOT`, `SERVICE_WEB_SERVER_ENDPOINT`, `SERVICE_WEB_SERVER_NAME`, `SERVICE_WEB_SERVICE_NAME`, `SERVICE_WEB_SERVICE_NAMESPACE`, `VMWARE_DATACENTER_NAME`, `VMWARE_VM_NAME`, `WEB_APPLICATION_NAME`, `WEB_APPLICATION_NAME_PATTERN`, `WEB_APPLICATION_TAGS`, `WEB_APPLICATION_TYPE`
     */
    key?: string;
    /**
     * Possible Values: `BEGINS_WITH`, `EQUALS`
     */
    ruleMatcher: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface MetricEventsEventTemplate {
    /**
     * Davis® AI will try to merge this event into existing problems, otherwise a new problem will always be created.
     */
    davisMerge?: boolean;
    /**
     * The description of the event to trigger.
     */
    description: string;
    /**
     * Possible Values: `AVAILABILITY`, `CUSTOM_ALERT`, `CUSTOM_ANNOTATION`, `CUSTOM_CONFIGURATION`, `CUSTOM_DEPLOYMENT`, `ERROR`, `INFO`, `MARKED_FOR_TERMINATION`, `RESOURCE`, `SLOWDOWN`
     */
    eventType: string;
    /**
     * Set of additional key-value properties to be attached to the triggered event.
     */
    metadatas?: outputs.MetricEventsEventTemplateMetadata[];
    /**
     * The title of the event to trigger.
     */
    title: string;
}

export interface MetricEventsEventTemplateMetadata {
    /**
     * Type 'dt.' for key hints.
     */
    metadataKey: string;
    /**
     * no documentation available
     */
    metadataValue: string;
}

export interface MetricEventsModelProperties {
    /**
     * Possible Values: `ABOVE`, `BELOW`, `OUTSIDE`
     */
    alertCondition: string;
    /**
     * The ability to set an alert on missing data in a metric. When enabled, missing data samples will contribute as violating samples defined in advanced model properties. We recommend to not alert on missing data for sparse timeseries as this leads to alert spam.
     */
    alertOnNoData: boolean;
    /**
     * The number of one-minute samples within the evaluation window that must go back to normal to close the event.
     */
    dealertingSamples: number;
    /**
     * The number of one-minute samples that form the sliding evaluation window.
     */
    samples: number;
    /**
     * Controls how many times the signal fluctuation is added to the baseline to produce the actual threshold for alerting
     */
    signalFluctuation?: number;
    /**
     * Raise an event if this value is violated
     */
    threshold?: number;
    /**
     * Controls the width of the confidence band and larger values lead to a less sensitive model
     */
    tolerance?: number;
    /**
     * Possible Values: `AUTO_ADAPTIVE_THRESHOLD`, `SEASONAL_BASELINE`, `STATIC_THRESHOLD`
     */
    type: string;
    /**
     * The number of one-minute samples within the evaluation window that must violate to trigger an event.
     */
    violatingSamples: number;
}

export interface MetricEventsQueryDefinition {
    /**
     * Possible Values: `AVG`, `COUNT`, `MAX`, `MEDIAN`, `MIN`, `PERCENTILE90`, `SUM`, `VALUE`
     */
    aggregation?: string;
    /**
     * Dimension filter
     */
    dimensionFilter?: outputs.MetricEventsQueryDefinitionDimensionFilter;
    /**
     * Use rule-based filters to define the scope this event monitors.
     */
    entityFilter?: outputs.MetricEventsQueryDefinitionEntityFilter;
    /**
     * The `legacyId` of a Management Zone (as provided by the resource `dynatrace.ManagementZoneV2` or the data source `dynatrace.ManagementZone`)
     */
    managementZone?: string;
    /**
     * Metric key
     */
    metricKey?: string;
    /**
     * To learn more, visit [Metric Selector](https://dt-url.net/metselad)
     */
    metricSelector?: string;
    /**
     * Minute offset of sliding evaluation window for metrics with latency
     */
    queryOffset?: number;
    /**
     * Possible Values: `METRIC_KEY`, `METRIC_SELECTOR`
     */
    type: string;
}

export interface MetricEventsQueryDefinitionDimensionFilter {
    filters: outputs.MetricEventsQueryDefinitionDimensionFilterFilter[];
}

export interface MetricEventsQueryDefinitionDimensionFilterFilter {
    /**
     * Dimension key
     */
    dimensionKey: string;
    /**
     * Dimension value
     */
    dimensionValue: string;
    /**
     * Possible Values: `CONTAINS_CASE_SENSITIVE`, `DOES_NOT_CONTAIN_CASE_SENSITIVE`, `DOES_NOT_EQUAL`, `DOES_NOT_START_WITH`, `EQUALS`, `STARTS_WITH`
     */
    operator?: string;
}

export interface MetricEventsQueryDefinitionEntityFilter {
    /**
     * no documentation available
     */
    conditions?: outputs.MetricEventsQueryDefinitionEntityFilterConditions;
    /**
     * Dimension key
     */
    dimensionKey?: string;
}

export interface MetricEventsQueryDefinitionEntityFilterConditions {
    conditions: outputs.MetricEventsQueryDefinitionEntityFilterConditionsCondition[];
}

export interface MetricEventsQueryDefinitionEntityFilterConditionsCondition {
    /**
     * Possible Values: `CONTAINS_CASE_SENSITIVE`, `DOES_NOT_CONTAIN_CASE_SENSITIVE`, `DOES_NOT_EQUAL`, `DOES_NOT_START_WITH`, `EQUALS`, `STARTS_WITH`
     */
    operator: string;
    /**
     * Possible Values: `AUTO_ADAPTIVE_THRESHOLD`, `SEASONAL_BASELINE`, `STATIC_THRESHOLD`
     */
    type: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface MetricMetadataDimensions {
    dimensions: outputs.MetricMetadataDimensionsDimension[];
}

export interface MetricMetadataDimensionsDimension {
    /**
     * Display name
     */
    displayName?: string;
    /**
     * Dimension key
     */
    key: string;
}

export interface MetricMetadataMetricProperties {
    /**
     * Whether (true or false) the metric is relevant to a problem's impact.
     */
    impactRelevant?: boolean;
    latency?: number;
    maxValue?: number;
    minValue?: number;
    rootCauseRelevant?: boolean;
    /**
     * Possible Values: `Error`, `Score`, `Unknown`
     */
    valueType: string;
}

export interface MobileAppAnomaliesErrorRateIncrease {
    /**
     * Possible Values: `Auto`, `Fixed`
     */
    detectionMode?: string;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Alert if the percentage of user actions affected by reported errors exceeds **both** the absolute threshold and the relative threshold
     */
    errorRateIncreaseAuto?: outputs.MobileAppAnomaliesErrorRateIncreaseErrorRateIncreaseAuto;
    /**
     * Alert if the custom reported error rate threshold is exceeded during any 5-minute period
     */
    errorRateIncreaseFixed?: outputs.MobileAppAnomaliesErrorRateIncreaseErrorRateIncreaseFixed;
}

export interface MobileAppAnomaliesErrorRateIncreaseErrorRateIncreaseAuto {
    /**
     * Absolute threshold
     */
    thresholdAbsolute: number;
    /**
     * Relative threshold
     */
    thresholdRelative: number;
}

export interface MobileAppAnomaliesErrorRateIncreaseErrorRateIncreaseFixed {
    /**
     * Possible Values: `Low`, `Medium`, `High`
     */
    sensitivity: string;
    /**
     * Absolute threshold
     */
    thresholdAbsolute: number;
}

export interface MobileAppAnomaliesSlowUserActions {
    /**
     * Possible Values: `Auto`, `Fixed`
     */
    detectionMode?: string;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * no documentation available
     */
    slowUserActionsAuto?: outputs.MobileAppAnomaliesSlowUserActionsSlowUserActionsAuto;
    /**
     * no documentation available
     */
    slowUserActionsFixed?: outputs.MobileAppAnomaliesSlowUserActionsSlowUserActionsFixed;
}

export interface MobileAppAnomaliesSlowUserActionsSlowUserActionsAuto {
    /**
     * To avoid over-alerting do not alert for low traffic applications with less than
     */
    durationAvoidOveralerting: outputs.MobileAppAnomaliesSlowUserActionsSlowUserActionsAutoDurationAvoidOveralerting;
    /**
     * Alert if the action duration of all user actions degrades beyond **both** the absolute and relative threshold:
     */
    durationThresholdAll: outputs.MobileAppAnomaliesSlowUserActionsSlowUserActionsAutoDurationThresholdAll;
    /**
     * Alert if the action duration of the slowest 10% of user actions degrades beyond **both** the absolute and relative threshold:
     */
    durationThresholdSlowest: outputs.MobileAppAnomaliesSlowUserActionsSlowUserActionsAutoDurationThresholdSlowest;
}

export interface MobileAppAnomaliesSlowUserActionsSlowUserActionsAutoDurationAvoidOveralerting {
    /**
     * no documentation available
     */
    minActionRate: number;
}

export interface MobileAppAnomaliesSlowUserActionsSlowUserActionsAutoDurationThresholdAll {
    /**
     * Absolute threshold
     */
    durationThreshold: number;
    /**
     * Relative threshold
     */
    slowdownPercentage: number;
}

export interface MobileAppAnomaliesSlowUserActionsSlowUserActionsAutoDurationThresholdSlowest {
    /**
     * Absolute threshold
     */
    durationThreshold: number;
    /**
     * Relative threshold
     */
    slowdownPercentage: number;
}

export interface MobileAppAnomaliesSlowUserActionsSlowUserActionsFixed {
    /**
     * To avoid over-alerting do not alert for low traffic applications with less than
     */
    durationAvoidOveralerting: outputs.MobileAppAnomaliesSlowUserActionsSlowUserActionsFixedDurationAvoidOveralerting;
    /**
     * Alert if the action duration of all user actions degrades beyond the absolute threshold:
     */
    durationThresholdAllFixed: outputs.MobileAppAnomaliesSlowUserActionsSlowUserActionsFixedDurationThresholdAllFixed;
    /**
     * Alert if the action duration of the slowest 10% of user actions degrades beyond **both** the absolute and relative threshold:
     */
    durationThresholdSlowest: outputs.MobileAppAnomaliesSlowUserActionsSlowUserActionsFixedDurationThresholdSlowest;
    /**
     * Possible Values: `Low`, `Medium`, `High`
     */
    sensitivity: string;
}

export interface MobileAppAnomaliesSlowUserActionsSlowUserActionsFixedDurationAvoidOveralerting {
    /**
     * no documentation available
     */
    minActionRate: number;
}

export interface MobileAppAnomaliesSlowUserActionsSlowUserActionsFixedDurationThresholdAllFixed {
    /**
     * Absolute threshold
     */
    durationThreshold: number;
}

export interface MobileAppAnomaliesSlowUserActionsSlowUserActionsFixedDurationThresholdSlowest {
    /**
     * Absolute threshold
     */
    durationThreshold: number;
}

export interface MobileAppAnomaliesUnexpectedHighLoad {
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Dynatrace learns your typical application traffic over an observation period of one week. Depending on this expected value Dynatrace detects abnormal traffic spikes within your application.
     */
    thresholdPercentage?: number;
}

export interface MobileAppAnomaliesUnexpectedLowLoad {
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Dynatrace learns your typical application traffic over an observation period of one week. Depending on this expected value Dynatrace detects abnormal traffic drops within your application.
     */
    thresholdPercentage?: number;
}

export interface MobileAppCrashRateCrashRateIncrease {
    /**
     * Alert crash rate increases when auto-detected baseline is exceeded by a certain number of users
     */
    crashRateIncreaseAuto?: outputs.MobileAppCrashRateCrashRateIncreaseCrashRateIncreaseAuto;
    /**
     * Alert crash rate increases when the defined threshold is exceeded by a certain number of users
     */
    crashRateIncreaseFixed?: outputs.MobileAppCrashRateCrashRateIncreaseCrashRateIncreaseFixed;
    /**
     * Possible Values: `Auto`, `Fixed`
     */
    detectionMode?: string;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface MobileAppCrashRateCrashRateIncreaseCrashRateIncreaseAuto {
    /**
     * Dynatrace learns the typical crash rate for all app versions and will create an alert if the baseline is violated by more than a specified threshold. Analysis happens based on a sliding window of 10 minutes.
     */
    baselineViolationPercentage: number;
    /**
     * Amount of users
     */
    concurrentUsers: number;
    /**
     * Possible Values: `Low`, `Medium`, `High`
     */
    sensitivity: string;
}

export interface MobileAppCrashRateCrashRateIncreaseCrashRateIncreaseFixed {
    /**
     * Absolute threshold
     */
    absoluteCrashRate: number;
    /**
     * Amount of users
     */
    concurrentUsers: number;
}

export interface MobileAppEnablementRum {
    /**
     * Percentage of user sessions captured and analyzed. By default, Dynatrace captures all user actions and user sessions for analysis. This approach ensures complete insight into your application’s performance and customer experience. You can optionally reduce the granularity of user-action and user-session analysis by capturing a lower percentage of user sessions. While this approach can reduce monitoring costs, it also results in lower visibility into how your customers are using your applications. For example, a setting of 10% results in Dynatrace analyzing only every tenth user session.
     */
    costAndTrafficControl: number;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface MobileAppEnablementSessionReplay {
    /**
     * Before enabling, Dynatrace checks your system against the [prerequisites for Session Replay](https://dt-url.net/t23s0ppi).
     */
    onCrash: boolean;
}

export interface MobileAppKeyPerformanceThresholds {
    /**
     * If the action duration is above this value, the Apdex is considered to be **Frustrating**.
     */
    frustratingThresholdSeconds: number;
    /**
     * If the action duration is below this value, the Apdex is considered to be **Satisfactory**.
     */
    tolerableThresholdSeconds: number;
}

export interface MobileAppRequestErrorsErrorRules {
    errorRules: outputs.MobileAppRequestErrorsErrorRulesErrorRule[];
}

export interface MobileAppRequestErrorsErrorRulesErrorRule {
    /**
     * Exclude response codes
     */
    errorCodes: string;
}

export interface MobileApplicationApdex {
    /**
     * Apdex **frustrated** threshold, in milliseconds: a duration greater than or equal to this value is considered frustrated
     */
    frustrated: number;
    /**
     * Apdex error condition: if `true` the user session is considered frustrated when an error is reported
     */
    frustratedOnError?: boolean;
    /**
     * Apdex **tolerable** threshold, in milliseconds: a duration greater than or equal to this value is considered tolerable
     */
    tolerable: number;
}

export interface MobileApplicationProperties {
    /**
     * A User Action / Session Property based on a value reported by the API
     */
    apiValues?: outputs.MobileApplicationPropertiesApiValue[];
    /**
     * A User Action / Session Property based on a Server Side Request Attribute
     */
    requestAttributes?: outputs.MobileApplicationPropertiesRequestAttribute[];
}

export interface MobileApplicationPropertiesApiValue {
    /**
     * The aggregation type of the property. It defines how multiple values of the property are aggregated. Possible values are `SUM`, `MIN`, `MAX`, `FIRST` and `LAST`
     */
    aggregation?: string;
    /**
     * The cleanup rule of the property. Defines how to extract the data you need from a string value. Specify the [regular expression](https://dt-url.net/k9e0iaq) for the data you need there
     */
    cleanupRule?: string;
    /**
     * The display name of the property
     */
    displayName?: string;
    /**
     * The unique key of the mobile session or user action property
     */
    key: string;
    /**
     * The name of the reported value
     */
    name?: string;
    /**
     * If `true`, the property is stored as a session property
     */
    storeAsSessionProperty?: boolean;
    /**
     * If `true`, the property is stored as a user action property
     */
    storeAsUserActionProperty?: boolean;
    /**
     * The data type of the property. Possible values are `DOUBLE`, `LONG` and `STRING`
     */
    type: string;
}

export interface MobileApplicationPropertiesRequestAttribute {
    /**
     * The aggregation type of the property. It defines how multiple values of the property are aggregated. Possible values are `SUM`, `MIN`, `MAX`, `FIRST` and `LAST`
     */
    aggregation?: string;
    /**
     * The cleanup rule of the property. Defines how to extract the data you need from a string value. Specify the [regular expression](https://dt-url.net/k9e0iaq) for the data you need there
     */
    cleanupRule?: string;
    /**
     * The display name of the property
     */
    displayName?: string;
    /**
     * The ID of the request attribute
     */
    id: string;
    /**
     * The unique key of the mobile session or user action property
     */
    key: string;
    /**
     * If `true`, the property is stored as a session property
     */
    storeAsSessionProperty?: boolean;
    /**
     * If `true`, the property is stored as a user action property
     */
    storeAsUserActionProperty?: boolean;
    /**
     * The data type of the property. Possible values are `DOUBLE`, `LONG` and `STRING`
     */
    type: string;
}

export interface NetworkTrafficExcludeIp {
    ipAddressForms: outputs.NetworkTrafficExcludeIpIpAddressForm[];
}

export interface NetworkTrafficExcludeIpIpAddressForm {
    /**
     * IP address
     */
    ipAddress: string;
}

export interface NetworkTrafficExcludeNic {
    nicForms: outputs.NetworkTrafficExcludeNicNicForm[];
}

export interface NetworkTrafficExcludeNicNicForm {
    /**
     * Network interface
     */
    interface: string;
    /**
     * Possible Values: `OS_TYPE_AIX`, `OS_TYPE_DARWIN`, `OS_TYPE_HPUX`, `OS_TYPE_LINUX`, `OS_TYPE_SOLARIS`, `OS_TYPE_UNKNOWN`, `OS_TYPE_WINDOWS`, `OS_TYPE_ZOS`
     */
    os: string;
}

export interface NotificationAnsibleTower {
    /**
     * Accept any, including self-signed and invalid, SSL certificate (`true`) or only trusted (`false`) certificates
     */
    acceptAnyCertificate: boolean;
    /**
     * The configuration is enabled (`true`) or disabled (`false`)
     */
    active: boolean;
    /**
     * The ID of the associated alerting profile
     */
    alertingProfile: string;
    /**
     * The custom message of the notification.   This message will be displayed in the extra variables **Message** field of your job template.  You can use the following placeholders:  * `{ImpactedEntities}`: Details about the entities impacted by the problem in form of a JSON array.  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
     */
    customMessage: string;
    /**
     * The ID of the target Ansible Tower job template
     */
    jobTemplateId: number;
    /**
     * The URL of the target Ansible Tower job template
     */
    jobTemplateUrl: string;
    /**
     * The name of the notification configuration
     */
    name: string;
    /**
     * The password for the Ansible Tower account
     */
    password?: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
    /**
     * The username of the Ansible Tower account
     */
    username: string;
}

export interface NotificationConfig {
    /**
     * The configuration is enabled (`true`) or disabled (`false`)
     */
    active: boolean;
    /**
     * The ID of the associated alerting profile
     */
    alertingProfile: string;
    /**
     * The name of the notification configuration
     */
    name: string;
    /**
     * Defines the actual set of fields depending on the value. See one of the following objects:  * `EMAIL` > EmailNotificationConfig  * `PAGER_DUTY` > PagerDutyNotificationConfig  * `WEBHOOK` > WebHookNotificationConfig  * `SLACK` > SlackNotificationConfig  * `HIPCHAT` > HipChatNotificationConfig  * `VICTOROPS` > VictorOpsNotificationConfig  * `SERVICE_NOW` > ServiceNowNotificationConfig  * `XMATTERS` > XMattersNotificationConfig  * `ANSIBLETOWER` > AnsibleTowerNotificationConfig  * `OPS_GENIE` > OpsGenieNotificationConfig  * `JIRA` > JiraNotificationConfig  * `TRELLO` > TrelloNotificationConfig
     */
    type: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface NotificationEmail {
    /**
     * The configuration is enabled (`true`) or disabled (`false`)
     */
    active: boolean;
    /**
     * The ID of the associated alerting profile
     */
    alertingProfile: string;
    /**
     * The list of the email BCC-recipients
     */
    bccReceivers?: string[];
    /**
     * The template of the email notification.  You can use the following placeholders:  * `{ImpactedEntities}`: Details about the entities impacted by the problem in form of a JSON array.  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsHTML}`: All problem event details, including root cause, as an HTML-formatted string.  * `{ProblemDetailsJSON}`: All problem event details, including root cause, as a JSON object.  * `{ProblemDetailsMarkdown}`: All problem event details, including root cause, as a [Markdown-formatted](https://www.markdownguide.org/cheat-sheet/) string.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
     */
    body: string;
    /**
     * The list of the email CC-recipients
     */
    ccReceivers?: string[];
    /**
     * The name of the notification configuration
     */
    name: string;
    /**
     * The list of the email recipients
     */
    receivers?: string[];
    /**
     * The subject of the email notifications
     */
    subject: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface NotificationJira {
    /**
     * The configuration is enabled (`true`) or disabled (`false`)
     */
    active: boolean;
    /**
     * The ID of the associated alerting profile
     */
    alertingProfile: string;
    /**
     * The description of the Jira issue to be created by this notification.   You can use same placeholders as in issue summary
     */
    description: string;
    /**
     * The type of the Jira issue to be created by this notification
     */
    issueType: string;
    /**
     * The name of the notification configuration
     */
    name: string;
    /**
     * The password for the Jira profile
     */
    password?: string;
    /**
     * The project key of the Jira issue to be created by this notification
     */
    projectKey: string;
    /**
     * The summary of the Jira issue to be created by this notification.  You can use the following placeholders:  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
     */
    summary: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
    /**
     * The URL of the Jira API endpoint
     */
    url: string;
    /**
     * The username of the Jira profile
     */
    username: string;
}

export interface NotificationOpsGenie {
    /**
     * The configuration is enabled (`true`) or disabled (`false`)
     */
    active: boolean;
    /**
     * The ID of the associated alerting profile
     */
    alertingProfile: string;
    /**
     * The API key to access OpsGenie
     */
    apiKey?: string;
    /**
     * The region domain of the OpsGenie
     */
    domain: string;
    /**
     * The content of the message.  You can use the following placeholders:  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem
     */
    message: string;
    /**
     * The name of the notification configuration
     */
    name: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface NotificationPagerDuty {
    /**
     * The name of the PagerDuty account
     */
    account: string;
    /**
     * The configuration is enabled (`true`) or disabled (`false`)
     */
    active: boolean;
    /**
     * The ID of the associated alerting profile
     */
    alertingProfile: string;
    /**
     * The name of the notification configuration
     */
    name: string;
    /**
     * The API key to access PagerDuty
     */
    serviceApiKey?: string;
    /**
     * The name of the service
     */
    serviceName: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface NotificationServiceNow {
    /**
     * The configuration is enabled (`true`) or disabled (`false`)
     */
    active: boolean;
    /**
     * The ID of the associated alerting profile
     */
    alertingProfile: string;
    /**
     * The ServiceNow instance identifier. It refers to the first part of your own ServiceNow URL.   This field is mutually exclusive with the **url** field. You can only use one of them
     */
    instanceName?: string;
    /**
     * The content of the ServiceNow description.  You can use the following placeholders:  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsHTML}`: All problem event details, including root cause, as an HTML-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
     */
    message: string;
    /**
     * The name of the notification configuration
     */
    name: string;
    /**
     * The username to the ServiceNow account
     */
    password?: string;
    /**
     * Send events into ServiceNow ITOM (`true`)
     */
    sendEvents: boolean;
    /**
     * Send incidents into ServiceNow ITSM (`true`)
     */
    sendIncidents: boolean;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
    /**
     * The URL of the on-premise ServiceNow installation.   This field is mutually exclusive with the **instanceName** field. You can only use one of them
     */
    url?: string;
    /**
     * The username of the ServiceNow account.   Make sure that your user account has the `restService`, `webRequestAdmin`, and `x_dynat_ruxit.Integration` roles
     */
    username: string;
}

export interface NotificationSlack {
    /**
     * The configuration is enabled (`true`) or disabled (`false`)
     */
    active: boolean;
    /**
     * The ID of the associated alerting profile
     */
    alertingProfile: string;
    /**
     * The channel (for example, `#general`) or the user (for example, `@john.smith`) to send the message to
     */
    channel: string;
    /**
     * The name of the notification configuration
     */
    name: string;
    /**
     * The content of the message.  You can use the following placeholders:  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
     */
    title: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
    /**
     * The URL of the Slack WebHook.  This is confidential information, therefore GET requests return this field with the `null` value, and it is optional for PUT requests
     */
    url?: string;
}

export interface NotificationTrello {
    /**
     * The configuration is enabled (`true`) or disabled (`false`)
     */
    active: boolean;
    /**
     * The ID of the associated alerting profile
     */
    alertingProfile: string;
    /**
     * The application key for the Trello account
     */
    applicationKey: string;
    /**
     * The application token for the Trello account
     */
    authorizationToken?: string;
    /**
     * The Trello board to which the card should be assigned
     */
    boardId: string;
    /**
     * The description of the Trello card.   You can use same placeholders as in card text
     */
    description: string;
    /**
     * The Trello list to which the card should be assigned
     */
    listId: string;
    /**
     * The name of the notification configuration
     */
    name: string;
    /**
     * The Trello list to which the card of the resolved problem should be assigned
     */
    resolvedListId: string;
    /**
     * The text of the generated Trello card.  You can use the following placeholders:  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsMarkdown}`: All problem event details, including root cause, as a [Markdown-formatted](https://www.markdownguide.org/cheat-sheet/) string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
     */
    text: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface NotificationVictorOps {
    /**
     * The configuration is enabled (`true`) or disabled (`false`)
     */
    active: boolean;
    /**
     * The ID of the associated alerting profile
     */
    alertingProfile: string;
    /**
     * The API key for the target VictorOps account
     */
    apiKey?: string;
    /**
     * The content of the message.  You can use the following placeholders:  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`
     */
    message: string;
    /**
     * The name of the notification configuration
     */
    name: string;
    /**
     * The routing key, defining the group to be notified
     */
    routingKey: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface NotificationWebHook {
    /**
     * Accept any, including self-signed and invalid, SSL certificate (`true`) or only trusted (`false`) certificates
     */
    acceptAnyCertificate: boolean;
    /**
     * The configuration is enabled (`true`) or disabled (`false`)
     */
    active: boolean;
    /**
     * The ID of the associated alerting profile
     */
    alertingProfile: string;
    /**
     * A list of the additional HTTP headers
     */
    headers?: outputs.NotificationWebHookHeader[];
    /**
     * The name of the notification configuration
     */
    name: string;
    /**
     * Call webhook if new events merge into existing problems
     */
    notifyEventMerges?: boolean;
    /**
     * The content of the notification message.  You can use the following placeholders:  * `{ImpactedEntities}`: Details about the entities impacted by the problem in form of a JSON array.  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsHTML}`: All problem event details, including root cause, as an HTML-formatted string.  * `{ProblemDetailsJSON}`: All problem event details, including root cause, as a JSON object.  * `{ProblemDetailsMarkdown}`: All problem event details, including root cause, as a [Markdown-formatted](https://www.markdownguide.org/cheat-sheet/) string.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
     */
    payload: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
    /**
     * The URL of the WebHook endpoint
     */
    url: string;
}

export interface NotificationWebHookHeader {
    /**
     * The name of the notification configuration
     */
    name: string;
    /**
     * The value of the HTTP header. May contain an empty value.   Required when creating a new notification.  For the **Authorization** header, GET requests return the `null` value.  If you want update a notification configuration with an **Authorization** header which you want to remain intact, set the **Authorization** header with the `null` value
     */
    value?: string;
}

export interface NotificationXmatters {
    /**
     * Accept any, including self-signed and invalid, SSL certificate (`true`) or only trusted (`false`) certificates
     */
    acceptAnyCertificate: boolean;
    /**
     * The configuration is enabled (`true`) or disabled (`false`)
     */
    active: boolean;
    /**
     * The ID of the associated alerting profile
     */
    alertingProfile: string;
    /**
     * A list of the additional HTTP headers
     */
    headers?: outputs.NotificationXmattersHeader[];
    /**
     * The name of the notification configuration
     */
    name: string;
    /**
     * The content of the notification message.  You can use the following placeholders:  * `{ImpactedEntities}`: Details about the entities impacted by the problem in form of a JSON array.  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsHTML}`: All problem event details, including root cause, as an HTML-formatted string.  * `{ProblemDetailsJSON}`: All problem event details, including root cause, as a JSON object.  * `{ProblemDetailsMarkdown}`: All problem event details, including root cause, as a [Markdown-formatted](https://www.markdownguide.org/cheat-sheet/) string.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
     */
    payload: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
    /**
     * The URL of the xMatters WebHook
     */
    url: string;
}

export interface NotificationXmattersHeader {
    /**
     * The name of the notification configuration
     */
    name: string;
    /**
     * The value of the HTTP header. May contain an empty value.   Required when creating a new notification.  For the **Authorization** header, GET requests return the `null` value.  If you want update a notification configuration with an **Authorization** header which you want to remain intact, set the **Authorization** header with the `null` value
     */
    value?: string;
}

export interface OneagentUpdatesMaintenanceWindows {
    maintenanceWindows: outputs.OneagentUpdatesMaintenanceWindowsMaintenanceWindow[];
}

export interface OneagentUpdatesMaintenanceWindowsMaintenanceWindow {
    maintenanceWindow: string;
}

export interface OpentelemetryMetricsAdditionalAttributes {
    additionalAttributes: outputs.OpentelemetryMetricsAdditionalAttributesAdditionalAttribute[];
}

export interface OpentelemetryMetricsAdditionalAttributesAdditionalAttribute {
    /**
     * Attribute key
     */
    attributeKey: string;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface OpentelemetryMetricsToDropAttributes {
    toDropAttributes: outputs.OpentelemetryMetricsToDropAttributesToDropAttribute[];
}

export interface OpentelemetryMetricsToDropAttributesToDropAttribute {
    /**
     * Attribute key
     */
    attributeKey: string;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface OsServicesDetectionConditionsLinux {
    linuxDetectionConditions: outputs.OsServicesDetectionConditionsLinuxLinuxDetectionCondition[];
}

export interface OsServicesDetectionConditionsLinuxLinuxDetectionCondition {
    /**
     * This string has to match a required format. See [OS services monitoring](https://dt-url.net/vl03xzk).
     */
    condition?: string;
    hostMetadataCondition?: outputs.OsServicesDetectionConditionsLinuxLinuxDetectionConditionHostMetadataCondition;
    property?: string;
    ruleType?: string;
    startupCondition?: string;
}

export interface OsServicesDetectionConditionsLinuxLinuxDetectionConditionHostMetadataCondition {
    /**
     * This string has to match a required format. See [OS services monitoring](https://dt-url.net/vl03xzk).
     */
    metadataCondition: string;
    /**
     * Type 'dt.' for key hints.
     */
    metadataKey: string;
}

export interface OsServicesDetectionConditionsWindows {
    detectionConditionsWindows: outputs.OsServicesDetectionConditionsWindowsDetectionConditionsWindow[];
}

export interface OsServicesDetectionConditionsWindowsDetectionConditionsWindow {
    /**
     * This string has to match a required format. See [OS services monitoring](https://dt-url.net/vl03xzk).
     */
    condition?: string;
    hostMetadataCondition?: outputs.OsServicesDetectionConditionsWindowsDetectionConditionsWindowHostMetadataCondition;
    property?: string;
    ruleType?: string;
    startupCondition?: string;
}

export interface OsServicesDetectionConditionsWindowsDetectionConditionsWindowHostMetadataCondition {
    /**
     * This string has to match a required format. See [OS services monitoring](https://dt-url.net/vl03xzk).
     */
    metadataCondition: string;
    /**
     * Type 'dt.' for key hints.
     */
    metadataKey: string;
}

export interface OsServicesMetadata {
    items: outputs.OsServicesMetadataItem[];
}

export interface OsServicesMetadataItem {
    /**
     * Type 'dt.' for key hints.
     */
    metadataKey: string;
    /**
     * no documentation available
     */
    metadataValue: string;
}

export interface OwnershipConfigOwnershipIdentifiers {
    ownershipIdentifiers: outputs.OwnershipConfigOwnershipIdentifiersOwnershipIdentifier[];
}

export interface OwnershipConfigOwnershipIdentifiersOwnershipIdentifier {
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Key for ownership metadata and tags
     */
    key: string;
}

export interface OwnershipTeamsAdditionalInformation {
    additionalInformations: outputs.OwnershipTeamsAdditionalInformationAdditionalInformation[];
}

export interface OwnershipTeamsAdditionalInformationAdditionalInformation {
    /**
     * Name
     */
    key: string;
    /**
     * no documentation available
     */
    url?: string;
    /**
     * no documentation available
     */
    value: string;
}

export interface OwnershipTeamsContactDetails {
    contactDetails: outputs.OwnershipTeamsContactDetailsContactDetail[];
}

export interface OwnershipTeamsContactDetailsContactDetail {
    /**
     * no documentation available
     */
    email?: string;
    /**
     * Possible Values: `EMAIL`, `JIRA`, `MS_TEAMS`, `SLACK`
     */
    integrationType: string;
    /**
     * no documentation available
     */
    jira?: outputs.OwnershipTeamsContactDetailsContactDetailJira;
    /**
     * Team
     */
    msTeams?: string;
    /**
     * Channel
     */
    slackChannel?: string;
    /**
     * no documentation available
     */
    url?: string;
}

export interface OwnershipTeamsContactDetailsContactDetailJira {
    /**
     * Default Assignee
     */
    defaultAssignee: string;
    /**
     * no documentation available
     */
    project: string;
}

export interface OwnershipTeamsLinks {
    links: outputs.OwnershipTeamsLinksLink[];
}

export interface OwnershipTeamsLinksLink {
    /**
     * Possible Values: `DASHBOARD`, `DOCUMENTATION`, `HEALTH_APP`, `REPOSITORY`, `RUNBOOK`, `URL`, `WIKI`
     */
    linkType: string;
    /**
     * no documentation available
     */
    url: string;
}

export interface OwnershipTeamsResponsibilities {
    /**
     * Responsible for developing and maintaining high quality software. Development teams are responsible for making code changes to address performance regressions, errors, or security vulnerabilities.
     */
    development: boolean;
    /**
     * Responsible for the administration, management, and support of the IT infrastructure including physical servers, virtualization, and cloud. Teams with infrastructure responsibility are responsible for addressing hardware issues, resource limits, and operating system vulnerabilities.
     */
    infrastructure: boolean;
    /**
     * Responsible for ensuring that applications in development align with business needs and meet the usability requirements of users, stakeholders, customers, and external partners. Teams with line of business responsibility are responsible for understanding the customer experience and how it affects business goals.
     */
    lineOfBusiness: boolean;
    /**
     * Responsible for deploying and managing software, with a focus on high availability and performance. Teams with operations responsibilities needs to understand the impact, priority, and team responsible for addressing problems detected by Dynatrace.
     */
    operations: boolean;
    /**
     * Responsible for the security posture of the organization. Teams with security responsibility must understand the impact, priority, and team responsible for addressing security vulnerabilities.
     */
    security: boolean;
}

export interface OwnershipTeamsSupplementaryIdentifiers {
    supplementaryIdentifiers: outputs.OwnershipTeamsSupplementaryIdentifiersSupplementaryIdentifier[];
}

export interface OwnershipTeamsSupplementaryIdentifiersSupplementaryIdentifier {
    supplementaryIdentifier: string;
}

export interface PgAnomaliesAvailability {
    /**
     * How to monitor the availability of the process group:  * `PROCESS_IMPACT`: Alert if any process of the group becomes unavailable.  * `MINIMUM_THRESHOLD`: Alert if the number of active processes in the group falls below the specified threshold.  * `OFF`: Availability monitoring is disabled.
     */
    method: string;
    /**
     * Alert if the number of active processes in the group is lower than this value.
     */
    minimumThreshold?: number;
}

export interface ProcessAvailabilityMetadata {
    items: outputs.ProcessAvailabilityMetadataItem[];
}

export interface ProcessAvailabilityMetadataItem {
    key: string;
    value: string;
}

export interface ProcessAvailabilityRules {
    rules: outputs.ProcessAvailabilityRulesRule[];
}

export interface ProcessAvailabilityRulesRule {
    condition?: string;
    hostMetadataCondition?: outputs.ProcessAvailabilityRulesRuleHostMetadataCondition;
    property?: string;
    ruleType?: string;
}

export interface ProcessAvailabilityRulesRuleHostMetadataCondition {
    metadataCondition: string;
    metadataKey: string;
}

export interface ProcessGroupDetectionGroupExtraction {
    /**
     * Optionally delimit this property between *From* and *To*.
     */
    delimiter: outputs.ProcessGroupDetectionGroupExtractionDelimiter;
    /**
     * Possible values: `DOTNET_COMMAND`, `DOTNET_COMMAND_PATH`, `ASP_NET_CORE_APPLICATION_PATH`, `AWS_ECR_ACCOUNT_ID`, `AWS_ECR_REGION`, `AWS_ECS_CLUSTER`, `AWS_ECS_CONTAINERNAME`, `AWS_ECS_FAMILY`, `AWS_ECS_REVISION`, `AWS_LAMBDA_FUNCTION_NAME`, `AWS_REGION`, `APACHE_SPARK_MASTER_IP_ADDRESS`, `APACHE_CONFIG_PATH`, `CATALINA_BASE`, `CATALINA_HOME`, `CLOUD_FOUNDRY_APP_NAME`, `CLOUD_FOUNDRY_APPLICATION_ID`, `CLOUD_FOUNDRY_INSTANCE_INDEX`, `CLOUD_FOUNDRY_SPACE_NAME`, `CLOUD_FOUNDRY_SPACE_ID`, `COLDFUSION_JVM_CONFIG_FILE`, `SERVICE_NAME`, `COMMAND_LINE_ARGS`, `CONTAINER_ID`, `CONTAINER_IMAGE_VERSION`, `CONTAINER_NAME`, `DECLARATIVE_ID`, `CONTAINER_IMAGE_NAME`, `RUXIT_CLUSTER_ID`, `RUXIT_NODE_ID`, `EXE_NAME`, `EXE_PATH`, `ELASTIC_SEARCH_CLUSTER_NAME`, `ELASTIC_SEARCH_NODE_NAME`, `EQUINOX_CONFIG_PATH`, `GLASSFISH_DOMAIN_NAME`, `GLASSFISH_INSTANCE_NAME`, `PG_ID_CALC_INPUT_KEY_LINKAGE`, `GAE_INSTANCE`, `GAE_SERVICE`, `GOOGLE_CLOUD_PROJECT`, `HYBRIS_BIN_DIR`, `HYBRIS_CONFIG_DIR`, `HYBRIS_DATA_DIR`, `IBM_CICS_REGION`, `IBM_CICS_IMS_APPLID`, `IBM_CICS_IMS_JOBNAME`, `IBM_CTG_NAME`, `IBM_IMS_CONNECT`, `IBM_IMS_CONTROL`, `IBM_IMS_MPR`, `IBM_IMS_SOAP_GW_NAME`, `IIB_BROKER_NAME`, `IIB_EXECUTION_GROUP_NAME`, `IIS_APP_POOL`, `IIS_ROLE_NAME`, `JBOSS_HOME`, `JBOSS_MODE`, `JBOSS_SERVER_NAME`, `JAVA_JAR_FILE`, `JAVA_JAR_PATH`, `JAVA_MAIN_CLASS`, `KUBERNETES_BASEPODNAME`, `KUBERNETES_CONTAINERNAME`, `KUBERNETES_FULLPODNAME`, `KUBERNETES_NAMESPACE`, `KUBERNETES_PODUID`, `MSSQL_INSTANCE_NAME`, `NODEJS_APP_NAME`, `NODEJS_APP_BASE_DIR`, `NODEJS_SCRIPT_NAME`, `ORACLE_SID`, `PHP_CLI_SCRIPT_PATH`, `PHP_CLI_WORKING_DIR`, `SOFTWAREAG_INSTALL_ROOT`, `SOFTWAREAG_PRODUCTPROPNAME`, `SPRINGBOOT_APP_NAME`, `SPRINGBOOT_PROFILE_NAME`, `SPRINGBOOT_STARTUP_CLASS`, `TIBCO_BUSINESSWORKS_CE_APP_NAME`, `TIBCO_BUSINESSWORKS_CE_VERSION`, `TIBCO_BUSINESSWORKS_APP_NODE_NAME`, `TIBCO_BUSINESSWORKS_APP_SPACE_NAME`, `TIBCO_BUSINESSWORKS_DOMAIN_NAME`, `TIPCO_BUSINESSWORKS_PROPERTY_FILE`, `TIPCO_BUSINESSWORKS_PROPERTY_FILE_PATH`, `TIBCO_BUSINESSWORKS_HOME`, `VARNISH_INSTANCE_NAME`, `WEBLOGIC_NAME`, `WEBLOGIC_CLUSTER_NAME`, `WEBLOGIC_DOMAIN_NAME`, `WEBLOGIC_HOME`, `WEBSPHERE_LIBERTY_SERVER_NAME`, `WEBSPHERE_CELL_NAME`, `WEBSPHERE_CLUSTER_NAME`, `WEBSPHERE_NODE_NAME`, `WEBSPHERE_SERVER_NAME`
     */
    property: string;
    /**
     * If this option is selected, the default Dynatrace behavior is disabled for these detected processes. Only this rule is used to separate the process group.
     */
    standaloneRule?: boolean;
}

export interface ProcessGroupDetectionGroupExtractionDelimiter {
    /**
     * Delimit from
     */
    from?: string;
    /**
     * (e.g. versions, hex, dates, and build numbers)
     */
    removeIds: boolean;
    /**
     * Delimit to
     */
    to?: string;
}

export interface ProcessGroupDetectionInstanceExtraction {
    /**
     * Optionally delimit this property between *From* and *To*.
     */
    delimiter?: outputs.ProcessGroupDetectionInstanceExtractionDelimiter;
    /**
     * Possible values: `DOTNET_COMMAND`, `DOTNET_COMMAND_PATH`, `ASP_NET_CORE_APPLICATION_PATH`, `AWS_ECR_ACCOUNT_ID`, `AWS_ECR_REGION`, `AWS_ECS_CLUSTER`, `AWS_ECS_CONTAINERNAME`, `AWS_ECS_FAMILY`, `AWS_ECS_REVISION`, `AWS_LAMBDA_FUNCTION_NAME`, `AWS_REGION`, `APACHE_SPARK_MASTER_IP_ADDRESS`, `APACHE_CONFIG_PATH`, `CATALINA_BASE`, `CATALINA_HOME`, `CLOUD_FOUNDRY_APP_NAME`, `CLOUD_FOUNDRY_APPLICATION_ID`, `CLOUD_FOUNDRY_INSTANCE_INDEX`, `CLOUD_FOUNDRY_SPACE_NAME`, `CLOUD_FOUNDRY_SPACE_ID`, `COLDFUSION_JVM_CONFIG_FILE`, `SERVICE_NAME`, `COMMAND_LINE_ARGS`, `CONTAINER_ID`, `CONTAINER_IMAGE_VERSION`, `CONTAINER_NAME`, `DECLARATIVE_ID`, `CONTAINER_IMAGE_NAME`, `RUXIT_CLUSTER_ID`, `RUXIT_NODE_ID`, `EXE_NAME`, `EXE_PATH`, `ELASTIC_SEARCH_CLUSTER_NAME`, `ELASTIC_SEARCH_NODE_NAME`, `EQUINOX_CONFIG_PATH`, `GLASSFISH_DOMAIN_NAME`, `GLASSFISH_INSTANCE_NAME`, `PG_ID_CALC_INPUT_KEY_LINKAGE`, `GAE_INSTANCE`, `GAE_SERVICE`, `GOOGLE_CLOUD_PROJECT`, `HYBRIS_BIN_DIR`, `HYBRIS_CONFIG_DIR`, `HYBRIS_DATA_DIR`, `IBM_CICS_REGION`, `IBM_CICS_IMS_APPLID`, `IBM_CICS_IMS_JOBNAME`, `IBM_CTG_NAME`, `IBM_IMS_CONNECT`, `IBM_IMS_CONTROL`, `IBM_IMS_MPR`, `IBM_IMS_SOAP_GW_NAME`, `IIB_BROKER_NAME`, `IIB_EXECUTION_GROUP_NAME`, `IIS_APP_POOL`, `IIS_ROLE_NAME`, `JBOSS_HOME`, `JBOSS_MODE`, `JBOSS_SERVER_NAME`, `JAVA_JAR_FILE`, `JAVA_JAR_PATH`, `JAVA_MAIN_CLASS`, `KUBERNETES_BASEPODNAME`, `KUBERNETES_CONTAINERNAME`, `KUBERNETES_FULLPODNAME`, `KUBERNETES_NAMESPACE`, `KUBERNETES_PODUID`, `MSSQL_INSTANCE_NAME`, `NODEJS_APP_NAME`, `NODEJS_APP_BASE_DIR`, `NODEJS_SCRIPT_NAME`, `ORACLE_SID`, `PHP_CLI_SCRIPT_PATH`, `PHP_CLI_WORKING_DIR`, `SOFTWAREAG_INSTALL_ROOT`, `SOFTWAREAG_PRODUCTPROPNAME`, `SPRINGBOOT_APP_NAME`, `SPRINGBOOT_PROFILE_NAME`, `SPRINGBOOT_STARTUP_CLASS`, `TIBCO_BUSINESSWORKS_CE_APP_NAME`, `TIBCO_BUSINESSWORKS_CE_VERSION`, `TIBCO_BUSINESSWORKS_APP_NODE_NAME`, `TIBCO_BUSINESSWORKS_APP_SPACE_NAME`, `TIBCO_BUSINESSWORKS_DOMAIN_NAME`, `TIPCO_BUSINESSWORKS_PROPERTY_FILE`, `TIPCO_BUSINESSWORKS_PROPERTY_FILE_PATH`, `TIBCO_BUSINESSWORKS_HOME`, `VARNISH_INSTANCE_NAME`, `WEBLOGIC_NAME`, `WEBLOGIC_CLUSTER_NAME`, `WEBLOGIC_DOMAIN_NAME`, `WEBLOGIC_HOME`, `WEBSPHERE_LIBERTY_SERVER_NAME`, `WEBSPHERE_CELL_NAME`, `WEBSPHERE_CLUSTER_NAME`, `WEBSPHERE_NODE_NAME`, `WEBSPHERE_SERVER_NAME`
     */
    property?: string;
}

export interface ProcessGroupDetectionInstanceExtractionDelimiter {
    /**
     * Delimit from
     */
    from?: string;
    /**
     * (e.g. versions, hex, dates, and build numbers)
     */
    removeIds: boolean;
    /**
     * Delimit to
     */
    to?: string;
}

export interface ProcessGroupDetectionProcessDetection {
    /**
     * The substring to be contained in the value `property` refers to. Case Sensitive
     */
    containedString: string;
    /**
     * Possible values: `DOTNET_COMMAND`, `DOTNET_COMMAND_PATH`, `ASP_NET_CORE_APPLICATION_PATH`, `AWS_ECR_ACCOUNT_ID`, `AWS_ECR_REGION`, `AWS_ECS_CLUSTER`, `AWS_ECS_CONTAINERNAME`, `AWS_ECS_FAMILY`, `AWS_ECS_REVISION`, `AWS_LAMBDA_FUNCTION_NAME`, `AWS_REGION`, `APACHE_SPARK_MASTER_IP_ADDRESS`, `APACHE_CONFIG_PATH`, `CATALINA_BASE`, `CATALINA_HOME`, `CLOUD_FOUNDRY_APP_NAME`, `CLOUD_FOUNDRY_APPLICATION_ID`, `CLOUD_FOUNDRY_INSTANCE_INDEX`, `CLOUD_FOUNDRY_SPACE_NAME`, `CLOUD_FOUNDRY_SPACE_ID`, `COLDFUSION_JVM_CONFIG_FILE`, `SERVICE_NAME`, `COMMAND_LINE_ARGS`, `CONTAINER_ID`, `CONTAINER_IMAGE_VERSION`, `CONTAINER_NAME`, `DECLARATIVE_ID`, `CONTAINER_IMAGE_NAME`, `RUXIT_CLUSTER_ID`, `RUXIT_NODE_ID`, `EXE_NAME`, `EXE_PATH`, `ELASTIC_SEARCH_CLUSTER_NAME`, `ELASTIC_SEARCH_NODE_NAME`, `EQUINOX_CONFIG_PATH`, `GLASSFISH_DOMAIN_NAME`, `GLASSFISH_INSTANCE_NAME`, `PG_ID_CALC_INPUT_KEY_LINKAGE`, `GAE_INSTANCE`, `GAE_SERVICE`, `GOOGLE_CLOUD_PROJECT`, `HYBRIS_BIN_DIR`, `HYBRIS_CONFIG_DIR`, `HYBRIS_DATA_DIR`, `IBM_CICS_REGION`, `IBM_CICS_IMS_APPLID`, `IBM_CICS_IMS_JOBNAME`, `IBM_CTG_NAME`, `IBM_IMS_CONNECT`, `IBM_IMS_CONTROL`, `IBM_IMS_MPR`, `IBM_IMS_SOAP_GW_NAME`, `IIB_BROKER_NAME`, `IIB_EXECUTION_GROUP_NAME`, `IIS_APP_POOL`, `IIS_ROLE_NAME`, `JBOSS_HOME`, `JBOSS_MODE`, `JBOSS_SERVER_NAME`, `JAVA_JAR_FILE`, `JAVA_JAR_PATH`, `JAVA_MAIN_CLASS`, `KUBERNETES_BASEPODNAME`, `KUBERNETES_CONTAINERNAME`, `KUBERNETES_FULLPODNAME`, `KUBERNETES_NAMESPACE`, `KUBERNETES_PODUID`, `MSSQL_INSTANCE_NAME`, `NODEJS_APP_NAME`, `NODEJS_APP_BASE_DIR`, `NODEJS_SCRIPT_NAME`, `ORACLE_SID`, `PHP_CLI_SCRIPT_PATH`, `PHP_CLI_WORKING_DIR`, `SOFTWAREAG_INSTALL_ROOT`, `SOFTWAREAG_PRODUCTPROPNAME`, `SPRINGBOOT_APP_NAME`, `SPRINGBOOT_PROFILE_NAME`, `SPRINGBOOT_STARTUP_CLASS`, `TIBCO_BUSINESSWORKS_CE_APP_NAME`, `TIBCO_BUSINESSWORKS_CE_VERSION`, `TIBCO_BUSINESSWORKS_APP_NODE_NAME`, `TIBCO_BUSINESSWORKS_APP_SPACE_NAME`, `TIBCO_BUSINESSWORKS_DOMAIN_NAME`, `TIPCO_BUSINESSWORKS_PROPERTY_FILE`, `TIPCO_BUSINESSWORKS_PROPERTY_FILE_PATH`, `TIBCO_BUSINESSWORKS_HOME`, `VARNISH_INSTANCE_NAME`, `WEBLOGIC_NAME`, `WEBLOGIC_CLUSTER_NAME`, `WEBLOGIC_DOMAIN_NAME`, `WEBLOGIC_HOME`, `WEBSPHERE_LIBERTY_SERVER_NAME`, `WEBSPHERE_CELL_NAME`, `WEBSPHERE_CLUSTER_NAME`, `WEBSPHERE_NODE_NAME`, `WEBSPHERE_SERVER_NAME`
     */
    property: string;
    /**
     * Restrict this rule to specific process types. Note: Not all types can be detected at startup. Possible values: `PROCESS_TYPE_APACHE_HTTPD`, `PROCESS_TYPE_GLASSFISH`, `PROCESS_TYPE_GO`, `PROCESS_TYPE_IIS_APP_POOL`, `PROCESS_TYPE_JBOSS`, `PROCESS_TYPE_JAVA`, `PROCESS_TYPE_NGINX`, `PROCESS_TYPE_NODE_JS`, `PROCESS_TYPE_PHP`, `PROCESS_TYPE_TOMCAT`, `PROCESS_TYPE_WEBLOGIC`, `PROCESS_TYPE_WEBSPHERE`
     */
    restrictToProcessType?: string;
}

export interface ProcessMonitoringRuleCondition {
    /**
     * supported only with OneAgent 1.167+
     */
    envVar?: string;
    /**
     * Condition target
     */
    item: string;
    /**
     * Condition operator
     */
    operator: string;
    /**
     * Condition value
     */
    value?: string;
}

export interface ProcessgroupNamingCondition {
    conditions?: outputs.ProcessgroupNamingConditionCondition[];
}

export interface ProcessgroupNamingConditionCondition {
    /**
     * @deprecated You should use 'application_type' instead of 'application_type_comparison'. This attribute still exists for backwards compatibility.
     */
    applicationTypeComparisons?: outputs.ProcessgroupNamingConditionConditionApplicationTypeComparison[];
    applicationTypes?: outputs.ProcessgroupNamingConditionConditionApplicationType[];
    azureComputeModeComparisons?: outputs.ProcessgroupNamingConditionConditionAzureComputeModeComparison[];
    /**
     * @deprecated You should use 'azure_compute_mode' instead of 'azure_compute_mode_comparison'. This attribute still exists for backwards compatibility.
     */
    azureComputeModes?: outputs.ProcessgroupNamingConditionConditionAzureComputeMode[];
    /**
     * @deprecated You should use 'azure_sku' instead of 'azure_sku_comparision'. This attribute still exists for backwards compatibility.
     */
    azureSkuComparisions?: outputs.ProcessgroupNamingConditionConditionAzureSkuComparision[];
    azureSkus?: outputs.ProcessgroupNamingConditionConditionAzureSkus[];
    /**
     * @deprecated You should use 'comparison' instead of 'base_comparison_basic'. This attribute still exists for backwards compatibility.
     */
    baseComparisonBasics?: outputs.ProcessgroupNamingConditionConditionBaseComparisonBasic[];
    /**
     * @deprecated 'base_condition_key' is deprecated. You should use 'key'
     */
    baseConditionKeys?: outputs.ProcessgroupNamingConditionConditionBaseConditionKey[];
    /**
     * @deprecated You should use 'bitness' instead of 'bitness_comparision'. This attribute still exists for backwards compatibility.
     */
    bitnessComparisions?: outputs.ProcessgroupNamingConditionConditionBitnessComparision[];
    bitnesses?: outputs.ProcessgroupNamingConditionConditionBitness[];
    /**
     * @deprecated You should use 'cloud_type' instead of 'cloud_type_comparison'. This attribute still exists for backwards compatibility.
     */
    cloudTypeComparisons?: outputs.ProcessgroupNamingConditionConditionCloudTypeComparison[];
    cloudTypes?: outputs.ProcessgroupNamingConditionConditionCloudType[];
    comparisons?: outputs.ProcessgroupNamingConditionConditionComparison[];
    /**
     * @deprecated You should use 'custom_application_type' instead of 'custom_application_type_comparison'. This attribute still exists for backwards compatibility.
     */
    customApplicationTypeComparisons?: outputs.ProcessgroupNamingConditionConditionCustomApplicationTypeComparison[];
    customApplicationTypes?: outputs.ProcessgroupNamingConditionConditionCustomApplicationType[];
    /**
     * @deprecated 'custom_host_metadata_condition_key' is deprecated. You should use 'custom_host_metadata'
     */
    customHostMetadataConditionKeys?: outputs.ProcessgroupNamingConditionConditionCustomHostMetadataConditionKey[];
    customHostMetadatas?: outputs.ProcessgroupNamingConditionConditionCustomHostMetadata[];
    /**
     * @deprecated 'custom_process_metadata_condition_key' is deprecated. You should use 'custom_process_metadata'
     */
    customProcessMetadataConditionKeys?: outputs.ProcessgroupNamingConditionConditionCustomProcessMetadataConditionKey[];
    customProcessMetadatas?: outputs.ProcessgroupNamingConditionConditionCustomProcessMetadata[];
    databaseTopologies?: outputs.ProcessgroupNamingConditionConditionDatabaseTopology[];
    /**
     * @deprecated You should use 'database_topology' instead of 'database_topology_comparison'. This attribute still exists for backwards compatibility.
     */
    databaseTopologyComparisons?: outputs.ProcessgroupNamingConditionConditionDatabaseTopologyComparison[];
    /**
     * @deprecated You should use 'dcrum_decoder' instead of 'dcrum_decoder_comparison'. This attribute still exists for backwards compatibility.
     */
    dcrumDecoderComparisons?: outputs.ProcessgroupNamingConditionConditionDcrumDecoderComparison[];
    dcrumDecoders?: outputs.ProcessgroupNamingConditionConditionDcrumDecoder[];
    entities?: outputs.ProcessgroupNamingConditionConditionEntity[];
    /**
     * @deprecated You should use 'entity' instead of 'entity_id_comparison'. This attribute still exists for backwards compatibility.
     */
    entityIdComparisons?: outputs.ProcessgroupNamingConditionConditionEntityIdComparison[];
    hostTeches?: outputs.ProcessgroupNamingConditionConditionHostTech[];
    /**
     * @deprecated `hypervisor_type_comparision` is deprecated. Use `hypervisor` instead
     */
    hypervisorTypeComparisions?: outputs.ProcessgroupNamingConditionConditionHypervisorTypeComparision[];
    hypervisors?: outputs.ProcessgroupNamingConditionConditionHypervisor[];
    /**
     * @deprecated You should use 'indexed_name' instead of 'indexed_name_comparison'. This attribute still exists for backwards compatibility.
     */
    indexedNameComparisons?: outputs.ProcessgroupNamingConditionConditionIndexedNameComparison[];
    indexedNames?: outputs.ProcessgroupNamingConditionConditionIndexedName[];
    /**
     * @deprecated You should use 'indexed_string' instead of 'indexed_string_comparison'. This attribute still exists for backwards compatibility.
     */
    indexedStringComparisons?: outputs.ProcessgroupNamingConditionConditionIndexedStringComparison[];
    indexedStrings?: outputs.ProcessgroupNamingConditionConditionIndexedString[];
    /**
     * @deprecated You should use 'indexed_tag' instead of 'indexed_tag_comparison'. This attribute still exists for backwards compatibility.
     */
    indexedTagComparisons?: outputs.ProcessgroupNamingConditionConditionIndexedTagComparison[];
    indexedTags?: outputs.ProcessgroupNamingConditionConditionIndexedTag[];
    /**
     * @deprecated You should use 'integer' instead of 'integer_comparison'. This attribute still exists for backwards compatibility.
     */
    integerComparisons?: outputs.ProcessgroupNamingConditionConditionIntegerComparison[];
    integers?: outputs.ProcessgroupNamingConditionConditionInteger[];
    /**
     * @deprecated You should use 'ipaddress' instead of 'ipaddress_comparison'. This attribute still exists for backwards compatibility.
     */
    ipaddressComparisons?: outputs.ProcessgroupNamingConditionConditionIpaddressComparison[];
    ipaddresses?: outputs.ProcessgroupNamingConditionConditionIpaddress[];
    keys?: outputs.ProcessgroupNamingConditionConditionKey[];
    /**
     * @deprecated You should use 'mobile_platform' instead of 'mobile_platform_comparison'. This attribute still exists for backwards compatibility.
     */
    mobilePlatformComparisons?: outputs.ProcessgroupNamingConditionConditionMobilePlatformComparison[];
    mobilePlatforms?: outputs.ProcessgroupNamingConditionConditionMobilePlatform[];
    osArches?: outputs.ProcessgroupNamingConditionConditionOsArch[];
    osTypes?: outputs.ProcessgroupNamingConditionConditionOsType[];
    /**
     * @deprecated You should use 'os_arch' instead of 'osarchitecture_comparison'. This attribute still exists for backwards compatibility.
     */
    osarchitectureComparisons?: outputs.ProcessgroupNamingConditionConditionOsarchitectureComparison[];
    /**
     * @deprecated You should use 'os_type' instead of 'ostype_comparison'. This attribute still exists for backwards compatibility.
     */
    ostypeComparisons?: outputs.ProcessgroupNamingConditionConditionOstypeComparison[];
    /**
     * @deprecated You should use 'paas_type' instead of 'paas_type_comparison'. This attribute still exists for backwards compatibility.
     */
    paasTypeComparisons?: outputs.ProcessgroupNamingConditionConditionPaasTypeComparison[];
    paasTypes?: outputs.ProcessgroupNamingConditionConditionPaasType[];
    /**
     * @deprecated 'process_metadata_condition_key' is deprecated. You should use 'process_metadata'
     */
    processMetadataConditionKeys?: outputs.ProcessgroupNamingConditionConditionProcessMetadataConditionKey[];
    processMetadatas?: outputs.ProcessgroupNamingConditionConditionProcessMetadata[];
    serviceTopologies?: outputs.ProcessgroupNamingConditionConditionServiceTopology[];
    /**
     * @deprecated You should use 'service_topology' instead of 'service_topology_comparison'. This attribute still exists for backwards compatibility.
     */
    serviceTopologyComparisons?: outputs.ProcessgroupNamingConditionConditionServiceTopologyComparison[];
    /**
     * @deprecated You should use 'service_type' instead of 'service_type_comparison'. This attribute still exists for backwards compatibility.
     */
    serviceTypeComparisons?: outputs.ProcessgroupNamingConditionConditionServiceTypeComparison[];
    serviceTypes?: outputs.ProcessgroupNamingConditionConditionServiceType[];
    /**
     * @deprecated You should use 'host_tech' instead of 'simple_host_tech_comparison'. This attribute still exists for backwards compatibility.
     */
    simpleHostTechComparisons?: outputs.ProcessgroupNamingConditionConditionSimpleHostTechComparison[];
    /**
     * @deprecated You should use 'tech' instead of 'simple_tech_comparison'. This attribute still exists for backwards compatibility.
     */
    simpleTechComparisons?: outputs.ProcessgroupNamingConditionConditionSimpleTechComparison[];
    /**
     * @deprecated You should use 'string' instead of 'string_comparison'. This attribute still exists for backwards compatibility.
     */
    stringComparisons?: outputs.ProcessgroupNamingConditionConditionStringComparison[];
    /**
     * @deprecated 'string_condition_key' is deprecated. You should use 'string_key'
     */
    stringConditionKeys?: outputs.ProcessgroupNamingConditionConditionStringConditionKey[];
    stringKeys?: outputs.ProcessgroupNamingConditionConditionStringKey[];
    strings?: outputs.ProcessgroupNamingConditionConditionString[];
    /**
     * @deprecated You should use 'synthetic_engine' instead of 'synthetic_engine_type_comparison'. This attribute still exists for backwards compatibility.
     */
    syntheticEngineTypeComparisons?: outputs.ProcessgroupNamingConditionConditionSyntheticEngineTypeComparison[];
    syntheticEngines?: outputs.ProcessgroupNamingConditionConditionSyntheticEngine[];
    /**
     * @deprecated You should use 'tag' instead of 'tag_comparison'. This attribute still exists for backwards compatibility.
     */
    tagComparisons?: outputs.ProcessgroupNamingConditionConditionTagComparison[];
    tags?: outputs.ProcessgroupNamingConditionConditionTag[];
    teches?: outputs.ProcessgroupNamingConditionConditionTech[];
    unknowns?: string;
}

export interface ProcessgroupNamingConditionConditionApplicationType {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface ProcessgroupNamingConditionConditionApplicationTypeComparison {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: string;
}

export interface ProcessgroupNamingConditionConditionAzureComputeMode {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface ProcessgroupNamingConditionConditionAzureComputeModeComparison {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface ProcessgroupNamingConditionConditionAzureSkuComparision {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: string;
}

export interface ProcessgroupNamingConditionConditionAzureSkus {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface ProcessgroupNamingConditionConditionBaseComparisonBasic {
    negate?: boolean;
    type: string;
    unknowns?: string;
}

export interface ProcessgroupNamingConditionConditionBaseConditionKey {
    attribute: string;
    type?: string;
    unknowns?: string;
}

export interface ProcessgroupNamingConditionConditionBitness {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface ProcessgroupNamingConditionConditionBitnessComparision {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: string;
}

export interface ProcessgroupNamingConditionConditionCloudType {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface ProcessgroupNamingConditionConditionCloudTypeComparison {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: string;
}

export interface ProcessgroupNamingConditionConditionComparison {
    negate?: boolean;
    type: string;
    unknowns?: string;
}

export interface ProcessgroupNamingConditionConditionCustomApplicationType {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface ProcessgroupNamingConditionConditionCustomApplicationTypeComparison {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: string;
}

export interface ProcessgroupNamingConditionConditionCustomHostMetadata {
    attribute: string;
    dynamicKey: outputs.ProcessgroupNamingConditionConditionCustomHostMetadataDynamicKey;
    unknowns?: string;
}

export interface ProcessgroupNamingConditionConditionCustomHostMetadataConditionKey {
    attribute: string;
    dynamicKey: outputs.ProcessgroupNamingConditionConditionCustomHostMetadataConditionKeyDynamicKey;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
}

export interface ProcessgroupNamingConditionConditionCustomHostMetadataConditionKeyDynamicKey {
    key: string;
    source: string;
    unknowns?: string;
}

export interface ProcessgroupNamingConditionConditionCustomHostMetadataDynamicKey {
    key: string;
    source: string;
    unknowns?: string;
}

export interface ProcessgroupNamingConditionConditionCustomProcessMetadata {
    attribute: string;
    dynamicKey: outputs.ProcessgroupNamingConditionConditionCustomProcessMetadataDynamicKey;
    unknowns?: string;
}

export interface ProcessgroupNamingConditionConditionCustomProcessMetadataConditionKey {
    attribute: string;
    dynamicKey: outputs.ProcessgroupNamingConditionConditionCustomProcessMetadataConditionKeyDynamicKey;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
}

export interface ProcessgroupNamingConditionConditionCustomProcessMetadataConditionKeyDynamicKey {
    key: string;
    source: string;
    unknowns?: string;
}

export interface ProcessgroupNamingConditionConditionCustomProcessMetadataDynamicKey {
    key: string;
    source: string;
    unknowns?: string;
}

export interface ProcessgroupNamingConditionConditionDatabaseTopology {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface ProcessgroupNamingConditionConditionDatabaseTopologyComparison {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: string;
}

export interface ProcessgroupNamingConditionConditionDcrumDecoder {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface ProcessgroupNamingConditionConditionDcrumDecoderComparison {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: string;
}

export interface ProcessgroupNamingConditionConditionEntity {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface ProcessgroupNamingConditionConditionEntityIdComparison {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: string;
}

export interface ProcessgroupNamingConditionConditionHostTech {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: outputs.ProcessgroupNamingConditionConditionHostTechValue;
}

export interface ProcessgroupNamingConditionConditionHostTechValue {
    type?: string;
    unknowns?: string;
    verbatimType?: string;
}

export interface ProcessgroupNamingConditionConditionHypervisor {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface ProcessgroupNamingConditionConditionHypervisorTypeComparision {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: string;
}

export interface ProcessgroupNamingConditionConditionIndexedName {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface ProcessgroupNamingConditionConditionIndexedNameComparison {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: string;
}

export interface ProcessgroupNamingConditionConditionIndexedString {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface ProcessgroupNamingConditionConditionIndexedStringComparison {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: string;
}

export interface ProcessgroupNamingConditionConditionIndexedTag {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: outputs.ProcessgroupNamingConditionConditionIndexedTagValue;
}

export interface ProcessgroupNamingConditionConditionIndexedTagComparison {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: outputs.ProcessgroupNamingConditionConditionIndexedTagComparisonValue;
}

export interface ProcessgroupNamingConditionConditionIndexedTagComparisonValue {
    context: string;
    key: string;
    unknowns?: string;
    value?: string;
}

export interface ProcessgroupNamingConditionConditionIndexedTagValue {
    context: string;
    key: string;
    unknowns?: string;
    value?: string;
}

export interface ProcessgroupNamingConditionConditionInteger {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: number;
}

export interface ProcessgroupNamingConditionConditionIntegerComparison {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: number;
}

export interface ProcessgroupNamingConditionConditionIpaddress {
    caseSensitive?: boolean;
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface ProcessgroupNamingConditionConditionIpaddressComparison {
    caseSensitive?: boolean;
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: string;
}

export interface ProcessgroupNamingConditionConditionKey {
    attribute: string;
    type?: string;
    unknowns?: string;
}

export interface ProcessgroupNamingConditionConditionMobilePlatform {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface ProcessgroupNamingConditionConditionMobilePlatformComparison {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: string;
}

export interface ProcessgroupNamingConditionConditionOsArch {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface ProcessgroupNamingConditionConditionOsType {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface ProcessgroupNamingConditionConditionOsarchitectureComparison {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: string;
}

export interface ProcessgroupNamingConditionConditionOstypeComparison {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: string;
}

export interface ProcessgroupNamingConditionConditionPaasType {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface ProcessgroupNamingConditionConditionPaasTypeComparison {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: string;
}

export interface ProcessgroupNamingConditionConditionProcessMetadata {
    attribute: string;
    dynamicKey: string;
    unknowns?: string;
}

export interface ProcessgroupNamingConditionConditionProcessMetadataConditionKey {
    attribute: string;
    dynamicKey: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
}

export interface ProcessgroupNamingConditionConditionServiceTopology {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface ProcessgroupNamingConditionConditionServiceTopologyComparison {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: string;
}

export interface ProcessgroupNamingConditionConditionServiceType {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface ProcessgroupNamingConditionConditionServiceTypeComparison {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: string;
}

export interface ProcessgroupNamingConditionConditionSimpleHostTechComparison {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: outputs.ProcessgroupNamingConditionConditionSimpleHostTechComparisonValue;
}

export interface ProcessgroupNamingConditionConditionSimpleHostTechComparisonValue {
    type?: string;
    unknowns?: string;
    verbatimType?: string;
}

export interface ProcessgroupNamingConditionConditionSimpleTechComparison {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: outputs.ProcessgroupNamingConditionConditionSimpleTechComparisonValue;
}

export interface ProcessgroupNamingConditionConditionSimpleTechComparisonValue {
    type?: string;
    unknowns?: string;
    verbatimType?: string;
}

export interface ProcessgroupNamingConditionConditionString {
    caseSensitive?: boolean;
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface ProcessgroupNamingConditionConditionStringComparison {
    caseSensitive?: boolean;
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: string;
}

export interface ProcessgroupNamingConditionConditionStringConditionKey {
    attribute: string;
    dynamicKey: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
}

export interface ProcessgroupNamingConditionConditionStringKey {
    attribute: string;
    dynamicKey: string;
    unknowns?: string;
}

export interface ProcessgroupNamingConditionConditionSyntheticEngine {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface ProcessgroupNamingConditionConditionSyntheticEngineTypeComparison {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: string;
}

export interface ProcessgroupNamingConditionConditionTag {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: outputs.ProcessgroupNamingConditionConditionTagValue;
}

export interface ProcessgroupNamingConditionConditionTagComparison {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: outputs.ProcessgroupNamingConditionConditionTagComparisonValue;
}

export interface ProcessgroupNamingConditionConditionTagComparisonValue {
    context: string;
    key: string;
    unknowns?: string;
    value?: string;
}

export interface ProcessgroupNamingConditionConditionTagValue {
    context: string;
    key: string;
    unknowns?: string;
    value?: string;
}

export interface ProcessgroupNamingConditionConditionTech {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: outputs.ProcessgroupNamingConditionConditionTechValue;
}

export interface ProcessgroupNamingConditionConditionTechValue {
    type?: string;
    unknowns?: string;
    verbatimType?: string;
}

export interface QueueManagerAliasQueue {
    /**
     * Alias queue definitions for queue manager
     */
    aliasQueues?: outputs.QueueManagerAliasQueueAliasQueue[];
}

export interface QueueManagerAliasQueueAliasQueue {
    /**
     * The name of the alias queue
     */
    aliasQueueName: string;
    /**
     * The name of the base queue
     */
    baseQueueName: string;
    /**
     * Name of the cluster(s) this alias should be visible in
     */
    clusterVisibilities?: string[];
}

export interface QueueManagerClusterQueue {
    /**
     * Cluster queue definitions for queue manager
     */
    clusterQueues?: outputs.QueueManagerClusterQueueClusterQueue[];
}

export interface QueueManagerClusterQueueClusterQueue {
    /**
     * Name of the cluster(s) this alias should be visible in
     */
    clusterVisibilities?: string[];
    /**
     * The name of the local queue
     */
    localQueueName: string;
}

export interface QueueManagerRemoteQueue {
    /**
     * Remote queue definitions for queue manager
     */
    remoteQueues?: outputs.QueueManagerRemoteQueueRemoteQueue[];
}

export interface QueueManagerRemoteQueueRemoteQueue {
    /**
     * Name of the cluster(s) this alias should be visible in
     */
    clusterVisibilities?: string[];
    /**
     * The name of the local queue
     */
    localQueueName: string;
    /**
     * The name of the remote queue manager
     */
    remoteQueueManager: string;
    /**
     * The name of the remote queue
     */
    remoteQueueName: string;
}

export interface RequestAttributeDataSource {
    /**
     * Specifies the location where the values are captured and stored.  Required if the **source** is one of the following: `GET_PARAMETER`, `URI`, `REQUEST_HEADER`, `RESPONSE_HEADER`.   Not applicable in other cases.   If the **source** value is `REQUEST_HEADER` or `RESPONSE_HEADER`, the `CAPTURE_AND_STORE_ON_BOTH` location is not allowed
     */
    capturingAndStorageLocation?: string;
    /**
     * IBM integration bus label node name condition for which the value is captured
     */
    cicsSdkMethodNodeCondition?: outputs.RequestAttributeDataSourceCicsSdkMethodNodeCondition;
    /**
     * The data source is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * IBM integration bus label node name condition for which the value is captured
     */
    iibLabelMethodNodeCondition?: outputs.RequestAttributeDataSourceIibLabelMethodNodeCondition;
    /**
     * IBM integration bus label node name condition for which the value is captured
     */
    iibMethodNodeCondition?: outputs.RequestAttributeDataSourceIibMethodNodeCondition;
    /**
     * The IBM integration bus node type for which the value is captured.  This or `iibMethodNodeCondition` is required if the **source** is: `IIB_NODE`.  Not applicable in other cases
     */
    iibNodeType?: string;
    /**
     * The method specification if the **source** value is `METHOD_PARAM`.   Not applicable in other cases
     */
    methods?: outputs.RequestAttributeDataSourceMethod[];
    /**
     * The name of the web request parameter to capture.  Required if the **source** is one of the following: `POST_PARAMETER`, `GET_PARAMETER`, `REQUEST_HEADER`, `RESPONSE_HEADER`, `CUSTOM_ATTRIBUTE`.  Not applicable in other cases
     */
    parameterName?: string;
    /**
     * Conditions for data capturing
     */
    scope?: outputs.RequestAttributeDataSourceScope;
    /**
     * The technology of the session attribute to capture if the **source** value is `SESSION_ATTRIBUTE`.
     */
    sessionAttributeTechnology?: string;
    /**
     * The source of the attribute to capture. Works in conjunction with **parameterName** or **methods** and **technology**
     */
    source: string;
    technology?: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
    valueProcessing?: outputs.RequestAttributeDataSourceValueProcessing;
}

export interface RequestAttributeDataSourceCicsSdkMethodNodeCondition {
    /**
     * Negate the comparison
     */
    negate?: boolean;
    /**
     * Operator comparing the extracted value to the comparison value
     */
    operator: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value: string;
}

export interface RequestAttributeDataSourceIibLabelMethodNodeCondition {
    /**
     * Negate the comparison
     */
    negate?: boolean;
    /**
     * Operator comparing the extracted value to the comparison value
     */
    operator: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value: string;
}

export interface RequestAttributeDataSourceIibMethodNodeCondition {
    /**
     * Negate the comparison
     */
    negate?: boolean;
    /**
     * Operator comparing the extracted value to the comparison value
     */
    operator: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value: string;
}

export interface RequestAttributeDataSourceMethod {
    /**
     * The index of the argument to capture. Set `0` to capture the return value, `1` or higher to capture a mehtod argument.   Required if the **capture** is set to `ARGUMENT`.  Not applicable in other cases
     */
    argumentIndex?: number;
    /**
     * What to capture from the method
     */
    capture: string;
    /**
     * The getter chain to apply to the captured object. It is required in one of the following cases:  The **capture** is set to `THIS`.    The **capture** is set to `ARGUMENT`, and the argument is not a primitive, a primitive wrapper class, a string, or an array.   Not applicable in other cases
     */
    deepObjectAccess?: string;
    /**
     * Configuration of a method to be captured
     */
    method?: outputs.RequestAttributeDataSourceMethodMethod;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface RequestAttributeDataSourceMethodMethod {
    /**
     * Configuration of a method to be captured
     */
    argumentTypes?: string[];
    /**
     * The class name where the method to capture resides.   Either this or the **fileName** must be set
     */
    className?: string;
    /**
     * The file name where the method to capture resides.   Either this or **className** must be set
     */
    fileName?: string;
    /**
     * The operator of the comparison. If not set, `EQUALS` is used
     */
    fileNameMatcher?: string;
    /**
     * The name of the method to capture
     */
    methodName: string;
    /**
     * The modifiers of the method to capture
     */
    modifiers?: string[];
    /**
     * The return type
     */
    returnType: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
    /**
     * The visibility of the method to capture
     */
    visibility: string;
}

export interface RequestAttributeDataSourceScope {
    /**
     * Only applies to this host group
     */
    hostGroup?: string;
    /**
     * Only applies to this process group. Note that this can't be transferred between different clusters or environments
     */
    processGroup?: string;
    /**
     * Only applies to this service technology
     */
    serviceTechnology?: string;
    /**
     * Only apply to process groups matching this tag
     */
    tagOfProcessGroup?: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface RequestAttributeDataSourceValueProcessing {
    /**
     * Preprocess by extracting a substring from the original value
     */
    extractSubstring?: outputs.RequestAttributeDataSourceValueProcessingExtractSubstring;
    /**
     * Split (preprocessed) string values at this separator
     */
    splitAt?: string;
    /**
     * Prune Whitespaces. Defaults to false
     */
    trim?: boolean;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
    /**
     * IBM integration bus label node name condition for which the value is captured
     */
    valueCondition?: outputs.RequestAttributeDataSourceValueProcessingValueCondition;
    /**
     * Extract value from captured data per regex
     */
    valueExtractorRegex?: string;
}

export interface RequestAttributeDataSourceValueProcessingExtractSubstring {
    /**
     * The delimiter string
     */
    delimiter: string;
    /**
     * The end-delimiter string.   Required if the **position** value is `BETWEEN`. Otherwise not allowed
     */
    endDelimiter?: string;
    /**
     * The position of the extracted string relative to delimiters
     */
    position: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface RequestAttributeDataSourceValueProcessingValueCondition {
    /**
     * Negate the comparison
     */
    negate?: boolean;
    /**
     * Operator comparing the extracted value to the comparison value
     */
    operator: string;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
    /**
     * The value to compare to
     */
    value: string;
}

export interface RequestNamingConditions {
    conditions?: outputs.RequestNamingConditionsCondition[];
}

export interface RequestNamingConditionsCondition {
    attribute: string;
    comparison: outputs.RequestNamingConditionsConditionComparison;
    unknowns?: string;
}

export interface RequestNamingConditionsConditionComparison {
    boolean?: outputs.RequestNamingConditionsConditionComparisonBoolean;
    esbInputNodeType?: outputs.RequestNamingConditionsConditionComparisonEsbInputNodeType;
    failedState?: outputs.RequestNamingConditionsConditionComparisonFailedState;
    failureReason?: outputs.RequestNamingConditionsConditionComparisonFailureReason;
    fastString?: outputs.RequestNamingConditionsConditionComparisonFastString;
    flawState?: outputs.RequestNamingConditionsConditionComparisonFlawState;
    generic?: outputs.RequestNamingConditionsConditionComparisonGeneric;
    httpMethod?: outputs.RequestNamingConditionsConditionComparisonHttpMethod;
    httpStatusClass?: outputs.RequestNamingConditionsConditionComparisonHttpStatusClass;
    iibInputNodeType?: outputs.RequestNamingConditionsConditionComparisonIibInputNodeType;
    negate?: boolean;
    number?: outputs.RequestNamingConditionsConditionComparisonNumber;
    numberRequestAttribute?: outputs.RequestNamingConditionsConditionComparisonNumberRequestAttribute;
    serviceType?: outputs.RequestNamingConditionsConditionComparisonServiceType;
    string?: outputs.RequestNamingConditionsConditionComparisonString;
    stringRequestAttribute?: outputs.RequestNamingConditionsConditionComparisonStringRequestAttribute;
    tag?: outputs.RequestNamingConditionsConditionComparisonTag;
    zosCallType?: outputs.RequestNamingConditionsConditionComparisonZosCallType;
}

export interface RequestNamingConditionsConditionComparisonBoolean {
    operator?: string;
    unknowns?: string;
    value: boolean;
    values?: boolean[];
}

export interface RequestNamingConditionsConditionComparisonEsbInputNodeType {
    operator?: string;
    unknowns?: string;
    value?: string;
    values?: string[];
}

export interface RequestNamingConditionsConditionComparisonFailedState {
    operator?: string;
    unknowns?: string;
    value?: string;
    values?: string[];
}

export interface RequestNamingConditionsConditionComparisonFailureReason {
    operator?: string;
    unknowns?: string;
    value?: string;
    values?: string[];
}

export interface RequestNamingConditionsConditionComparisonFastString {
    caseSensitive?: boolean;
    operator?: string;
    unknowns?: string;
    value?: string;
    values?: string[];
}

export interface RequestNamingConditionsConditionComparisonFlawState {
    operator?: string;
    unknowns?: string;
    value?: string;
    values?: string[];
}

export interface RequestNamingConditionsConditionComparisonGeneric {
    type: string;
    unknowns?: string;
}

export interface RequestNamingConditionsConditionComparisonHttpMethod {
    operator?: string;
    unknowns?: string;
    value?: string;
    values?: string[];
}

export interface RequestNamingConditionsConditionComparisonHttpStatusClass {
    operator?: string;
    unknowns?: string;
    value?: string;
    values?: string[];
}

export interface RequestNamingConditionsConditionComparisonIibInputNodeType {
    operator?: string;
    unknowns?: string;
    value?: string;
    values?: string[];
}

export interface RequestNamingConditionsConditionComparisonNumber {
    operator?: string;
    unknowns?: string;
    value?: number;
    values?: number[];
}

export interface RequestNamingConditionsConditionComparisonNumberRequestAttribute {
    matchOnChildCalls?: boolean;
    operator?: string;
    requestAttribute: string;
    source?: outputs.RequestNamingConditionsConditionComparisonNumberRequestAttributeSource;
    unknowns?: string;
    value?: number;
    values?: number[];
}

export interface RequestNamingConditionsConditionComparisonNumberRequestAttributeSource {
    managementZone?: string;
    serviceTag?: outputs.RequestNamingConditionsConditionComparisonNumberRequestAttributeSourceServiceTag;
    unknowns?: string;
}

export interface RequestNamingConditionsConditionComparisonNumberRequestAttributeSourceServiceTag {
    context?: string;
    key: string;
    tagKey?: outputs.RequestNamingConditionsConditionComparisonNumberRequestAttributeSourceServiceTagTagKey;
    value?: string;
}

export interface RequestNamingConditionsConditionComparisonNumberRequestAttributeSourceServiceTagTagKey {
    context?: string;
    key?: string;
}

export interface RequestNamingConditionsConditionComparisonServiceType {
    operator?: string;
    unknowns?: string;
    value?: string;
    values?: string[];
}

export interface RequestNamingConditionsConditionComparisonString {
    caseSensitive?: boolean;
    operator?: string;
    unknowns?: string;
    value?: string;
    values?: string[];
}

export interface RequestNamingConditionsConditionComparisonStringRequestAttribute {
    caseSensitive?: boolean;
    matchOnChildCalls?: boolean;
    operator?: string;
    requestAttribute: string;
    source?: outputs.RequestNamingConditionsConditionComparisonStringRequestAttributeSource;
    unknowns?: string;
    value?: string;
    values?: string[];
}

export interface RequestNamingConditionsConditionComparisonStringRequestAttributeSource {
    managementZone?: string;
    serviceTag?: outputs.RequestNamingConditionsConditionComparisonStringRequestAttributeSourceServiceTag;
    unknowns?: string;
}

export interface RequestNamingConditionsConditionComparisonStringRequestAttributeSourceServiceTag {
    context?: string;
    key: string;
    tagKey?: outputs.RequestNamingConditionsConditionComparisonStringRequestAttributeSourceServiceTagTagKey;
    value?: string;
}

export interface RequestNamingConditionsConditionComparisonStringRequestAttributeSourceServiceTagTagKey {
    context?: string;
    key?: string;
}

export interface RequestNamingConditionsConditionComparisonTag {
    operator?: string;
    unknowns?: string;
    value?: outputs.RequestNamingConditionsConditionComparisonTagValue;
    values?: outputs.RequestNamingConditionsConditionComparisonTagValues;
}

export interface RequestNamingConditionsConditionComparisonTagValue {
    context: string;
    key: string;
    unknowns?: string;
    value?: string;
}

export interface RequestNamingConditionsConditionComparisonTagValues {
    values?: outputs.RequestNamingConditionsConditionComparisonTagValuesValue[];
}

export interface RequestNamingConditionsConditionComparisonTagValuesValue {
    context: string;
    key: string;
    unknowns?: string;
    value?: string;
}

export interface RequestNamingConditionsConditionComparisonZosCallType {
    operator?: string;
    unknowns?: string;
    value?: string;
    values?: string[];
}

export interface RequestNamingPlaceholders {
    placeholders?: outputs.RequestNamingPlaceholdersPlaceholder[];
}

export interface RequestNamingPlaceholdersPlaceholder {
    aggregation?: string;
    attribute: string;
    delimiterOrRegex?: string;
    endDelimiter?: string;
    kind: string;
    name: string;
    normalization?: string;
    requestAttribute?: string;
    source?: outputs.RequestNamingPlaceholdersPlaceholderSource;
    unknowns?: string;
    useFromChildCalls?: boolean;
}

export interface RequestNamingPlaceholdersPlaceholderSource {
    managementZone?: string;
    serviceTag?: outputs.RequestNamingPlaceholdersPlaceholderSourceServiceTag;
    unknowns?: string;
}

export interface RequestNamingPlaceholdersPlaceholderSourceServiceTag {
    context?: string;
    key: string;
    tagKey?: outputs.RequestNamingPlaceholdersPlaceholderSourceServiceTagTagKey;
    value?: string;
}

export interface RequestNamingPlaceholdersPlaceholderSourceServiceTagTagKey {
    context?: string;
    key?: string;
}

export interface ResourceAttributesKeys {
    rules: outputs.ResourceAttributesKeysRule[];
}

export interface ResourceAttributesKeysRule {
    /**
     * Attribute key **service.name** is automatically captured by default
     */
    attributeKey: string;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Possible Values: `MASK_ENTIRE_VALUE`, `MASK_ONLY_CONFIDENTIAL_DATA`, `NOT_MASKED`
     */
    masking: string;
}

export interface RumProviderBreakdownDomainNamePatternList {
    domainNamePatterns: outputs.RumProviderBreakdownDomainNamePatternListDomainNamePattern[];
}

export interface RumProviderBreakdownDomainNamePatternListDomainNamePattern {
    /**
     * Use a ends-with pattern for this content provider's domain
     */
    pattern: string;
}

export interface ServiceAnomaliesFailureRates {
    /**
     * Parameters of failure rate increase auto-detection. Example: If the expected error rate is 1.5%, and you set an absolute increase of 1%, and a relative increase of 50%, the thresholds will be:  Absolute: 1.5% + **1%** = 2.5%  Relative: 1.5% + 1.5% * **50%** = 2.25%
     */
    auto?: outputs.ServiceAnomaliesFailureRatesAuto;
    /**
     * Fixed thresholds for failure rate increase detection
     */
    thresholds?: outputs.ServiceAnomaliesFailureRatesThresholds;
}

export interface ServiceAnomaliesFailureRatesAuto {
    /**
     * Absolute increase of failing service calls to trigger an alert, %
     */
    absolute: number;
    /**
     * Relative increase of failing service calls to trigger an alert, %
     */
    relative: number;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface ServiceAnomaliesFailureRatesThresholds {
    /**
     * Sensitivity of the threshold.  With `low` sensitivity, high statistical confidence is used. Brief violations (for example, due to a surge in load) won't trigger alerts.  With `high` sensitivity, no statistical confidence is used. Each violation triggers alert
     */
    sensitivity: string;
    /**
     * Failure rate during any 5-minute period to trigger an alert, %
     */
    threshold: number;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface ServiceAnomaliesLoad {
    /**
     * The configuration of traffic drops detection
     */
    drops?: outputs.ServiceAnomaliesLoadDrops;
    /**
     * The configuration of traffic spikes detection
     */
    spikes?: outputs.ServiceAnomaliesLoadSpikes;
}

export interface ServiceAnomaliesLoadDrops {
    /**
     * Alert if the service stays in abnormal state for at least *X* minutes
     */
    minutes?: number;
    /**
     * Alert if the observed load is more than *X* % of the expected value
     */
    percent?: number;
}

export interface ServiceAnomaliesLoadSpikes {
    /**
     * Alert if the service stays in abnormal state for at least *X* minutes
     */
    minutes?: number;
    /**
     * Alert if the observed load is more than *X* % of the expected value
     */
    percent?: number;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface ServiceAnomaliesResponseTimes {
    /**
     * Parameters of the response time degradation auto-detection. Violation of **any** criterion triggers an alert
     */
    auto?: outputs.ServiceAnomaliesResponseTimesAuto;
    /**
     * Fixed thresholds for response time degradation detection
     */
    thresholds?: outputs.ServiceAnomaliesResponseTimesThresholds;
}

export interface ServiceAnomaliesResponseTimesAuto {
    /**
     * Minimal service load to detect response time degradation. Response time degradation of services with smaller load won't trigger alerts. Possible values are `FIFTEEN_REQUESTS_PER_MINUTE`, `FIVE_REQUESTS_PER_MINUTE`, `ONE_REQUEST_PER_MINUTE` and `TEN_REQUESTS_PER_MINUTE`
     */
    load: string;
    /**
     * Alert if the response time degrades by more than *X* milliseconds
     */
    milliseconds: number;
    /**
     * Alert if the observed load is more than *X* % of the expected value
     */
    percent: number;
    /**
     * Alert if the response time of the slowest 10% degrades by more than *X* milliseconds
     */
    slowestMilliseconds: number;
    /**
     * Alert if the response time of the slowest 10% degrades by more than *X* milliseconds
     */
    slowestPercent: number;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface ServiceAnomaliesResponseTimesThresholds {
    /**
     * Minimal service load to detect response time degradation. Response time degradation of services with smaller load won't trigger alerts. Possible values are `FIFTEEN_REQUESTS_PER_MINUTE`, `FIVE_REQUESTS_PER_MINUTE`, `ONE_REQUEST_PER_MINUTE` and `TEN_REQUESTS_PER_MINUTE`
     */
    load: string;
    /**
     * Alert if the response time degrades by more than *X* milliseconds
     */
    milliseconds: number;
    /**
     * Sensitivity of the threshold.  With `low` sensitivity, high statistical confidence is used. Brief violations (for example, due to a surge in load) won't trigger alerts.  With `high` sensitivity, no statistical confidence is used. Each violation triggers alert
     */
    sensitivity: string;
    /**
     * Alert if the response time of the slowest 10% degrades by more than *X* milliseconds
     */
    slowestMilliseconds: number;
    /**
     * allows for configuring properties that are not explicitly supported by the current version of this provider
     */
    unknowns?: string;
}

export interface ServiceAnomaliesV2FailureRate {
    /**
     * Alert if the percentage of failing service calls increases by **both** the absolute and relative thresholds:
     */
    autoDetection?: outputs.ServiceAnomaliesV2FailureRateAutoDetection;
    /**
     * Possible Values: `Auto`, `Fixed`
     */
    detectionMode?: string;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Alert if a given failure rate is exceeded during any 5-minute-period
     */
    fixedDetection?: outputs.ServiceAnomaliesV2FailureRateFixedDetection;
}

export interface ServiceAnomaliesV2FailureRateAutoDetection {
    /**
     * Absolute threshold
     */
    absoluteIncrease: number;
    /**
     * Avoid over-alerting
     */
    overAlertingProtection: outputs.ServiceAnomaliesV2FailureRateAutoDetectionOverAlertingProtection;
    /**
     * Relative threshold
     */
    relativeIncrease: number;
}

export interface ServiceAnomaliesV2FailureRateAutoDetectionOverAlertingProtection {
    /**
     * Only alert if the abnormal state remains for at least
     */
    minutesAbnormalState: number;
    /**
     * Only alert if there are at least
     */
    requestsPerMinute: number;
}

export interface ServiceAnomaliesV2FailureRateFixedDetection {
    /**
     * Avoid over-alerting
     */
    overAlertingProtection: outputs.ServiceAnomaliesV2FailureRateFixedDetectionOverAlertingProtection;
    /**
     * Possible Values: `High`, `Low`, `Medium`
     */
    sensitivity: string;
    /**
     * no documentation available
     */
    threshold: number;
}

export interface ServiceAnomaliesV2FailureRateFixedDetectionOverAlertingProtection {
    /**
     * Only alert if the abnormal state remains for at least
     */
    minutesAbnormalState: number;
    /**
     * Only alert if there are at least
     */
    requestsPerMinute: number;
}

export interface ServiceAnomaliesV2LoadDrops {
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Threshold
     */
    loadDropPercent?: number;
    /**
     * Time span
     */
    minutesAbnormalState?: number;
}

export interface ServiceAnomaliesV2LoadSpikes {
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Threshold
     */
    loadSpikePercent?: number;
    /**
     * Time span
     */
    minutesAbnormalState?: number;
}

export interface ServiceAnomaliesV2ResponseTime {
    /**
     * no documentation available
     */
    autoDetection?: outputs.ServiceAnomaliesV2ResponseTimeAutoDetection;
    /**
     * Possible Values: `Auto`, `Fixed`
     */
    detectionMode?: string;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * no documentation available
     */
    fixedDetection?: outputs.ServiceAnomaliesV2ResponseTimeFixedDetection;
}

export interface ServiceAnomaliesV2ResponseTimeAutoDetection {
    /**
     * Avoid over-alerting
     */
    overAlertingProtection: outputs.ServiceAnomaliesV2ResponseTimeAutoDetectionOverAlertingProtection;
    /**
     * Alert if the median response time of all requests degrades beyond **both** the absolute and relative thresholds:
     */
    responseTimeAll: outputs.ServiceAnomaliesV2ResponseTimeAutoDetectionResponseTimeAll;
    /**
     * Alert if the response time of the slowest 10% of requests degrades beyond **both** the absolute and relative thresholds:
     */
    responseTimeSlowest: outputs.ServiceAnomaliesV2ResponseTimeAutoDetectionResponseTimeSlowest;
}

export interface ServiceAnomaliesV2ResponseTimeAutoDetectionOverAlertingProtection {
    /**
     * Only alert if the abnormal state remains for at least
     */
    minutesAbnormalState: number;
    /**
     * Only alert if there are at least
     */
    requestsPerMinute: number;
}

export interface ServiceAnomaliesV2ResponseTimeAutoDetectionResponseTimeAll {
    /**
     * Absolute threshold
     */
    degradationMilliseconds: number;
    /**
     * Relative threshold
     */
    degradationPercent: number;
}

export interface ServiceAnomaliesV2ResponseTimeAutoDetectionResponseTimeSlowest {
    /**
     * Absolute threshold
     */
    slowestDegradationMilliseconds: number;
    /**
     * Relative threshold
     */
    slowestDegradationPercent: number;
}

export interface ServiceAnomaliesV2ResponseTimeFixedDetection {
    /**
     * Avoid over-alerting
     */
    overAlertingProtection: outputs.ServiceAnomaliesV2ResponseTimeFixedDetectionOverAlertingProtection;
    /**
     * Alert if the median response time of all requests degrades beyond **both** the absolute and relative thresholds:
     */
    responseTimeAll: outputs.ServiceAnomaliesV2ResponseTimeFixedDetectionResponseTimeAll;
    /**
     * Alert if the response time of the slowest 10% of requests degrades beyond **both** the absolute and relative thresholds:
     */
    responseTimeSlowest: outputs.ServiceAnomaliesV2ResponseTimeFixedDetectionResponseTimeSlowest;
    /**
     * Possible Values: `High`, `Low`, `Medium`
     */
    sensitivity: string;
}

export interface ServiceAnomaliesV2ResponseTimeFixedDetectionOverAlertingProtection {
    /**
     * Only alert if the abnormal state remains for at least
     */
    minutesAbnormalState: number;
    /**
     * Only alert if there are at least
     */
    requestsPerMinute: number;
}

export interface ServiceAnomaliesV2ResponseTimeFixedDetectionResponseTimeAll {
    /**
     * Absolute threshold
     */
    degradationMilliseconds: number;
}

export interface ServiceAnomaliesV2ResponseTimeFixedDetectionResponseTimeSlowest {
    /**
     * Absolute threshold
     */
    slowestDegradationMilliseconds: number;
}

export interface ServiceExternalWebRequestConditions {
    conditions: outputs.ServiceExternalWebRequestConditionsCondition[];
}

export interface ServiceExternalWebRequestConditionsCondition {
    /**
     * Take the value of this attribute
     */
    attribute: string;
    /**
     * Apply this operation
     */
    compareOperationType: string;
    /**
     * Technology
     */
    frameworks?: string[];
    /**
     * Ignore case sensitivity for texts.
     */
    ignoreCase?: boolean;
    /**
     * Value
     */
    intValue?: number;
    /**
     * Values
     */
    intValues?: number[];
    /**
     * From
     */
    ipRangeFrom?: string;
    /**
     * To
     */
    ipRangeTo?: string;
    /**
     * If multiple values are specified, at least one of them must match for the condition to match
     */
    tagValues?: string[];
    /**
     * If multiple values are specified, at least one of them must match for the condition to match
     */
    textValues?: string[];
}

export interface ServiceExternalWebRequestIdContributors {
    /**
     * Application identifier
     */
    applicationId: outputs.ServiceExternalWebRequestIdContributorsApplicationId;
    /**
     * URL context root
     */
    contextRoot: outputs.ServiceExternalWebRequestIdContributorsContextRoot;
    /**
     * Let the port contribute to the Service Id
     */
    portForServiceId: boolean;
    /**
     * Public domain name
     */
    publicDomainName: outputs.ServiceExternalWebRequestIdContributorsPublicDomainName;
}

export interface ServiceExternalWebRequestIdContributorsApplicationId {
    /**
     * Transform this value before letting it contribute to the Service Id
     */
    enableIdContributor: boolean;
    /**
     * no documentation available
     */
    serviceIdContributor?: outputs.ServiceExternalWebRequestIdContributorsApplicationIdServiceIdContributor;
}

export interface ServiceExternalWebRequestIdContributorsApplicationIdServiceIdContributor {
    /**
     * Possible Values: `OriginalValue`, `OverrideValue`, `TransformValue`
     */
    contributionType: string;
    /**
     * Choose how to transform a value before it contributes to the Service Id. Note that all of the Transformations are always applied. Transformations are applied in the order they are specified, and the output of the previous transformation is the input for the next one. The resulting value contributes to the Service Id and can be found on the **Service overview page** under **Properties and tags**.
     */
    transformations?: outputs.ServiceExternalWebRequestIdContributorsApplicationIdServiceIdContributorTransformations;
    /**
     * The value to be used instead of the detected value.
     */
    valueOverride?: outputs.ServiceExternalWebRequestIdContributorsApplicationIdServiceIdContributorValueOverride;
}

export interface ServiceExternalWebRequestIdContributorsApplicationIdServiceIdContributorTransformations {
    transformations: outputs.ServiceExternalWebRequestIdContributorsApplicationIdServiceIdContributorTransformationsTransformation[];
}

export interface ServiceExternalWebRequestIdContributorsApplicationIdServiceIdContributorTransformationsTransformation {
    /**
     * include hexadecimal numbers
     */
    includeHexNumbers?: boolean;
    /**
     * min digit count
     */
    minDigitCount?: number;
    /**
     * no documentation available
     */
    prefix?: string;
    /**
     * replacement
     */
    replacementValue?: string;
    /**
     * How many segments should be taken.
     */
    segmentCount?: number;
    /**
     * select index
     */
    selectIndex?: number;
    /**
     * split by
     */
    splitDelimiter?: string;
    /**
     * no documentation available
     */
    suffix?: string;
    /**
     * take from end
     */
    takeFromEnd?: boolean;
    /**
     * Possible Values: `AFTER`, `BEFORE`, `BETWEEN`, `REMOVE_CREDIT_CARDS`, `REMOVE_IBANS`, `REMOVE_IPS`, `REMOVE_NUMBERS`, `REPLACE_BETWEEN`, `SPLIT_SELECT`, `TAKE_SEGMENTS`
     */
    transformationType: string;
}

export interface ServiceExternalWebRequestIdContributorsApplicationIdServiceIdContributorValueOverride {
    /**
     * no documentation available
     */
    value: string;
}

export interface ServiceExternalWebRequestIdContributorsContextRoot {
    /**
     * Transform this value before letting it contribute to the Service Id
     */
    enableIdContributor: boolean;
    /**
     * no documentation available
     */
    serviceIdContributor?: outputs.ServiceExternalWebRequestIdContributorsContextRootServiceIdContributor;
}

export interface ServiceExternalWebRequestIdContributorsContextRootServiceIdContributor {
    /**
     * Possible Values: `OriginalValue`, `OverrideValue`, `TransformValue`
     */
    contributionType: string;
    /**
     * How many segments should be taken.
     */
    segmentCount?: number;
    /**
     * Choose how to transform a value before it contributes to the Service Id. Note that all of the Transformations are always applied. Transformations are applied in the order they are specified, and the output of the previous transformation is the input for the next one. The resulting value contributes to the Service Id and can be found on the **Service overview page** under **Properties and tags**.
     */
    transformations?: outputs.ServiceExternalWebRequestIdContributorsContextRootServiceIdContributorTransformations;
    /**
     * The value to be used instead of the detected value.
     */
    valueOverride?: outputs.ServiceExternalWebRequestIdContributorsContextRootServiceIdContributorValueOverride;
}

export interface ServiceExternalWebRequestIdContributorsContextRootServiceIdContributorTransformations {
    transformations: outputs.ServiceExternalWebRequestIdContributorsContextRootServiceIdContributorTransformationsTransformation[];
}

export interface ServiceExternalWebRequestIdContributorsContextRootServiceIdContributorTransformationsTransformation {
    /**
     * include hexadecimal numbers
     */
    includeHexNumbers?: boolean;
    /**
     * min digit count
     */
    minDigitCount?: number;
    /**
     * no documentation available
     */
    prefix?: string;
    /**
     * replacement
     */
    replacementValue?: string;
    /**
     * no documentation available
     */
    suffix?: string;
    /**
     * Possible Values: `AFTER`, `BEFORE`, `BETWEEN`, `REMOVE_CREDIT_CARDS`, `REMOVE_IBANS`, `REMOVE_IPS`, `REMOVE_NUMBERS`, `REPLACE_BETWEEN`, `SPLIT_SELECT`, `TAKE_SEGMENTS`
     */
    transformationType: string;
}

export interface ServiceExternalWebRequestIdContributorsContextRootServiceIdContributorValueOverride {
    /**
     * no documentation available
     */
    value: string;
}

export interface ServiceExternalWebRequestIdContributorsPublicDomainName {
    /**
     * Transform this value before letting it contribute to the Service Id
     */
    enableIdContributor: boolean;
    /**
     * no documentation available
     */
    serviceIdContributor?: outputs.ServiceExternalWebRequestIdContributorsPublicDomainNameServiceIdContributor;
}

export interface ServiceExternalWebRequestIdContributorsPublicDomainNameServiceIdContributor {
    /**
     * Possible Values: `OriginalValue`, `OverrideValue`, `TransformValue`
     */
    contributionType: string;
    /**
     * Use the detected host name instead of the request's domain name.
     */
    copyFromHostName?: boolean;
    /**
     * Choose how to transform a value before it contributes to the Service Id. Note that all of the Transformations are always applied. Transformations are applied in the order they are specified, and the output of the previous transformation is the input for the next one. The resulting value contributes to the Service Id and can be found on the **Service overview page** under **Properties and tags**.
     */
    transformations?: outputs.ServiceExternalWebRequestIdContributorsPublicDomainNameServiceIdContributorTransformations;
    /**
     * The value to be used instead of the detected value.
     */
    valueOverride?: outputs.ServiceExternalWebRequestIdContributorsPublicDomainNameServiceIdContributorValueOverride;
}

export interface ServiceExternalWebRequestIdContributorsPublicDomainNameServiceIdContributorTransformations {
    transformations: outputs.ServiceExternalWebRequestIdContributorsPublicDomainNameServiceIdContributorTransformationsTransformation[];
}

export interface ServiceExternalWebRequestIdContributorsPublicDomainNameServiceIdContributorTransformationsTransformation {
    /**
     * include hexadecimal numbers
     */
    includeHexNumbers?: boolean;
    /**
     * min digit count
     */
    minDigitCount?: number;
    /**
     * no documentation available
     */
    prefix?: string;
    /**
     * replacement
     */
    replacementValue?: string;
    /**
     * How many segments should be taken.
     */
    segmentCount?: number;
    /**
     * select index
     */
    selectIndex?: number;
    /**
     * split by
     */
    splitDelimiter?: string;
    /**
     * no documentation available
     */
    suffix?: string;
    /**
     * take from end
     */
    takeFromEnd?: boolean;
    /**
     * Possible Values: `AFTER`, `BEFORE`, `BETWEEN`, `REMOVE_CREDIT_CARDS`, `REMOVE_IBANS`, `REMOVE_IPS`, `REMOVE_NUMBERS`, `REPLACE_BETWEEN`, `SPLIT_SELECT`, `TAKE_SEGMENTS`
     */
    transformationType: string;
}

export interface ServiceExternalWebRequestIdContributorsPublicDomainNameServiceIdContributorValueOverride {
    /**
     * no documentation available
     */
    value: string;
}

export interface ServiceExternalWebServiceConditions {
    conditions: outputs.ServiceExternalWebServiceConditionsCondition[];
}

export interface ServiceExternalWebServiceConditionsCondition {
    /**
     * Take the value of this attribute
     */
    attribute: string;
    /**
     * Apply this operation
     */
    compareOperationType: string;
    /**
     * Technology
     */
    frameworks?: string[];
    /**
     * Ignore case sensitivity for texts.
     */
    ignoreCase?: boolean;
    /**
     * Value
     */
    intValue?: number;
    /**
     * Values
     */
    intValues?: number[];
    /**
     * From
     */
    ipRangeFrom?: string;
    /**
     * To
     */
    ipRangeTo?: string;
    /**
     * If multiple values are specified, at least one of them must match for the condition to match
     */
    tagValues?: string[];
    /**
     * If multiple values are specified, at least one of them must match for the condition to match
     */
    textValues?: string[];
}

export interface ServiceExternalWebServiceIdContributors {
    /**
     * Detect the matching requests as web request services instead of web services.
     */
    detectAsWebRequestService: boolean;
    portForServiceId?: boolean;
    urlPath?: outputs.ServiceExternalWebServiceIdContributorsUrlPath;
}

export interface ServiceExternalWebServiceIdContributorsUrlPath {
    /**
     * Transform this value before letting it contribute to the Service Id
     */
    enableIdContributor: boolean;
    /**
     * no documentation available
     */
    serviceIdContributor?: outputs.ServiceExternalWebServiceIdContributorsUrlPathServiceIdContributor;
}

export interface ServiceExternalWebServiceIdContributorsUrlPathServiceIdContributor {
    /**
     * Possible Values: `OriginalValue`, `OverrideValue`, `TransformValue`
     */
    contributionType: string;
    /**
     * Choose how to transform a value before it contributes to the Service Id. Note that all of the Transformations are always applied. Transformations are applied in the order they are specified, and the output of the previous transformation is the input for the next one. The resulting value contributes to the Service Id and can be found on the **Service overview page** under **Properties and tags**.
     */
    transformations?: outputs.ServiceExternalWebServiceIdContributorsUrlPathServiceIdContributorTransformations;
    /**
     * The value to be used instead of the detected value.
     */
    valueOverride?: outputs.ServiceExternalWebServiceIdContributorsUrlPathServiceIdContributorValueOverride;
}

export interface ServiceExternalWebServiceIdContributorsUrlPathServiceIdContributorTransformations {
    transformations: outputs.ServiceExternalWebServiceIdContributorsUrlPathServiceIdContributorTransformationsTransformation[];
}

export interface ServiceExternalWebServiceIdContributorsUrlPathServiceIdContributorTransformationsTransformation {
    /**
     * include hexadecimal numbers
     */
    includeHexNumbers?: boolean;
    /**
     * min digit count
     */
    minDigitCount?: number;
    /**
     * no documentation available
     */
    prefix?: string;
    /**
     * replacement
     */
    replacementValue?: string;
    /**
     * How many segments should be taken.
     */
    segmentCount?: number;
    /**
     * select index
     */
    selectIndex?: number;
    /**
     * split by
     */
    splitDelimiter?: string;
    /**
     * no documentation available
     */
    suffix?: string;
    /**
     * take from end
     */
    takeFromEnd?: boolean;
    /**
     * Possible Values: `AFTER`, `BEFORE`, `BETWEEN`, `REMOVE_CREDIT_CARDS`, `REMOVE_IBANS`, `REMOVE_IPS`, `REMOVE_NUMBERS`, `REPLACE_BETWEEN`, `SPLIT_SELECT`, `TAKE_SEGMENTS`
     */
    transformationType: string;
}

export interface ServiceExternalWebServiceIdContributorsUrlPathServiceIdContributorValueOverride {
    /**
     * no documentation available
     */
    value: string;
}

export interface ServiceFailureExceptionRules {
    /**
     * Some custom error situations are only detectable via a return value or other means. To support such cases, [define a request attribute](https://dt-url.net/ys5k0p4y) that captures the required data. Then define a custom error rule that determines if the request has failed based on the value of the request attribute.
     */
    customErrorRules?: outputs.ServiceFailureExceptionRulesCustomErrorRules;
    /**
     * There may be situations where your application code handles exceptions gracefully in a manner that these failures aren't detected by Dynatrace. Use this setting to define specific gracefully-handled exceptions that should be treated as service failures.
     */
    customHandledExceptions?: outputs.ServiceFailureExceptionRulesCustomHandledExceptions;
    /**
     * Ignore all exceptions
     */
    ignoreAllExceptions: boolean;
    /**
     * Ignore span failure detection
     */
    ignoreSpanFailureDetection: boolean;
    /**
     * Some exceptions that are thrown by legacy or 3rd-party code indicate a specific response, not an error. Use this setting to instruct Dynatrace to treat such exceptions as non-failed requests.. If an exception matching any of the defined patterns occurs in a request, it will not be considered as a failure. Other exceptions occurring at the same request might still mark the request as failed.
     */
    ignoredExceptions?: outputs.ServiceFailureExceptionRulesIgnoredExceptions;
    /**
     * Define exceptions which indicate that a service call should not be considered as failed. E.g. an exception indicating that the client aborted the operation.. If an exception matching any of the defined patterns occurs on the entry node of the service, it will be considered successful. Compared to ignored exceptions, the request will be considered successful even if other exceptions occur in the same request.
     */
    successForcingExceptions?: outputs.ServiceFailureExceptionRulesSuccessForcingExceptions;
}

export interface ServiceFailureExceptionRulesCustomErrorRules {
    customErrorRules: outputs.ServiceFailureExceptionRulesCustomErrorRulesCustomErrorRule[];
}

export interface ServiceFailureExceptionRulesCustomErrorRulesCustomErrorRule {
    /**
     * Request attribute condition
     */
    condition: outputs.ServiceFailureExceptionRulesCustomErrorRulesCustomErrorRuleCondition;
    /**
     * Request attribute
     */
    requestAttribute: string;
}

export interface ServiceFailureExceptionRulesCustomErrorRulesCustomErrorRuleCondition {
    /**
     * Case sensitive
     */
    caseSensitive?: boolean;
    /**
     * Apply this comparison
     */
    compareOperationType: string;
    /**
     * Value
     */
    doubleValue?: number;
    /**
     * Value
     */
    intValue?: number;
    /**
     * Value
     */
    textValue?: string;
}

export interface ServiceFailureExceptionRulesCustomHandledExceptions {
    customHandledExceptions: outputs.ServiceFailureExceptionRulesCustomHandledExceptionsCustomHandledException[];
}

export interface ServiceFailureExceptionRulesCustomHandledExceptionsCustomHandledException {
    /**
     * The pattern will match if it is contained within the actual class name.
     */
    classPattern?: string;
    /**
     * Optionally, define an exception message pattern. The pattern will match if the actual exception message contains the pattern.
     */
    messagePattern?: string;
}

export interface ServiceFailureExceptionRulesIgnoredExceptions {
    customHandledExceptions: outputs.ServiceFailureExceptionRulesIgnoredExceptionsCustomHandledException[];
}

export interface ServiceFailureExceptionRulesIgnoredExceptionsCustomHandledException {
    /**
     * The pattern will match if it is contained within the actual class name.
     */
    classPattern?: string;
    /**
     * Optionally, define an exception message pattern. The pattern will match if the actual exception message contains the pattern.
     */
    messagePattern?: string;
}

export interface ServiceFailureExceptionRulesSuccessForcingExceptions {
    customHandledExceptions: outputs.ServiceFailureExceptionRulesSuccessForcingExceptionsCustomHandledException[];
}

export interface ServiceFailureExceptionRulesSuccessForcingExceptionsCustomHandledException {
    /**
     * The pattern will match if it is contained within the actual class name.
     */
    classPattern?: string;
    /**
     * Optionally, define an exception message pattern. The pattern will match if the actual exception message contains the pattern.
     */
    messagePattern?: string;
}

export interface ServiceFullWebRequestConditions {
    conditions: outputs.ServiceFullWebRequestConditionsCondition[];
}

export interface ServiceFullWebRequestConditionsCondition {
    /**
     * Take the value of this attribute
     */
    attribute: string;
    /**
     * Apply this operation
     */
    compareOperationType: string;
    /**
     * Technology
     */
    frameworks?: string[];
    /**
     * Ignore case sensitivity for texts.
     */
    ignoreCase?: boolean;
    /**
     * Value
     */
    intValue?: number;
    /**
     * Values
     */
    intValues?: number[];
    /**
     * From
     */
    ipRangeFrom?: string;
    /**
     * To
     */
    ipRangeTo?: string;
    /**
     * If multiple values are specified, at least one of them must match for the condition to match
     */
    tagValues?: string[];
    /**
     * If multiple values are specified, at least one of them must match for the condition to match
     */
    textValues?: string[];
}

export interface ServiceFullWebRequestIdContributors {
    /**
     * Application identifier
     */
    applicationId: outputs.ServiceFullWebRequestIdContributorsApplicationId;
    /**
     * The context root is the first segment of the request URL after the Server name. For example, in the `www.dynatrace.com/support/help/dynatrace-api/` URL the context root is `/support`. The context root value can be found on the **Service overview page** under **Properties and tags**.
     */
    contextRoot: outputs.ServiceFullWebRequestIdContributorsContextRoot;
    /**
     * Server Name
     */
    serverName: outputs.ServiceFullWebRequestIdContributorsServerName;
}

export interface ServiceFullWebRequestIdContributorsApplicationId {
    /**
     * Transform this value before letting it contribute to the Service Id
     */
    enableIdContributor: boolean;
    /**
     * no documentation available
     */
    serviceIdContributor?: outputs.ServiceFullWebRequestIdContributorsApplicationIdServiceIdContributor;
}

export interface ServiceFullWebRequestIdContributorsApplicationIdServiceIdContributor {
    /**
     * Possible Values: `OriginalValue`, `OverrideValue`, `TransformValue`
     */
    contributionType: string;
    /**
     * Choose how to transform a value before it contributes to the Service Id. Note that all of the Transformations are always applied. Transformations are applied in the order they are specified, and the output of the previous transformation is the input for the next one. The resulting value contributes to the Service Id and can be found on the **Service overview page** under **Properties and tags**.
     */
    transformations?: outputs.ServiceFullWebRequestIdContributorsApplicationIdServiceIdContributorTransformations;
    /**
     * The value to be used instead of the detected value.
     */
    valueOverride?: outputs.ServiceFullWebRequestIdContributorsApplicationIdServiceIdContributorValueOverride;
}

export interface ServiceFullWebRequestIdContributorsApplicationIdServiceIdContributorTransformations {
    transformations: outputs.ServiceFullWebRequestIdContributorsApplicationIdServiceIdContributorTransformationsTransformation[];
}

export interface ServiceFullWebRequestIdContributorsApplicationIdServiceIdContributorTransformationsTransformation {
    /**
     * include hexadecimal numbers
     */
    includeHexNumbers?: boolean;
    /**
     * min digit count
     */
    minDigitCount?: number;
    /**
     * no documentation available
     */
    prefix?: string;
    /**
     * replacement
     */
    replacementValue?: string;
    /**
     * How many segments should be taken.
     */
    segmentCount?: number;
    /**
     * select index
     */
    selectIndex?: number;
    /**
     * split by
     */
    splitDelimiter?: string;
    /**
     * no documentation available
     */
    suffix?: string;
    /**
     * take from end
     */
    takeFromEnd?: boolean;
    /**
     * Possible Values: `AFTER`, `BEFORE`, `BETWEEN`, `REMOVE_CREDIT_CARDS`, `REMOVE_IBANS`, `REMOVE_IPS`, `REMOVE_NUMBERS`, `REPLACE_BETWEEN`, `SPLIT_SELECT`, `TAKE_SEGMENTS`
     */
    transformationType: string;
}

export interface ServiceFullWebRequestIdContributorsApplicationIdServiceIdContributorValueOverride {
    /**
     * no documentation available
     */
    value: string;
}

export interface ServiceFullWebRequestIdContributorsContextRoot {
    /**
     * Transform this value before letting it contribute to the Service Id
     */
    enableIdContributor: boolean;
    /**
     * no documentation available
     */
    serviceIdContributor?: outputs.ServiceFullWebRequestIdContributorsContextRootServiceIdContributor;
}

export interface ServiceFullWebRequestIdContributorsContextRootServiceIdContributor {
    /**
     * Possible Values: `OriginalValue`, `OverrideValue`, `TransformValue`
     */
    contributionType: string;
    /**
     * How many segments should be taken.
     */
    segmentCount?: number;
    /**
     * Choose how to transform a value before it contributes to the Service Id. Note that all of the Transformations are always applied. Transformations are applied in the order they are specified, and the output of the previous transformation is the input for the next one. The resulting value contributes to the Service Id and can be found on the **Service overview page** under **Properties and tags**.
     */
    transformations?: outputs.ServiceFullWebRequestIdContributorsContextRootServiceIdContributorTransformations;
    /**
     * The value to be used instead of the detected value.
     */
    valueOverride?: outputs.ServiceFullWebRequestIdContributorsContextRootServiceIdContributorValueOverride;
}

export interface ServiceFullWebRequestIdContributorsContextRootServiceIdContributorTransformations {
    transformations: outputs.ServiceFullWebRequestIdContributorsContextRootServiceIdContributorTransformationsTransformation[];
}

export interface ServiceFullWebRequestIdContributorsContextRootServiceIdContributorTransformationsTransformation {
    /**
     * include hexadecimal numbers
     */
    includeHexNumbers?: boolean;
    /**
     * min digit count
     */
    minDigitCount?: number;
    /**
     * no documentation available
     */
    prefix?: string;
    /**
     * replacement
     */
    replacementValue?: string;
    /**
     * no documentation available
     */
    suffix?: string;
    /**
     * Possible Values: `AFTER`, `BEFORE`, `BETWEEN`, `REMOVE_CREDIT_CARDS`, `REMOVE_IBANS`, `REMOVE_IPS`, `REMOVE_NUMBERS`, `REPLACE_BETWEEN`, `SPLIT_SELECT`, `TAKE_SEGMENTS`
     */
    transformationType: string;
}

export interface ServiceFullWebRequestIdContributorsContextRootServiceIdContributorValueOverride {
    /**
     * no documentation available
     */
    value: string;
}

export interface ServiceFullWebRequestIdContributorsServerName {
    /**
     * Transform this value before letting it contribute to the Service Id
     */
    enableIdContributor: boolean;
    /**
     * no documentation available
     */
    serviceIdContributor?: outputs.ServiceFullWebRequestIdContributorsServerNameServiceIdContributor;
}

export interface ServiceFullWebRequestIdContributorsServerNameServiceIdContributor {
    /**
     * Possible Values: `OriginalValue`, `OverrideValue`, `TransformValue`
     */
    contributionType: string;
    /**
     * Choose how to transform a value before it contributes to the Service Id. Note that all of the Transformations are always applied. Transformations are applied in the order they are specified, and the output of the previous transformation is the input for the next one. The resulting value contributes to the Service Id and can be found on the **Service overview page** under **Properties and tags**.
     */
    transformations?: outputs.ServiceFullWebRequestIdContributorsServerNameServiceIdContributorTransformations;
    /**
     * The value to be used instead of the detected value.
     */
    valueOverride?: outputs.ServiceFullWebRequestIdContributorsServerNameServiceIdContributorValueOverride;
}

export interface ServiceFullWebRequestIdContributorsServerNameServiceIdContributorTransformations {
    transformations: outputs.ServiceFullWebRequestIdContributorsServerNameServiceIdContributorTransformationsTransformation[];
}

export interface ServiceFullWebRequestIdContributorsServerNameServiceIdContributorTransformationsTransformation {
    /**
     * include hexadecimal numbers
     */
    includeHexNumbers?: boolean;
    /**
     * min digit count
     */
    minDigitCount?: number;
    /**
     * no documentation available
     */
    prefix?: string;
    /**
     * replacement
     */
    replacementValue?: string;
    /**
     * How many segments should be taken.
     */
    segmentCount?: number;
    /**
     * select index
     */
    selectIndex?: number;
    /**
     * split by
     */
    splitDelimiter?: string;
    /**
     * no documentation available
     */
    suffix?: string;
    /**
     * take from end
     */
    takeFromEnd?: boolean;
    /**
     * Possible Values: `AFTER`, `BEFORE`, `BETWEEN`, `REMOVE_CREDIT_CARDS`, `REMOVE_IBANS`, `REMOVE_IPS`, `REMOVE_NUMBERS`, `REPLACE_BETWEEN`, `SPLIT_SELECT`, `TAKE_SEGMENTS`
     */
    transformationType: string;
}

export interface ServiceFullWebRequestIdContributorsServerNameServiceIdContributorValueOverride {
    /**
     * no documentation available
     */
    value: string;
}

export interface ServiceFullWebServiceConditions {
    conditions: outputs.ServiceFullWebServiceConditionsCondition[];
}

export interface ServiceFullWebServiceConditionsCondition {
    /**
     * Take the value of this attribute
     */
    attribute: string;
    /**
     * Apply this operation
     */
    compareOperationType: string;
    /**
     * Technology
     */
    frameworks?: string[];
    /**
     * Ignore case sensitivity for texts.
     */
    ignoreCase?: boolean;
    /**
     * Value
     */
    intValue?: number;
    /**
     * Values
     */
    intValues?: number[];
    /**
     * From
     */
    ipRangeFrom?: string;
    /**
     * To
     */
    ipRangeTo?: string;
    /**
     * If multiple values are specified, at least one of them must match for the condition to match
     */
    tagValues?: string[];
    /**
     * If multiple values are specified, at least one of them must match for the condition to match
     */
    textValues?: string[];
}

export interface ServiceFullWebServiceIdContributors {
    applicationId?: outputs.ServiceFullWebServiceIdContributorsApplicationId;
    contextRoot?: outputs.ServiceFullWebServiceIdContributorsContextRoot;
    /**
     * Detect the matching requests as full web services (false) or web request services (true).
     */
    detectAsWebRequestService: boolean;
    serverName?: outputs.ServiceFullWebServiceIdContributorsServerName;
    webServiceName?: outputs.ServiceFullWebServiceIdContributorsWebServiceName;
    webServiceNamespace?: outputs.ServiceFullWebServiceIdContributorsWebServiceNamespace;
}

export interface ServiceFullWebServiceIdContributorsApplicationId {
    /**
     * Transform this value before letting it contribute to the Service Id
     */
    enableIdContributor: boolean;
    /**
     * no documentation available
     */
    serviceIdContributor?: outputs.ServiceFullWebServiceIdContributorsApplicationIdServiceIdContributor;
}

export interface ServiceFullWebServiceIdContributorsApplicationIdServiceIdContributor {
    /**
     * Possible Values: `OriginalValue`, `OverrideValue`, `TransformValue`
     */
    contributionType: string;
    /**
     * Choose how to transform a value before it contributes to the Service Id. Note that all of the Transformations are always applied. Transformations are applied in the order they are specified, and the output of the previous transformation is the input for the next one. The resulting value contributes to the Service Id and can be found on the **Service overview page** under **Properties and tags**.
     */
    transformations?: outputs.ServiceFullWebServiceIdContributorsApplicationIdServiceIdContributorTransformations;
    /**
     * The value to be used instead of the detected value.
     */
    valueOverride?: outputs.ServiceFullWebServiceIdContributorsApplicationIdServiceIdContributorValueOverride;
}

export interface ServiceFullWebServiceIdContributorsApplicationIdServiceIdContributorTransformations {
    transformations: outputs.ServiceFullWebServiceIdContributorsApplicationIdServiceIdContributorTransformationsTransformation[];
}

export interface ServiceFullWebServiceIdContributorsApplicationIdServiceIdContributorTransformationsTransformation {
    /**
     * include hexadecimal numbers
     */
    includeHexNumbers?: boolean;
    /**
     * min digit count
     */
    minDigitCount?: number;
    /**
     * no documentation available
     */
    prefix?: string;
    /**
     * replacement
     */
    replacementValue?: string;
    /**
     * How many segments should be taken.
     */
    segmentCount?: number;
    /**
     * select index
     */
    selectIndex?: number;
    /**
     * split by
     */
    splitDelimiter?: string;
    /**
     * no documentation available
     */
    suffix?: string;
    /**
     * take from end
     */
    takeFromEnd?: boolean;
    /**
     * Possible Values: `AFTER`, `BEFORE`, `BETWEEN`, `REMOVE_CREDIT_CARDS`, `REMOVE_IBANS`, `REMOVE_IPS`, `REMOVE_NUMBERS`, `REPLACE_BETWEEN`, `SPLIT_SELECT`, `TAKE_SEGMENTS`
     */
    transformationType: string;
}

export interface ServiceFullWebServiceIdContributorsApplicationIdServiceIdContributorValueOverride {
    /**
     * no documentation available
     */
    value: string;
}

export interface ServiceFullWebServiceIdContributorsContextRoot {
    /**
     * Transform this value before letting it contribute to the Service Id
     */
    enableIdContributor: boolean;
    /**
     * no documentation available
     */
    serviceIdContributor?: outputs.ServiceFullWebServiceIdContributorsContextRootServiceIdContributor;
}

export interface ServiceFullWebServiceIdContributorsContextRootServiceIdContributor {
    /**
     * Possible Values: `OriginalValue`, `OverrideValue`, `TransformValue`
     */
    contributionType: string;
    /**
     * How many segments should be taken.
     */
    segmentCount?: number;
    /**
     * Choose how to transform a value before it contributes to the Service Id. Note that all of the Transformations are always applied. Transformations are applied in the order they are specified, and the output of the previous transformation is the input for the next one. The resulting value contributes to the Service Id and can be found on the **Service overview page** under **Properties and tags**.
     */
    transformations?: outputs.ServiceFullWebServiceIdContributorsContextRootServiceIdContributorTransformations;
    /**
     * The value to be used instead of the detected value.
     */
    valueOverride?: outputs.ServiceFullWebServiceIdContributorsContextRootServiceIdContributorValueOverride;
}

export interface ServiceFullWebServiceIdContributorsContextRootServiceIdContributorTransformations {
    transformations: outputs.ServiceFullWebServiceIdContributorsContextRootServiceIdContributorTransformationsTransformation[];
}

export interface ServiceFullWebServiceIdContributorsContextRootServiceIdContributorTransformationsTransformation {
    /**
     * include hexadecimal numbers
     */
    includeHexNumbers?: boolean;
    /**
     * min digit count
     */
    minDigitCount?: number;
    /**
     * no documentation available
     */
    prefix?: string;
    /**
     * replacement
     */
    replacementValue?: string;
    /**
     * no documentation available
     */
    suffix?: string;
    /**
     * Possible Values: `AFTER`, `BEFORE`, `BETWEEN`, `REMOVE_CREDIT_CARDS`, `REMOVE_IBANS`, `REMOVE_IPS`, `REMOVE_NUMBERS`, `REPLACE_BETWEEN`, `SPLIT_SELECT`, `TAKE_SEGMENTS`
     */
    transformationType: string;
}

export interface ServiceFullWebServiceIdContributorsContextRootServiceIdContributorValueOverride {
    /**
     * no documentation available
     */
    value: string;
}

export interface ServiceFullWebServiceIdContributorsServerName {
    /**
     * Transform this value before letting it contribute to the Service Id
     */
    enableIdContributor: boolean;
    /**
     * no documentation available
     */
    serviceIdContributor?: outputs.ServiceFullWebServiceIdContributorsServerNameServiceIdContributor;
}

export interface ServiceFullWebServiceIdContributorsServerNameServiceIdContributor {
    /**
     * Possible Values: `OriginalValue`, `OverrideValue`, `TransformValue`
     */
    contributionType: string;
    /**
     * Choose how to transform a value before it contributes to the Service Id. Note that all of the Transformations are always applied. Transformations are applied in the order they are specified, and the output of the previous transformation is the input for the next one. The resulting value contributes to the Service Id and can be found on the **Service overview page** under **Properties and tags**.
     */
    transformations?: outputs.ServiceFullWebServiceIdContributorsServerNameServiceIdContributorTransformations;
    /**
     * The value to be used instead of the detected value.
     */
    valueOverride?: outputs.ServiceFullWebServiceIdContributorsServerNameServiceIdContributorValueOverride;
}

export interface ServiceFullWebServiceIdContributorsServerNameServiceIdContributorTransformations {
    transformations: outputs.ServiceFullWebServiceIdContributorsServerNameServiceIdContributorTransformationsTransformation[];
}

export interface ServiceFullWebServiceIdContributorsServerNameServiceIdContributorTransformationsTransformation {
    /**
     * include hexadecimal numbers
     */
    includeHexNumbers?: boolean;
    /**
     * min digit count
     */
    minDigitCount?: number;
    /**
     * no documentation available
     */
    prefix?: string;
    /**
     * replacement
     */
    replacementValue?: string;
    /**
     * How many segments should be taken.
     */
    segmentCount?: number;
    /**
     * select index
     */
    selectIndex?: number;
    /**
     * split by
     */
    splitDelimiter?: string;
    /**
     * no documentation available
     */
    suffix?: string;
    /**
     * take from end
     */
    takeFromEnd?: boolean;
    /**
     * Possible Values: `AFTER`, `BEFORE`, `BETWEEN`, `REMOVE_CREDIT_CARDS`, `REMOVE_IBANS`, `REMOVE_IPS`, `REMOVE_NUMBERS`, `REPLACE_BETWEEN`, `SPLIT_SELECT`, `TAKE_SEGMENTS`
     */
    transformationType: string;
}

export interface ServiceFullWebServiceIdContributorsServerNameServiceIdContributorValueOverride {
    /**
     * no documentation available
     */
    value: string;
}

export interface ServiceFullWebServiceIdContributorsWebServiceName {
    /**
     * Transform this value before letting it contribute to the Service Id
     */
    enableIdContributor: boolean;
    /**
     * no documentation available
     */
    serviceIdContributor?: outputs.ServiceFullWebServiceIdContributorsWebServiceNameServiceIdContributor;
}

export interface ServiceFullWebServiceIdContributorsWebServiceNameServiceIdContributor {
    /**
     * Possible Values: `OriginalValue`, `OverrideValue`, `TransformValue`
     */
    contributionType: string;
    /**
     * Choose how to transform a value before it contributes to the Service Id. Note that all of the Transformations are always applied. Transformations are applied in the order they are specified, and the output of the previous transformation is the input for the next one. The resulting value contributes to the Service Id and can be found on the **Service overview page** under **Properties and tags**.
     */
    transformations?: outputs.ServiceFullWebServiceIdContributorsWebServiceNameServiceIdContributorTransformations;
    /**
     * The value to be used instead of the detected value.
     */
    valueOverride?: outputs.ServiceFullWebServiceIdContributorsWebServiceNameServiceIdContributorValueOverride;
}

export interface ServiceFullWebServiceIdContributorsWebServiceNameServiceIdContributorTransformations {
    transformations: outputs.ServiceFullWebServiceIdContributorsWebServiceNameServiceIdContributorTransformationsTransformation[];
}

export interface ServiceFullWebServiceIdContributorsWebServiceNameServiceIdContributorTransformationsTransformation {
    /**
     * include hexadecimal numbers
     */
    includeHexNumbers?: boolean;
    /**
     * min digit count
     */
    minDigitCount?: number;
    /**
     * no documentation available
     */
    prefix?: string;
    /**
     * replacement
     */
    replacementValue?: string;
    /**
     * How many segments should be taken.
     */
    segmentCount?: number;
    /**
     * select index
     */
    selectIndex?: number;
    /**
     * split by
     */
    splitDelimiter?: string;
    /**
     * no documentation available
     */
    suffix?: string;
    /**
     * take from end
     */
    takeFromEnd?: boolean;
    /**
     * Possible Values: `AFTER`, `BEFORE`, `BETWEEN`, `REMOVE_CREDIT_CARDS`, `REMOVE_IBANS`, `REMOVE_IPS`, `REMOVE_NUMBERS`, `REPLACE_BETWEEN`, `SPLIT_SELECT`, `TAKE_SEGMENTS`
     */
    transformationType: string;
}

export interface ServiceFullWebServiceIdContributorsWebServiceNameServiceIdContributorValueOverride {
    /**
     * no documentation available
     */
    value: string;
}

export interface ServiceFullWebServiceIdContributorsWebServiceNamespace {
    /**
     * Transform this value before letting it contribute to the Service Id
     */
    enableIdContributor: boolean;
    /**
     * no documentation available
     */
    serviceIdContributor?: outputs.ServiceFullWebServiceIdContributorsWebServiceNamespaceServiceIdContributor;
}

export interface ServiceFullWebServiceIdContributorsWebServiceNamespaceServiceIdContributor {
    /**
     * Possible Values: `OriginalValue`, `OverrideValue`, `TransformValue`
     */
    contributionType: string;
    /**
     * Choose how to transform a value before it contributes to the Service Id. Note that all of the Transformations are always applied. Transformations are applied in the order they are specified, and the output of the previous transformation is the input for the next one. The resulting value contributes to the Service Id and can be found on the **Service overview page** under **Properties and tags**.
     */
    transformations?: outputs.ServiceFullWebServiceIdContributorsWebServiceNamespaceServiceIdContributorTransformations;
    /**
     * The value to be used instead of the detected value.
     */
    valueOverride?: outputs.ServiceFullWebServiceIdContributorsWebServiceNamespaceServiceIdContributorValueOverride;
}

export interface ServiceFullWebServiceIdContributorsWebServiceNamespaceServiceIdContributorTransformations {
    transformations: outputs.ServiceFullWebServiceIdContributorsWebServiceNamespaceServiceIdContributorTransformationsTransformation[];
}

export interface ServiceFullWebServiceIdContributorsWebServiceNamespaceServiceIdContributorTransformationsTransformation {
    /**
     * include hexadecimal numbers
     */
    includeHexNumbers?: boolean;
    /**
     * min digit count
     */
    minDigitCount?: number;
    /**
     * no documentation available
     */
    prefix?: string;
    /**
     * replacement
     */
    replacementValue?: string;
    /**
     * How many segments should be taken.
     */
    segmentCount?: number;
    /**
     * select index
     */
    selectIndex?: number;
    /**
     * split by
     */
    splitDelimiter?: string;
    /**
     * no documentation available
     */
    suffix?: string;
    /**
     * take from end
     */
    takeFromEnd?: boolean;
    /**
     * Possible Values: `AFTER`, `BEFORE`, `BETWEEN`, `REMOVE_CREDIT_CARDS`, `REMOVE_IBANS`, `REMOVE_IPS`, `REMOVE_NUMBERS`, `REPLACE_BETWEEN`, `SPLIT_SELECT`, `TAKE_SEGMENTS`
     */
    transformationType: string;
}

export interface ServiceFullWebServiceIdContributorsWebServiceNamespaceServiceIdContributorValueOverride {
    /**
     * no documentation available
     */
    value: string;
}

export interface ServiceHttpFailureBrokenLinks {
    /**
     * If your application relies on other hosts at other domains, add the associated domain names here. Once configured, Dynatrace will consider 404s thrown by hosts at these domains to be service failures related to your application.
     */
    brokenLinkDomains?: string[];
    /**
     * Consider 404 HTTP response codes as failures
     */
    http404NotFoundFailures: boolean;
}

export interface ServiceHttpFailureHttpResponseCodes {
    /**
     * HTTP response codes which indicate client side errors
     */
    clientSideErrors: string;
    /**
     * Treat missing HTTP response code as client side error
     */
    failOnMissingResponseCodeClientSide: boolean;
    /**
     * Treat missing HTTP response code as server side errors
     */
    failOnMissingResponseCodeServerSide: boolean;
    /**
     * HTTP response codes which indicate an error on the server side
     */
    serverSideErrors: string;
}

export interface ServiceNamingCondition {
    conditions?: outputs.ServiceNamingConditionCondition[];
}

export interface ServiceNamingConditionCondition {
    /**
     * @deprecated You should use 'application_type' instead of 'application_type_comparison'. This attribute still exists for backwards compatibility.
     */
    applicationTypeComparisons?: outputs.ServiceNamingConditionConditionApplicationTypeComparison[];
    applicationTypes?: outputs.ServiceNamingConditionConditionApplicationType[];
    azureComputeModeComparisons?: outputs.ServiceNamingConditionConditionAzureComputeModeComparison[];
    /**
     * @deprecated You should use 'azure_compute_mode' instead of 'azure_compute_mode_comparison'. This attribute still exists for backwards compatibility.
     */
    azureComputeModes?: outputs.ServiceNamingConditionConditionAzureComputeMode[];
    /**
     * @deprecated You should use 'azure_sku' instead of 'azure_sku_comparision'. This attribute still exists for backwards compatibility.
     */
    azureSkuComparisions?: outputs.ServiceNamingConditionConditionAzureSkuComparision[];
    azureSkus?: outputs.ServiceNamingConditionConditionAzureSkus[];
    /**
     * @deprecated You should use 'comparison' instead of 'base_comparison_basic'. This attribute still exists for backwards compatibility.
     */
    baseComparisonBasics?: outputs.ServiceNamingConditionConditionBaseComparisonBasic[];
    /**
     * @deprecated 'base_condition_key' is deprecated. You should use 'key'
     */
    baseConditionKeys?: outputs.ServiceNamingConditionConditionBaseConditionKey[];
    /**
     * @deprecated You should use 'bitness' instead of 'bitness_comparision'. This attribute still exists for backwards compatibility.
     */
    bitnessComparisions?: outputs.ServiceNamingConditionConditionBitnessComparision[];
    bitnesses?: outputs.ServiceNamingConditionConditionBitness[];
    /**
     * @deprecated You should use 'cloud_type' instead of 'cloud_type_comparison'. This attribute still exists for backwards compatibility.
     */
    cloudTypeComparisons?: outputs.ServiceNamingConditionConditionCloudTypeComparison[];
    cloudTypes?: outputs.ServiceNamingConditionConditionCloudType[];
    comparisons?: outputs.ServiceNamingConditionConditionComparison[];
    /**
     * @deprecated You should use 'custom_application_type' instead of 'custom_application_type_comparison'. This attribute still exists for backwards compatibility.
     */
    customApplicationTypeComparisons?: outputs.ServiceNamingConditionConditionCustomApplicationTypeComparison[];
    customApplicationTypes?: outputs.ServiceNamingConditionConditionCustomApplicationType[];
    /**
     * @deprecated 'custom_host_metadata_condition_key' is deprecated. You should use 'custom_host_metadata'
     */
    customHostMetadataConditionKeys?: outputs.ServiceNamingConditionConditionCustomHostMetadataConditionKey[];
    customHostMetadatas?: outputs.ServiceNamingConditionConditionCustomHostMetadata[];
    /**
     * @deprecated 'custom_process_metadata_condition_key' is deprecated. You should use 'custom_process_metadata'
     */
    customProcessMetadataConditionKeys?: outputs.ServiceNamingConditionConditionCustomProcessMetadataConditionKey[];
    customProcessMetadatas?: outputs.ServiceNamingConditionConditionCustomProcessMetadata[];
    databaseTopologies?: outputs.ServiceNamingConditionConditionDatabaseTopology[];
    /**
     * @deprecated You should use 'database_topology' instead of 'database_topology_comparison'. This attribute still exists for backwards compatibility.
     */
    databaseTopologyComparisons?: outputs.ServiceNamingConditionConditionDatabaseTopologyComparison[];
    /**
     * @deprecated You should use 'dcrum_decoder' instead of 'dcrum_decoder_comparison'. This attribute still exists for backwards compatibility.
     */
    dcrumDecoderComparisons?: outputs.ServiceNamingConditionConditionDcrumDecoderComparison[];
    dcrumDecoders?: outputs.ServiceNamingConditionConditionDcrumDecoder[];
    entities?: outputs.ServiceNamingConditionConditionEntity[];
    /**
     * @deprecated You should use 'entity' instead of 'entity_id_comparison'. This attribute still exists for backwards compatibility.
     */
    entityIdComparisons?: outputs.ServiceNamingConditionConditionEntityIdComparison[];
    hostTeches?: outputs.ServiceNamingConditionConditionHostTech[];
    /**
     * @deprecated `hypervisor_type_comparision` is deprecated. Use `hypervisor` instead
     */
    hypervisorTypeComparisions?: outputs.ServiceNamingConditionConditionHypervisorTypeComparision[];
    hypervisors?: outputs.ServiceNamingConditionConditionHypervisor[];
    /**
     * @deprecated You should use 'indexed_name' instead of 'indexed_name_comparison'. This attribute still exists for backwards compatibility.
     */
    indexedNameComparisons?: outputs.ServiceNamingConditionConditionIndexedNameComparison[];
    indexedNames?: outputs.ServiceNamingConditionConditionIndexedName[];
    /**
     * @deprecated You should use 'indexed_string' instead of 'indexed_string_comparison'. This attribute still exists for backwards compatibility.
     */
    indexedStringComparisons?: outputs.ServiceNamingConditionConditionIndexedStringComparison[];
    indexedStrings?: outputs.ServiceNamingConditionConditionIndexedString[];
    /**
     * @deprecated You should use 'indexed_tag' instead of 'indexed_tag_comparison'. This attribute still exists for backwards compatibility.
     */
    indexedTagComparisons?: outputs.ServiceNamingConditionConditionIndexedTagComparison[];
    indexedTags?: outputs.ServiceNamingConditionConditionIndexedTag[];
    /**
     * @deprecated You should use 'integer' instead of 'integer_comparison'. This attribute still exists for backwards compatibility.
     */
    integerComparisons?: outputs.ServiceNamingConditionConditionIntegerComparison[];
    integers?: outputs.ServiceNamingConditionConditionInteger[];
    /**
     * @deprecated You should use 'ipaddress' instead of 'ipaddress_comparison'. This attribute still exists for backwards compatibility.
     */
    ipaddressComparisons?: outputs.ServiceNamingConditionConditionIpaddressComparison[];
    ipaddresses?: outputs.ServiceNamingConditionConditionIpaddress[];
    keys?: outputs.ServiceNamingConditionConditionKey[];
    /**
     * @deprecated You should use 'mobile_platform' instead of 'mobile_platform_comparison'. This attribute still exists for backwards compatibility.
     */
    mobilePlatformComparisons?: outputs.ServiceNamingConditionConditionMobilePlatformComparison[];
    mobilePlatforms?: outputs.ServiceNamingConditionConditionMobilePlatform[];
    osArches?: outputs.ServiceNamingConditionConditionOsArch[];
    osTypes?: outputs.ServiceNamingConditionConditionOsType[];
    /**
     * @deprecated You should use 'os_arch' instead of 'osarchitecture_comparison'. This attribute still exists for backwards compatibility.
     */
    osarchitectureComparisons?: outputs.ServiceNamingConditionConditionOsarchitectureComparison[];
    /**
     * @deprecated You should use 'os_type' instead of 'ostype_comparison'. This attribute still exists for backwards compatibility.
     */
    ostypeComparisons?: outputs.ServiceNamingConditionConditionOstypeComparison[];
    /**
     * @deprecated You should use 'paas_type' instead of 'paas_type_comparison'. This attribute still exists for backwards compatibility.
     */
    paasTypeComparisons?: outputs.ServiceNamingConditionConditionPaasTypeComparison[];
    paasTypes?: outputs.ServiceNamingConditionConditionPaasType[];
    /**
     * @deprecated 'process_metadata_condition_key' is deprecated. You should use 'process_metadata'
     */
    processMetadataConditionKeys?: outputs.ServiceNamingConditionConditionProcessMetadataConditionKey[];
    processMetadatas?: outputs.ServiceNamingConditionConditionProcessMetadata[];
    serviceTopologies?: outputs.ServiceNamingConditionConditionServiceTopology[];
    /**
     * @deprecated You should use 'service_topology' instead of 'service_topology_comparison'. This attribute still exists for backwards compatibility.
     */
    serviceTopologyComparisons?: outputs.ServiceNamingConditionConditionServiceTopologyComparison[];
    /**
     * @deprecated You should use 'service_type' instead of 'service_type_comparison'. This attribute still exists for backwards compatibility.
     */
    serviceTypeComparisons?: outputs.ServiceNamingConditionConditionServiceTypeComparison[];
    serviceTypes?: outputs.ServiceNamingConditionConditionServiceType[];
    /**
     * @deprecated You should use 'host_tech' instead of 'simple_host_tech_comparison'. This attribute still exists for backwards compatibility.
     */
    simpleHostTechComparisons?: outputs.ServiceNamingConditionConditionSimpleHostTechComparison[];
    /**
     * @deprecated You should use 'tech' instead of 'simple_tech_comparison'. This attribute still exists for backwards compatibility.
     */
    simpleTechComparisons?: outputs.ServiceNamingConditionConditionSimpleTechComparison[];
    /**
     * @deprecated You should use 'string' instead of 'string_comparison'. This attribute still exists for backwards compatibility.
     */
    stringComparisons?: outputs.ServiceNamingConditionConditionStringComparison[];
    /**
     * @deprecated 'string_condition_key' is deprecated. You should use 'string_key'
     */
    stringConditionKeys?: outputs.ServiceNamingConditionConditionStringConditionKey[];
    stringKeys?: outputs.ServiceNamingConditionConditionStringKey[];
    strings?: outputs.ServiceNamingConditionConditionString[];
    /**
     * @deprecated You should use 'synthetic_engine' instead of 'synthetic_engine_type_comparison'. This attribute still exists for backwards compatibility.
     */
    syntheticEngineTypeComparisons?: outputs.ServiceNamingConditionConditionSyntheticEngineTypeComparison[];
    syntheticEngines?: outputs.ServiceNamingConditionConditionSyntheticEngine[];
    /**
     * @deprecated You should use 'tag' instead of 'tag_comparison'. This attribute still exists for backwards compatibility.
     */
    tagComparisons?: outputs.ServiceNamingConditionConditionTagComparison[];
    tags?: outputs.ServiceNamingConditionConditionTag[];
    teches?: outputs.ServiceNamingConditionConditionTech[];
    unknowns?: string;
}

export interface ServiceNamingConditionConditionApplicationType {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface ServiceNamingConditionConditionApplicationTypeComparison {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: string;
}

export interface ServiceNamingConditionConditionAzureComputeMode {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface ServiceNamingConditionConditionAzureComputeModeComparison {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface ServiceNamingConditionConditionAzureSkuComparision {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: string;
}

export interface ServiceNamingConditionConditionAzureSkus {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface ServiceNamingConditionConditionBaseComparisonBasic {
    negate?: boolean;
    type: string;
    unknowns?: string;
}

export interface ServiceNamingConditionConditionBaseConditionKey {
    attribute: string;
    type?: string;
    unknowns?: string;
}

export interface ServiceNamingConditionConditionBitness {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface ServiceNamingConditionConditionBitnessComparision {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: string;
}

export interface ServiceNamingConditionConditionCloudType {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface ServiceNamingConditionConditionCloudTypeComparison {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: string;
}

export interface ServiceNamingConditionConditionComparison {
    negate?: boolean;
    type: string;
    unknowns?: string;
}

export interface ServiceNamingConditionConditionCustomApplicationType {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface ServiceNamingConditionConditionCustomApplicationTypeComparison {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: string;
}

export interface ServiceNamingConditionConditionCustomHostMetadata {
    attribute: string;
    dynamicKey: outputs.ServiceNamingConditionConditionCustomHostMetadataDynamicKey;
    unknowns?: string;
}

export interface ServiceNamingConditionConditionCustomHostMetadataConditionKey {
    attribute: string;
    dynamicKey: outputs.ServiceNamingConditionConditionCustomHostMetadataConditionKeyDynamicKey;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
}

export interface ServiceNamingConditionConditionCustomHostMetadataConditionKeyDynamicKey {
    key: string;
    source: string;
    unknowns?: string;
}

export interface ServiceNamingConditionConditionCustomHostMetadataDynamicKey {
    key: string;
    source: string;
    unknowns?: string;
}

export interface ServiceNamingConditionConditionCustomProcessMetadata {
    attribute: string;
    dynamicKey: outputs.ServiceNamingConditionConditionCustomProcessMetadataDynamicKey;
    unknowns?: string;
}

export interface ServiceNamingConditionConditionCustomProcessMetadataConditionKey {
    attribute: string;
    dynamicKey: outputs.ServiceNamingConditionConditionCustomProcessMetadataConditionKeyDynamicKey;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
}

export interface ServiceNamingConditionConditionCustomProcessMetadataConditionKeyDynamicKey {
    key: string;
    source: string;
    unknowns?: string;
}

export interface ServiceNamingConditionConditionCustomProcessMetadataDynamicKey {
    key: string;
    source: string;
    unknowns?: string;
}

export interface ServiceNamingConditionConditionDatabaseTopology {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface ServiceNamingConditionConditionDatabaseTopologyComparison {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: string;
}

export interface ServiceNamingConditionConditionDcrumDecoder {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface ServiceNamingConditionConditionDcrumDecoderComparison {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: string;
}

export interface ServiceNamingConditionConditionEntity {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface ServiceNamingConditionConditionEntityIdComparison {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: string;
}

export interface ServiceNamingConditionConditionHostTech {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: outputs.ServiceNamingConditionConditionHostTechValue;
}

export interface ServiceNamingConditionConditionHostTechValue {
    type?: string;
    unknowns?: string;
    verbatimType?: string;
}

export interface ServiceNamingConditionConditionHypervisor {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface ServiceNamingConditionConditionHypervisorTypeComparision {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: string;
}

export interface ServiceNamingConditionConditionIndexedName {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface ServiceNamingConditionConditionIndexedNameComparison {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: string;
}

export interface ServiceNamingConditionConditionIndexedString {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface ServiceNamingConditionConditionIndexedStringComparison {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: string;
}

export interface ServiceNamingConditionConditionIndexedTag {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: outputs.ServiceNamingConditionConditionIndexedTagValue;
}

export interface ServiceNamingConditionConditionIndexedTagComparison {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: outputs.ServiceNamingConditionConditionIndexedTagComparisonValue;
}

export interface ServiceNamingConditionConditionIndexedTagComparisonValue {
    context: string;
    key: string;
    unknowns?: string;
    value?: string;
}

export interface ServiceNamingConditionConditionIndexedTagValue {
    context: string;
    key: string;
    unknowns?: string;
    value?: string;
}

export interface ServiceNamingConditionConditionInteger {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: number;
}

export interface ServiceNamingConditionConditionIntegerComparison {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: number;
}

export interface ServiceNamingConditionConditionIpaddress {
    caseSensitive?: boolean;
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface ServiceNamingConditionConditionIpaddressComparison {
    caseSensitive?: boolean;
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: string;
}

export interface ServiceNamingConditionConditionKey {
    attribute: string;
    type?: string;
    unknowns?: string;
}

export interface ServiceNamingConditionConditionMobilePlatform {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface ServiceNamingConditionConditionMobilePlatformComparison {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: string;
}

export interface ServiceNamingConditionConditionOsArch {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface ServiceNamingConditionConditionOsType {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface ServiceNamingConditionConditionOsarchitectureComparison {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: string;
}

export interface ServiceNamingConditionConditionOstypeComparison {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: string;
}

export interface ServiceNamingConditionConditionPaasType {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface ServiceNamingConditionConditionPaasTypeComparison {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: string;
}

export interface ServiceNamingConditionConditionProcessMetadata {
    attribute: string;
    dynamicKey: string;
    unknowns?: string;
}

export interface ServiceNamingConditionConditionProcessMetadataConditionKey {
    attribute: string;
    dynamicKey: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
}

export interface ServiceNamingConditionConditionServiceTopology {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface ServiceNamingConditionConditionServiceTopologyComparison {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: string;
}

export interface ServiceNamingConditionConditionServiceType {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface ServiceNamingConditionConditionServiceTypeComparison {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: string;
}

export interface ServiceNamingConditionConditionSimpleHostTechComparison {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: outputs.ServiceNamingConditionConditionSimpleHostTechComparisonValue;
}

export interface ServiceNamingConditionConditionSimpleHostTechComparisonValue {
    type?: string;
    unknowns?: string;
    verbatimType?: string;
}

export interface ServiceNamingConditionConditionSimpleTechComparison {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: outputs.ServiceNamingConditionConditionSimpleTechComparisonValue;
}

export interface ServiceNamingConditionConditionSimpleTechComparisonValue {
    type?: string;
    unknowns?: string;
    verbatimType?: string;
}

export interface ServiceNamingConditionConditionString {
    caseSensitive?: boolean;
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface ServiceNamingConditionConditionStringComparison {
    caseSensitive?: boolean;
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: string;
}

export interface ServiceNamingConditionConditionStringConditionKey {
    attribute: string;
    dynamicKey: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
}

export interface ServiceNamingConditionConditionStringKey {
    attribute: string;
    dynamicKey: string;
    unknowns?: string;
}

export interface ServiceNamingConditionConditionSyntheticEngine {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: string;
}

export interface ServiceNamingConditionConditionSyntheticEngineTypeComparison {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: string;
}

export interface ServiceNamingConditionConditionTag {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: outputs.ServiceNamingConditionConditionTagValue;
}

export interface ServiceNamingConditionConditionTagComparison {
    negate?: boolean;
    operator: string;
    /**
     * @deprecated The value of the attribute type is implicit, therefore shouldn't get specified
     */
    type?: string;
    unknowns?: string;
    value?: outputs.ServiceNamingConditionConditionTagComparisonValue;
}

export interface ServiceNamingConditionConditionTagComparisonValue {
    context: string;
    key: string;
    unknowns?: string;
    value?: string;
}

export interface ServiceNamingConditionConditionTagValue {
    context: string;
    key: string;
    unknowns?: string;
    value?: string;
}

export interface ServiceNamingConditionConditionTech {
    negate?: boolean;
    operator: string;
    unknowns?: string;
    value?: outputs.ServiceNamingConditionConditionTechValue;
}

export interface ServiceNamingConditionConditionTechValue {
    type?: string;
    unknowns?: string;
    verbatimType?: string;
}

export interface SessionReplayWebPrivacyMaskingPresets {
    /**
     * (Field has overlap with `dynatrace.ApplicationDataPrivacy`) The elements are defined by the CSS selector or attribute name.
     */
    playbackMaskingAllowListRules?: outputs.SessionReplayWebPrivacyMaskingPresetsPlaybackMaskingAllowListRules;
    /**
     * (Field has overlap with `dynatrace.ApplicationDataPrivacy`) The elements are defined by the CSS selector or attribute name.
     */
    playbackMaskingBlockListRules?: outputs.SessionReplayWebPrivacyMaskingPresetsPlaybackMaskingBlockListRules;
    /**
     * (Field has overlap with `dynatrace.ApplicationDataPrivacy`) Possible Values: `MASK_ALL`, `MASK_USER_INPUT`, `ALLOW_LIST`, `BLOCK_LIST`
     */
    playbackMaskingPreset: string;
    /**
     * (Field has overlap with `dynatrace.ApplicationDataPrivacy`) The elements are defined by the CSS selector or attribute name.
     */
    recordingMaskingAllowListRules?: outputs.SessionReplayWebPrivacyMaskingPresetsRecordingMaskingAllowListRules;
    /**
     * (Field has overlap with `dynatrace.ApplicationDataPrivacy`) The elements are defined by the CSS selector or attribute name.
     */
    recordingMaskingBlockListRules?: outputs.SessionReplayWebPrivacyMaskingPresetsRecordingMaskingBlockListRules;
    /**
     * (Field has overlap with `dynatrace.ApplicationDataPrivacy`) Possible Values: `MASK_USER_INPUT`, `ALLOW_LIST`, `BLOCK_LIST`, `MASK_ALL`
     */
    recordingMaskingPreset: string;
}

export interface SessionReplayWebPrivacyMaskingPresetsPlaybackMaskingAllowListRules {
    allowListRules: outputs.SessionReplayWebPrivacyMaskingPresetsPlaybackMaskingAllowListRulesAllowListRule[];
}

export interface SessionReplayWebPrivacyMaskingPresetsPlaybackMaskingAllowListRulesAllowListRule {
    /**
     * Attribute masking can be applied to web applications that store data within attributes, typically data-NAME attributes in HTML5. When you define attributes, their values are masked while recording but not removed.
     */
    attributeExpression?: string;
    /**
     * Content masking can be applied to webpages where personal data is displayed. When content masking is applied to parent elements, all child elements are masked by default.
     */
    cssExpression?: string;
    /**
     * Possible Values: `ATTRIBUTE`, `ELEMENT`
     */
    target: string;
}

export interface SessionReplayWebPrivacyMaskingPresetsPlaybackMaskingBlockListRules {
    blockListRules: outputs.SessionReplayWebPrivacyMaskingPresetsPlaybackMaskingBlockListRulesBlockListRule[];
}

export interface SessionReplayWebPrivacyMaskingPresetsPlaybackMaskingBlockListRulesBlockListRule {
    /**
     * Attribute masking can be applied to web applications that store data within attributes, typically data-NAME attributes in HTML5. When you define attributes, their values are masked while recording but not removed.
     */
    attributeExpression?: string;
    /**
     * Content masking can be applied to webpages where personal data is displayed. When content masking is applied to parent elements, all child elements are masked by default.
     */
    cssExpression?: string;
    /**
     * Hide user interactions with these elements, including clicks that expand elements, highlighting that results from hovering a cursor over an option, and selection of specific form options.
     */
    hideUserInteraction?: boolean;
    /**
     * Possible Values: `ATTRIBUTE`, `ELEMENT`
     */
    target: string;
}

export interface SessionReplayWebPrivacyMaskingPresetsRecordingMaskingAllowListRules {
    allowListRules: outputs.SessionReplayWebPrivacyMaskingPresetsRecordingMaskingAllowListRulesAllowListRule[];
}

export interface SessionReplayWebPrivacyMaskingPresetsRecordingMaskingAllowListRulesAllowListRule {
    /**
     * Attribute masking can be applied to web applications that store data within attributes, typically data-NAME attributes in HTML5. When you define attributes, their values are masked while recording but not removed.
     */
    attributeExpression?: string;
    /**
     * Content masking can be applied to webpages where personal data is displayed. When content masking is applied to parent elements, all child elements are masked by default.
     */
    cssExpression?: string;
    /**
     * Possible Values: `ATTRIBUTE`, `ELEMENT`
     */
    target: string;
}

export interface SessionReplayWebPrivacyMaskingPresetsRecordingMaskingBlockListRules {
    blockListRules: outputs.SessionReplayWebPrivacyMaskingPresetsRecordingMaskingBlockListRulesBlockListRule[];
}

export interface SessionReplayWebPrivacyMaskingPresetsRecordingMaskingBlockListRulesBlockListRule {
    /**
     * Attribute masking can be applied to web applications that store data within attributes, typically data-NAME attributes in HTML5. When you define attributes, their values are masked while recording but not removed.
     */
    attributeExpression?: string;
    /**
     * Content masking can be applied to webpages where personal data is displayed. When content masking is applied to parent elements, all child elements are masked by default.
     */
    cssExpression?: string;
    /**
     * Hide user interactions with these elements, including clicks that expand elements, highlighting that results from hovering a cursor over an option, and selection of specific form options.
     */
    hideUserInteraction?: boolean;
    /**
     * Possible Values: `ATTRIBUTE`, `ELEMENT`
     */
    target: string;
}

export interface SiteReliabilityGuardianObjectives {
    objectives: outputs.SiteReliabilityGuardianObjectivesObjective[];
}

export interface SiteReliabilityGuardianObjectivesObjective {
    /**
     * Possible Values: `GREATER_THAN_OR_EQUAL`, `LESS_THAN_OR_EQUAL`
     */
    comparisonOperator: string;
    /**
     * no documentation available
     */
    description?: string;
    /**
     * DQL query
     */
    dqlQuery?: string;
    /**
     * Objective name
     */
    name: string;
    /**
     * Possible Values: `DQL`, `REFERENCE_SLO`
     */
    objectiveType: string;
    /**
     * Please enter the metric key of your desired SLO. SLO metric keys have to start with 'func:slo.'
     */
    referenceSlo?: string;
    /**
     * no documentation available
     */
    target?: number;
    /**
     * no documentation available
     */
    warning?: number;
}

export interface SiteReliabilityGuardianVariables {
    variables: outputs.SiteReliabilityGuardianVariablesVariable[];
}

export interface SiteReliabilityGuardianVariablesVariable {
    /**
     * Value
     */
    definition: string;
    /**
     * Objective name
     */
    name: string;
}

export interface SloErrorBudgetBurnRate {
    /**
     * The error budget burn rate calculation is enabled (true) or disabled (false).
     */
    burnRateVisualizationEnabled?: boolean;
    /**
     * The threshold between a slow and a fast burn rate.
     */
    fastBurnThreshold?: number;
}

export interface SloV2ErrorBudgetBurnRate {
    /**
     * Burn rate visualization enabled
     */
    burnRateVisualizationEnabled: boolean;
    /**
     * The threshold defines when a burn rate is marked as fast-burning (high-emergency). Burn rates lower than this threshold (and greater than 1) are highlighted as slow-burn (low-emergency).
     */
    fastBurnThreshold?: number;
}

export interface SpanCaptureRuleMatches {
    /**
     * Matching strategies for the Span
     */
    matches: outputs.SpanCaptureRuleMatchesMatch[];
}

export interface SpanCaptureRuleMatchesMatch {
    /**
     * Whether to match strings case sensitively or not
     */
    caseSensitive?: boolean;
    /**
     * Possible values are `EQUALS`, `CONTAINS`, `STARTS_WITH`, `ENDS_WITH`, `DOES_NOT_EQUAL`, `DOES_NOT_CONTAIN`, `DOES_NOT_START_WITH` and `DOES_NOT_END_WITH`.
     */
    comparison: string;
    /**
     * The name of the attribute if `source` is `ATTRIBUTE`
     */
    key?: string;
    /**
     * What to match against. Possible values are `SPAN_NAME`, `SPAN_KIND`, `ATTRIBUTE`, `INSTRUMENTATION_LIBRARY_NAME` and `INSTRUMENTATION_LIBRARY_VERSION`
     */
    source: string;
    /**
     * The value to compare against. When `source` is `SPAN_KIND` the only allowed values are `INTERNAL`, `SERVER`, `CLIENT`, `PRODUCER` and `CONSUMER`
     */
    value?: string;
}

export interface SpanContextPropagationMatches {
    /**
     * Matching strategies for the Span
     */
    matches: outputs.SpanContextPropagationMatchesMatch[];
}

export interface SpanContextPropagationMatchesMatch {
    /**
     * Whether to match strings case sensitively or not
     */
    caseSensitive?: boolean;
    /**
     * Possible values are `EQUALS`, `CONTAINS`, `STARTS_WITH`, `ENDS_WITH`, `DOES_NOT_EQUAL`, `DOES_NOT_CONTAIN`, `DOES_NOT_START_WITH` and `DOES_NOT_END_WITH`.
     */
    comparison: string;
    /**
     * The name of the attribute if `source` is `ATTRIBUTE`
     */
    key?: string;
    /**
     * What to match against. Possible values are `SPAN_NAME`, `SPAN_KIND`, `ATTRIBUTE`, `INSTRUMENTATION_LIBRARY_NAME` and `INSTRUMENTATION_LIBRARY_VERSION`
     */
    source: string;
    /**
     * The value to compare against. When `source` is `SPAN_KIND` the only allowed values are `INTERNAL`, `SERVER`, `CLIENT`, `PRODUCER` and `CONSUMER`
     */
    value?: string;
}

export interface SpanEntryPointMatches {
    /**
     * Matching strategies for the Span
     */
    matches: outputs.SpanEntryPointMatchesMatch[];
}

export interface SpanEntryPointMatchesMatch {
    /**
     * Whether to match strings case sensitively or not
     */
    caseSensitive?: boolean;
    /**
     * Possible values are `EQUALS`, `CONTAINS`, `STARTS_WITH`, `ENDS_WITH`, `DOES_NOT_EQUAL`, `DOES_NOT_CONTAIN`, `DOES_NOT_START_WITH` and `DOES_NOT_END_WITH`.
     */
    comparison: string;
    /**
     * The name of the attribute if `source` is `ATTRIBUTE`
     */
    key?: string;
    /**
     * What to match against. Possible values are `SPAN_NAME`, `SPAN_KIND`, `ATTRIBUTE`, `INSTRUMENTATION_LIBRARY_NAME` and `INSTRUMENTATION_LIBRARY_VERSION`
     */
    source: string;
    /**
     * The value to compare against. When `source` is `SPAN_KIND` the only allowed values are `INTERNAL`, `SERVER`, `CLIENT`, `PRODUCER` and `CONSUMER`
     */
    value?: string;
}

export interface UpdateWindowsDailyRecurrence {
    every: number;
    recurrenceRange: outputs.UpdateWindowsDailyRecurrenceRecurrenceRange;
    updateTime: outputs.UpdateWindowsDailyRecurrenceUpdateTime;
}

export interface UpdateWindowsDailyRecurrenceRecurrenceRange {
    end: string;
    start: string;
}

export interface UpdateWindowsDailyRecurrenceUpdateTime {
    duration: number;
    startTime: string;
    timeZone: string;
}

export interface UpdateWindowsMonthlyRecurrence {
    every: number;
    recurrenceRange: outputs.UpdateWindowsMonthlyRecurrenceRecurrenceRange;
    selectedMonthDay: number;
    updateTime: outputs.UpdateWindowsMonthlyRecurrenceUpdateTime;
}

export interface UpdateWindowsMonthlyRecurrenceRecurrenceRange {
    end: string;
    start: string;
}

export interface UpdateWindowsMonthlyRecurrenceUpdateTime {
    duration: number;
    startTime: string;
    timeZone: string;
}

export interface UpdateWindowsOnceRecurrence {
    recurrenceRange: outputs.UpdateWindowsOnceRecurrenceRecurrenceRange;
}

export interface UpdateWindowsOnceRecurrenceRecurrenceRange {
    end: string;
    start: string;
}

export interface UpdateWindowsWeeklyRecurrence {
    every: number;
    recurrenceRange: outputs.UpdateWindowsWeeklyRecurrenceRecurrenceRange;
    selectedWeekDays: outputs.UpdateWindowsWeeklyRecurrenceSelectedWeekDays;
    updateTime: outputs.UpdateWindowsWeeklyRecurrenceUpdateTime;
}

export interface UpdateWindowsWeeklyRecurrenceRecurrenceRange {
    end: string;
    start: string;
}

export interface UpdateWindowsWeeklyRecurrenceSelectedWeekDays {
    friday: boolean;
    monday: boolean;
    saturday: boolean;
    sunday: boolean;
    thursday: boolean;
    tuesday: boolean;
    wednesday: boolean;
}

export interface UpdateWindowsWeeklyRecurrenceUpdateTime {
    duration: number;
    startTime: string;
    timeZone: string;
}

export interface UrlBasedSamplingQueryParameters {
    parameters: outputs.UrlBasedSamplingQueryParametersParameter[];
}

export interface UrlBasedSamplingQueryParametersParameter {
    /**
     * Query parameter name
     */
    name: string;
    /**
     * Query parameter value
     */
    value?: string;
    /**
     * Query parameter value is undefined
     */
    valueIsUndefined?: boolean;
}

export interface UserActionMetricsFilters {
    filters: outputs.UserActionMetricsFiltersFilter[];
}

export interface UserActionMetricsFiltersFilter {
    /**
     * Field name
     */
    fieldName: string;
    /**
     * Possible Values: `EQUALS`, `GREATER_THAN`, `GREATER_THAN_OR_EQUAL_TO`, `IN`, `IS_NOT_NULL`, `IS_NULL`, `LESS_THAN`, `LESS_THAN_OR_EQUAL_TO`, `LIKE`, `NOT_EQUAL`, `NOT_LIKE`, `STARTS_WITH`
     */
    operator: string;
    /**
     * no documentation available
     */
    value?: string;
    /**
     * Values
     */
    valueIns?: string[];
}

export interface UserActionMetricsValue {
    /**
     * Field name
     */
    fieldName?: string;
    /**
     * Possible Values: `COUNTER`, `FIELD`
     */
    type: string;
}

export interface UserGroupPermissions {
    /**
     * A permission granted to one or multiple environments
     */
    grants: outputs.UserGroupPermissionsGrant[];
}

export interface UserGroupPermissionsGrant {
    /**
     * The ids of the environments this permission grants the user access to.
     */
    environments?: string[];
    /**
     * The permission. Possible values are `VIEWER`, `MANAGE_SETTINGS`, `AGENT_INSTALL`, `LOG_VIEWER`, `VIEW_SENSITIVE_REQUEST_DATA`, `CONFIGURE_REQUEST_CAPTURE_DATA`, `REPLAY_SESSION_DATA`, `REPLAY_SESSION_DATA_WITHOUT_MASKING`, `MANAGE_SECURITY_PROBLEMS` and `MANAGE_SUPPORT_TICKETS`.
     */
    permission: string;
}

export interface UserSessionMetricsFilters {
    filters: outputs.UserSessionMetricsFiltersFilter[];
}

export interface UserSessionMetricsFiltersFilter {
    /**
     * Field name
     */
    fieldName: string;
    /**
     * Possible Values: `EQUALS`, `GREATER_THAN`, `GREATER_THAN_OR_EQUAL_TO`, `IN`, `IS_NOT_NULL`, `IS_NULL`, `LESS_THAN`, `LESS_THAN_OR_EQUAL_TO`, `LIKE`, `NOT_EQUAL`, `NOT_LIKE`, `STARTS_WITH`
     */
    operator: string;
    /**
     * no documentation available
     */
    value?: string;
    /**
     * Values
     */
    valueIns?: string[];
}

export interface UserSessionMetricsValue {
    /**
     * Field name
     */
    fieldName?: string;
    /**
     * Possible Values: `COUNTER`, `FIELD`
     */
    type: string;
}

export interface VmwareAnomaliesDroppedPacketsDetection {
    /**
     * Alert if the condition is met in 3 out of 5 samples
     */
    customThresholds?: outputs.VmwareAnomaliesDroppedPacketsDetectionCustomThresholds;
    /**
     * Possible Values: `Auto`, `Custom`
     */
    detectionMode?: string;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface VmwareAnomaliesDroppedPacketsDetectionCustomThresholds {
    /**
     * Receive/transmit dropped packets rate on NIC is higher than
     */
    droppedPacketsPerSecond: number;
}

export interface VmwareAnomaliesEsxiHighCpuDetection {
    /**
     * Alert if **all three** conditions are met in 3 out of 5 samples
     */
    customThresholds?: outputs.VmwareAnomaliesEsxiHighCpuDetectionCustomThresholds;
    /**
     * Possible Values: `Auto`, `Custom`
     */
    detectionMode?: string;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface VmwareAnomaliesEsxiHighCpuDetectionCustomThresholds {
    /**
     * At least one peak occurred when Hypervisor CPU usage was higher than
     */
    cpuPeakPercentage: number;
    /**
     * CPU usage is higher than
     */
    cpuUsagePercentage: number;
    /**
     * VM CPU ready is higher than
     */
    vmCpuReadyPercentage: number;
}

export interface VmwareAnomaliesEsxiHighMemoryDetection {
    /**
     * Alert if the condition is met in 3 out of 5 samples
     */
    customThresholds?: outputs.VmwareAnomaliesEsxiHighMemoryDetectionCustomThresholds;
    /**
     * Possible Values: `Auto`, `Custom`
     */
    detectionMode?: string;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface VmwareAnomaliesEsxiHighMemoryDetectionCustomThresholds {
    /**
     * ESXi host swap IN/OUT or compression/decompression rate is higher than
     */
    compressionDecompressionRate: number;
}

export interface VmwareAnomaliesGuestCpuLimitDetection {
    /**
     * Alert if **all three** conditions are met in 3 out of 5 samples
     */
    customThresholds?: outputs.VmwareAnomaliesGuestCpuLimitDetectionCustomThresholds;
    /**
     * Possible Values: `Auto`, `Custom`
     */
    detectionMode?: string;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface VmwareAnomaliesGuestCpuLimitDetectionCustomThresholds {
    /**
     * Hypervisor CPU usage is higher than
     */
    hostCpuUsagePercentage: number;
    /**
     * VM CPU ready is higher than
     */
    vmCpuReadyPercentage: number;
    /**
     * VM CPU usage (VM CPU Usage Mhz / VM CPU limit in Mhz) is higher than
     */
    vmCpuUsagePercentage: number;
}

export interface VmwareAnomaliesLowDatastoreSpaceDetection {
    /**
     * Alert if the condition is met in 1 out of 5 samples
     */
    customThresholds?: outputs.VmwareAnomaliesLowDatastoreSpaceDetectionCustomThresholds;
    /**
     * Possible Values: `Auto`, `Custom`
     */
    detectionMode?: string;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface VmwareAnomaliesLowDatastoreSpaceDetectionCustomThresholds {
    /**
     * Datastore free space is lower than
     */
    freeSpacePercentage: number;
}

export interface VmwareAnomaliesOverloadedStorageDetection {
    /**
     * Alert if the condition is met in 3 out of 5 samples
     */
    customThresholds?: outputs.VmwareAnomaliesOverloadedStorageDetectionCustomThresholds;
    /**
     * Possible Values: `Auto`, `Custom`
     */
    detectionMode?: string;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface VmwareAnomaliesOverloadedStorageDetectionCustomThresholds {
    /**
     * Number of command aborts is higher than
     */
    commandAbortsNumber: number;
}

export interface VmwareAnomaliesSlowPhysicalStorageDetection {
    /**
     * Alert if **any** condition is met in 4 out of 5 samples
     */
    customThresholds?: outputs.VmwareAnomaliesSlowPhysicalStorageDetectionCustomThresholds;
    /**
     * Possible Values: `Auto`, `Custom`
     */
    detectionMode?: string;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface VmwareAnomaliesSlowPhysicalStorageDetectionCustomThresholds {
    /**
     * Read/write latency is higher than
     */
    avgReadWriteLatency: number;
    /**
     * Peak value for read/write latency is higher than
     */
    peakReadWriteLatency: number;
}

export interface VmwareAnomaliesUndersizedStorageDetection {
    /**
     * Alert if **any** condition is met in 3 out of 5 samples
     */
    customThresholds?: outputs.VmwareAnomaliesUndersizedStorageDetectionCustomThresholds;
    /**
     * Possible Values: `Auto`, `Custom`
     */
    detectionMode?: string;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface VmwareAnomaliesUndersizedStorageDetectionCustomThresholds {
    /**
     * Average queue command latency is higher than
     */
    averageQueueCommandLatency: number;
    /**
     * Peak queue command latency is higher than
     */
    peakQueueCommandLatency: number;
}

export interface VulnerabilityCodeCriteria {
    /**
     * Process group
     */
    processGroup?: string;
}

export interface VulnerabilityCodeMetadata {
    /**
     * no documentation available
     */
    comment: string;
}

export interface VulnerabilityCodeVulnerabilityDetectionControl {
    /**
     * Possible Values: `MONITORING_OFF`, `MONITORING_ON`
     */
    monitoringMode: string;
}

export interface VulnerabilitySettingsTechnologies {
    /**
     * NET
     */
    enableDotNet: boolean;
    /**
     * NET runtimes
     */
    enableDotNetRuntime?: boolean;
    /**
     * Go
     */
    enableGo: boolean;
    /**
     * Java
     */
    enableJava: boolean;
    /**
     * Java runtimes
     */
    enableJavaRuntime?: boolean;
    /**
     * Kubernetes
     */
    enableKubernetes: boolean;
    /**
     * Node.js
     */
    enableNodeJs: boolean;
    /**
     * Node.js runtimes
     */
    enableNodeJsRuntime?: boolean;
    /**
     * PHP
     */
    enablePhp: boolean;
}

export interface WebAppAnomaliesErrorRate {
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Alert if the percentage of failing user actions increases by **both** the absolute and relative thresholds:
     */
    errorRateAuto?: outputs.WebAppAnomaliesErrorRateErrorRateAuto;
    /**
     * Possible Values: `Auto`, `Fixed`
     */
    errorRateDetectionMode?: string;
    /**
     * no documentation available
     */
    errorRateFixed?: outputs.WebAppAnomaliesErrorRateErrorRateFixed;
}

export interface WebAppAnomaliesErrorRateErrorRateAuto {
    /**
     * Absolute threshold
     */
    absoluteIncrease: number;
    /**
     * Avoid over-alerting
     */
    overAlertingProtection: outputs.WebAppAnomaliesErrorRateErrorRateAutoOverAlertingProtection;
    /**
     * Relative threshold
     */
    relativeIncrease: number;
}

export interface WebAppAnomaliesErrorRateErrorRateAutoOverAlertingProtection {
    /**
     * Only alert if there are at least
     */
    actionsPerMinute: number;
    /**
     * Only alert if the abnormal state remains for at least
     */
    minutesAbnormalState: number;
}

export interface WebAppAnomaliesErrorRateErrorRateFixed {
    /**
     * To avoid over-alerting for low traffic applications
     */
    errorRateReqPerMin: number;
    /**
     * Possible Values: `Low`, `Medium`, `High`
     */
    errorRateSensitivity: string;
    /**
     * Alert if this custom error rate threshold is exceeded during any 5-minute-period
     */
    maxFailureRateIncrease: number;
    /**
     * Only alert if the abnormal state remains for at least
     */
    minutesAbnormalState: number;
}

export interface WebAppAnomaliesResponseTime {
    /**
     * Possible Values: `Auto`, `Fixed`
     */
    detectionMode?: string;
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * no documentation available
     */
    responseTimeAuto?: outputs.WebAppAnomaliesResponseTimeResponseTimeAuto;
    /**
     * no documentation available
     */
    responseTimeFixed?: outputs.WebAppAnomaliesResponseTimeResponseTimeFixed;
}

export interface WebAppAnomaliesResponseTimeResponseTimeAuto {
    /**
     * Avoid over-alerting
     */
    overAlertingProtection: outputs.WebAppAnomaliesResponseTimeResponseTimeAutoOverAlertingProtection;
    /**
     * Alert if the median response time of all user actions degrades beyond **both** the absolute and relative thresholds:
     */
    responseTimeAll: outputs.WebAppAnomaliesResponseTimeResponseTimeAutoResponseTimeAll;
    /**
     * Alert if the response time of the slowest 10% of requests degrades beyond **both** the absolute and relative thresholds:
     */
    responseTimeSlowest: outputs.WebAppAnomaliesResponseTimeResponseTimeAutoResponseTimeSlowest;
}

export interface WebAppAnomaliesResponseTimeResponseTimeAutoOverAlertingProtection {
    /**
     * Only alert if there are at least
     */
    actionsPerMinute: number;
    /**
     * Only alert if the abnormal state remains for at least
     */
    minutesAbnormalState: number;
}

export interface WebAppAnomaliesResponseTimeResponseTimeAutoResponseTimeAll {
    /**
     * Absolute threshold
     */
    degradationMilliseconds: number;
    /**
     * Relative threshold
     */
    degradationPercent: number;
}

export interface WebAppAnomaliesResponseTimeResponseTimeAutoResponseTimeSlowest {
    /**
     * Absolute threshold
     */
    slowestDegradationMilliseconds: number;
    /**
     * Relative threshold
     */
    slowestDegradationPercent: number;
}

export interface WebAppAnomaliesResponseTimeResponseTimeFixed {
    /**
     * Avoid over-alerting
     */
    overAlertingProtection: outputs.WebAppAnomaliesResponseTimeResponseTimeFixedOverAlertingProtection;
    /**
     * Alert if the median response time of all user actions degrades beyond **both** the absolute and relative thresholds:
     */
    responseTimeAll: outputs.WebAppAnomaliesResponseTimeResponseTimeFixedResponseTimeAll;
    /**
     * Alert if the response time of the slowest 10% of requests degrades beyond **both** the absolute and relative thresholds:
     */
    responseTimeSlowest: outputs.WebAppAnomaliesResponseTimeResponseTimeFixedResponseTimeSlowest;
    /**
     * Possible Values: `Medium`, `High`, `Low`
     */
    sensitivity: string;
}

export interface WebAppAnomaliesResponseTimeResponseTimeFixedOverAlertingProtection {
    /**
     * Only alert if there are at least
     */
    actionsPerMinute: number;
    /**
     * Only alert if the abnormal state remains for at least
     */
    minutesAbnormalState: number;
}

export interface WebAppAnomaliesResponseTimeResponseTimeFixedResponseTimeAll {
    /**
     * Absolute threshold
     */
    degradationMilliseconds: number;
}

export interface WebAppAnomaliesResponseTimeResponseTimeFixedResponseTimeSlowest {
    /**
     * Absolute threshold
     */
    slowestDegradationMilliseconds: number;
}

export interface WebAppAnomaliesTrafficDrops {
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Dynatrace learns your typical application traffic over an observation period of one week.
     */
    trafficDrops?: outputs.WebAppAnomaliesTrafficDropsTrafficDrops;
}

export interface WebAppAnomaliesTrafficDropsTrafficDrops {
    /**
     * Minutes the observed traffic has to stay in abnormal state before alert
     */
    abnormalStateAbnormalState: number;
    /**
     * Alert if the observed traffic is less than this percentage of the expected value
     */
    trafficDropPercentage: number;
}

export interface WebAppAnomaliesTrafficSpikes {
    /**
     * This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
    /**
     * Dynatrace learns your typical application traffic over an observation period of one week.
     */
    trafficSpikes?: outputs.WebAppAnomaliesTrafficSpikesTrafficSpikes;
}

export interface WebAppAnomaliesTrafficSpikesTrafficSpikes {
    /**
     * Only alert if the abnormal state remains for at least
     */
    minutesAbnormalState: number;
    /**
     * Alert if the observed traffic is more than this percentage of the expected value
     */
    trafficSpikePercentage: number;
}

export interface WebAppCustomErrorsErrorRules {
    errorRules: outputs.WebAppCustomErrorsErrorRulesErrorRule[];
}

export interface WebAppCustomErrorsErrorRulesErrorRule {
    /**
     * Capture settings
     */
    captureSettings: outputs.WebAppCustomErrorsErrorRulesErrorRuleCaptureSettings;
    /**
     * Possible Values: `ALL`, `BEGINS_WITH`, `CONTAINS`, `ENDS_WITH`, `EQUALS`
     */
    keyMatcher: string;
    /**
     * A case-insensitive key pattern
     */
    keyPattern?: string;
    /**
     * Possible Values: `ALL`, `BEGINS_WITH`, `CONTAINS`, `ENDS_WITH`, `EQUALS`
     */
    valueMatcher: string;
    /**
     * A case-insensitive value pattern
     */
    valuePattern?: string;
}

export interface WebAppCustomErrorsErrorRulesErrorRuleCaptureSettings {
    /**
     * Capture this error
     */
    capture: boolean;
    /**
     * [View more details](https://dt-url.net/hd580p2k)
     */
    considerForAi?: boolean;
    /**
     * Include error in Apdex calculations
     */
    impactApdex?: boolean;
}

export interface WebAppEnablementRum {
    /**
     * (Field has overlap with `dynatrace.WebApplication`) Percentage of user sessions captured and analyzed
     */
    costAndTrafficControl: number;
    /**
     * (Field has overlap with `dynatrace.WebApplication`) This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface WebAppEnablementSessionReplay {
    /**
     * (Field has overlap with `dynatrace.WebApplication`) [Percentage of user sessions recorded with Session Replay](https://dt-url.net/sr-cost-traffic-control). For example, if you have 50% for RUM and 50% for Session Replay, it results in 25% of sessions recorded with Session Replay.
     */
    costAndTrafficControl: number;
    /**
     * (Field has overlap with `dynatrace.WebApplication`) This setting is enabled (`true`) or disabled (`false`)
     */
    enabled: boolean;
}

export interface WebAppKeyPerformanceCustomThresholds {
    /**
     * If **User action duration** is above this value, the action is assigned to the Frustrated performance zone.
     */
    frustratingThresholdSeconds: number;
    /**
     * If **User action duration** is below this value, the action is assigned to the Satisfied performance zone.
     */
    toleratedThresholdSeconds: number;
}

export interface WebAppKeyPerformanceLoadFallbackThresholds {
    /**
     * If **User action duration** is above this value, the action is assigned to the Frustrated performance zone.
     */
    frustratingFallbackThresholdSeconds: number;
    /**
     * If **User action duration** is below this value, the action is assigned to the Satisfied performance zone.
     */
    toleratedFallbackThresholdSeconds: number;
}

export interface WebAppKeyPerformanceLoadThresholds {
    /**
     * If the key performance metric is above this value, the action is assigned to the Frustrated performance zone.
     */
    frustratingThresholdSeconds: number;
    /**
     * If the key performance metric is below this value, the action is assigned to the Satisfied performance zone.
     */
    toleratedThresholdSeconds: number;
}

export interface WebAppKeyPerformanceXhrFallbackThresholds {
    /**
     * If **User action duration** is above this value, the action is assigned to the Frustrated performance zone.
     */
    frustratingFallbackThresholdSeconds: number;
    /**
     * If **User action duration** is below this value, the action is assigned to the Satisfied performance zone.
     */
    toleratedFallbackThresholdSeconds: number;
}

export interface WebAppKeyPerformanceXhrThresholds {
    /**
     * If the key performance metric is above this value, the action is assigned to the Frustrated performance zone.
     */
    frustratingThresholdSeconds: number;
    /**
     * If the key performance metric is below this value, the action is assigned to the Satisfied performance zone.
     */
    toleratedThresholdSeconds: number;
}

export interface WebAppRequestErrorsErrorRules {
    errorRules: outputs.WebAppRequestErrorsErrorRulesErrorRule[];
}

export interface WebAppRequestErrorsErrorRulesErrorRule {
    /**
     * Capture settings
     */
    captureSettings: outputs.WebAppRequestErrorsErrorRulesErrorRuleCaptureSettings;
    /**
     * Match by errors that have CSP violations
     */
    considerCspViolations: boolean;
    /**
     * Match by errors that have failed image requests
     */
    considerFailedImages: boolean;
    /**
     * Match by error code
     */
    errorCodes?: string;
    /**
     * Filter settings
     */
    filterSettings: outputs.WebAppRequestErrorsErrorRulesErrorRuleFilterSettings;
}

export interface WebAppRequestErrorsErrorRulesErrorRuleCaptureSettings {
    /**
     * Capture this error
     */
    capture: boolean;
    /**
     * [View more details](https://dt-url.net/hd580p2k)
     */
    considerForAi?: boolean;
    /**
     * Include error in Apdex calculations
     */
    impactApdex?: boolean;
}

export interface WebAppRequestErrorsErrorRulesErrorRuleFilterSettings {
    /**
     * Possible Values: `BEGINS_WITH`, `CONTAINS`, `ENDS_WITH`, `EQUALS`
     */
    filter?: string;
    /**
     * no documentation available
     */
    url?: string;
}

export interface WebApplicationConversionGoals {
    /**
     * A conversion goal of the application
     */
    goals: outputs.WebApplicationConversionGoalsGoal[];
}

export interface WebApplicationConversionGoalsGoal {
    /**
     * Configuration of a destination-based conversion goal
     */
    destination?: outputs.WebApplicationConversionGoalsGoalDestination;
    /**
     * The ID of conversion goal.
     */
    id: string;
    /**
     * The name of the conversion goal. Valid length within 1 and 50 characters.
     */
    name: string;
    /**
     * The type of the action. Possible values are `Custom`, `Load` and `Xhr`.
     */
    type?: string;
    userAction?: outputs.WebApplicationConversionGoalsGoalUserAction;
    visitDuration?: outputs.WebApplicationConversionGoalsGoalVisitDuration;
    visitNumAction?: outputs.WebApplicationConversionGoalsGoalVisitNumAction;
}

export interface WebApplicationConversionGoalsGoalDestination {
    /**
     * The match is case-sensitive (`true`) or (`false`)
     */
    caseSensitive?: boolean;
    /**
     * The operator of the match. Possible values are `Begins`, `Contains` and `Ends`.
     */
    matchType?: string;
    /**
     * The path to be reached to hit the conversion goal
     */
    urlOrPath: string;
}

export interface WebApplicationConversionGoalsGoalUserAction {
    /**
     * Type of the action to which the rule applies. Possible values are `Custom`, `Load` and `Xhr`.
     */
    actionType?: string;
    /**
     * The match is case-sensitive (`true`) or (`false`)
     */
    caseSensitive?: boolean;
    /**
     * The type of the entity to which the rule applies. Possible values are `ActionName`, `CssSelector`, `JavaScriptVariable`, `MetaTag`, `PagePath`, `PageTitle`, `PageUrl`, `UrlAnchor` and `XhrUrl`.
     */
    matchEntity?: string;
    /**
     * The operator of the match. Possible values are `Begins`, `Contains` and `Ends`.
     */
    matchType?: string;
    /**
     * The value to be matched to hit the conversion goal
     */
    value?: string;
}

export interface WebApplicationConversionGoalsGoalVisitDuration {
    /**
     * The duration of session to hit the conversion goal, in milliseconds
     */
    duration: number;
}

export interface WebApplicationConversionGoalsGoalVisitNumAction {
    /**
     * The number of user actions to hit the conversion goal
     */
    numUserActions?: number;
}

export interface WebApplicationCustomActionApdexSettings {
    /**
     * Fallback threshold of an XHR action, defining a tolerable user experience, when the configured KPM is not available. Values between 0 and 240000 are allowed.
     */
    frustratingFallbackThreshold?: number;
    /**
     * Maximal value of apdex, which is considered as tolerable user experience. Values between 0 and 240000 are allowed.
     */
    frustratingThreshold?: number;
    /**
     * no documentation available
     */
    threshold?: number;
    /**
     * Fallback threshold of an XHR action, defining a satisfied user experience, when the configured KPM is not available. Values between 0 and 60000 are allowed.
     */
    toleratedFallbackThreshold?: number;
    /**
     * Maximal value of apdex, which is considered as satisfied user experience. Values between 0 and 60000 are allowed.
     */
    toleratedThreshold?: number;
}

export interface WebApplicationKeyUserAction {
    /**
     * Configuration of the key user action
     */
    actions: outputs.WebApplicationKeyUserActionAction[];
}

export interface WebApplicationKeyUserActionAction {
    /**
     * The domain where the action is performed.
     */
    domain?: string;
    /**
     * The name of the conversion goal. Valid length within 1 and 50 characters.
     */
    name: string;
    /**
     * The type of the action. Possible values are `Custom`, `Load` and `Xhr`.
     */
    type: string;
}

export interface WebApplicationLoadActionApdexSettings {
    /**
     * Fallback threshold of an XHR action, defining a tolerable user experience, when the configured KPM is not available. Values between 0 and 240000 are allowed.
     */
    frustratingFallbackThreshold?: number;
    /**
     * Maximal value of apdex, which is considered as tolerable user experience. Values between 0 and 240000 are allowed.
     */
    frustratingThreshold?: number;
    /**
     * no documentation available
     */
    threshold?: number;
    /**
     * Fallback threshold of an XHR action, defining a satisfied user experience, when the configured KPM is not available. Values between 0 and 60000 are allowed.
     */
    toleratedFallbackThreshold?: number;
    /**
     * Maximal value of apdex, which is considered as satisfied user experience. Values between 0 and 60000 are allowed.
     */
    toleratedThreshold?: number;
}

export interface WebApplicationMetaDataCaptureSettings {
    /**
     * Java script agent meta data capture settings
     */
    captures?: outputs.WebApplicationMetaDataCaptureSettingsCapture[];
}

export interface WebApplicationMetaDataCaptureSettingsCapture {
    /**
     * The name of the meta data to capture
     */
    capturingName: string;
    /**
     * The name of the conversion goal. Valid length within 1 and 50 characters.
     */
    name: string;
    /**
     * `true` if this metadata should be captured regardless of the privacy settings, `false` otherwise
     */
    publicMetadata?: boolean;
    /**
     * The type of the action. Possible values are `Custom`, `Load` and `Xhr`.
     */
    type: string;
    /**
     * The unique ID of the meta data to capture
     */
    uniqueId?: number;
    /**
     * `true` if the last captured value should be used for this metadata. By default the first value will be used.
     */
    useLastValue?: boolean;
}

export interface WebApplicationMonitoringSettings {
    /**
     * Add the cross origin = anonymous attribute to capture JavaScript error messages and W3C resource timings
     */
    addCrossOriginAnonymousAttribute: boolean;
    /**
     * Advanced JavaScript tag settings
     */
    advancedJavascriptTagSettings?: outputs.WebApplicationMonitoringSettingsAdvancedJavascriptTagSettings;
    /**
     * The name of the angular package
     */
    angularPackageName?: string;
    /**
     * Settings for restricting certain browser type, version, platform and, comparator. It also restricts the mode
     */
    browserRestrictionSettings?: outputs.WebApplicationMonitoringSettingsBrowserRestrictionSettings;
    /**
     * Optimize the value of cache control headers for use with Dynatrace real user monitoring enabled/disabled
     */
    cacheControlHeaderOptimizations?: boolean;
    /**
     * Settings for content capture
     */
    contentCapture: outputs.WebApplicationMonitoringSettingsContentCapture;
    /**
     * Domain for cookie placement. Maximum 150 characters.
     */
    cookiePlacementDomain?: string;
    /**
     * To enable RUM for XHR calls to AWS Lambda, define a regular expression matching these calls, Dynatrace can then automatically add a custom header (`x-dtc`) to each such request to the respective endpoints in AWS.
     */
    correlationHeaderInclusionRegex?: string;
    customConfigurationProperties?: string;
    excludeXhrRegex?: string;
    fetchRequests?: boolean;
    /**
     * Possible valures are `CODE_SNIPPET`, `CODE_SNIPPET_ASYNC`, `INLINE_CODE` and `JAVASCRIPT_TAG`.
     */
    injectionMode: string;
    instrumentedWebServer?: boolean;
    ipAddressRestrictionSettings?: outputs.WebApplicationMonitoringSettingsIpAddressRestrictionSettings;
    javascriptFrameworkSupport?: outputs.WebApplicationMonitoringSettingsJavascriptFrameworkSupport;
    javascriptInjectionRules?: outputs.WebApplicationMonitoringSettingsJavascriptInjectionRules;
    libraryFileLocation?: string;
    monitoringDataPath?: string;
    sameSiteCookieAttribute?: string;
    scriptTagCacheDurationInHours: number;
    secureCookieAttribute?: boolean;
    serverRequestPathId?: string;
    useCors?: boolean;
    xmlHttpRequest?: boolean;
}

export interface WebApplicationMonitoringSettingsAdvancedJavascriptTagSettings {
    /**
     * Additional event handlers and wrappers
     */
    additionalEventHandlers?: outputs.WebApplicationMonitoringSettingsAdvancedJavascriptTagSettingsAdditionalEventHandlers;
    /**
     * In addition to the event handlers, events called using `addEventListener` or `attachEvent` can be captured. Be careful with this option! Event wrappers can conflict with the JavaScript code on a web page
     */
    eventWrapperSettings?: outputs.WebApplicationMonitoringSettingsAdvancedJavascriptTagSettingsEventWrapperSettings;
    /**
     * Global event capture settings
     */
    globalEventCaptureSettings?: outputs.WebApplicationMonitoringSettingsAdvancedJavascriptTagSettingsGlobalEventCaptureSettings;
    /**
     * Instrumentation of unsupported Ajax frameworks enabled/disabled
     */
    instrumentUnsupportedAjaxFrameworks?: boolean;
    /**
     * Maximum character length for action names. Valid values range from 5 to 10000.
     */
    maxActionNameLength: number;
    /**
     * Maximum number of errors to be captured per page. Valid values range from 0 to 50.
     */
    maxErrorsToCapture: number;
    /**
     * Additional special characters that are to be escaped using non-alphanumeric characters in HTML escape format. Maximum length 30 character. Allowed characters are `^`, `\`, `<` and `>`.
     */
    specialCharactersToEscape?: string;
    /**
     * Send the beacon signal as a synchronous XMLHttpRequest using Firefox enabled/disabled
     */
    syncBeaconFirefox?: boolean;
    /**
     * Send the beacon signal as a synchronous XMLHttpRequest using Internet Explorer enabled/disabled
     */
    syncBeaconInternetExplorer?: boolean;
}

export interface WebApplicationMonitoringSettingsAdvancedJavascriptTagSettingsAdditionalEventHandlers {
    /**
     * Blur event handler enabled/disabled
     */
    blur?: boolean;
    /**
     * Change event handler enabled/disabled
     */
    change?: boolean;
    /**
     * Click event handler enabled/disabled
     */
    click?: boolean;
    /**
     * Max. number of DOM nodes to instrument. Valid values range from 0 to 100000.
     */
    maxDomNodes: number;
    /**
     * Mouseup event handler enabled/disabled
     */
    mouseup?: boolean;
    /**
     * toString method enabled/disabled
     */
    toStringMethod?: boolean;
    /**
     * Use mouseup event for clicks enabled/disabled
     */
    useMouseUpEventForClicks?: boolean;
}

export interface WebApplicationMonitoringSettingsAdvancedJavascriptTagSettingsEventWrapperSettings {
    /**
     * Blur event handler enabled/disabled
     */
    blur?: boolean;
    /**
     * Change event handler enabled/disabled
     */
    change?: boolean;
    /**
     * Click event handler enabled/disabled
     */
    click?: boolean;
    /**
     * Mouseup event handler enabled/disabled
     */
    mouseup?: boolean;
    /**
     * TouchEnd enabled/disabled
     */
    touchEnd?: boolean;
    /**
     * TouchStart enabled/disabled
     */
    touchStart?: boolean;
}

export interface WebApplicationMonitoringSettingsAdvancedJavascriptTagSettingsGlobalEventCaptureSettings {
    /**
     * Additional events to be captured globally as user input.
     */
    additionalEventCapturedAsUserInput?: string;
    /**
     * Change event handler enabled/disabled
     */
    change?: boolean;
    /**
     * Click event handler enabled/disabled
     */
    click?: boolean;
    doubleclick?: boolean;
    keydown?: boolean;
    keyup?: boolean;
    mousedown?: boolean;
    /**
     * Mouseup event handler enabled/disabled
     */
    mouseup?: boolean;
    scroll?: boolean;
    /**
     * TouchEnd enabled/disabled
     */
    touchEnd?: boolean;
    /**
     * TouchStart enabled/disabled
     */
    touchStart?: boolean;
}

export interface WebApplicationMonitoringSettingsBrowserRestrictionSettings {
    /**
     * The mode of the list of browser restrictions. Possible values area `EXCLUDE` and `INCLUDE`.
     */
    mode: string;
    /**
     * A list of browser restrictions
     */
    restrictions?: outputs.WebApplicationMonitoringSettingsBrowserRestrictionSettingsRestrictions;
}

export interface WebApplicationMonitoringSettingsBrowserRestrictionSettingsRestrictions {
    /**
     * Browser exclusion rules for the browsers that are to be excluded
     */
    restrictions: outputs.WebApplicationMonitoringSettingsBrowserRestrictionSettingsRestrictionsRestriction[];
}

export interface WebApplicationMonitoringSettingsBrowserRestrictionSettingsRestrictionsRestriction {
    /**
     * The type of the browser that is used. Possible values are `ANDROID_WEBKIT`, `BOTS_SPIDERS`, `CHROME`, `EDGE`, `FIREFOX`, `INTERNET_EXPLORER,`OPERA`and`SAFARI`
     */
    browserType: string;
    /**
     * The version of the browser that is used
     */
    browserVersion?: string;
    /**
     * No documentation available. Possible values are `EQUALS`, `GREATER_THAN_OR_EQUAL` and `LOWER_THAN_OR_EQUAL`.
     */
    comparator?: string;
    /**
     * The platform on which the browser is being used. Possible values are `ALL`, `DESKTOP` and `MOBILE`
     */
    platform?: string;
}

export interface WebApplicationMonitoringSettingsContentCapture {
    /**
     * JavaScript errors monitoring enabled/disabled
     */
    javascriptErrors?: boolean;
    /**
     * Settings for resource timings capture
     */
    resourceTimingSettings?: outputs.WebApplicationMonitoringSettingsContentCaptureResourceTimingSettings;
    /**
     * Settings for timed action capture
     */
    timeoutSettings?: outputs.WebApplicationMonitoringSettingsContentCaptureTimeoutSettings;
    /**
     * Visually complete and Speed index support enabled/disabled
     */
    visuallyCompleteAndSpeedIndex?: boolean;
    /**
     * Settings for VisuallyComplete
     */
    visuallyCompleteSettings?: outputs.WebApplicationMonitoringSettingsContentCaptureVisuallyCompleteSettings;
}

export interface WebApplicationMonitoringSettingsContentCaptureResourceTimingSettings {
    /**
     * Instrumentation delay for monitoring resource and image resource impact in browsers that don't offer W3C resource timings.
     */
    instrumentationDelay: number;
    nonW3cResourceTimings?: boolean;
    resourceTimingCaptureType?: string;
    resourceTimingsDomainLimit?: number;
    w3cResourceTimings?: boolean;
}

export interface WebApplicationMonitoringSettingsContentCaptureTimeoutSettings {
    /**
     * Defines how deep temporary actions may cascade. 0 disables temporary actions completely. Recommended value if enabled is 3
     */
    temporaryActionLimit: number;
    /**
     * The total timeout of all cascaded timeouts that should still be able to create a temporary action
     */
    temporaryActionTotalTimeout: number;
    /**
     * Timed action support enabled/disabled.
     */
    timedActionSupport?: boolean;
}

export interface WebApplicationMonitoringSettingsContentCaptureVisuallyCompleteSettings {
    /**
     * A RegularExpression used to exclude images and iframes from being detected by the VC module
     */
    excludeUrlRegex?: string;
    /**
     * Query selector for mutation nodes to ignore in VC and SI calculation
     */
    ignoredMutationsList?: string;
    /**
     * The time in ms the VC module waits for no mutations happening on the page after the load action. Defaults to 1000. Valid values range from 0 to 30000.
     */
    inactivityTimeout?: number;
    /**
     * Determines the time in ms VC waits after an action closes to start calculation. Defaults to 50. Valid values range from 0 to 5000.
     */
    mutationTimeout?: number;
    /**
     * no documentation available
     */
    threshold?: number;
}

export interface WebApplicationMonitoringSettingsIpAddressRestrictionSettings {
    /**
     * The mode of the list of browser restrictions. Possible values area `EXCLUDE` and `INCLUDE`.
     */
    mode: string;
    /**
     * A list of browser restrictions
     */
    restrictions?: outputs.WebApplicationMonitoringSettingsIpAddressRestrictionSettingsRestrictions;
}

export interface WebApplicationMonitoringSettingsIpAddressRestrictionSettingsRestrictions {
    /**
     * The IP address or the IP address range to be mapped to the location
     */
    ranges: outputs.WebApplicationMonitoringSettingsIpAddressRestrictionSettingsRestrictionsRange[];
}

export interface WebApplicationMonitoringSettingsIpAddressRestrictionSettingsRestrictionsRange {
    /**
     * The IP address to be mapped.
     */
    address: string;
    addressTo?: string;
    subnetMask?: number;
}

export interface WebApplicationMonitoringSettingsJavascriptFrameworkSupport {
    /**
     * ActiveXObject support enabled/disabled
     */
    activeXObject?: boolean;
    /**
     * AngularJS and Angular support enabled/disabled
     */
    angular?: boolean;
    /**
     * Dojo support enabled/disabled
     */
    dojo?: boolean;
    /**
     * ExtJS, Sencha Touch support enabled/disabled
     */
    extjs?: boolean;
    /**
     * ICEfaces support enabled/disabled
     */
    icefaces?: boolean;
    /**
     * jQuery, Backbone.js support enabled/disabled
     */
    jquery?: boolean;
    /**
     * MooTools support enabled/disabled
     */
    mooTools?: boolean;
    /**
     * Prototype support enabled/disabled
     */
    prototype?: boolean;
}

export interface WebApplicationMonitoringSettingsJavascriptInjectionRules {
    /**
     * Java script injection rule
     */
    rules: outputs.WebApplicationMonitoringSettingsJavascriptInjectionRulesRule[];
}

export interface WebApplicationMonitoringSettingsJavascriptInjectionRulesRule {
    /**
     * `fetch()` request capture enabled/disabled
     */
    enabled?: boolean;
    /**
     * The HTML pattern of the java script injection
     */
    htmlPattern?: string;
    /**
     * Java script injection rule
     */
    rule: string;
    /**
     * The target against which the rule of the java script injection should be matched. Possible values are `PAGE_QUERY` and `URL`.
     */
    target?: string;
    /**
     * The url operator of the java script injection. Possible values are `ALL_PAGES`, `CONTAINS`, `ENDS_WITH`, `EQUALS` and `STARTS_WITH`.
     */
    urlOperator: string;
    /**
     * The url pattern of the java script injection
     */
    urlPattern?: string;
}

export interface WebApplicationSessionReplayConfig {
    /**
     * (Field has overlap with `dynatrace.WebAppEnablement`) Session replay sampling rating in percent
     */
    costControlPercentage: number;
    /**
     * (Field has overlap with `dynatrace.SessionReplayResourceCapture`) A list of URLs to be excluded from CSS resource capturing
     */
    cssResourceCapturingExclusionRules?: string[];
    /**
     * (Field has overlap with `dynatrace.SessionReplayResourceCapture`) Capture (`true`) or don't capture (`false`) CSS resources from the session
     */
    enableCssResourceCapturing?: boolean;
    /**
     * (Field has overlap with `dynatrace.WebAppEnablement`) SessionReplay Enabled/Disabled
     */
    enabled?: boolean;
}

export interface WebApplicationUserActionAndSessionProperties {
    /**
     * User action and session properties settings
     */
    properties?: outputs.WebApplicationUserActionAndSessionPropertiesProperty[];
}

export interface WebApplicationUserActionAndSessionPropertiesProperty {
    /**
     * The aggregation type of the property.
     */
    aggregation?: string;
    /**
     * Cleanup rule expression of the userTag
     */
    cleanupRule?: string;
    displayName?: string;
    /**
     * The ID of conversion goal.
     */
    id: number;
    /**
     * Case insensitive naming
     */
    ignoreCase?: boolean;
    /**
     * Key of the property
     */
    key: string;
    longStringLength?: number;
    /**
     * The ID of the metadata
     */
    metadataId?: number;
    /**
     * The origin of the property. Possible values are `JAVASCRIPT_API`, `META_DATA` and `SERVER_SIDE_REQUEST_ATTRIBUTE`.
     */
    origin: string;
    /**
     * The ID of the RrequestAttribute for the userTag
     */
    serverSideRequestAttribute?: string;
    storeAsSessionProperty?: boolean;
    storeAsUserActionProperty?: boolean;
    /**
     * The type of the action. Possible values are `Custom`, `Load` and `Xhr`.
     */
    type: string;
}

export interface WebApplicationUserActionNamingSettings {
    /**
     * User action naming rules for custom actions
     */
    customActionNamingRules?: outputs.WebApplicationUserActionNamingSettingsCustomActionNamingRules;
    /**
     * Case insensitive naming
     */
    ignoreCase?: boolean;
    /**
     * User action naming rules for loading actions
     */
    loadActionNamingRules?: outputs.WebApplicationUserActionNamingSettingsLoadActionNamingRules;
    /**
     * User action placeholders
     */
    placeholders?: outputs.WebApplicationUserActionNamingSettingsPlaceholders;
    /**
     * User action naming rules for custom actions. If not specified Dynatrace assumes `__sid`, `cfid`, `cftoken`, `phpsessid` and `sid`.
     */
    queryParameterCleanups: string[];
    /**
     * Deactivate this setting if different domains should not result in separate user actions
     */
    splitUserActionsByDomain?: boolean;
    /**
     * First load action found under an XHR action should be used when true. Else the deepest one under the xhr action is used
     */
    useFirstDetectedLoadAction?: boolean;
    /**
     * User action naming rules for XHR actions
     */
    xhrActionNamingRules?: outputs.WebApplicationUserActionNamingSettingsXhrActionNamingRules;
}

export interface WebApplicationUserActionNamingSettingsCustomActionNamingRules {
    /**
     * Java script injection rule
     */
    rules: outputs.WebApplicationUserActionNamingSettingsCustomActionNamingRulesRule[];
}

export interface WebApplicationUserActionNamingSettingsCustomActionNamingRulesRule {
    /**
     * Defines the conditions when the naming rule should apply
     */
    conditions?: outputs.WebApplicationUserActionNamingSettingsCustomActionNamingRulesRuleConditions;
    /**
     * Naming pattern. Use Curly brackets `{}` to select placeholders
     */
    template: string;
    /**
     * If set to `true` the conditions will be connected by logical OR instead of logical AND
     */
    useOrConditions?: boolean;
}

export interface WebApplicationUserActionNamingSettingsCustomActionNamingRulesRuleConditions {
    /**
     * Defines the conditions when the naming rule should apply
     */
    conditions: outputs.WebApplicationUserActionNamingSettingsCustomActionNamingRulesRuleConditionsCondition[];
}

export interface WebApplicationUserActionNamingSettingsCustomActionNamingRulesRuleConditionsCondition {
    /**
     * Must be a defined placeholder wrapped in curly braces
     */
    operand1: string;
    /**
     * Must be null if operator is `IS_EMPTY`, a regex if operator is `MATCHES_REGULAR_ERPRESSION`. In all other cases the value can be a freetext or a placeholder wrapped in curly braces
     */
    operand2?: string;
    /**
     * The operator of the condition. Possible values are `CONTAINS`, `ENDS_WITH`, `EQUALS`, `IS_EMPTY`, `IS_NOT_EMPTY`, `MATCHES_REGULAR_EXPRESSION`, `NOT_CONTAINS`, `NOT_ENDS_WITH`, `NOT_EQUALS`, `NOT_MATCHES_REGULAR_EXPRESSION`, `NOT_STARTS_WITH` and `STARTS_WITH`.
     */
    operator: string;
}

export interface WebApplicationUserActionNamingSettingsLoadActionNamingRules {
    /**
     * Java script injection rule
     */
    rules: outputs.WebApplicationUserActionNamingSettingsLoadActionNamingRulesRule[];
}

export interface WebApplicationUserActionNamingSettingsLoadActionNamingRulesRule {
    /**
     * Defines the conditions when the naming rule should apply
     */
    conditions?: outputs.WebApplicationUserActionNamingSettingsLoadActionNamingRulesRuleConditions;
    /**
     * Naming pattern. Use Curly brackets `{}` to select placeholders
     */
    template: string;
    /**
     * If set to `true` the conditions will be connected by logical OR instead of logical AND
     */
    useOrConditions?: boolean;
}

export interface WebApplicationUserActionNamingSettingsLoadActionNamingRulesRuleConditions {
    /**
     * Defines the conditions when the naming rule should apply
     */
    conditions: outputs.WebApplicationUserActionNamingSettingsLoadActionNamingRulesRuleConditionsCondition[];
}

export interface WebApplicationUserActionNamingSettingsLoadActionNamingRulesRuleConditionsCondition {
    /**
     * Must be a defined placeholder wrapped in curly braces
     */
    operand1: string;
    /**
     * Must be null if operator is `IS_EMPTY`, a regex if operator is `MATCHES_REGULAR_ERPRESSION`. In all other cases the value can be a freetext or a placeholder wrapped in curly braces
     */
    operand2?: string;
    /**
     * The operator of the condition. Possible values are `CONTAINS`, `ENDS_WITH`, `EQUALS`, `IS_EMPTY`, `IS_NOT_EMPTY`, `MATCHES_REGULAR_EXPRESSION`, `NOT_CONTAINS`, `NOT_ENDS_WITH`, `NOT_EQUALS`, `NOT_MATCHES_REGULAR_EXPRESSION`, `NOT_STARTS_WITH` and `STARTS_WITH`.
     */
    operator: string;
}

export interface WebApplicationUserActionNamingSettingsPlaceholders {
    /**
     * User action placeholders
     */
    placeholders: outputs.WebApplicationUserActionNamingSettingsPlaceholdersPlaceholder[];
}

export interface WebApplicationUserActionNamingSettingsPlaceholdersPlaceholder {
    /**
     * The input for the place holder. Possible values are `ELEMENT_IDENTIFIER`, `INPUT_TYPE`, `METADATA`, `PAGE_TITLE`, `PAGE_URL`, `SOURCE_URL`, `TOP_XHR_URL` and `XHR_URL`
     */
    input: string;
    /**
     * The ID of the metadata
     */
    metadataId?: number;
    /**
     * The name of the conversion goal. Valid length within 1 and 50 characters.
     */
    name: string;
    /**
     * The part to process. Possible values are `ALL`, `ANCHOR` and `PATH`
     */
    processingPart: string;
    /**
     * The processing step settings
     */
    processingSteps?: outputs.WebApplicationUserActionNamingSettingsPlaceholdersPlaceholderProcessingSteps;
    /**
     * Use the element identifier that was selected by Dynatrace
     */
    useGuessedElementIdentifier?: boolean;
}

export interface WebApplicationUserActionNamingSettingsPlaceholdersPlaceholderProcessingSteps {
    /**
     * The processing step
     */
    steps: outputs.WebApplicationUserActionNamingSettingsPlaceholdersPlaceholderProcessingStepsStep[];
}

export interface WebApplicationUserActionNamingSettingsPlaceholdersPlaceholderProcessingStepsStep {
    /**
     * If set to `true`: Returns the input if `patternBefore` or `patternAfter` cannot be found and the `type` is `SUBSTRING`. Returns the input if `regularExpression` doesn't match and `type` is `EXTRACT_BY_REGULAR_EXPRESSION`.
     */
    fallbackToInput?: boolean;
    patternAfter?: string;
    patternAfterSearchType?: string;
    patternBefore?: string;
    patternBeforeSearchType?: string;
    patternToReplace?: string;
    regularExpression?: string;
    replacement?: string;
    /**
     * The type of the action. Possible values are `Custom`, `Load` and `Xhr`.
     */
    type: string;
}

export interface WebApplicationUserActionNamingSettingsXhrActionNamingRules {
    /**
     * Java script injection rule
     */
    rules: outputs.WebApplicationUserActionNamingSettingsXhrActionNamingRulesRule[];
}

export interface WebApplicationUserActionNamingSettingsXhrActionNamingRulesRule {
    /**
     * Defines the conditions when the naming rule should apply
     */
    conditions?: outputs.WebApplicationUserActionNamingSettingsXhrActionNamingRulesRuleConditions;
    /**
     * Naming pattern. Use Curly brackets `{}` to select placeholders
     */
    template: string;
    /**
     * If set to `true` the conditions will be connected by logical OR instead of logical AND
     */
    useOrConditions?: boolean;
}

export interface WebApplicationUserActionNamingSettingsXhrActionNamingRulesRuleConditions {
    /**
     * Defines the conditions when the naming rule should apply
     */
    conditions: outputs.WebApplicationUserActionNamingSettingsXhrActionNamingRulesRuleConditionsCondition[];
}

export interface WebApplicationUserActionNamingSettingsXhrActionNamingRulesRuleConditionsCondition {
    /**
     * Must be a defined placeholder wrapped in curly braces
     */
    operand1: string;
    /**
     * Must be null if operator is `IS_EMPTY`, a regex if operator is `MATCHES_REGULAR_ERPRESSION`. In all other cases the value can be a freetext or a placeholder wrapped in curly braces
     */
    operand2?: string;
    /**
     * The operator of the condition. Possible values are `CONTAINS`, `ENDS_WITH`, `EQUALS`, `IS_EMPTY`, `IS_NOT_EMPTY`, `MATCHES_REGULAR_EXPRESSION`, `NOT_CONTAINS`, `NOT_ENDS_WITH`, `NOT_EQUALS`, `NOT_MATCHES_REGULAR_EXPRESSION`, `NOT_STARTS_WITH` and `STARTS_WITH`.
     */
    operator: string;
}

export interface WebApplicationUserTags {
    /**
     * User tag settings
     */
    tags: outputs.WebApplicationUserTagsTag[];
}

export interface WebApplicationUserTagsTag {
    /**
     * Cleanup rule expression of the userTag
     */
    cleanupRule?: string;
    /**
     * The ID of conversion goal.
     */
    id?: number;
    /**
     * Case insensitive naming
     */
    ignoreCase?: boolean;
    /**
     * The ID of the metadata
     */
    metadataId?: number;
    /**
     * The ID of the RrequestAttribute for the userTag
     */
    serverSideRequestAttribute?: string;
    /**
     * The unique ID of the meta data to capture
     */
    uniqueId: number;
}

export interface WebApplicationWaterfallSettings {
    /**
     * Warn about resources with a lower browser cache rate above *X*%. Values between 1 and 100 are allowed.
     */
    resourceBrowserCachingThreshold: number;
    /**
     * Warn about resources larger than *X* bytes. Values between 0 and 99999000 are allowed.
     */
    resourcesThreshold: number;
    /**
     * Warn about slow CDN resources with a response time above *X* ms. Values between 0 and 99999000 are allowed.
     */
    slowCndResourcesThreshold: number;
    /**
     * Warn about slow 1st party resources with a response time above *X* ms. Values between 0 and 99999000 are allowed.
     */
    slowFirstPartyResourcesThreshold: number;
    /**
     * Warn about slow 3rd party resources with a response time above *X* ms. Values between 0 and 99999000 are allowed.
     */
    slowThirdPartyResourcesThreshold: number;
    /**
     * Warn if Speed index exceeds *X* % of Visually complete. Values between 1 and 99 are allowed.
     */
    speedIndexVisuallyCompleteRatioThreshold: number;
    /**
     * Warn about uncompressed resources larger than *X* bytes. Values between 0 and 99999 are allowed.
     */
    uncompressedResourcesThreshold: number;
}

export interface WebApplicationXhrActionApdexSettings {
    /**
     * Fallback threshold of an XHR action, defining a tolerable user experience, when the configured KPM is not available. Values between 0 and 240000 are allowed.
     */
    frustratingFallbackThreshold?: number;
    /**
     * Maximal value of apdex, which is considered as tolerable user experience. Values between 0 and 240000 are allowed.
     */
    frustratingThreshold?: number;
    /**
     * no documentation available
     */
    threshold?: number;
    /**
     * Fallback threshold of an XHR action, defining a satisfied user experience, when the configured KPM is not available. Values between 0 and 60000 are allowed.
     */
    toleratedFallbackThreshold?: number;
    /**
     * Maximal value of apdex, which is considered as satisfied user experience. Values between 0 and 60000 are allowed.
     */
    toleratedThreshold?: number;
}

export interface WebhookNotificationHeaders {
    /**
     * An additional HTTP Header to include when sending requests
     */
    headers: outputs.WebhookNotificationHeadersHeader[];
}

export interface WebhookNotificationHeadersHeader {
    /**
     * The name of the HTTP header
     */
    name: string;
    /**
     * The value of the HTTP header as a sensitive property. May contain an empty value. `secretValue` and `value` are mutually exclusive. Only one of those two is allowed to be specified.
     */
    secretValue?: string;
    /**
     * The value of the HTTP header. May contain an empty value. `secretValue` and `value` are mutually exclusive. Only one of those two is allowed to be specified.
     */
    value?: string;
}

export interface WebhookNotificationOauth2Credentials {
    /**
     * Access token URL
     */
    accessTokenUrl: string;
    /**
     * Client ID
     */
    clientId: string;
    /**
     * Client secret
     */
    clientSecret: string;
    /**
     * The scope of access you are requesting
     */
    scope?: string;
}

export interface XmattersNotificationHeaders {
    /**
     * An additional HTTP Header to include when sending requests
     */
    headers: outputs.XmattersNotificationHeadersHeader[];
}

export interface XmattersNotificationHeadersHeader {
    /**
     * The name of the HTTP header
     */
    name: string;
    /**
     * The value of the HTTP header as a sensitive property. May contain an empty value. `secretValue` and `value` are mutually exclusive. Only one of those two is allowed to be specified.
     */
    secretValue?: string;
    /**
     * The value of the HTTP header. May contain an empty value. `secretValue` and `value` are mutually exclusive. Only one of those two is allowed to be specified.
     */
    value?: string;
}

