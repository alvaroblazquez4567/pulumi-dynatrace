// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * > This resource is excluded by default in the export utility since it is part of the account management API. You can, of course, specify that resource explicitly in order to export it. In that case, don't forget to specify the environment variables `DT_CLIENT_ID`, `DT_ACCOUNT_ID` and `DT_CLIENT_SECRET` for authentication.
 *
 * > This resource requires the API token scopes **Allow read access for identity resources (users and groups)** (`account-idm-read`) and **Allow write access for identity resources (users and groups)** (`account-idm-write`)
 *
 * ## Dynatrace Documentation
 *
 * - Dynatrace IAM - https://www.dynatrace.com/support/help/how-to-use-dynatrace/user-management-and-sso/manage-groups-and-permissions
 *
 * - Settings API - https://www.dynatrace.com/support/help/how-to-use-dynatrace/user-management-and-sso/manage-groups-and-permissions/iam/iam-getting-started
 *
 * ## Prerequisites
 *
 * Using this resource requires an OAuth client to be configured within your account settings.
 * The scopes of the OAuth Client need to include `account-idm-read`, `account-idm-write`, `account-env-read`, `account-env-write`, `iam-policies-management`, `iam:policies:write`, `iam:policies:read`, `iam:bindings:write`, `iam:bindings:read` and `iam:effective-permissions:read`.
 *
 * Finally the provider configuration requires the credentials for that OAuth Client.
 * The configuration section of your provider needs to look like this.
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * ```
 *
 * ## Resource Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as dynatrace from "@alvaroblazquez4567/pulumi-dynatrace";
 *
 * const johnDoeGmailCom = new dynatrace.IamUser("johnDoeGmailCom", {
 *     email: "john.doe@gmail.com",
 *     groups: [data.dynatrace_iam_group.Restricted.id],
 * });
 * ```
 */
export class IamUser extends pulumi.CustomResource {
    /**
     * Get an existing IamUser resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IamUserState, opts?: pulumi.CustomResourceOptions): IamUser {
        return new IamUser(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dynatrace:index/iamUser:IamUser';

    /**
     * Returns true if the given object is an instance of IamUser.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IamUser {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IamUser.__pulumiType;
    }

    public readonly email!: pulumi.Output<string>;
    public readonly groups!: pulumi.Output<string[] | undefined>;
    public /*out*/ readonly uid!: pulumi.Output<string>;

    /**
     * Create a IamUser resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IamUserArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IamUserArgs | IamUserState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IamUserState | undefined;
            resourceInputs["email"] = state ? state.email : undefined;
            resourceInputs["groups"] = state ? state.groups : undefined;
            resourceInputs["uid"] = state ? state.uid : undefined;
        } else {
            const args = argsOrState as IamUserArgs | undefined;
            if ((!args || args.email === undefined) && !opts.urn) {
                throw new Error("Missing required property 'email'");
            }
            resourceInputs["email"] = args ? args.email : undefined;
            resourceInputs["groups"] = args ? args.groups : undefined;
            resourceInputs["uid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IamUser.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering IamUser resources.
 */
export interface IamUserState {
    email?: pulumi.Input<string>;
    groups?: pulumi.Input<pulumi.Input<string>[]>;
    uid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a IamUser resource.
 */
export interface IamUserArgs {
    email: pulumi.Input<string>;
    groups?: pulumi.Input<pulumi.Input<string>[]>;
}
