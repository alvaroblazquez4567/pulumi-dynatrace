// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-dynatrace/sdk/go/dynatrace/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// > This resource is excluded by default in the export utility since it is part of the account management API. You can, of course, specify that resource explicitly in order to export it. In that case, don't forget to specify the environment variables `DT_CLIENT_ID`, `DT_ACCOUNT_ID` and `DT_CLIENT_SECRET` for authentication.
//
// > This resource requires the API token scope **Allow IAM policy configuration for environments** (`iam-policies-management`)
//
// ## Dynatrace Documentation
//
// - Dynatrace IAM Policy Management - https://www.dynatrace.com/support/help/manage/access-control/user-management-and-sso/manage-groups-and-permissions/iam/iam-policy-mgt
//
// - Settings API - https://www.dynatrace.com/support/help/how-to-use-dynatrace/user-management-and-sso/manage-groups-and-permissions/iam/iam-getting-started
//
// ## Prerequisites
//
// Using this resource requires an OAuth client to be configured within your account settings.
// The scopes of the OAuth Client need to include `account-idm-read`, `account-idm-write`, `account-env-read`, `account-env-write`, `iam-policies-management`, `iam:policies:write`, `iam:policies:read`, `iam:bindings:write`, `iam:bindings:read` and `iam:effective-permissions:read`.
//
// Finally the provider configuration requires the credentials for that OAuth Client.
// The configuration section of your provider needs to look like this.
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			return nil
//		})
//	}
//
// ```
//
// ## Resource Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-dynatrace/sdk/go/dynatrace"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dynatrace.NewIamPolicy(ctx, "policy", &dynatrace.IamPolicyArgs{
//				Environment:    pulumi.String("siz654##"),
//				StatementQuery: pulumi.String("ALLOW settings:objects:read, settings:schemas:read WHERE settings:schemaId = \"string\";"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-dynatrace/sdk/go/dynatrace"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dynatrace.NewIamPolicy(ctx, "policy", &dynatrace.IamPolicyArgs{
//				Account:        pulumi.String("########-####-####-####-############"),
//				StatementQuery: pulumi.String("ALLOW settings:objects:read, settings:schemas:read WHERE settings:schemaId = \"string\";"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type IamPolicy struct {
	pulumi.CustomResourceState

	// The UUID of the account (`urn:dtaccount:<account-uuid>`) in case the policy should be applied to all environments of this account. The prefix `urn:dtaccount:` MUST be omitted here.
	Account pulumi.StringPtrOutput `pulumi:"account"`
	// An optional description text for the policy
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The ID of the environment (https://\n\n.live.dynatrace.com) if the policy should be applied to a specific environment
	Environment pulumi.StringPtrOutput `pulumi:"environment"`
	// The name of the policy
	Name pulumi.StringOutput `pulumi:"name"`
	// The Statement Query of the policy
	StatementQuery pulumi.StringOutput `pulumi:"statementQuery"`
	// Tags for this policy
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
}

// NewIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewIamPolicy(ctx *pulumi.Context,
	name string, args *IamPolicyArgs, opts ...pulumi.ResourceOption) (*IamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.StatementQuery == nil {
		return nil, errors.New("invalid value for required argument 'StatementQuery'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IamPolicy
	err := ctx.RegisterResource("dynatrace:index/iamPolicy:IamPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIamPolicy gets an existing IamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IamPolicyState, opts ...pulumi.ResourceOption) (*IamPolicy, error) {
	var resource IamPolicy
	err := ctx.ReadResource("dynatrace:index/iamPolicy:IamPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IamPolicy resources.
type iamPolicyState struct {
	// The UUID of the account (`urn:dtaccount:<account-uuid>`) in case the policy should be applied to all environments of this account. The prefix `urn:dtaccount:` MUST be omitted here.
	Account *string `pulumi:"account"`
	// An optional description text for the policy
	Description *string `pulumi:"description"`
	// The ID of the environment (https://\n\n.live.dynatrace.com) if the policy should be applied to a specific environment
	Environment *string `pulumi:"environment"`
	// The name of the policy
	Name *string `pulumi:"name"`
	// The Statement Query of the policy
	StatementQuery *string `pulumi:"statementQuery"`
	// Tags for this policy
	Tags []string `pulumi:"tags"`
}

type IamPolicyState struct {
	// The UUID of the account (`urn:dtaccount:<account-uuid>`) in case the policy should be applied to all environments of this account. The prefix `urn:dtaccount:` MUST be omitted here.
	Account pulumi.StringPtrInput
	// An optional description text for the policy
	Description pulumi.StringPtrInput
	// The ID of the environment (https://\n\n.live.dynatrace.com) if the policy should be applied to a specific environment
	Environment pulumi.StringPtrInput
	// The name of the policy
	Name pulumi.StringPtrInput
	// The Statement Query of the policy
	StatementQuery pulumi.StringPtrInput
	// Tags for this policy
	Tags pulumi.StringArrayInput
}

func (IamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*iamPolicyState)(nil)).Elem()
}

type iamPolicyArgs struct {
	// The UUID of the account (`urn:dtaccount:<account-uuid>`) in case the policy should be applied to all environments of this account. The prefix `urn:dtaccount:` MUST be omitted here.
	Account *string `pulumi:"account"`
	// An optional description text for the policy
	Description *string `pulumi:"description"`
	// The ID of the environment (https://\n\n.live.dynatrace.com) if the policy should be applied to a specific environment
	Environment *string `pulumi:"environment"`
	// The name of the policy
	Name *string `pulumi:"name"`
	// The Statement Query of the policy
	StatementQuery string `pulumi:"statementQuery"`
	// Tags for this policy
	Tags []string `pulumi:"tags"`
}

// The set of arguments for constructing a IamPolicy resource.
type IamPolicyArgs struct {
	// The UUID of the account (`urn:dtaccount:<account-uuid>`) in case the policy should be applied to all environments of this account. The prefix `urn:dtaccount:` MUST be omitted here.
	Account pulumi.StringPtrInput
	// An optional description text for the policy
	Description pulumi.StringPtrInput
	// The ID of the environment (https://\n\n.live.dynatrace.com) if the policy should be applied to a specific environment
	Environment pulumi.StringPtrInput
	// The name of the policy
	Name pulumi.StringPtrInput
	// The Statement Query of the policy
	StatementQuery pulumi.StringInput
	// Tags for this policy
	Tags pulumi.StringArrayInput
}

func (IamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*iamPolicyArgs)(nil)).Elem()
}

type IamPolicyInput interface {
	pulumi.Input

	ToIamPolicyOutput() IamPolicyOutput
	ToIamPolicyOutputWithContext(ctx context.Context) IamPolicyOutput
}

func (*IamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**IamPolicy)(nil)).Elem()
}

func (i *IamPolicy) ToIamPolicyOutput() IamPolicyOutput {
	return i.ToIamPolicyOutputWithContext(context.Background())
}

func (i *IamPolicy) ToIamPolicyOutputWithContext(ctx context.Context) IamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IamPolicyOutput)
}

// IamPolicyArrayInput is an input type that accepts IamPolicyArray and IamPolicyArrayOutput values.
// You can construct a concrete instance of `IamPolicyArrayInput` via:
//
//	IamPolicyArray{ IamPolicyArgs{...} }
type IamPolicyArrayInput interface {
	pulumi.Input

	ToIamPolicyArrayOutput() IamPolicyArrayOutput
	ToIamPolicyArrayOutputWithContext(context.Context) IamPolicyArrayOutput
}

type IamPolicyArray []IamPolicyInput

func (IamPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IamPolicy)(nil)).Elem()
}

func (i IamPolicyArray) ToIamPolicyArrayOutput() IamPolicyArrayOutput {
	return i.ToIamPolicyArrayOutputWithContext(context.Background())
}

func (i IamPolicyArray) ToIamPolicyArrayOutputWithContext(ctx context.Context) IamPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IamPolicyArrayOutput)
}

// IamPolicyMapInput is an input type that accepts IamPolicyMap and IamPolicyMapOutput values.
// You can construct a concrete instance of `IamPolicyMapInput` via:
//
//	IamPolicyMap{ "key": IamPolicyArgs{...} }
type IamPolicyMapInput interface {
	pulumi.Input

	ToIamPolicyMapOutput() IamPolicyMapOutput
	ToIamPolicyMapOutputWithContext(context.Context) IamPolicyMapOutput
}

type IamPolicyMap map[string]IamPolicyInput

func (IamPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IamPolicy)(nil)).Elem()
}

func (i IamPolicyMap) ToIamPolicyMapOutput() IamPolicyMapOutput {
	return i.ToIamPolicyMapOutputWithContext(context.Background())
}

func (i IamPolicyMap) ToIamPolicyMapOutputWithContext(ctx context.Context) IamPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IamPolicyMapOutput)
}

type IamPolicyOutput struct{ *pulumi.OutputState }

func (IamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IamPolicy)(nil)).Elem()
}

func (o IamPolicyOutput) ToIamPolicyOutput() IamPolicyOutput {
	return o
}

func (o IamPolicyOutput) ToIamPolicyOutputWithContext(ctx context.Context) IamPolicyOutput {
	return o
}

// The UUID of the account (`urn:dtaccount:<account-uuid>`) in case the policy should be applied to all environments of this account. The prefix `urn:dtaccount:` MUST be omitted here.
func (o IamPolicyOutput) Account() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IamPolicy) pulumi.StringPtrOutput { return v.Account }).(pulumi.StringPtrOutput)
}

// An optional description text for the policy
func (o IamPolicyOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IamPolicy) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The ID of the environment (https://\n\n.live.dynatrace.com) if the policy should be applied to a specific environment
func (o IamPolicyOutput) Environment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IamPolicy) pulumi.StringPtrOutput { return v.Environment }).(pulumi.StringPtrOutput)
}

// The name of the policy
func (o IamPolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *IamPolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The Statement Query of the policy
func (o IamPolicyOutput) StatementQuery() pulumi.StringOutput {
	return o.ApplyT(func(v *IamPolicy) pulumi.StringOutput { return v.StatementQuery }).(pulumi.StringOutput)
}

// Tags for this policy
func (o IamPolicyOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *IamPolicy) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

type IamPolicyArrayOutput struct{ *pulumi.OutputState }

func (IamPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IamPolicy)(nil)).Elem()
}

func (o IamPolicyArrayOutput) ToIamPolicyArrayOutput() IamPolicyArrayOutput {
	return o
}

func (o IamPolicyArrayOutput) ToIamPolicyArrayOutputWithContext(ctx context.Context) IamPolicyArrayOutput {
	return o
}

func (o IamPolicyArrayOutput) Index(i pulumi.IntInput) IamPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IamPolicy {
		return vs[0].([]*IamPolicy)[vs[1].(int)]
	}).(IamPolicyOutput)
}

type IamPolicyMapOutput struct{ *pulumi.OutputState }

func (IamPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IamPolicy)(nil)).Elem()
}

func (o IamPolicyMapOutput) ToIamPolicyMapOutput() IamPolicyMapOutput {
	return o
}

func (o IamPolicyMapOutput) ToIamPolicyMapOutputWithContext(ctx context.Context) IamPolicyMapOutput {
	return o
}

func (o IamPolicyMapOutput) MapIndex(k pulumi.StringInput) IamPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IamPolicy {
		return vs[0].(map[string]*IamPolicy)[vs[1].(string)]
	}).(IamPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IamPolicyInput)(nil)).Elem(), &IamPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*IamPolicyArrayInput)(nil)).Elem(), IamPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IamPolicyMapInput)(nil)).Elem(), IamPolicyMap{})
	pulumi.RegisterOutputType(IamPolicyOutput{})
	pulumi.RegisterOutputType(IamPolicyArrayOutput{})
	pulumi.RegisterOutputType(IamPolicyMapOutput{})
}
