// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dynatrace

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-dynatrace/sdk/go/dynatrace/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type VulnerabilityCode struct {
	pulumi.CustomResourceState

	// Step 1: Define criteria
	Criteria VulnerabilityCodeCriteriaPtrOutput `pulumi:"criteria"`
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	InsertAfter pulumi.StringOutput `pulumi:"insertAfter"`
	// Step 3: Leave comment
	Metadata VulnerabilityCodeMetadataOutput `pulumi:"metadata"`
	// Step 2: Define code-level vulnerability detection control for chosen criteria
	VulnerabilityDetectionControl VulnerabilityCodeVulnerabilityDetectionControlOutput `pulumi:"vulnerabilityDetectionControl"`
}

// NewVulnerabilityCode registers a new resource with the given unique name, arguments, and options.
func NewVulnerabilityCode(ctx *pulumi.Context,
	name string, args *VulnerabilityCodeArgs, opts ...pulumi.ResourceOption) (*VulnerabilityCode, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	if args.Metadata == nil {
		return nil, errors.New("invalid value for required argument 'Metadata'")
	}
	if args.VulnerabilityDetectionControl == nil {
		return nil, errors.New("invalid value for required argument 'VulnerabilityDetectionControl'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VulnerabilityCode
	err := ctx.RegisterResource("dynatrace:index/vulnerabilityCode:VulnerabilityCode", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVulnerabilityCode gets an existing VulnerabilityCode resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVulnerabilityCode(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VulnerabilityCodeState, opts ...pulumi.ResourceOption) (*VulnerabilityCode, error) {
	var resource VulnerabilityCode
	err := ctx.ReadResource("dynatrace:index/vulnerabilityCode:VulnerabilityCode", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VulnerabilityCode resources.
type vulnerabilityCodeState struct {
	// Step 1: Define criteria
	Criteria *VulnerabilityCodeCriteria `pulumi:"criteria"`
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled *bool `pulumi:"enabled"`
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	InsertAfter *string `pulumi:"insertAfter"`
	// Step 3: Leave comment
	Metadata *VulnerabilityCodeMetadata `pulumi:"metadata"`
	// Step 2: Define code-level vulnerability detection control for chosen criteria
	VulnerabilityDetectionControl *VulnerabilityCodeVulnerabilityDetectionControl `pulumi:"vulnerabilityDetectionControl"`
}

type VulnerabilityCodeState struct {
	// Step 1: Define criteria
	Criteria VulnerabilityCodeCriteriaPtrInput
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolPtrInput
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	InsertAfter pulumi.StringPtrInput
	// Step 3: Leave comment
	Metadata VulnerabilityCodeMetadataPtrInput
	// Step 2: Define code-level vulnerability detection control for chosen criteria
	VulnerabilityDetectionControl VulnerabilityCodeVulnerabilityDetectionControlPtrInput
}

func (VulnerabilityCodeState) ElementType() reflect.Type {
	return reflect.TypeOf((*vulnerabilityCodeState)(nil)).Elem()
}

type vulnerabilityCodeArgs struct {
	// Step 1: Define criteria
	Criteria *VulnerabilityCodeCriteria `pulumi:"criteria"`
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled bool `pulumi:"enabled"`
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	InsertAfter *string `pulumi:"insertAfter"`
	// Step 3: Leave comment
	Metadata VulnerabilityCodeMetadata `pulumi:"metadata"`
	// Step 2: Define code-level vulnerability detection control for chosen criteria
	VulnerabilityDetectionControl VulnerabilityCodeVulnerabilityDetectionControl `pulumi:"vulnerabilityDetectionControl"`
}

// The set of arguments for constructing a VulnerabilityCode resource.
type VulnerabilityCodeArgs struct {
	// Step 1: Define criteria
	Criteria VulnerabilityCodeCriteriaPtrInput
	// This setting is enabled (`true`) or disabled (`false`)
	Enabled pulumi.BoolInput
	// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
	InsertAfter pulumi.StringPtrInput
	// Step 3: Leave comment
	Metadata VulnerabilityCodeMetadataInput
	// Step 2: Define code-level vulnerability detection control for chosen criteria
	VulnerabilityDetectionControl VulnerabilityCodeVulnerabilityDetectionControlInput
}

func (VulnerabilityCodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vulnerabilityCodeArgs)(nil)).Elem()
}

type VulnerabilityCodeInput interface {
	pulumi.Input

	ToVulnerabilityCodeOutput() VulnerabilityCodeOutput
	ToVulnerabilityCodeOutputWithContext(ctx context.Context) VulnerabilityCodeOutput
}

func (*VulnerabilityCode) ElementType() reflect.Type {
	return reflect.TypeOf((**VulnerabilityCode)(nil)).Elem()
}

func (i *VulnerabilityCode) ToVulnerabilityCodeOutput() VulnerabilityCodeOutput {
	return i.ToVulnerabilityCodeOutputWithContext(context.Background())
}

func (i *VulnerabilityCode) ToVulnerabilityCodeOutputWithContext(ctx context.Context) VulnerabilityCodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VulnerabilityCodeOutput)
}

// VulnerabilityCodeArrayInput is an input type that accepts VulnerabilityCodeArray and VulnerabilityCodeArrayOutput values.
// You can construct a concrete instance of `VulnerabilityCodeArrayInput` via:
//
//	VulnerabilityCodeArray{ VulnerabilityCodeArgs{...} }
type VulnerabilityCodeArrayInput interface {
	pulumi.Input

	ToVulnerabilityCodeArrayOutput() VulnerabilityCodeArrayOutput
	ToVulnerabilityCodeArrayOutputWithContext(context.Context) VulnerabilityCodeArrayOutput
}

type VulnerabilityCodeArray []VulnerabilityCodeInput

func (VulnerabilityCodeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VulnerabilityCode)(nil)).Elem()
}

func (i VulnerabilityCodeArray) ToVulnerabilityCodeArrayOutput() VulnerabilityCodeArrayOutput {
	return i.ToVulnerabilityCodeArrayOutputWithContext(context.Background())
}

func (i VulnerabilityCodeArray) ToVulnerabilityCodeArrayOutputWithContext(ctx context.Context) VulnerabilityCodeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VulnerabilityCodeArrayOutput)
}

// VulnerabilityCodeMapInput is an input type that accepts VulnerabilityCodeMap and VulnerabilityCodeMapOutput values.
// You can construct a concrete instance of `VulnerabilityCodeMapInput` via:
//
//	VulnerabilityCodeMap{ "key": VulnerabilityCodeArgs{...} }
type VulnerabilityCodeMapInput interface {
	pulumi.Input

	ToVulnerabilityCodeMapOutput() VulnerabilityCodeMapOutput
	ToVulnerabilityCodeMapOutputWithContext(context.Context) VulnerabilityCodeMapOutput
}

type VulnerabilityCodeMap map[string]VulnerabilityCodeInput

func (VulnerabilityCodeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VulnerabilityCode)(nil)).Elem()
}

func (i VulnerabilityCodeMap) ToVulnerabilityCodeMapOutput() VulnerabilityCodeMapOutput {
	return i.ToVulnerabilityCodeMapOutputWithContext(context.Background())
}

func (i VulnerabilityCodeMap) ToVulnerabilityCodeMapOutputWithContext(ctx context.Context) VulnerabilityCodeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VulnerabilityCodeMapOutput)
}

type VulnerabilityCodeOutput struct{ *pulumi.OutputState }

func (VulnerabilityCodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VulnerabilityCode)(nil)).Elem()
}

func (o VulnerabilityCodeOutput) ToVulnerabilityCodeOutput() VulnerabilityCodeOutput {
	return o
}

func (o VulnerabilityCodeOutput) ToVulnerabilityCodeOutputWithContext(ctx context.Context) VulnerabilityCodeOutput {
	return o
}

// Step 1: Define criteria
func (o VulnerabilityCodeOutput) Criteria() VulnerabilityCodeCriteriaPtrOutput {
	return o.ApplyT(func(v *VulnerabilityCode) VulnerabilityCodeCriteriaPtrOutput { return v.Criteria }).(VulnerabilityCodeCriteriaPtrOutput)
}

// This setting is enabled (`true`) or disabled (`false`)
func (o VulnerabilityCodeOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *VulnerabilityCode) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// Because this resource allows for ordering you may specify the ID of the resource instance that comes before this instance regarding order. If not specified when creating the setting will be added to the end of the list. If not specified during update the order will remain untouched
func (o VulnerabilityCodeOutput) InsertAfter() pulumi.StringOutput {
	return o.ApplyT(func(v *VulnerabilityCode) pulumi.StringOutput { return v.InsertAfter }).(pulumi.StringOutput)
}

// Step 3: Leave comment
func (o VulnerabilityCodeOutput) Metadata() VulnerabilityCodeMetadataOutput {
	return o.ApplyT(func(v *VulnerabilityCode) VulnerabilityCodeMetadataOutput { return v.Metadata }).(VulnerabilityCodeMetadataOutput)
}

// Step 2: Define code-level vulnerability detection control for chosen criteria
func (o VulnerabilityCodeOutput) VulnerabilityDetectionControl() VulnerabilityCodeVulnerabilityDetectionControlOutput {
	return o.ApplyT(func(v *VulnerabilityCode) VulnerabilityCodeVulnerabilityDetectionControlOutput {
		return v.VulnerabilityDetectionControl
	}).(VulnerabilityCodeVulnerabilityDetectionControlOutput)
}

type VulnerabilityCodeArrayOutput struct{ *pulumi.OutputState }

func (VulnerabilityCodeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VulnerabilityCode)(nil)).Elem()
}

func (o VulnerabilityCodeArrayOutput) ToVulnerabilityCodeArrayOutput() VulnerabilityCodeArrayOutput {
	return o
}

func (o VulnerabilityCodeArrayOutput) ToVulnerabilityCodeArrayOutputWithContext(ctx context.Context) VulnerabilityCodeArrayOutput {
	return o
}

func (o VulnerabilityCodeArrayOutput) Index(i pulumi.IntInput) VulnerabilityCodeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VulnerabilityCode {
		return vs[0].([]*VulnerabilityCode)[vs[1].(int)]
	}).(VulnerabilityCodeOutput)
}

type VulnerabilityCodeMapOutput struct{ *pulumi.OutputState }

func (VulnerabilityCodeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VulnerabilityCode)(nil)).Elem()
}

func (o VulnerabilityCodeMapOutput) ToVulnerabilityCodeMapOutput() VulnerabilityCodeMapOutput {
	return o
}

func (o VulnerabilityCodeMapOutput) ToVulnerabilityCodeMapOutputWithContext(ctx context.Context) VulnerabilityCodeMapOutput {
	return o
}

func (o VulnerabilityCodeMapOutput) MapIndex(k pulumi.StringInput) VulnerabilityCodeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VulnerabilityCode {
		return vs[0].(map[string]*VulnerabilityCode)[vs[1].(string)]
	}).(VulnerabilityCodeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VulnerabilityCodeInput)(nil)).Elem(), &VulnerabilityCode{})
	pulumi.RegisterInputType(reflect.TypeOf((*VulnerabilityCodeArrayInput)(nil)).Elem(), VulnerabilityCodeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VulnerabilityCodeMapInput)(nil)).Elem(), VulnerabilityCodeMap{})
	pulumi.RegisterOutputType(VulnerabilityCodeOutput{})
	pulumi.RegisterOutputType(VulnerabilityCodeArrayOutput{})
	pulumi.RegisterOutputType(VulnerabilityCodeMapOutput{})
}
