// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Lbrlabs.PulumiPackage.Dynatrace
{
    /// <summary>
    /// &gt; This resource is excluded by default in the export utility since it is part of the account management API. You can, of course, specify that resource explicitly in order to export it. In that case, don't forget to specify the environment variables `DT_CLIENT_ID`, `DT_ACCOUNT_ID` and `DT_CLIENT_SECRET` for authentication.
    /// 
    /// &gt; This resource requires the API token scopes **Allow read access for identity resources (users and groups)** (`account-idm-read`) and **Allow write access for identity resources (users and groups)** (`account-idm-write`)
    /// 
    /// ## Dynatrace Documentation
    /// 
    /// - Dynatrace IAM - https://www.dynatrace.com/support/help/how-to-use-dynatrace/user-management-and-sso/manage-groups-and-permissions
    /// 
    /// - Settings API - https://www.dynatrace.com/support/help/how-to-use-dynatrace/user-management-and-sso/manage-groups-and-permissions/iam/iam-getting-started
    /// 
    /// ## Prerequisites
    /// 
    /// Using this resource requires an OAuth client to be configured within your account settings.
    /// The scopes of the OAuth Client need to include `account-idm-read`, `account-idm-write`, `account-env-read`, `account-env-write`, `iam-policies-management`, `iam:policies:write`, `iam:policies:read`, `iam:bindings:write`, `iam:bindings:read` and `iam:effective-permissions:read`.
    /// 
    /// Finally the provider configuration requires the credentials for that OAuth Client.
    /// The configuration section of your provider needs to look like this.
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    /// });
    /// ```
    /// 
    /// ## Resource Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Dynatrace = Lbrlabs.PulumiPackage.Dynatrace;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var restricted = new Dynatrace.IamGroup("restricted", new()
    ///     {
    ///         Permissions = new Dynatrace.Inputs.IamGroupPermissionsArgs
    ///         {
    ///             Permissions = new[]
    ///             {
    ///                 new Dynatrace.Inputs.IamGroupPermissionsPermissionArgs
    ///                 {
    ///                     Name = "tenant-viewer",
    ///                     Scope = "&lt;environment-id&gt;:&lt;managementzone-id&gt;",
    ///                     Type = "management-zone",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [DynatraceResourceType("dynatrace:index/iamGroup:IamGroup")]
    public partial class IamGroup : global::Pulumi.CustomResource
    {
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        [Output("federatedAttributeValues")]
        public Output<ImmutableArray<string>> FederatedAttributeValues { get; private set; } = null!;

        /// <summary>
        /// Possible values: `account-company-info`, `account-user-management`, `account-viewer`, `account-saml-flexible-federation`, `tenant-viewer`, `tenant-manage-settings`, `tenant-agent-install`, `tenant-logviewer`, `tenant-view-sensitive-request-data`, `tenant-configure-request-capture-data`, `tenant-replay-sessions-with-masking`, `tenant-replay-sessions-without-masking`, `tenant-manage-security-problems`, `tenant-view-security-problems`, `tenant-manage-support-tickets`
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("permissions")]
        public Output<Outputs.IamGroupPermissions?> Permissions { get; private set; } = null!;


        /// <summary>
        /// Create a IamGroup resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public IamGroup(string name, IamGroupArgs? args = null, CustomResourceOptions? options = null)
            : base("dynatrace:index/iamGroup:IamGroup", name, args ?? new IamGroupArgs(), MakeResourceOptions(options, ""))
        {
        }

        private IamGroup(string name, Input<string> id, IamGroupState? state = null, CustomResourceOptions? options = null)
            : base("dynatrace:index/iamGroup:IamGroup", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/alvaroblazquez4567",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing IamGroup resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static IamGroup Get(string name, Input<string> id, IamGroupState? state = null, CustomResourceOptions? options = null)
        {
            return new IamGroup(name, id, state, options);
        }
    }

    public sealed class IamGroupArgs : global::Pulumi.ResourceArgs
    {
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("federatedAttributeValues")]
        private InputList<string>? _federatedAttributeValues;
        public InputList<string> FederatedAttributeValues
        {
            get => _federatedAttributeValues ?? (_federatedAttributeValues = new InputList<string>());
            set => _federatedAttributeValues = value;
        }

        /// <summary>
        /// Possible values: `account-company-info`, `account-user-management`, `account-viewer`, `account-saml-flexible-federation`, `tenant-viewer`, `tenant-manage-settings`, `tenant-agent-install`, `tenant-logviewer`, `tenant-view-sensitive-request-data`, `tenant-configure-request-capture-data`, `tenant-replay-sessions-with-masking`, `tenant-replay-sessions-without-masking`, `tenant-manage-security-problems`, `tenant-view-security-problems`, `tenant-manage-support-tickets`
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("permissions")]
        public Input<Inputs.IamGroupPermissionsArgs>? Permissions { get; set; }

        public IamGroupArgs()
        {
        }
        public static new IamGroupArgs Empty => new IamGroupArgs();
    }

    public sealed class IamGroupState : global::Pulumi.ResourceArgs
    {
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("federatedAttributeValues")]
        private InputList<string>? _federatedAttributeValues;
        public InputList<string> FederatedAttributeValues
        {
            get => _federatedAttributeValues ?? (_federatedAttributeValues = new InputList<string>());
            set => _federatedAttributeValues = value;
        }

        /// <summary>
        /// Possible values: `account-company-info`, `account-user-management`, `account-viewer`, `account-saml-flexible-federation`, `tenant-viewer`, `tenant-manage-settings`, `tenant-agent-install`, `tenant-logviewer`, `tenant-view-sensitive-request-data`, `tenant-configure-request-capture-data`, `tenant-replay-sessions-with-masking`, `tenant-replay-sessions-without-masking`, `tenant-manage-security-problems`, `tenant-view-security-problems`, `tenant-manage-support-tickets`
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("permissions")]
        public Input<Inputs.IamGroupPermissionsGetArgs>? Permissions { get; set; }

        public IamGroupState()
        {
        }
        public static new IamGroupState Empty => new IamGroupState();
    }
}
