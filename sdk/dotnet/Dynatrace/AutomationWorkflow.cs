// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Lbrlabs.PulumiPackage.Dynatrace
{
    /// <summary>
    /// &gt; This resource is excluded by default in the export utility. You can, of course, specify that resource explicitly in order to export it. In that case, don't forget to specify the environment variables `DYNATRACE_AUTOMATION_CLIENT_ID` and `DYNATRACE_AUTOMATION_CLIENT_SECRET` for authentication.
    /// 
    /// ## Dynatrace Documentation
    /// 
    /// - Dynatrace Workflows - https://www.dynatrace.com/support/help/platform-modules/cloud-automation/workflows
    /// 
    /// ## Prerequisites
    /// 
    /// Using this resource requires an OAuth client to be configured within your account settings.
    /// The scopes of the OAuth Client need to include `View workflows (automation:workflows:read)` and `Create and edit workflows (automation:workflows:write)`.
    /// 
    /// Finally the provider configuration requires the credentials for that OAuth Client.
    /// The configuration section of your provider needs to look like this.
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    /// });
    /// ```
    /// &gt; In order to handle credentials in a secure manner we recommend to use the environment variables `DYNATRACE_AUTOMATION_CLIENT_ID` and `DYNATRACE_AUTOMATION_CLIENT_SECRET` as an alternative.
    /// 
    /// ## Resource Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Dynatrace = Lbrlabs.PulumiPackage.Dynatrace;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var sampleWorklowTF = new Dynatrace.AutomationWorkflow("sampleWorklowTF", new()
    ///     {
    ///         Description = "Desc",
    ///         Actor = "########-####-####-####-############",
    ///         Title = "Sample Worklow TF1",
    ///         Owner = "########-####-####-####-############",
    ///         Private = true,
    ///         Tasks = new Dynatrace.Inputs.AutomationWorkflowTasksArgs
    ///         {
    ///             Tasks = new[]
    ///             {
    ///                 new Dynatrace.Inputs.AutomationWorkflowTasksTaskArgs
    ///                 {
    ///                     Name = "http_request_1",
    ///                     Description = "Issue an HTTP request to any API",
    ///                     Action = "dynatrace.automations:http-function",
    ///                     Active = true,
    ///                     Input = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///                     {
    ///                         ["method"] = "GET",
    ///                         ["url"] = "https://www.google.at/",
    ///                     }),
    ///                     Position = new Dynatrace.Inputs.AutomationWorkflowTasksTaskPositionArgs
    ///                     {
    ///                         X = 0,
    ///                         Y = 1,
    ///                     },
    ///                 },
    ///                 new Dynatrace.Inputs.AutomationWorkflowTasksTaskArgs
    ///                 {
    ///                     Name = "http_request_2",
    ///                     Description = "Issue an HTTP request to any API",
    ///                     Action = "dynatrace.automations:http-function",
    ///                     Active = false,
    ///                     Input = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///                     {
    ///                         ["method"] = "GET",
    ///                         ["url"] = "https://www.second-task.com/",
    ///                     }),
    ///                     Conditions = new Dynatrace.Inputs.AutomationWorkflowTasksTaskConditionsArgs
    ///                     {
    ///                         States = 
    ///                         {
    ///                             { "http_request_1", "SUCCESS" },
    ///                             { "run_javascript_1", "OK" },
    ///                         },
    ///                         Custom = "",
    ///                     },
    ///                     Position = new Dynatrace.Inputs.AutomationWorkflowTasksTaskPositionArgs
    ///                     {
    ///                         X = -1,
    ///                         Y = 2,
    ///                     },
    ///                     Timeout = "50000",
    ///                 },
    ///                 new Dynatrace.Inputs.AutomationWorkflowTasksTaskArgs
    ///                 {
    ///                     Name = "http_request_3",
    ///                     Description = "Issue an HTTP request to any API",
    ///                     Action = "dynatrace.automations:http-function",
    ///                     Active = false,
    ///                     Input = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///                     {
    ///                         ["method"] = "GET",
    ///                         ["url"] = "https://www.third-task.com",
    ///                     }),
    ///                     Conditions = new Dynatrace.Inputs.AutomationWorkflowTasksTaskConditionsArgs
    ///                     {
    ///                         States = 
    ///                         {
    ///                             { "http_request_2", "OK" },
    ///                         },
    ///                         Custom = "{{http_request_1}}",
    ///                     },
    ///                     Position = new Dynatrace.Inputs.AutomationWorkflowTasksTaskPositionArgs
    ///                     {
    ///                         X = 0,
    ///                         Y = 3,
    ///                     },
    ///                 },
    ///                 new Dynatrace.Inputs.AutomationWorkflowTasksTaskArgs
    ///                 {
    ///                     Name = "run_javascript_1",
    ///                     Description = "Build a custom task running js Code",
    ///                     Action = "dynatrace.automations:run-javascript",
    ///                     Active = false,
    ///                     Input = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///                     {
    ///                         ["script"] = @"// optional import of sdk modules
    /// import { execution } from '@dynatrace-sdk/automation-utils';
    /// 
    /// export default async function ({ execution_id }) {
    ///   // your code goes here
    ///   // e.g. get the current execution
    ///   const ex = await execution(execution_id);
    ///   console.log('Automated script execution on behalf of', ex.trigger);
    ///   
    ///   return { triggeredBy: ex.trigger };
    /// }",
    ///                     }),
    ///                     Position = new Dynatrace.Inputs.AutomationWorkflowTasksTaskPositionArgs
    ///                     {
    ///                         X = -2,
    ///                         Y = 1,
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         Trigger = new Dynatrace.Inputs.AutomationWorkflowTriggerArgs
    ///         {
    ///             Event = new Dynatrace.Inputs.AutomationWorkflowTriggerEventArgs
    ///             {
    ///                 Active = false,
    ///                 Config = new Dynatrace.Inputs.AutomationWorkflowTriggerEventConfigArgs
    ///                 {
    ///                     DavisEvent = new Dynatrace.Inputs.AutomationWorkflowTriggerEventConfigDavisEventArgs
    ///                     {
    ///                         EntityTagsMatch = "all",
    ///                         EntityTags = 
    ///                         {
    ///                             { "asdf", "" },
    ///                         },
    ///                         OnProblemClose = false,
    ///                         Types = new[]
    ///                         {
    ///                             "CUSTOM_ANNOTATION",
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [DynatraceResourceType("dynatrace:index/automationWorkflow:AutomationWorkflow")]
    public partial class AutomationWorkflow : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The user context the executions of the workflow will happen with
        /// </summary>
        [Output("actor")]
        public Output<string?> Actor { get; private set; } = null!;

        /// <summary>
        /// A description for this task
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The ID of the owner of this workflow
        /// </summary>
        [Output("owner")]
        public Output<string?> Owner { get; private set; } = null!;

        /// <summary>
        /// Defines whether this workflow is private to the owner or not. Default is `true`
        /// </summary>
        [Output("private")]
        public Output<bool?> Private { get; private set; } = null!;

        /// <summary>
        /// The tasks to run for every execution of this workflow
        /// </summary>
        [Output("tasks")]
        public Output<Outputs.AutomationWorkflowTasks> Tasks { get; private set; } = null!;

        /// <summary>
        /// The title / name of the workflow
        /// </summary>
        [Output("title")]
        public Output<string> Title { get; private set; } = null!;

        /// <summary>
        /// Detailed configuration about the timing constraints that trigger the execution
        /// </summary>
        [Output("trigger")]
        public Output<Outputs.AutomationWorkflowTrigger?> Trigger { get; private set; } = null!;


        /// <summary>
        /// Create a AutomationWorkflow resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AutomationWorkflow(string name, AutomationWorkflowArgs args, CustomResourceOptions? options = null)
            : base("dynatrace:index/automationWorkflow:AutomationWorkflow", name, args ?? new AutomationWorkflowArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AutomationWorkflow(string name, Input<string> id, AutomationWorkflowState? state = null, CustomResourceOptions? options = null)
            : base("dynatrace:index/automationWorkflow:AutomationWorkflow", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/alvaroblazquez4567",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AutomationWorkflow resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AutomationWorkflow Get(string name, Input<string> id, AutomationWorkflowState? state = null, CustomResourceOptions? options = null)
        {
            return new AutomationWorkflow(name, id, state, options);
        }
    }

    public sealed class AutomationWorkflowArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The user context the executions of the workflow will happen with
        /// </summary>
        [Input("actor")]
        public Input<string>? Actor { get; set; }

        /// <summary>
        /// A description for this task
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The ID of the owner of this workflow
        /// </summary>
        [Input("owner")]
        public Input<string>? Owner { get; set; }

        /// <summary>
        /// Defines whether this workflow is private to the owner or not. Default is `true`
        /// </summary>
        [Input("private")]
        public Input<bool>? Private { get; set; }

        /// <summary>
        /// The tasks to run for every execution of this workflow
        /// </summary>
        [Input("tasks", required: true)]
        public Input<Inputs.AutomationWorkflowTasksArgs> Tasks { get; set; } = null!;

        /// <summary>
        /// The title / name of the workflow
        /// </summary>
        [Input("title", required: true)]
        public Input<string> Title { get; set; } = null!;

        /// <summary>
        /// Detailed configuration about the timing constraints that trigger the execution
        /// </summary>
        [Input("trigger")]
        public Input<Inputs.AutomationWorkflowTriggerArgs>? Trigger { get; set; }

        public AutomationWorkflowArgs()
        {
        }
        public static new AutomationWorkflowArgs Empty => new AutomationWorkflowArgs();
    }

    public sealed class AutomationWorkflowState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The user context the executions of the workflow will happen with
        /// </summary>
        [Input("actor")]
        public Input<string>? Actor { get; set; }

        /// <summary>
        /// A description for this task
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The ID of the owner of this workflow
        /// </summary>
        [Input("owner")]
        public Input<string>? Owner { get; set; }

        /// <summary>
        /// Defines whether this workflow is private to the owner or not. Default is `true`
        /// </summary>
        [Input("private")]
        public Input<bool>? Private { get; set; }

        /// <summary>
        /// The tasks to run for every execution of this workflow
        /// </summary>
        [Input("tasks")]
        public Input<Inputs.AutomationWorkflowTasksGetArgs>? Tasks { get; set; }

        /// <summary>
        /// The title / name of the workflow
        /// </summary>
        [Input("title")]
        public Input<string>? Title { get; set; }

        /// <summary>
        /// Detailed configuration about the timing constraints that trigger the execution
        /// </summary>
        [Input("trigger")]
        public Input<Inputs.AutomationWorkflowTriggerGetArgs>? Trigger { get; set; }

        public AutomationWorkflowState()
        {
        }
        public static new AutomationWorkflowState Empty => new AutomationWorkflowState();
    }
}
