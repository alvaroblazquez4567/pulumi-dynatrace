// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Lbrlabs.PulumiPackage.Dynatrace.Outputs
{

    [OutputType]
    public sealed class WebApplicationUserActionNamingSettingsPlaceholdersPlaceholderProcessingStepsStep
    {
        /// <summary>
        /// If set to `true`: Returns the input if `patternBefore` or `patternAfter` cannot be found and the `type` is `SUBSTRING`. Returns the input if `regularExpression` doesn't match and `type` is `EXTRACT_BY_REGULAR_EXPRESSION`.
        /// </summary>
        public readonly bool? FallbackToInput;
        public readonly string? PatternAfter;
        public readonly string? PatternAfterSearchType;
        public readonly string? PatternBefore;
        public readonly string? PatternBeforeSearchType;
        public readonly string? PatternToReplace;
        public readonly string? RegularExpression;
        public readonly string? Replacement;
        /// <summary>
        /// The type of the action. Possible values are `Custom`, `Load` and `Xhr`.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private WebApplicationUserActionNamingSettingsPlaceholdersPlaceholderProcessingStepsStep(
            bool? fallbackToInput,

            string? patternAfter,

            string? patternAfterSearchType,

            string? patternBefore,

            string? patternBeforeSearchType,

            string? patternToReplace,

            string? regularExpression,

            string? replacement,

            string type)
        {
            FallbackToInput = fallbackToInput;
            PatternAfter = patternAfter;
            PatternAfterSearchType = patternAfterSearchType;
            PatternBefore = patternBefore;
            PatternBeforeSearchType = patternBeforeSearchType;
            PatternToReplace = patternToReplace;
            RegularExpression = regularExpression;
            Replacement = replacement;
            Type = type;
        }
    }
}
