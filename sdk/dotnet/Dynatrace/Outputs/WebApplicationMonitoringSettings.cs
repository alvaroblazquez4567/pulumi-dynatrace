// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Lbrlabs.PulumiPackage.Dynatrace.Outputs
{

    [OutputType]
    public sealed class WebApplicationMonitoringSettings
    {
        /// <summary>
        /// Add the cross origin = anonymous attribute to capture JavaScript error messages and W3C resource timings
        /// </summary>
        public readonly bool? AddCrossOriginAnonymousAttribute;
        /// <summary>
        /// Advanced JavaScript tag settings
        /// </summary>
        public readonly Outputs.WebApplicationMonitoringSettingsAdvancedJavascriptTagSettings? AdvancedJavascriptTagSettings;
        /// <summary>
        /// The name of the angular package
        /// </summary>
        public readonly string? AngularPackageName;
        /// <summary>
        /// Settings for restricting certain browser type, version, platform and, comparator. It also restricts the mode
        /// </summary>
        public readonly Outputs.WebApplicationMonitoringSettingsBrowserRestrictionSettings? BrowserRestrictionSettings;
        /// <summary>
        /// Optimize the value of cache control headers for use with Dynatrace real user monitoring enabled/disabled
        /// </summary>
        public readonly bool? CacheControlHeaderOptimizations;
        /// <summary>
        /// Settings for content capture
        /// </summary>
        public readonly Outputs.WebApplicationMonitoringSettingsContentCapture ContentCapture;
        /// <summary>
        /// Domain for cookie placement. Maximum 150 characters.
        /// </summary>
        public readonly string? CookiePlacementDomain;
        /// <summary>
        /// To enable RUM for XHR calls to AWS Lambda, define a regular expression matching these calls, Dynatrace can then automatically add a custom header (`x-dtc`) to each such request to the respective endpoints in AWS.
        /// </summary>
        public readonly string? CorrelationHeaderInclusionRegex;
        public readonly string? CustomConfigurationProperties;
        public readonly string? ExcludeXhrRegex;
        public readonly bool? FetchRequests;
        /// <summary>
        /// Possible valures are `CODE_SNIPPET`, `CODE_SNIPPET_ASYNC`, `INLINE_CODE` and `JAVASCRIPT_TAG`.
        /// </summary>
        public readonly string InjectionMode;
        public readonly bool? InstrumentedWebServer;
        public readonly Outputs.WebApplicationMonitoringSettingsIpAddressRestrictionSettings? IpAddressRestrictionSettings;
        public readonly Outputs.WebApplicationMonitoringSettingsJavascriptFrameworkSupport? JavascriptFrameworkSupport;
        public readonly Outputs.WebApplicationMonitoringSettingsJavascriptInjectionRules? JavascriptInjectionRules;
        public readonly string? LibraryFileLocation;
        public readonly string? MonitoringDataPath;
        public readonly string? SameSiteCookieAttribute;
        public readonly int? ScriptTagCacheDurationInHours;
        public readonly bool? SecureCookieAttribute;
        public readonly string? ServerRequestPathId;
        public readonly bool? UseCors;
        public readonly bool? XmlHttpRequest;

        [OutputConstructor]
        private WebApplicationMonitoringSettings(
            bool? addCrossOriginAnonymousAttribute,

            Outputs.WebApplicationMonitoringSettingsAdvancedJavascriptTagSettings? advancedJavascriptTagSettings,

            string? angularPackageName,

            Outputs.WebApplicationMonitoringSettingsBrowserRestrictionSettings? browserRestrictionSettings,

            bool? cacheControlHeaderOptimizations,

            Outputs.WebApplicationMonitoringSettingsContentCapture contentCapture,

            string? cookiePlacementDomain,

            string? correlationHeaderInclusionRegex,

            string? customConfigurationProperties,

            string? excludeXhrRegex,

            bool? fetchRequests,

            string injectionMode,

            bool? instrumentedWebServer,

            Outputs.WebApplicationMonitoringSettingsIpAddressRestrictionSettings? ipAddressRestrictionSettings,

            Outputs.WebApplicationMonitoringSettingsJavascriptFrameworkSupport? javascriptFrameworkSupport,

            Outputs.WebApplicationMonitoringSettingsJavascriptInjectionRules? javascriptInjectionRules,

            string? libraryFileLocation,

            string? monitoringDataPath,

            string? sameSiteCookieAttribute,

            int? scriptTagCacheDurationInHours,

            bool? secureCookieAttribute,

            string? serverRequestPathId,

            bool? useCors,

            bool? xmlHttpRequest)
        {
            AddCrossOriginAnonymousAttribute = addCrossOriginAnonymousAttribute;
            AdvancedJavascriptTagSettings = advancedJavascriptTagSettings;
            AngularPackageName = angularPackageName;
            BrowserRestrictionSettings = browserRestrictionSettings;
            CacheControlHeaderOptimizations = cacheControlHeaderOptimizations;
            ContentCapture = contentCapture;
            CookiePlacementDomain = cookiePlacementDomain;
            CorrelationHeaderInclusionRegex = correlationHeaderInclusionRegex;
            CustomConfigurationProperties = customConfigurationProperties;
            ExcludeXhrRegex = excludeXhrRegex;
            FetchRequests = fetchRequests;
            InjectionMode = injectionMode;
            InstrumentedWebServer = instrumentedWebServer;
            IpAddressRestrictionSettings = ipAddressRestrictionSettings;
            JavascriptFrameworkSupport = javascriptFrameworkSupport;
            JavascriptInjectionRules = javascriptInjectionRules;
            LibraryFileLocation = libraryFileLocation;
            MonitoringDataPath = monitoringDataPath;
            SameSiteCookieAttribute = sameSiteCookieAttribute;
            ScriptTagCacheDurationInHours = scriptTagCacheDurationInHours;
            SecureCookieAttribute = secureCookieAttribute;
            ServerRequestPathId = serverRequestPathId;
            UseCors = useCors;
            XmlHttpRequest = xmlHttpRequest;
        }
    }
}
